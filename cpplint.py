



<!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="https://ssl.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"token": null, "profileUrl": null, "projectName": "google-styleguide", "projectHomeUrl": "/p/google-styleguide", "assetHostPath": "https://ssl.gstatic.com/codesite/ph", "loggedInUserEmail": null, "assetVersionPath": "https://ssl.gstatic.com/codesite/ph/1729405847801014513", "domainName": null, "relativeBaseUrl": ""};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>cpplint.py - 
 google-styleguide -
 
 
 Style guides for Google-originated open-source projects - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/1729405847801014513/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/1729405847801014513/css/ph_detail.css" >
 
 
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/1729405847801014513/css/d_sb.css" >
 
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="https://ssl.gstatic.com/codesite/ph/1729405847801014513/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(https://ssl.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 
  tr.inline_comment {
 background: #fff;
 vertical-align: top;
 }
 div.draft, div.published {
 padding: .3em;
 border: 1px solid #999; 
 margin-bottom: .1em;
 font-family: arial, sans-serif;
 max-width: 60em;
 }
 div.draft {
 background: #ffa;
 } 
 div.published {
 background: #e5ecf9;
 }
 div.published .body, div.draft .body {
 padding: .5em .1em .1em .1em;
 max-width: 60em;
 white-space: pre-wrap;
 white-space: -moz-pre-wrap;
 white-space: -pre-wrap;
 white-space: -o-pre-wrap;
 word-wrap: break-word;
 font-size: 1em;
 }
 div.draft .actions {
 margin-left: 1em;
 font-size: 90%;
 }
 div.draft form {
 padding: .5em .5em .5em 0;
 }
 div.draft textarea, div.published textarea {
 width: 95%;
 height: 10em;
 font-family: arial, sans-serif;
 margin-bottom: .5em;
 }

 
 .nocursor, .nocursor td, .cursor_hidden, .cursor_hidden td {
 background-color: white;
 height: 2px;
 }
 .cursor, .cursor td {
 background-color: darkblue;
 height: 2px;
 display: '';
 }
 
 
.list {
 border: 1px solid white;
 border-bottom: 0;
}

 
 </style>
</head>
<body class="t4">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=https%3A%2F%2Fcode.google.com%2Fp%2Fgoogle-styleguide%2Fsource%2Fbrowse%2Ftrunk%2Fcpplint%2Fcpplint.py&amp;followup=https%3A%2F%2Fcode.google.com%2Fp%2Fgoogle-styleguide%2Fsource%2Fbrowse%2Ftrunk%2Fcpplint%2Fcpplint.py" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/google-styleguide">
 <a href="/p/google-styleguide/">
 
 <img src="https://ssl.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/google-styleguide/"><span itemprop="name">google-styleguide</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/google-styleguide/"><span itemprop="description">Style guides for Google-originated open-source projects</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/google-styleguide/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 
 
 
 
 
 
 <a href="/p/google-styleguide/source/checkout"
 class="tab active">Source</a>
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 
 
 <td class="subt">
 <div class="st2">
 <div class="isf">
 
 


 <span class="inst1"><a href="/p/google-styleguide/source/checkout">Checkout</a></span> &nbsp;
 <span class="inst2"><a href="/p/google-styleguide/source/browse/trunk">Browse</a></span> &nbsp;
 <span class="inst3"><a href="/p/google-styleguide/source/list">Changes</a></span> &nbsp;
 
 
 
 </form>
 <script type="text/javascript">
 
 function codesearchQuery(form) {
 var query = document.getElementById('q').value;
 if (query) { form.action += '%20' + query; }
 }
 </script>
 </div>
</div>

 </td>
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
>

 




<div class="expand">
<div id="colcontrol">
<style type="text/css">
 #file_flipper { white-space: nowrap; padding-right: 2em; }
 #file_flipper.hidden { display: none; }
 #file_flipper .pagelink { color: #0000CC; text-decoration: underline; }
 #file_flipper #visiblefiles { padding-left: 0.5em; padding-right: 0.5em; }
</style>
<table id="nav_and_rev" class="list"
 cellpadding="0" cellspacing="0" width="100%">
 <tr>
 
 <td nowrap="nowrap" class="src_crumbs src_nav" width="33%">
 <strong class="src_nav">Source path:&nbsp;</strong>
 <span id="crumb_root">
 
 <a href="/p/google-styleguide/source/browse/">svn</a>/&nbsp;</span>
 <span id="crumb_links" class="ifClosed"><a href="/p/google-styleguide/source/browse/trunk/">trunk</a><span class="sp">/&nbsp;</span><a href="/p/google-styleguide/source/browse/trunk/cpplint/">cpplint</a><span class="sp">/&nbsp;</span>cpplint.py</span>
 
 


 </td>
 
 
 <td nowrap="nowrap" width="33%" align="right">
 <table cellpadding="0" cellspacing="0" style="font-size: 100%"><tr>
 
 
 <td class="flipper">
 <ul class="leftside">
 
 <li><a href="/p/google-styleguide/source/browse/trunk/cpplint/cpplint.py?r=137" title="Previous">&lsaquo;r137</a></li>
 
 </ul>
 </td>
 
 <td class="flipper"><b>r141</b></td>
 
 </tr></table>
 </td> 
 </tr>
</table>

<div class="fc">
 
 
 
<style type="text/css">
.undermouse span {
 background-image: url(https://ssl.gstatic.com/codesite/ph/images/comments.gif); }
</style>
<table class="opened" id="review_comment_area"
><tr>
<td id="nums">
<pre><table width="100%"><tr class="nocursor"><td></td></tr></table></pre>
<pre><table width="100%" id="nums_table_0"><tr id="gr_svn141_1"

><td id="1"><a href="#1">1</a></td></tr
><tr id="gr_svn141_2"

><td id="2"><a href="#2">2</a></td></tr
><tr id="gr_svn141_3"

><td id="3"><a href="#3">3</a></td></tr
><tr id="gr_svn141_4"

><td id="4"><a href="#4">4</a></td></tr
><tr id="gr_svn141_5"

><td id="5"><a href="#5">5</a></td></tr
><tr id="gr_svn141_6"

><td id="6"><a href="#6">6</a></td></tr
><tr id="gr_svn141_7"

><td id="7"><a href="#7">7</a></td></tr
><tr id="gr_svn141_8"

><td id="8"><a href="#8">8</a></td></tr
><tr id="gr_svn141_9"

><td id="9"><a href="#9">9</a></td></tr
><tr id="gr_svn141_10"

><td id="10"><a href="#10">10</a></td></tr
><tr id="gr_svn141_11"

><td id="11"><a href="#11">11</a></td></tr
><tr id="gr_svn141_12"

><td id="12"><a href="#12">12</a></td></tr
><tr id="gr_svn141_13"

><td id="13"><a href="#13">13</a></td></tr
><tr id="gr_svn141_14"

><td id="14"><a href="#14">14</a></td></tr
><tr id="gr_svn141_15"

><td id="15"><a href="#15">15</a></td></tr
><tr id="gr_svn141_16"

><td id="16"><a href="#16">16</a></td></tr
><tr id="gr_svn141_17"

><td id="17"><a href="#17">17</a></td></tr
><tr id="gr_svn141_18"

><td id="18"><a href="#18">18</a></td></tr
><tr id="gr_svn141_19"

><td id="19"><a href="#19">19</a></td></tr
><tr id="gr_svn141_20"

><td id="20"><a href="#20">20</a></td></tr
><tr id="gr_svn141_21"

><td id="21"><a href="#21">21</a></td></tr
><tr id="gr_svn141_22"

><td id="22"><a href="#22">22</a></td></tr
><tr id="gr_svn141_23"

><td id="23"><a href="#23">23</a></td></tr
><tr id="gr_svn141_24"

><td id="24"><a href="#24">24</a></td></tr
><tr id="gr_svn141_25"

><td id="25"><a href="#25">25</a></td></tr
><tr id="gr_svn141_26"

><td id="26"><a href="#26">26</a></td></tr
><tr id="gr_svn141_27"

><td id="27"><a href="#27">27</a></td></tr
><tr id="gr_svn141_28"

><td id="28"><a href="#28">28</a></td></tr
><tr id="gr_svn141_29"

><td id="29"><a href="#29">29</a></td></tr
><tr id="gr_svn141_30"

><td id="30"><a href="#30">30</a></td></tr
><tr id="gr_svn141_31"

><td id="31"><a href="#31">31</a></td></tr
><tr id="gr_svn141_32"

><td id="32"><a href="#32">32</a></td></tr
><tr id="gr_svn141_33"

><td id="33"><a href="#33">33</a></td></tr
><tr id="gr_svn141_34"

><td id="34"><a href="#34">34</a></td></tr
><tr id="gr_svn141_35"

><td id="35"><a href="#35">35</a></td></tr
><tr id="gr_svn141_36"

><td id="36"><a href="#36">36</a></td></tr
><tr id="gr_svn141_37"

><td id="37"><a href="#37">37</a></td></tr
><tr id="gr_svn141_38"

><td id="38"><a href="#38">38</a></td></tr
><tr id="gr_svn141_39"

><td id="39"><a href="#39">39</a></td></tr
><tr id="gr_svn141_40"

><td id="40"><a href="#40">40</a></td></tr
><tr id="gr_svn141_41"

><td id="41"><a href="#41">41</a></td></tr
><tr id="gr_svn141_42"

><td id="42"><a href="#42">42</a></td></tr
><tr id="gr_svn141_43"

><td id="43"><a href="#43">43</a></td></tr
><tr id="gr_svn141_44"

><td id="44"><a href="#44">44</a></td></tr
><tr id="gr_svn141_45"

><td id="45"><a href="#45">45</a></td></tr
><tr id="gr_svn141_46"

><td id="46"><a href="#46">46</a></td></tr
><tr id="gr_svn141_47"

><td id="47"><a href="#47">47</a></td></tr
><tr id="gr_svn141_48"

><td id="48"><a href="#48">48</a></td></tr
><tr id="gr_svn141_49"

><td id="49"><a href="#49">49</a></td></tr
><tr id="gr_svn141_50"

><td id="50"><a href="#50">50</a></td></tr
><tr id="gr_svn141_51"

><td id="51"><a href="#51">51</a></td></tr
><tr id="gr_svn141_52"

><td id="52"><a href="#52">52</a></td></tr
><tr id="gr_svn141_53"

><td id="53"><a href="#53">53</a></td></tr
><tr id="gr_svn141_54"

><td id="54"><a href="#54">54</a></td></tr
><tr id="gr_svn141_55"

><td id="55"><a href="#55">55</a></td></tr
><tr id="gr_svn141_56"

><td id="56"><a href="#56">56</a></td></tr
><tr id="gr_svn141_57"

><td id="57"><a href="#57">57</a></td></tr
><tr id="gr_svn141_58"

><td id="58"><a href="#58">58</a></td></tr
><tr id="gr_svn141_59"

><td id="59"><a href="#59">59</a></td></tr
><tr id="gr_svn141_60"

><td id="60"><a href="#60">60</a></td></tr
><tr id="gr_svn141_61"

><td id="61"><a href="#61">61</a></td></tr
><tr id="gr_svn141_62"

><td id="62"><a href="#62">62</a></td></tr
><tr id="gr_svn141_63"

><td id="63"><a href="#63">63</a></td></tr
><tr id="gr_svn141_64"

><td id="64"><a href="#64">64</a></td></tr
><tr id="gr_svn141_65"

><td id="65"><a href="#65">65</a></td></tr
><tr id="gr_svn141_66"

><td id="66"><a href="#66">66</a></td></tr
><tr id="gr_svn141_67"

><td id="67"><a href="#67">67</a></td></tr
><tr id="gr_svn141_68"

><td id="68"><a href="#68">68</a></td></tr
><tr id="gr_svn141_69"

><td id="69"><a href="#69">69</a></td></tr
><tr id="gr_svn141_70"

><td id="70"><a href="#70">70</a></td></tr
><tr id="gr_svn141_71"

><td id="71"><a href="#71">71</a></td></tr
><tr id="gr_svn141_72"

><td id="72"><a href="#72">72</a></td></tr
><tr id="gr_svn141_73"

><td id="73"><a href="#73">73</a></td></tr
><tr id="gr_svn141_74"

><td id="74"><a href="#74">74</a></td></tr
><tr id="gr_svn141_75"

><td id="75"><a href="#75">75</a></td></tr
><tr id="gr_svn141_76"

><td id="76"><a href="#76">76</a></td></tr
><tr id="gr_svn141_77"

><td id="77"><a href="#77">77</a></td></tr
><tr id="gr_svn141_78"

><td id="78"><a href="#78">78</a></td></tr
><tr id="gr_svn141_79"

><td id="79"><a href="#79">79</a></td></tr
><tr id="gr_svn141_80"

><td id="80"><a href="#80">80</a></td></tr
><tr id="gr_svn141_81"

><td id="81"><a href="#81">81</a></td></tr
><tr id="gr_svn141_82"

><td id="82"><a href="#82">82</a></td></tr
><tr id="gr_svn141_83"

><td id="83"><a href="#83">83</a></td></tr
><tr id="gr_svn141_84"

><td id="84"><a href="#84">84</a></td></tr
><tr id="gr_svn141_85"

><td id="85"><a href="#85">85</a></td></tr
><tr id="gr_svn141_86"

><td id="86"><a href="#86">86</a></td></tr
><tr id="gr_svn141_87"

><td id="87"><a href="#87">87</a></td></tr
><tr id="gr_svn141_88"

><td id="88"><a href="#88">88</a></td></tr
><tr id="gr_svn141_89"

><td id="89"><a href="#89">89</a></td></tr
><tr id="gr_svn141_90"

><td id="90"><a href="#90">90</a></td></tr
><tr id="gr_svn141_91"

><td id="91"><a href="#91">91</a></td></tr
><tr id="gr_svn141_92"

><td id="92"><a href="#92">92</a></td></tr
><tr id="gr_svn141_93"

><td id="93"><a href="#93">93</a></td></tr
><tr id="gr_svn141_94"

><td id="94"><a href="#94">94</a></td></tr
><tr id="gr_svn141_95"

><td id="95"><a href="#95">95</a></td></tr
><tr id="gr_svn141_96"

><td id="96"><a href="#96">96</a></td></tr
><tr id="gr_svn141_97"

><td id="97"><a href="#97">97</a></td></tr
><tr id="gr_svn141_98"

><td id="98"><a href="#98">98</a></td></tr
><tr id="gr_svn141_99"

><td id="99"><a href="#99">99</a></td></tr
><tr id="gr_svn141_100"

><td id="100"><a href="#100">100</a></td></tr
><tr id="gr_svn141_101"

><td id="101"><a href="#101">101</a></td></tr
><tr id="gr_svn141_102"

><td id="102"><a href="#102">102</a></td></tr
><tr id="gr_svn141_103"

><td id="103"><a href="#103">103</a></td></tr
><tr id="gr_svn141_104"

><td id="104"><a href="#104">104</a></td></tr
><tr id="gr_svn141_105"

><td id="105"><a href="#105">105</a></td></tr
><tr id="gr_svn141_106"

><td id="106"><a href="#106">106</a></td></tr
><tr id="gr_svn141_107"

><td id="107"><a href="#107">107</a></td></tr
><tr id="gr_svn141_108"

><td id="108"><a href="#108">108</a></td></tr
><tr id="gr_svn141_109"

><td id="109"><a href="#109">109</a></td></tr
><tr id="gr_svn141_110"

><td id="110"><a href="#110">110</a></td></tr
><tr id="gr_svn141_111"

><td id="111"><a href="#111">111</a></td></tr
><tr id="gr_svn141_112"

><td id="112"><a href="#112">112</a></td></tr
><tr id="gr_svn141_113"

><td id="113"><a href="#113">113</a></td></tr
><tr id="gr_svn141_114"

><td id="114"><a href="#114">114</a></td></tr
><tr id="gr_svn141_115"

><td id="115"><a href="#115">115</a></td></tr
><tr id="gr_svn141_116"

><td id="116"><a href="#116">116</a></td></tr
><tr id="gr_svn141_117"

><td id="117"><a href="#117">117</a></td></tr
><tr id="gr_svn141_118"

><td id="118"><a href="#118">118</a></td></tr
><tr id="gr_svn141_119"

><td id="119"><a href="#119">119</a></td></tr
><tr id="gr_svn141_120"

><td id="120"><a href="#120">120</a></td></tr
><tr id="gr_svn141_121"

><td id="121"><a href="#121">121</a></td></tr
><tr id="gr_svn141_122"

><td id="122"><a href="#122">122</a></td></tr
><tr id="gr_svn141_123"

><td id="123"><a href="#123">123</a></td></tr
><tr id="gr_svn141_124"

><td id="124"><a href="#124">124</a></td></tr
><tr id="gr_svn141_125"

><td id="125"><a href="#125">125</a></td></tr
><tr id="gr_svn141_126"

><td id="126"><a href="#126">126</a></td></tr
><tr id="gr_svn141_127"

><td id="127"><a href="#127">127</a></td></tr
><tr id="gr_svn141_128"

><td id="128"><a href="#128">128</a></td></tr
><tr id="gr_svn141_129"

><td id="129"><a href="#129">129</a></td></tr
><tr id="gr_svn141_130"

><td id="130"><a href="#130">130</a></td></tr
><tr id="gr_svn141_131"

><td id="131"><a href="#131">131</a></td></tr
><tr id="gr_svn141_132"

><td id="132"><a href="#132">132</a></td></tr
><tr id="gr_svn141_133"

><td id="133"><a href="#133">133</a></td></tr
><tr id="gr_svn141_134"

><td id="134"><a href="#134">134</a></td></tr
><tr id="gr_svn141_135"

><td id="135"><a href="#135">135</a></td></tr
><tr id="gr_svn141_136"

><td id="136"><a href="#136">136</a></td></tr
><tr id="gr_svn141_137"

><td id="137"><a href="#137">137</a></td></tr
><tr id="gr_svn141_138"

><td id="138"><a href="#138">138</a></td></tr
><tr id="gr_svn141_139"

><td id="139"><a href="#139">139</a></td></tr
><tr id="gr_svn141_140"

><td id="140"><a href="#140">140</a></td></tr
><tr id="gr_svn141_141"

><td id="141"><a href="#141">141</a></td></tr
><tr id="gr_svn141_142"

><td id="142"><a href="#142">142</a></td></tr
><tr id="gr_svn141_143"

><td id="143"><a href="#143">143</a></td></tr
><tr id="gr_svn141_144"

><td id="144"><a href="#144">144</a></td></tr
><tr id="gr_svn141_145"

><td id="145"><a href="#145">145</a></td></tr
><tr id="gr_svn141_146"

><td id="146"><a href="#146">146</a></td></tr
><tr id="gr_svn141_147"

><td id="147"><a href="#147">147</a></td></tr
><tr id="gr_svn141_148"

><td id="148"><a href="#148">148</a></td></tr
><tr id="gr_svn141_149"

><td id="149"><a href="#149">149</a></td></tr
><tr id="gr_svn141_150"

><td id="150"><a href="#150">150</a></td></tr
><tr id="gr_svn141_151"

><td id="151"><a href="#151">151</a></td></tr
><tr id="gr_svn141_152"

><td id="152"><a href="#152">152</a></td></tr
><tr id="gr_svn141_153"

><td id="153"><a href="#153">153</a></td></tr
><tr id="gr_svn141_154"

><td id="154"><a href="#154">154</a></td></tr
><tr id="gr_svn141_155"

><td id="155"><a href="#155">155</a></td></tr
><tr id="gr_svn141_156"

><td id="156"><a href="#156">156</a></td></tr
><tr id="gr_svn141_157"

><td id="157"><a href="#157">157</a></td></tr
><tr id="gr_svn141_158"

><td id="158"><a href="#158">158</a></td></tr
><tr id="gr_svn141_159"

><td id="159"><a href="#159">159</a></td></tr
><tr id="gr_svn141_160"

><td id="160"><a href="#160">160</a></td></tr
><tr id="gr_svn141_161"

><td id="161"><a href="#161">161</a></td></tr
><tr id="gr_svn141_162"

><td id="162"><a href="#162">162</a></td></tr
><tr id="gr_svn141_163"

><td id="163"><a href="#163">163</a></td></tr
><tr id="gr_svn141_164"

><td id="164"><a href="#164">164</a></td></tr
><tr id="gr_svn141_165"

><td id="165"><a href="#165">165</a></td></tr
><tr id="gr_svn141_166"

><td id="166"><a href="#166">166</a></td></tr
><tr id="gr_svn141_167"

><td id="167"><a href="#167">167</a></td></tr
><tr id="gr_svn141_168"

><td id="168"><a href="#168">168</a></td></tr
><tr id="gr_svn141_169"

><td id="169"><a href="#169">169</a></td></tr
><tr id="gr_svn141_170"

><td id="170"><a href="#170">170</a></td></tr
><tr id="gr_svn141_171"

><td id="171"><a href="#171">171</a></td></tr
><tr id="gr_svn141_172"

><td id="172"><a href="#172">172</a></td></tr
><tr id="gr_svn141_173"

><td id="173"><a href="#173">173</a></td></tr
><tr id="gr_svn141_174"

><td id="174"><a href="#174">174</a></td></tr
><tr id="gr_svn141_175"

><td id="175"><a href="#175">175</a></td></tr
><tr id="gr_svn141_176"

><td id="176"><a href="#176">176</a></td></tr
><tr id="gr_svn141_177"

><td id="177"><a href="#177">177</a></td></tr
><tr id="gr_svn141_178"

><td id="178"><a href="#178">178</a></td></tr
><tr id="gr_svn141_179"

><td id="179"><a href="#179">179</a></td></tr
><tr id="gr_svn141_180"

><td id="180"><a href="#180">180</a></td></tr
><tr id="gr_svn141_181"

><td id="181"><a href="#181">181</a></td></tr
><tr id="gr_svn141_182"

><td id="182"><a href="#182">182</a></td></tr
><tr id="gr_svn141_183"

><td id="183"><a href="#183">183</a></td></tr
><tr id="gr_svn141_184"

><td id="184"><a href="#184">184</a></td></tr
><tr id="gr_svn141_185"

><td id="185"><a href="#185">185</a></td></tr
><tr id="gr_svn141_186"

><td id="186"><a href="#186">186</a></td></tr
><tr id="gr_svn141_187"

><td id="187"><a href="#187">187</a></td></tr
><tr id="gr_svn141_188"

><td id="188"><a href="#188">188</a></td></tr
><tr id="gr_svn141_189"

><td id="189"><a href="#189">189</a></td></tr
><tr id="gr_svn141_190"

><td id="190"><a href="#190">190</a></td></tr
><tr id="gr_svn141_191"

><td id="191"><a href="#191">191</a></td></tr
><tr id="gr_svn141_192"

><td id="192"><a href="#192">192</a></td></tr
><tr id="gr_svn141_193"

><td id="193"><a href="#193">193</a></td></tr
><tr id="gr_svn141_194"

><td id="194"><a href="#194">194</a></td></tr
><tr id="gr_svn141_195"

><td id="195"><a href="#195">195</a></td></tr
><tr id="gr_svn141_196"

><td id="196"><a href="#196">196</a></td></tr
><tr id="gr_svn141_197"

><td id="197"><a href="#197">197</a></td></tr
><tr id="gr_svn141_198"

><td id="198"><a href="#198">198</a></td></tr
><tr id="gr_svn141_199"

><td id="199"><a href="#199">199</a></td></tr
><tr id="gr_svn141_200"

><td id="200"><a href="#200">200</a></td></tr
><tr id="gr_svn141_201"

><td id="201"><a href="#201">201</a></td></tr
><tr id="gr_svn141_202"

><td id="202"><a href="#202">202</a></td></tr
><tr id="gr_svn141_203"

><td id="203"><a href="#203">203</a></td></tr
><tr id="gr_svn141_204"

><td id="204"><a href="#204">204</a></td></tr
><tr id="gr_svn141_205"

><td id="205"><a href="#205">205</a></td></tr
><tr id="gr_svn141_206"

><td id="206"><a href="#206">206</a></td></tr
><tr id="gr_svn141_207"

><td id="207"><a href="#207">207</a></td></tr
><tr id="gr_svn141_208"

><td id="208"><a href="#208">208</a></td></tr
><tr id="gr_svn141_209"

><td id="209"><a href="#209">209</a></td></tr
><tr id="gr_svn141_210"

><td id="210"><a href="#210">210</a></td></tr
><tr id="gr_svn141_211"

><td id="211"><a href="#211">211</a></td></tr
><tr id="gr_svn141_212"

><td id="212"><a href="#212">212</a></td></tr
><tr id="gr_svn141_213"

><td id="213"><a href="#213">213</a></td></tr
><tr id="gr_svn141_214"

><td id="214"><a href="#214">214</a></td></tr
><tr id="gr_svn141_215"

><td id="215"><a href="#215">215</a></td></tr
><tr id="gr_svn141_216"

><td id="216"><a href="#216">216</a></td></tr
><tr id="gr_svn141_217"

><td id="217"><a href="#217">217</a></td></tr
><tr id="gr_svn141_218"

><td id="218"><a href="#218">218</a></td></tr
><tr id="gr_svn141_219"

><td id="219"><a href="#219">219</a></td></tr
><tr id="gr_svn141_220"

><td id="220"><a href="#220">220</a></td></tr
><tr id="gr_svn141_221"

><td id="221"><a href="#221">221</a></td></tr
><tr id="gr_svn141_222"

><td id="222"><a href="#222">222</a></td></tr
><tr id="gr_svn141_223"

><td id="223"><a href="#223">223</a></td></tr
><tr id="gr_svn141_224"

><td id="224"><a href="#224">224</a></td></tr
><tr id="gr_svn141_225"

><td id="225"><a href="#225">225</a></td></tr
><tr id="gr_svn141_226"

><td id="226"><a href="#226">226</a></td></tr
><tr id="gr_svn141_227"

><td id="227"><a href="#227">227</a></td></tr
><tr id="gr_svn141_228"

><td id="228"><a href="#228">228</a></td></tr
><tr id="gr_svn141_229"

><td id="229"><a href="#229">229</a></td></tr
><tr id="gr_svn141_230"

><td id="230"><a href="#230">230</a></td></tr
><tr id="gr_svn141_231"

><td id="231"><a href="#231">231</a></td></tr
><tr id="gr_svn141_232"

><td id="232"><a href="#232">232</a></td></tr
><tr id="gr_svn141_233"

><td id="233"><a href="#233">233</a></td></tr
><tr id="gr_svn141_234"

><td id="234"><a href="#234">234</a></td></tr
><tr id="gr_svn141_235"

><td id="235"><a href="#235">235</a></td></tr
><tr id="gr_svn141_236"

><td id="236"><a href="#236">236</a></td></tr
><tr id="gr_svn141_237"

><td id="237"><a href="#237">237</a></td></tr
><tr id="gr_svn141_238"

><td id="238"><a href="#238">238</a></td></tr
><tr id="gr_svn141_239"

><td id="239"><a href="#239">239</a></td></tr
><tr id="gr_svn141_240"

><td id="240"><a href="#240">240</a></td></tr
><tr id="gr_svn141_241"

><td id="241"><a href="#241">241</a></td></tr
><tr id="gr_svn141_242"

><td id="242"><a href="#242">242</a></td></tr
><tr id="gr_svn141_243"

><td id="243"><a href="#243">243</a></td></tr
><tr id="gr_svn141_244"

><td id="244"><a href="#244">244</a></td></tr
><tr id="gr_svn141_245"

><td id="245"><a href="#245">245</a></td></tr
><tr id="gr_svn141_246"

><td id="246"><a href="#246">246</a></td></tr
><tr id="gr_svn141_247"

><td id="247"><a href="#247">247</a></td></tr
><tr id="gr_svn141_248"

><td id="248"><a href="#248">248</a></td></tr
><tr id="gr_svn141_249"

><td id="249"><a href="#249">249</a></td></tr
><tr id="gr_svn141_250"

><td id="250"><a href="#250">250</a></td></tr
><tr id="gr_svn141_251"

><td id="251"><a href="#251">251</a></td></tr
><tr id="gr_svn141_252"

><td id="252"><a href="#252">252</a></td></tr
><tr id="gr_svn141_253"

><td id="253"><a href="#253">253</a></td></tr
><tr id="gr_svn141_254"

><td id="254"><a href="#254">254</a></td></tr
><tr id="gr_svn141_255"

><td id="255"><a href="#255">255</a></td></tr
><tr id="gr_svn141_256"

><td id="256"><a href="#256">256</a></td></tr
><tr id="gr_svn141_257"

><td id="257"><a href="#257">257</a></td></tr
><tr id="gr_svn141_258"

><td id="258"><a href="#258">258</a></td></tr
><tr id="gr_svn141_259"

><td id="259"><a href="#259">259</a></td></tr
><tr id="gr_svn141_260"

><td id="260"><a href="#260">260</a></td></tr
><tr id="gr_svn141_261"

><td id="261"><a href="#261">261</a></td></tr
><tr id="gr_svn141_262"

><td id="262"><a href="#262">262</a></td></tr
><tr id="gr_svn141_263"

><td id="263"><a href="#263">263</a></td></tr
><tr id="gr_svn141_264"

><td id="264"><a href="#264">264</a></td></tr
><tr id="gr_svn141_265"

><td id="265"><a href="#265">265</a></td></tr
><tr id="gr_svn141_266"

><td id="266"><a href="#266">266</a></td></tr
><tr id="gr_svn141_267"

><td id="267"><a href="#267">267</a></td></tr
><tr id="gr_svn141_268"

><td id="268"><a href="#268">268</a></td></tr
><tr id="gr_svn141_269"

><td id="269"><a href="#269">269</a></td></tr
><tr id="gr_svn141_270"

><td id="270"><a href="#270">270</a></td></tr
><tr id="gr_svn141_271"

><td id="271"><a href="#271">271</a></td></tr
><tr id="gr_svn141_272"

><td id="272"><a href="#272">272</a></td></tr
><tr id="gr_svn141_273"

><td id="273"><a href="#273">273</a></td></tr
><tr id="gr_svn141_274"

><td id="274"><a href="#274">274</a></td></tr
><tr id="gr_svn141_275"

><td id="275"><a href="#275">275</a></td></tr
><tr id="gr_svn141_276"

><td id="276"><a href="#276">276</a></td></tr
><tr id="gr_svn141_277"

><td id="277"><a href="#277">277</a></td></tr
><tr id="gr_svn141_278"

><td id="278"><a href="#278">278</a></td></tr
><tr id="gr_svn141_279"

><td id="279"><a href="#279">279</a></td></tr
><tr id="gr_svn141_280"

><td id="280"><a href="#280">280</a></td></tr
><tr id="gr_svn141_281"

><td id="281"><a href="#281">281</a></td></tr
><tr id="gr_svn141_282"

><td id="282"><a href="#282">282</a></td></tr
><tr id="gr_svn141_283"

><td id="283"><a href="#283">283</a></td></tr
><tr id="gr_svn141_284"

><td id="284"><a href="#284">284</a></td></tr
><tr id="gr_svn141_285"

><td id="285"><a href="#285">285</a></td></tr
><tr id="gr_svn141_286"

><td id="286"><a href="#286">286</a></td></tr
><tr id="gr_svn141_287"

><td id="287"><a href="#287">287</a></td></tr
><tr id="gr_svn141_288"

><td id="288"><a href="#288">288</a></td></tr
><tr id="gr_svn141_289"

><td id="289"><a href="#289">289</a></td></tr
><tr id="gr_svn141_290"

><td id="290"><a href="#290">290</a></td></tr
><tr id="gr_svn141_291"

><td id="291"><a href="#291">291</a></td></tr
><tr id="gr_svn141_292"

><td id="292"><a href="#292">292</a></td></tr
><tr id="gr_svn141_293"

><td id="293"><a href="#293">293</a></td></tr
><tr id="gr_svn141_294"

><td id="294"><a href="#294">294</a></td></tr
><tr id="gr_svn141_295"

><td id="295"><a href="#295">295</a></td></tr
><tr id="gr_svn141_296"

><td id="296"><a href="#296">296</a></td></tr
><tr id="gr_svn141_297"

><td id="297"><a href="#297">297</a></td></tr
><tr id="gr_svn141_298"

><td id="298"><a href="#298">298</a></td></tr
><tr id="gr_svn141_299"

><td id="299"><a href="#299">299</a></td></tr
><tr id="gr_svn141_300"

><td id="300"><a href="#300">300</a></td></tr
><tr id="gr_svn141_301"

><td id="301"><a href="#301">301</a></td></tr
><tr id="gr_svn141_302"

><td id="302"><a href="#302">302</a></td></tr
><tr id="gr_svn141_303"

><td id="303"><a href="#303">303</a></td></tr
><tr id="gr_svn141_304"

><td id="304"><a href="#304">304</a></td></tr
><tr id="gr_svn141_305"

><td id="305"><a href="#305">305</a></td></tr
><tr id="gr_svn141_306"

><td id="306"><a href="#306">306</a></td></tr
><tr id="gr_svn141_307"

><td id="307"><a href="#307">307</a></td></tr
><tr id="gr_svn141_308"

><td id="308"><a href="#308">308</a></td></tr
><tr id="gr_svn141_309"

><td id="309"><a href="#309">309</a></td></tr
><tr id="gr_svn141_310"

><td id="310"><a href="#310">310</a></td></tr
><tr id="gr_svn141_311"

><td id="311"><a href="#311">311</a></td></tr
><tr id="gr_svn141_312"

><td id="312"><a href="#312">312</a></td></tr
><tr id="gr_svn141_313"

><td id="313"><a href="#313">313</a></td></tr
><tr id="gr_svn141_314"

><td id="314"><a href="#314">314</a></td></tr
><tr id="gr_svn141_315"

><td id="315"><a href="#315">315</a></td></tr
><tr id="gr_svn141_316"

><td id="316"><a href="#316">316</a></td></tr
><tr id="gr_svn141_317"

><td id="317"><a href="#317">317</a></td></tr
><tr id="gr_svn141_318"

><td id="318"><a href="#318">318</a></td></tr
><tr id="gr_svn141_319"

><td id="319"><a href="#319">319</a></td></tr
><tr id="gr_svn141_320"

><td id="320"><a href="#320">320</a></td></tr
><tr id="gr_svn141_321"

><td id="321"><a href="#321">321</a></td></tr
><tr id="gr_svn141_322"

><td id="322"><a href="#322">322</a></td></tr
><tr id="gr_svn141_323"

><td id="323"><a href="#323">323</a></td></tr
><tr id="gr_svn141_324"

><td id="324"><a href="#324">324</a></td></tr
><tr id="gr_svn141_325"

><td id="325"><a href="#325">325</a></td></tr
><tr id="gr_svn141_326"

><td id="326"><a href="#326">326</a></td></tr
><tr id="gr_svn141_327"

><td id="327"><a href="#327">327</a></td></tr
><tr id="gr_svn141_328"

><td id="328"><a href="#328">328</a></td></tr
><tr id="gr_svn141_329"

><td id="329"><a href="#329">329</a></td></tr
><tr id="gr_svn141_330"

><td id="330"><a href="#330">330</a></td></tr
><tr id="gr_svn141_331"

><td id="331"><a href="#331">331</a></td></tr
><tr id="gr_svn141_332"

><td id="332"><a href="#332">332</a></td></tr
><tr id="gr_svn141_333"

><td id="333"><a href="#333">333</a></td></tr
><tr id="gr_svn141_334"

><td id="334"><a href="#334">334</a></td></tr
><tr id="gr_svn141_335"

><td id="335"><a href="#335">335</a></td></tr
><tr id="gr_svn141_336"

><td id="336"><a href="#336">336</a></td></tr
><tr id="gr_svn141_337"

><td id="337"><a href="#337">337</a></td></tr
><tr id="gr_svn141_338"

><td id="338"><a href="#338">338</a></td></tr
><tr id="gr_svn141_339"

><td id="339"><a href="#339">339</a></td></tr
><tr id="gr_svn141_340"

><td id="340"><a href="#340">340</a></td></tr
><tr id="gr_svn141_341"

><td id="341"><a href="#341">341</a></td></tr
><tr id="gr_svn141_342"

><td id="342"><a href="#342">342</a></td></tr
><tr id="gr_svn141_343"

><td id="343"><a href="#343">343</a></td></tr
><tr id="gr_svn141_344"

><td id="344"><a href="#344">344</a></td></tr
><tr id="gr_svn141_345"

><td id="345"><a href="#345">345</a></td></tr
><tr id="gr_svn141_346"

><td id="346"><a href="#346">346</a></td></tr
><tr id="gr_svn141_347"

><td id="347"><a href="#347">347</a></td></tr
><tr id="gr_svn141_348"

><td id="348"><a href="#348">348</a></td></tr
><tr id="gr_svn141_349"

><td id="349"><a href="#349">349</a></td></tr
><tr id="gr_svn141_350"

><td id="350"><a href="#350">350</a></td></tr
><tr id="gr_svn141_351"

><td id="351"><a href="#351">351</a></td></tr
><tr id="gr_svn141_352"

><td id="352"><a href="#352">352</a></td></tr
><tr id="gr_svn141_353"

><td id="353"><a href="#353">353</a></td></tr
><tr id="gr_svn141_354"

><td id="354"><a href="#354">354</a></td></tr
><tr id="gr_svn141_355"

><td id="355"><a href="#355">355</a></td></tr
><tr id="gr_svn141_356"

><td id="356"><a href="#356">356</a></td></tr
><tr id="gr_svn141_357"

><td id="357"><a href="#357">357</a></td></tr
><tr id="gr_svn141_358"

><td id="358"><a href="#358">358</a></td></tr
><tr id="gr_svn141_359"

><td id="359"><a href="#359">359</a></td></tr
><tr id="gr_svn141_360"

><td id="360"><a href="#360">360</a></td></tr
><tr id="gr_svn141_361"

><td id="361"><a href="#361">361</a></td></tr
><tr id="gr_svn141_362"

><td id="362"><a href="#362">362</a></td></tr
><tr id="gr_svn141_363"

><td id="363"><a href="#363">363</a></td></tr
><tr id="gr_svn141_364"

><td id="364"><a href="#364">364</a></td></tr
><tr id="gr_svn141_365"

><td id="365"><a href="#365">365</a></td></tr
><tr id="gr_svn141_366"

><td id="366"><a href="#366">366</a></td></tr
><tr id="gr_svn141_367"

><td id="367"><a href="#367">367</a></td></tr
><tr id="gr_svn141_368"

><td id="368"><a href="#368">368</a></td></tr
><tr id="gr_svn141_369"

><td id="369"><a href="#369">369</a></td></tr
><tr id="gr_svn141_370"

><td id="370"><a href="#370">370</a></td></tr
><tr id="gr_svn141_371"

><td id="371"><a href="#371">371</a></td></tr
><tr id="gr_svn141_372"

><td id="372"><a href="#372">372</a></td></tr
><tr id="gr_svn141_373"

><td id="373"><a href="#373">373</a></td></tr
><tr id="gr_svn141_374"

><td id="374"><a href="#374">374</a></td></tr
><tr id="gr_svn141_375"

><td id="375"><a href="#375">375</a></td></tr
><tr id="gr_svn141_376"

><td id="376"><a href="#376">376</a></td></tr
><tr id="gr_svn141_377"

><td id="377"><a href="#377">377</a></td></tr
><tr id="gr_svn141_378"

><td id="378"><a href="#378">378</a></td></tr
><tr id="gr_svn141_379"

><td id="379"><a href="#379">379</a></td></tr
><tr id="gr_svn141_380"

><td id="380"><a href="#380">380</a></td></tr
><tr id="gr_svn141_381"

><td id="381"><a href="#381">381</a></td></tr
><tr id="gr_svn141_382"

><td id="382"><a href="#382">382</a></td></tr
><tr id="gr_svn141_383"

><td id="383"><a href="#383">383</a></td></tr
><tr id="gr_svn141_384"

><td id="384"><a href="#384">384</a></td></tr
><tr id="gr_svn141_385"

><td id="385"><a href="#385">385</a></td></tr
><tr id="gr_svn141_386"

><td id="386"><a href="#386">386</a></td></tr
><tr id="gr_svn141_387"

><td id="387"><a href="#387">387</a></td></tr
><tr id="gr_svn141_388"

><td id="388"><a href="#388">388</a></td></tr
><tr id="gr_svn141_389"

><td id="389"><a href="#389">389</a></td></tr
><tr id="gr_svn141_390"

><td id="390"><a href="#390">390</a></td></tr
><tr id="gr_svn141_391"

><td id="391"><a href="#391">391</a></td></tr
><tr id="gr_svn141_392"

><td id="392"><a href="#392">392</a></td></tr
><tr id="gr_svn141_393"

><td id="393"><a href="#393">393</a></td></tr
><tr id="gr_svn141_394"

><td id="394"><a href="#394">394</a></td></tr
><tr id="gr_svn141_395"

><td id="395"><a href="#395">395</a></td></tr
><tr id="gr_svn141_396"

><td id="396"><a href="#396">396</a></td></tr
><tr id="gr_svn141_397"

><td id="397"><a href="#397">397</a></td></tr
><tr id="gr_svn141_398"

><td id="398"><a href="#398">398</a></td></tr
><tr id="gr_svn141_399"

><td id="399"><a href="#399">399</a></td></tr
><tr id="gr_svn141_400"

><td id="400"><a href="#400">400</a></td></tr
><tr id="gr_svn141_401"

><td id="401"><a href="#401">401</a></td></tr
><tr id="gr_svn141_402"

><td id="402"><a href="#402">402</a></td></tr
><tr id="gr_svn141_403"

><td id="403"><a href="#403">403</a></td></tr
><tr id="gr_svn141_404"

><td id="404"><a href="#404">404</a></td></tr
><tr id="gr_svn141_405"

><td id="405"><a href="#405">405</a></td></tr
><tr id="gr_svn141_406"

><td id="406"><a href="#406">406</a></td></tr
><tr id="gr_svn141_407"

><td id="407"><a href="#407">407</a></td></tr
><tr id="gr_svn141_408"

><td id="408"><a href="#408">408</a></td></tr
><tr id="gr_svn141_409"

><td id="409"><a href="#409">409</a></td></tr
><tr id="gr_svn141_410"

><td id="410"><a href="#410">410</a></td></tr
><tr id="gr_svn141_411"

><td id="411"><a href="#411">411</a></td></tr
><tr id="gr_svn141_412"

><td id="412"><a href="#412">412</a></td></tr
><tr id="gr_svn141_413"

><td id="413"><a href="#413">413</a></td></tr
><tr id="gr_svn141_414"

><td id="414"><a href="#414">414</a></td></tr
><tr id="gr_svn141_415"

><td id="415"><a href="#415">415</a></td></tr
><tr id="gr_svn141_416"

><td id="416"><a href="#416">416</a></td></tr
><tr id="gr_svn141_417"

><td id="417"><a href="#417">417</a></td></tr
><tr id="gr_svn141_418"

><td id="418"><a href="#418">418</a></td></tr
><tr id="gr_svn141_419"

><td id="419"><a href="#419">419</a></td></tr
><tr id="gr_svn141_420"

><td id="420"><a href="#420">420</a></td></tr
><tr id="gr_svn141_421"

><td id="421"><a href="#421">421</a></td></tr
><tr id="gr_svn141_422"

><td id="422"><a href="#422">422</a></td></tr
><tr id="gr_svn141_423"

><td id="423"><a href="#423">423</a></td></tr
><tr id="gr_svn141_424"

><td id="424"><a href="#424">424</a></td></tr
><tr id="gr_svn141_425"

><td id="425"><a href="#425">425</a></td></tr
><tr id="gr_svn141_426"

><td id="426"><a href="#426">426</a></td></tr
><tr id="gr_svn141_427"

><td id="427"><a href="#427">427</a></td></tr
><tr id="gr_svn141_428"

><td id="428"><a href="#428">428</a></td></tr
><tr id="gr_svn141_429"

><td id="429"><a href="#429">429</a></td></tr
><tr id="gr_svn141_430"

><td id="430"><a href="#430">430</a></td></tr
><tr id="gr_svn141_431"

><td id="431"><a href="#431">431</a></td></tr
><tr id="gr_svn141_432"

><td id="432"><a href="#432">432</a></td></tr
><tr id="gr_svn141_433"

><td id="433"><a href="#433">433</a></td></tr
><tr id="gr_svn141_434"

><td id="434"><a href="#434">434</a></td></tr
><tr id="gr_svn141_435"

><td id="435"><a href="#435">435</a></td></tr
><tr id="gr_svn141_436"

><td id="436"><a href="#436">436</a></td></tr
><tr id="gr_svn141_437"

><td id="437"><a href="#437">437</a></td></tr
><tr id="gr_svn141_438"

><td id="438"><a href="#438">438</a></td></tr
><tr id="gr_svn141_439"

><td id="439"><a href="#439">439</a></td></tr
><tr id="gr_svn141_440"

><td id="440"><a href="#440">440</a></td></tr
><tr id="gr_svn141_441"

><td id="441"><a href="#441">441</a></td></tr
><tr id="gr_svn141_442"

><td id="442"><a href="#442">442</a></td></tr
><tr id="gr_svn141_443"

><td id="443"><a href="#443">443</a></td></tr
><tr id="gr_svn141_444"

><td id="444"><a href="#444">444</a></td></tr
><tr id="gr_svn141_445"

><td id="445"><a href="#445">445</a></td></tr
><tr id="gr_svn141_446"

><td id="446"><a href="#446">446</a></td></tr
><tr id="gr_svn141_447"

><td id="447"><a href="#447">447</a></td></tr
><tr id="gr_svn141_448"

><td id="448"><a href="#448">448</a></td></tr
><tr id="gr_svn141_449"

><td id="449"><a href="#449">449</a></td></tr
><tr id="gr_svn141_450"

><td id="450"><a href="#450">450</a></td></tr
><tr id="gr_svn141_451"

><td id="451"><a href="#451">451</a></td></tr
><tr id="gr_svn141_452"

><td id="452"><a href="#452">452</a></td></tr
><tr id="gr_svn141_453"

><td id="453"><a href="#453">453</a></td></tr
><tr id="gr_svn141_454"

><td id="454"><a href="#454">454</a></td></tr
><tr id="gr_svn141_455"

><td id="455"><a href="#455">455</a></td></tr
><tr id="gr_svn141_456"

><td id="456"><a href="#456">456</a></td></tr
><tr id="gr_svn141_457"

><td id="457"><a href="#457">457</a></td></tr
><tr id="gr_svn141_458"

><td id="458"><a href="#458">458</a></td></tr
><tr id="gr_svn141_459"

><td id="459"><a href="#459">459</a></td></tr
><tr id="gr_svn141_460"

><td id="460"><a href="#460">460</a></td></tr
><tr id="gr_svn141_461"

><td id="461"><a href="#461">461</a></td></tr
><tr id="gr_svn141_462"

><td id="462"><a href="#462">462</a></td></tr
><tr id="gr_svn141_463"

><td id="463"><a href="#463">463</a></td></tr
><tr id="gr_svn141_464"

><td id="464"><a href="#464">464</a></td></tr
><tr id="gr_svn141_465"

><td id="465"><a href="#465">465</a></td></tr
><tr id="gr_svn141_466"

><td id="466"><a href="#466">466</a></td></tr
><tr id="gr_svn141_467"

><td id="467"><a href="#467">467</a></td></tr
><tr id="gr_svn141_468"

><td id="468"><a href="#468">468</a></td></tr
><tr id="gr_svn141_469"

><td id="469"><a href="#469">469</a></td></tr
><tr id="gr_svn141_470"

><td id="470"><a href="#470">470</a></td></tr
><tr id="gr_svn141_471"

><td id="471"><a href="#471">471</a></td></tr
><tr id="gr_svn141_472"

><td id="472"><a href="#472">472</a></td></tr
><tr id="gr_svn141_473"

><td id="473"><a href="#473">473</a></td></tr
><tr id="gr_svn141_474"

><td id="474"><a href="#474">474</a></td></tr
><tr id="gr_svn141_475"

><td id="475"><a href="#475">475</a></td></tr
><tr id="gr_svn141_476"

><td id="476"><a href="#476">476</a></td></tr
><tr id="gr_svn141_477"

><td id="477"><a href="#477">477</a></td></tr
><tr id="gr_svn141_478"

><td id="478"><a href="#478">478</a></td></tr
><tr id="gr_svn141_479"

><td id="479"><a href="#479">479</a></td></tr
><tr id="gr_svn141_480"

><td id="480"><a href="#480">480</a></td></tr
><tr id="gr_svn141_481"

><td id="481"><a href="#481">481</a></td></tr
><tr id="gr_svn141_482"

><td id="482"><a href="#482">482</a></td></tr
><tr id="gr_svn141_483"

><td id="483"><a href="#483">483</a></td></tr
><tr id="gr_svn141_484"

><td id="484"><a href="#484">484</a></td></tr
><tr id="gr_svn141_485"

><td id="485"><a href="#485">485</a></td></tr
><tr id="gr_svn141_486"

><td id="486"><a href="#486">486</a></td></tr
><tr id="gr_svn141_487"

><td id="487"><a href="#487">487</a></td></tr
><tr id="gr_svn141_488"

><td id="488"><a href="#488">488</a></td></tr
><tr id="gr_svn141_489"

><td id="489"><a href="#489">489</a></td></tr
><tr id="gr_svn141_490"

><td id="490"><a href="#490">490</a></td></tr
><tr id="gr_svn141_491"

><td id="491"><a href="#491">491</a></td></tr
><tr id="gr_svn141_492"

><td id="492"><a href="#492">492</a></td></tr
><tr id="gr_svn141_493"

><td id="493"><a href="#493">493</a></td></tr
><tr id="gr_svn141_494"

><td id="494"><a href="#494">494</a></td></tr
><tr id="gr_svn141_495"

><td id="495"><a href="#495">495</a></td></tr
><tr id="gr_svn141_496"

><td id="496"><a href="#496">496</a></td></tr
><tr id="gr_svn141_497"

><td id="497"><a href="#497">497</a></td></tr
><tr id="gr_svn141_498"

><td id="498"><a href="#498">498</a></td></tr
><tr id="gr_svn141_499"

><td id="499"><a href="#499">499</a></td></tr
><tr id="gr_svn141_500"

><td id="500"><a href="#500">500</a></td></tr
><tr id="gr_svn141_501"

><td id="501"><a href="#501">501</a></td></tr
><tr id="gr_svn141_502"

><td id="502"><a href="#502">502</a></td></tr
><tr id="gr_svn141_503"

><td id="503"><a href="#503">503</a></td></tr
><tr id="gr_svn141_504"

><td id="504"><a href="#504">504</a></td></tr
><tr id="gr_svn141_505"

><td id="505"><a href="#505">505</a></td></tr
><tr id="gr_svn141_506"

><td id="506"><a href="#506">506</a></td></tr
><tr id="gr_svn141_507"

><td id="507"><a href="#507">507</a></td></tr
><tr id="gr_svn141_508"

><td id="508"><a href="#508">508</a></td></tr
><tr id="gr_svn141_509"

><td id="509"><a href="#509">509</a></td></tr
><tr id="gr_svn141_510"

><td id="510"><a href="#510">510</a></td></tr
><tr id="gr_svn141_511"

><td id="511"><a href="#511">511</a></td></tr
><tr id="gr_svn141_512"

><td id="512"><a href="#512">512</a></td></tr
><tr id="gr_svn141_513"

><td id="513"><a href="#513">513</a></td></tr
><tr id="gr_svn141_514"

><td id="514"><a href="#514">514</a></td></tr
><tr id="gr_svn141_515"

><td id="515"><a href="#515">515</a></td></tr
><tr id="gr_svn141_516"

><td id="516"><a href="#516">516</a></td></tr
><tr id="gr_svn141_517"

><td id="517"><a href="#517">517</a></td></tr
><tr id="gr_svn141_518"

><td id="518"><a href="#518">518</a></td></tr
><tr id="gr_svn141_519"

><td id="519"><a href="#519">519</a></td></tr
><tr id="gr_svn141_520"

><td id="520"><a href="#520">520</a></td></tr
><tr id="gr_svn141_521"

><td id="521"><a href="#521">521</a></td></tr
><tr id="gr_svn141_522"

><td id="522"><a href="#522">522</a></td></tr
><tr id="gr_svn141_523"

><td id="523"><a href="#523">523</a></td></tr
><tr id="gr_svn141_524"

><td id="524"><a href="#524">524</a></td></tr
><tr id="gr_svn141_525"

><td id="525"><a href="#525">525</a></td></tr
><tr id="gr_svn141_526"

><td id="526"><a href="#526">526</a></td></tr
><tr id="gr_svn141_527"

><td id="527"><a href="#527">527</a></td></tr
><tr id="gr_svn141_528"

><td id="528"><a href="#528">528</a></td></tr
><tr id="gr_svn141_529"

><td id="529"><a href="#529">529</a></td></tr
><tr id="gr_svn141_530"

><td id="530"><a href="#530">530</a></td></tr
><tr id="gr_svn141_531"

><td id="531"><a href="#531">531</a></td></tr
><tr id="gr_svn141_532"

><td id="532"><a href="#532">532</a></td></tr
><tr id="gr_svn141_533"

><td id="533"><a href="#533">533</a></td></tr
><tr id="gr_svn141_534"

><td id="534"><a href="#534">534</a></td></tr
><tr id="gr_svn141_535"

><td id="535"><a href="#535">535</a></td></tr
><tr id="gr_svn141_536"

><td id="536"><a href="#536">536</a></td></tr
><tr id="gr_svn141_537"

><td id="537"><a href="#537">537</a></td></tr
><tr id="gr_svn141_538"

><td id="538"><a href="#538">538</a></td></tr
><tr id="gr_svn141_539"

><td id="539"><a href="#539">539</a></td></tr
><tr id="gr_svn141_540"

><td id="540"><a href="#540">540</a></td></tr
><tr id="gr_svn141_541"

><td id="541"><a href="#541">541</a></td></tr
><tr id="gr_svn141_542"

><td id="542"><a href="#542">542</a></td></tr
><tr id="gr_svn141_543"

><td id="543"><a href="#543">543</a></td></tr
><tr id="gr_svn141_544"

><td id="544"><a href="#544">544</a></td></tr
><tr id="gr_svn141_545"

><td id="545"><a href="#545">545</a></td></tr
><tr id="gr_svn141_546"

><td id="546"><a href="#546">546</a></td></tr
><tr id="gr_svn141_547"

><td id="547"><a href="#547">547</a></td></tr
><tr id="gr_svn141_548"

><td id="548"><a href="#548">548</a></td></tr
><tr id="gr_svn141_549"

><td id="549"><a href="#549">549</a></td></tr
><tr id="gr_svn141_550"

><td id="550"><a href="#550">550</a></td></tr
><tr id="gr_svn141_551"

><td id="551"><a href="#551">551</a></td></tr
><tr id="gr_svn141_552"

><td id="552"><a href="#552">552</a></td></tr
><tr id="gr_svn141_553"

><td id="553"><a href="#553">553</a></td></tr
><tr id="gr_svn141_554"

><td id="554"><a href="#554">554</a></td></tr
><tr id="gr_svn141_555"

><td id="555"><a href="#555">555</a></td></tr
><tr id="gr_svn141_556"

><td id="556"><a href="#556">556</a></td></tr
><tr id="gr_svn141_557"

><td id="557"><a href="#557">557</a></td></tr
><tr id="gr_svn141_558"

><td id="558"><a href="#558">558</a></td></tr
><tr id="gr_svn141_559"

><td id="559"><a href="#559">559</a></td></tr
><tr id="gr_svn141_560"

><td id="560"><a href="#560">560</a></td></tr
><tr id="gr_svn141_561"

><td id="561"><a href="#561">561</a></td></tr
><tr id="gr_svn141_562"

><td id="562"><a href="#562">562</a></td></tr
><tr id="gr_svn141_563"

><td id="563"><a href="#563">563</a></td></tr
><tr id="gr_svn141_564"

><td id="564"><a href="#564">564</a></td></tr
><tr id="gr_svn141_565"

><td id="565"><a href="#565">565</a></td></tr
><tr id="gr_svn141_566"

><td id="566"><a href="#566">566</a></td></tr
><tr id="gr_svn141_567"

><td id="567"><a href="#567">567</a></td></tr
><tr id="gr_svn141_568"

><td id="568"><a href="#568">568</a></td></tr
><tr id="gr_svn141_569"

><td id="569"><a href="#569">569</a></td></tr
><tr id="gr_svn141_570"

><td id="570"><a href="#570">570</a></td></tr
><tr id="gr_svn141_571"

><td id="571"><a href="#571">571</a></td></tr
><tr id="gr_svn141_572"

><td id="572"><a href="#572">572</a></td></tr
><tr id="gr_svn141_573"

><td id="573"><a href="#573">573</a></td></tr
><tr id="gr_svn141_574"

><td id="574"><a href="#574">574</a></td></tr
><tr id="gr_svn141_575"

><td id="575"><a href="#575">575</a></td></tr
><tr id="gr_svn141_576"

><td id="576"><a href="#576">576</a></td></tr
><tr id="gr_svn141_577"

><td id="577"><a href="#577">577</a></td></tr
><tr id="gr_svn141_578"

><td id="578"><a href="#578">578</a></td></tr
><tr id="gr_svn141_579"

><td id="579"><a href="#579">579</a></td></tr
><tr id="gr_svn141_580"

><td id="580"><a href="#580">580</a></td></tr
><tr id="gr_svn141_581"

><td id="581"><a href="#581">581</a></td></tr
><tr id="gr_svn141_582"

><td id="582"><a href="#582">582</a></td></tr
><tr id="gr_svn141_583"

><td id="583"><a href="#583">583</a></td></tr
><tr id="gr_svn141_584"

><td id="584"><a href="#584">584</a></td></tr
><tr id="gr_svn141_585"

><td id="585"><a href="#585">585</a></td></tr
><tr id="gr_svn141_586"

><td id="586"><a href="#586">586</a></td></tr
><tr id="gr_svn141_587"

><td id="587"><a href="#587">587</a></td></tr
><tr id="gr_svn141_588"

><td id="588"><a href="#588">588</a></td></tr
><tr id="gr_svn141_589"

><td id="589"><a href="#589">589</a></td></tr
><tr id="gr_svn141_590"

><td id="590"><a href="#590">590</a></td></tr
><tr id="gr_svn141_591"

><td id="591"><a href="#591">591</a></td></tr
><tr id="gr_svn141_592"

><td id="592"><a href="#592">592</a></td></tr
><tr id="gr_svn141_593"

><td id="593"><a href="#593">593</a></td></tr
><tr id="gr_svn141_594"

><td id="594"><a href="#594">594</a></td></tr
><tr id="gr_svn141_595"

><td id="595"><a href="#595">595</a></td></tr
><tr id="gr_svn141_596"

><td id="596"><a href="#596">596</a></td></tr
><tr id="gr_svn141_597"

><td id="597"><a href="#597">597</a></td></tr
><tr id="gr_svn141_598"

><td id="598"><a href="#598">598</a></td></tr
><tr id="gr_svn141_599"

><td id="599"><a href="#599">599</a></td></tr
><tr id="gr_svn141_600"

><td id="600"><a href="#600">600</a></td></tr
><tr id="gr_svn141_601"

><td id="601"><a href="#601">601</a></td></tr
><tr id="gr_svn141_602"

><td id="602"><a href="#602">602</a></td></tr
><tr id="gr_svn141_603"

><td id="603"><a href="#603">603</a></td></tr
><tr id="gr_svn141_604"

><td id="604"><a href="#604">604</a></td></tr
><tr id="gr_svn141_605"

><td id="605"><a href="#605">605</a></td></tr
><tr id="gr_svn141_606"

><td id="606"><a href="#606">606</a></td></tr
><tr id="gr_svn141_607"

><td id="607"><a href="#607">607</a></td></tr
><tr id="gr_svn141_608"

><td id="608"><a href="#608">608</a></td></tr
><tr id="gr_svn141_609"

><td id="609"><a href="#609">609</a></td></tr
><tr id="gr_svn141_610"

><td id="610"><a href="#610">610</a></td></tr
><tr id="gr_svn141_611"

><td id="611"><a href="#611">611</a></td></tr
><tr id="gr_svn141_612"

><td id="612"><a href="#612">612</a></td></tr
><tr id="gr_svn141_613"

><td id="613"><a href="#613">613</a></td></tr
><tr id="gr_svn141_614"

><td id="614"><a href="#614">614</a></td></tr
><tr id="gr_svn141_615"

><td id="615"><a href="#615">615</a></td></tr
><tr id="gr_svn141_616"

><td id="616"><a href="#616">616</a></td></tr
><tr id="gr_svn141_617"

><td id="617"><a href="#617">617</a></td></tr
><tr id="gr_svn141_618"

><td id="618"><a href="#618">618</a></td></tr
><tr id="gr_svn141_619"

><td id="619"><a href="#619">619</a></td></tr
><tr id="gr_svn141_620"

><td id="620"><a href="#620">620</a></td></tr
><tr id="gr_svn141_621"

><td id="621"><a href="#621">621</a></td></tr
><tr id="gr_svn141_622"

><td id="622"><a href="#622">622</a></td></tr
><tr id="gr_svn141_623"

><td id="623"><a href="#623">623</a></td></tr
><tr id="gr_svn141_624"

><td id="624"><a href="#624">624</a></td></tr
><tr id="gr_svn141_625"

><td id="625"><a href="#625">625</a></td></tr
><tr id="gr_svn141_626"

><td id="626"><a href="#626">626</a></td></tr
><tr id="gr_svn141_627"

><td id="627"><a href="#627">627</a></td></tr
><tr id="gr_svn141_628"

><td id="628"><a href="#628">628</a></td></tr
><tr id="gr_svn141_629"

><td id="629"><a href="#629">629</a></td></tr
><tr id="gr_svn141_630"

><td id="630"><a href="#630">630</a></td></tr
><tr id="gr_svn141_631"

><td id="631"><a href="#631">631</a></td></tr
><tr id="gr_svn141_632"

><td id="632"><a href="#632">632</a></td></tr
><tr id="gr_svn141_633"

><td id="633"><a href="#633">633</a></td></tr
><tr id="gr_svn141_634"

><td id="634"><a href="#634">634</a></td></tr
><tr id="gr_svn141_635"

><td id="635"><a href="#635">635</a></td></tr
><tr id="gr_svn141_636"

><td id="636"><a href="#636">636</a></td></tr
><tr id="gr_svn141_637"

><td id="637"><a href="#637">637</a></td></tr
><tr id="gr_svn141_638"

><td id="638"><a href="#638">638</a></td></tr
><tr id="gr_svn141_639"

><td id="639"><a href="#639">639</a></td></tr
><tr id="gr_svn141_640"

><td id="640"><a href="#640">640</a></td></tr
><tr id="gr_svn141_641"

><td id="641"><a href="#641">641</a></td></tr
><tr id="gr_svn141_642"

><td id="642"><a href="#642">642</a></td></tr
><tr id="gr_svn141_643"

><td id="643"><a href="#643">643</a></td></tr
><tr id="gr_svn141_644"

><td id="644"><a href="#644">644</a></td></tr
><tr id="gr_svn141_645"

><td id="645"><a href="#645">645</a></td></tr
><tr id="gr_svn141_646"

><td id="646"><a href="#646">646</a></td></tr
><tr id="gr_svn141_647"

><td id="647"><a href="#647">647</a></td></tr
><tr id="gr_svn141_648"

><td id="648"><a href="#648">648</a></td></tr
><tr id="gr_svn141_649"

><td id="649"><a href="#649">649</a></td></tr
><tr id="gr_svn141_650"

><td id="650"><a href="#650">650</a></td></tr
><tr id="gr_svn141_651"

><td id="651"><a href="#651">651</a></td></tr
><tr id="gr_svn141_652"

><td id="652"><a href="#652">652</a></td></tr
><tr id="gr_svn141_653"

><td id="653"><a href="#653">653</a></td></tr
><tr id="gr_svn141_654"

><td id="654"><a href="#654">654</a></td></tr
><tr id="gr_svn141_655"

><td id="655"><a href="#655">655</a></td></tr
><tr id="gr_svn141_656"

><td id="656"><a href="#656">656</a></td></tr
><tr id="gr_svn141_657"

><td id="657"><a href="#657">657</a></td></tr
><tr id="gr_svn141_658"

><td id="658"><a href="#658">658</a></td></tr
><tr id="gr_svn141_659"

><td id="659"><a href="#659">659</a></td></tr
><tr id="gr_svn141_660"

><td id="660"><a href="#660">660</a></td></tr
><tr id="gr_svn141_661"

><td id="661"><a href="#661">661</a></td></tr
><tr id="gr_svn141_662"

><td id="662"><a href="#662">662</a></td></tr
><tr id="gr_svn141_663"

><td id="663"><a href="#663">663</a></td></tr
><tr id="gr_svn141_664"

><td id="664"><a href="#664">664</a></td></tr
><tr id="gr_svn141_665"

><td id="665"><a href="#665">665</a></td></tr
><tr id="gr_svn141_666"

><td id="666"><a href="#666">666</a></td></tr
><tr id="gr_svn141_667"

><td id="667"><a href="#667">667</a></td></tr
><tr id="gr_svn141_668"

><td id="668"><a href="#668">668</a></td></tr
><tr id="gr_svn141_669"

><td id="669"><a href="#669">669</a></td></tr
><tr id="gr_svn141_670"

><td id="670"><a href="#670">670</a></td></tr
><tr id="gr_svn141_671"

><td id="671"><a href="#671">671</a></td></tr
><tr id="gr_svn141_672"

><td id="672"><a href="#672">672</a></td></tr
><tr id="gr_svn141_673"

><td id="673"><a href="#673">673</a></td></tr
><tr id="gr_svn141_674"

><td id="674"><a href="#674">674</a></td></tr
><tr id="gr_svn141_675"

><td id="675"><a href="#675">675</a></td></tr
><tr id="gr_svn141_676"

><td id="676"><a href="#676">676</a></td></tr
><tr id="gr_svn141_677"

><td id="677"><a href="#677">677</a></td></tr
><tr id="gr_svn141_678"

><td id="678"><a href="#678">678</a></td></tr
><tr id="gr_svn141_679"

><td id="679"><a href="#679">679</a></td></tr
><tr id="gr_svn141_680"

><td id="680"><a href="#680">680</a></td></tr
><tr id="gr_svn141_681"

><td id="681"><a href="#681">681</a></td></tr
><tr id="gr_svn141_682"

><td id="682"><a href="#682">682</a></td></tr
><tr id="gr_svn141_683"

><td id="683"><a href="#683">683</a></td></tr
><tr id="gr_svn141_684"

><td id="684"><a href="#684">684</a></td></tr
><tr id="gr_svn141_685"

><td id="685"><a href="#685">685</a></td></tr
><tr id="gr_svn141_686"

><td id="686"><a href="#686">686</a></td></tr
><tr id="gr_svn141_687"

><td id="687"><a href="#687">687</a></td></tr
><tr id="gr_svn141_688"

><td id="688"><a href="#688">688</a></td></tr
><tr id="gr_svn141_689"

><td id="689"><a href="#689">689</a></td></tr
><tr id="gr_svn141_690"

><td id="690"><a href="#690">690</a></td></tr
><tr id="gr_svn141_691"

><td id="691"><a href="#691">691</a></td></tr
><tr id="gr_svn141_692"

><td id="692"><a href="#692">692</a></td></tr
><tr id="gr_svn141_693"

><td id="693"><a href="#693">693</a></td></tr
><tr id="gr_svn141_694"

><td id="694"><a href="#694">694</a></td></tr
><tr id="gr_svn141_695"

><td id="695"><a href="#695">695</a></td></tr
><tr id="gr_svn141_696"

><td id="696"><a href="#696">696</a></td></tr
><tr id="gr_svn141_697"

><td id="697"><a href="#697">697</a></td></tr
><tr id="gr_svn141_698"

><td id="698"><a href="#698">698</a></td></tr
><tr id="gr_svn141_699"

><td id="699"><a href="#699">699</a></td></tr
><tr id="gr_svn141_700"

><td id="700"><a href="#700">700</a></td></tr
><tr id="gr_svn141_701"

><td id="701"><a href="#701">701</a></td></tr
><tr id="gr_svn141_702"

><td id="702"><a href="#702">702</a></td></tr
><tr id="gr_svn141_703"

><td id="703"><a href="#703">703</a></td></tr
><tr id="gr_svn141_704"

><td id="704"><a href="#704">704</a></td></tr
><tr id="gr_svn141_705"

><td id="705"><a href="#705">705</a></td></tr
><tr id="gr_svn141_706"

><td id="706"><a href="#706">706</a></td></tr
><tr id="gr_svn141_707"

><td id="707"><a href="#707">707</a></td></tr
><tr id="gr_svn141_708"

><td id="708"><a href="#708">708</a></td></tr
><tr id="gr_svn141_709"

><td id="709"><a href="#709">709</a></td></tr
><tr id="gr_svn141_710"

><td id="710"><a href="#710">710</a></td></tr
><tr id="gr_svn141_711"

><td id="711"><a href="#711">711</a></td></tr
><tr id="gr_svn141_712"

><td id="712"><a href="#712">712</a></td></tr
><tr id="gr_svn141_713"

><td id="713"><a href="#713">713</a></td></tr
><tr id="gr_svn141_714"

><td id="714"><a href="#714">714</a></td></tr
><tr id="gr_svn141_715"

><td id="715"><a href="#715">715</a></td></tr
><tr id="gr_svn141_716"

><td id="716"><a href="#716">716</a></td></tr
><tr id="gr_svn141_717"

><td id="717"><a href="#717">717</a></td></tr
><tr id="gr_svn141_718"

><td id="718"><a href="#718">718</a></td></tr
><tr id="gr_svn141_719"

><td id="719"><a href="#719">719</a></td></tr
><tr id="gr_svn141_720"

><td id="720"><a href="#720">720</a></td></tr
><tr id="gr_svn141_721"

><td id="721"><a href="#721">721</a></td></tr
><tr id="gr_svn141_722"

><td id="722"><a href="#722">722</a></td></tr
><tr id="gr_svn141_723"

><td id="723"><a href="#723">723</a></td></tr
><tr id="gr_svn141_724"

><td id="724"><a href="#724">724</a></td></tr
><tr id="gr_svn141_725"

><td id="725"><a href="#725">725</a></td></tr
><tr id="gr_svn141_726"

><td id="726"><a href="#726">726</a></td></tr
><tr id="gr_svn141_727"

><td id="727"><a href="#727">727</a></td></tr
><tr id="gr_svn141_728"

><td id="728"><a href="#728">728</a></td></tr
><tr id="gr_svn141_729"

><td id="729"><a href="#729">729</a></td></tr
><tr id="gr_svn141_730"

><td id="730"><a href="#730">730</a></td></tr
><tr id="gr_svn141_731"

><td id="731"><a href="#731">731</a></td></tr
><tr id="gr_svn141_732"

><td id="732"><a href="#732">732</a></td></tr
><tr id="gr_svn141_733"

><td id="733"><a href="#733">733</a></td></tr
><tr id="gr_svn141_734"

><td id="734"><a href="#734">734</a></td></tr
><tr id="gr_svn141_735"

><td id="735"><a href="#735">735</a></td></tr
><tr id="gr_svn141_736"

><td id="736"><a href="#736">736</a></td></tr
><tr id="gr_svn141_737"

><td id="737"><a href="#737">737</a></td></tr
><tr id="gr_svn141_738"

><td id="738"><a href="#738">738</a></td></tr
><tr id="gr_svn141_739"

><td id="739"><a href="#739">739</a></td></tr
><tr id="gr_svn141_740"

><td id="740"><a href="#740">740</a></td></tr
><tr id="gr_svn141_741"

><td id="741"><a href="#741">741</a></td></tr
><tr id="gr_svn141_742"

><td id="742"><a href="#742">742</a></td></tr
><tr id="gr_svn141_743"

><td id="743"><a href="#743">743</a></td></tr
><tr id="gr_svn141_744"

><td id="744"><a href="#744">744</a></td></tr
><tr id="gr_svn141_745"

><td id="745"><a href="#745">745</a></td></tr
><tr id="gr_svn141_746"

><td id="746"><a href="#746">746</a></td></tr
><tr id="gr_svn141_747"

><td id="747"><a href="#747">747</a></td></tr
><tr id="gr_svn141_748"

><td id="748"><a href="#748">748</a></td></tr
><tr id="gr_svn141_749"

><td id="749"><a href="#749">749</a></td></tr
><tr id="gr_svn141_750"

><td id="750"><a href="#750">750</a></td></tr
><tr id="gr_svn141_751"

><td id="751"><a href="#751">751</a></td></tr
><tr id="gr_svn141_752"

><td id="752"><a href="#752">752</a></td></tr
><tr id="gr_svn141_753"

><td id="753"><a href="#753">753</a></td></tr
><tr id="gr_svn141_754"

><td id="754"><a href="#754">754</a></td></tr
><tr id="gr_svn141_755"

><td id="755"><a href="#755">755</a></td></tr
><tr id="gr_svn141_756"

><td id="756"><a href="#756">756</a></td></tr
><tr id="gr_svn141_757"

><td id="757"><a href="#757">757</a></td></tr
><tr id="gr_svn141_758"

><td id="758"><a href="#758">758</a></td></tr
><tr id="gr_svn141_759"

><td id="759"><a href="#759">759</a></td></tr
><tr id="gr_svn141_760"

><td id="760"><a href="#760">760</a></td></tr
><tr id="gr_svn141_761"

><td id="761"><a href="#761">761</a></td></tr
><tr id="gr_svn141_762"

><td id="762"><a href="#762">762</a></td></tr
><tr id="gr_svn141_763"

><td id="763"><a href="#763">763</a></td></tr
><tr id="gr_svn141_764"

><td id="764"><a href="#764">764</a></td></tr
><tr id="gr_svn141_765"

><td id="765"><a href="#765">765</a></td></tr
><tr id="gr_svn141_766"

><td id="766"><a href="#766">766</a></td></tr
><tr id="gr_svn141_767"

><td id="767"><a href="#767">767</a></td></tr
><tr id="gr_svn141_768"

><td id="768"><a href="#768">768</a></td></tr
><tr id="gr_svn141_769"

><td id="769"><a href="#769">769</a></td></tr
><tr id="gr_svn141_770"

><td id="770"><a href="#770">770</a></td></tr
><tr id="gr_svn141_771"

><td id="771"><a href="#771">771</a></td></tr
><tr id="gr_svn141_772"

><td id="772"><a href="#772">772</a></td></tr
><tr id="gr_svn141_773"

><td id="773"><a href="#773">773</a></td></tr
><tr id="gr_svn141_774"

><td id="774"><a href="#774">774</a></td></tr
><tr id="gr_svn141_775"

><td id="775"><a href="#775">775</a></td></tr
><tr id="gr_svn141_776"

><td id="776"><a href="#776">776</a></td></tr
><tr id="gr_svn141_777"

><td id="777"><a href="#777">777</a></td></tr
><tr id="gr_svn141_778"

><td id="778"><a href="#778">778</a></td></tr
><tr id="gr_svn141_779"

><td id="779"><a href="#779">779</a></td></tr
><tr id="gr_svn141_780"

><td id="780"><a href="#780">780</a></td></tr
><tr id="gr_svn141_781"

><td id="781"><a href="#781">781</a></td></tr
><tr id="gr_svn141_782"

><td id="782"><a href="#782">782</a></td></tr
><tr id="gr_svn141_783"

><td id="783"><a href="#783">783</a></td></tr
><tr id="gr_svn141_784"

><td id="784"><a href="#784">784</a></td></tr
><tr id="gr_svn141_785"

><td id="785"><a href="#785">785</a></td></tr
><tr id="gr_svn141_786"

><td id="786"><a href="#786">786</a></td></tr
><tr id="gr_svn141_787"

><td id="787"><a href="#787">787</a></td></tr
><tr id="gr_svn141_788"

><td id="788"><a href="#788">788</a></td></tr
><tr id="gr_svn141_789"

><td id="789"><a href="#789">789</a></td></tr
><tr id="gr_svn141_790"

><td id="790"><a href="#790">790</a></td></tr
><tr id="gr_svn141_791"

><td id="791"><a href="#791">791</a></td></tr
><tr id="gr_svn141_792"

><td id="792"><a href="#792">792</a></td></tr
><tr id="gr_svn141_793"

><td id="793"><a href="#793">793</a></td></tr
><tr id="gr_svn141_794"

><td id="794"><a href="#794">794</a></td></tr
><tr id="gr_svn141_795"

><td id="795"><a href="#795">795</a></td></tr
><tr id="gr_svn141_796"

><td id="796"><a href="#796">796</a></td></tr
><tr id="gr_svn141_797"

><td id="797"><a href="#797">797</a></td></tr
><tr id="gr_svn141_798"

><td id="798"><a href="#798">798</a></td></tr
><tr id="gr_svn141_799"

><td id="799"><a href="#799">799</a></td></tr
><tr id="gr_svn141_800"

><td id="800"><a href="#800">800</a></td></tr
><tr id="gr_svn141_801"

><td id="801"><a href="#801">801</a></td></tr
><tr id="gr_svn141_802"

><td id="802"><a href="#802">802</a></td></tr
><tr id="gr_svn141_803"

><td id="803"><a href="#803">803</a></td></tr
><tr id="gr_svn141_804"

><td id="804"><a href="#804">804</a></td></tr
><tr id="gr_svn141_805"

><td id="805"><a href="#805">805</a></td></tr
><tr id="gr_svn141_806"

><td id="806"><a href="#806">806</a></td></tr
><tr id="gr_svn141_807"

><td id="807"><a href="#807">807</a></td></tr
><tr id="gr_svn141_808"

><td id="808"><a href="#808">808</a></td></tr
><tr id="gr_svn141_809"

><td id="809"><a href="#809">809</a></td></tr
><tr id="gr_svn141_810"

><td id="810"><a href="#810">810</a></td></tr
><tr id="gr_svn141_811"

><td id="811"><a href="#811">811</a></td></tr
><tr id="gr_svn141_812"

><td id="812"><a href="#812">812</a></td></tr
><tr id="gr_svn141_813"

><td id="813"><a href="#813">813</a></td></tr
><tr id="gr_svn141_814"

><td id="814"><a href="#814">814</a></td></tr
><tr id="gr_svn141_815"

><td id="815"><a href="#815">815</a></td></tr
><tr id="gr_svn141_816"

><td id="816"><a href="#816">816</a></td></tr
><tr id="gr_svn141_817"

><td id="817"><a href="#817">817</a></td></tr
><tr id="gr_svn141_818"

><td id="818"><a href="#818">818</a></td></tr
><tr id="gr_svn141_819"

><td id="819"><a href="#819">819</a></td></tr
><tr id="gr_svn141_820"

><td id="820"><a href="#820">820</a></td></tr
><tr id="gr_svn141_821"

><td id="821"><a href="#821">821</a></td></tr
><tr id="gr_svn141_822"

><td id="822"><a href="#822">822</a></td></tr
><tr id="gr_svn141_823"

><td id="823"><a href="#823">823</a></td></tr
><tr id="gr_svn141_824"

><td id="824"><a href="#824">824</a></td></tr
><tr id="gr_svn141_825"

><td id="825"><a href="#825">825</a></td></tr
><tr id="gr_svn141_826"

><td id="826"><a href="#826">826</a></td></tr
><tr id="gr_svn141_827"

><td id="827"><a href="#827">827</a></td></tr
><tr id="gr_svn141_828"

><td id="828"><a href="#828">828</a></td></tr
><tr id="gr_svn141_829"

><td id="829"><a href="#829">829</a></td></tr
><tr id="gr_svn141_830"

><td id="830"><a href="#830">830</a></td></tr
><tr id="gr_svn141_831"

><td id="831"><a href="#831">831</a></td></tr
><tr id="gr_svn141_832"

><td id="832"><a href="#832">832</a></td></tr
><tr id="gr_svn141_833"

><td id="833"><a href="#833">833</a></td></tr
><tr id="gr_svn141_834"

><td id="834"><a href="#834">834</a></td></tr
><tr id="gr_svn141_835"

><td id="835"><a href="#835">835</a></td></tr
><tr id="gr_svn141_836"

><td id="836"><a href="#836">836</a></td></tr
><tr id="gr_svn141_837"

><td id="837"><a href="#837">837</a></td></tr
><tr id="gr_svn141_838"

><td id="838"><a href="#838">838</a></td></tr
><tr id="gr_svn141_839"

><td id="839"><a href="#839">839</a></td></tr
><tr id="gr_svn141_840"

><td id="840"><a href="#840">840</a></td></tr
><tr id="gr_svn141_841"

><td id="841"><a href="#841">841</a></td></tr
><tr id="gr_svn141_842"

><td id="842"><a href="#842">842</a></td></tr
><tr id="gr_svn141_843"

><td id="843"><a href="#843">843</a></td></tr
><tr id="gr_svn141_844"

><td id="844"><a href="#844">844</a></td></tr
><tr id="gr_svn141_845"

><td id="845"><a href="#845">845</a></td></tr
><tr id="gr_svn141_846"

><td id="846"><a href="#846">846</a></td></tr
><tr id="gr_svn141_847"

><td id="847"><a href="#847">847</a></td></tr
><tr id="gr_svn141_848"

><td id="848"><a href="#848">848</a></td></tr
><tr id="gr_svn141_849"

><td id="849"><a href="#849">849</a></td></tr
><tr id="gr_svn141_850"

><td id="850"><a href="#850">850</a></td></tr
><tr id="gr_svn141_851"

><td id="851"><a href="#851">851</a></td></tr
><tr id="gr_svn141_852"

><td id="852"><a href="#852">852</a></td></tr
><tr id="gr_svn141_853"

><td id="853"><a href="#853">853</a></td></tr
><tr id="gr_svn141_854"

><td id="854"><a href="#854">854</a></td></tr
><tr id="gr_svn141_855"

><td id="855"><a href="#855">855</a></td></tr
><tr id="gr_svn141_856"

><td id="856"><a href="#856">856</a></td></tr
><tr id="gr_svn141_857"

><td id="857"><a href="#857">857</a></td></tr
><tr id="gr_svn141_858"

><td id="858"><a href="#858">858</a></td></tr
><tr id="gr_svn141_859"

><td id="859"><a href="#859">859</a></td></tr
><tr id="gr_svn141_860"

><td id="860"><a href="#860">860</a></td></tr
><tr id="gr_svn141_861"

><td id="861"><a href="#861">861</a></td></tr
><tr id="gr_svn141_862"

><td id="862"><a href="#862">862</a></td></tr
><tr id="gr_svn141_863"

><td id="863"><a href="#863">863</a></td></tr
><tr id="gr_svn141_864"

><td id="864"><a href="#864">864</a></td></tr
><tr id="gr_svn141_865"

><td id="865"><a href="#865">865</a></td></tr
><tr id="gr_svn141_866"

><td id="866"><a href="#866">866</a></td></tr
><tr id="gr_svn141_867"

><td id="867"><a href="#867">867</a></td></tr
><tr id="gr_svn141_868"

><td id="868"><a href="#868">868</a></td></tr
><tr id="gr_svn141_869"

><td id="869"><a href="#869">869</a></td></tr
><tr id="gr_svn141_870"

><td id="870"><a href="#870">870</a></td></tr
><tr id="gr_svn141_871"

><td id="871"><a href="#871">871</a></td></tr
><tr id="gr_svn141_872"

><td id="872"><a href="#872">872</a></td></tr
><tr id="gr_svn141_873"

><td id="873"><a href="#873">873</a></td></tr
><tr id="gr_svn141_874"

><td id="874"><a href="#874">874</a></td></tr
><tr id="gr_svn141_875"

><td id="875"><a href="#875">875</a></td></tr
><tr id="gr_svn141_876"

><td id="876"><a href="#876">876</a></td></tr
><tr id="gr_svn141_877"

><td id="877"><a href="#877">877</a></td></tr
><tr id="gr_svn141_878"

><td id="878"><a href="#878">878</a></td></tr
><tr id="gr_svn141_879"

><td id="879"><a href="#879">879</a></td></tr
><tr id="gr_svn141_880"

><td id="880"><a href="#880">880</a></td></tr
><tr id="gr_svn141_881"

><td id="881"><a href="#881">881</a></td></tr
><tr id="gr_svn141_882"

><td id="882"><a href="#882">882</a></td></tr
><tr id="gr_svn141_883"

><td id="883"><a href="#883">883</a></td></tr
><tr id="gr_svn141_884"

><td id="884"><a href="#884">884</a></td></tr
><tr id="gr_svn141_885"

><td id="885"><a href="#885">885</a></td></tr
><tr id="gr_svn141_886"

><td id="886"><a href="#886">886</a></td></tr
><tr id="gr_svn141_887"

><td id="887"><a href="#887">887</a></td></tr
><tr id="gr_svn141_888"

><td id="888"><a href="#888">888</a></td></tr
><tr id="gr_svn141_889"

><td id="889"><a href="#889">889</a></td></tr
><tr id="gr_svn141_890"

><td id="890"><a href="#890">890</a></td></tr
><tr id="gr_svn141_891"

><td id="891"><a href="#891">891</a></td></tr
><tr id="gr_svn141_892"

><td id="892"><a href="#892">892</a></td></tr
><tr id="gr_svn141_893"

><td id="893"><a href="#893">893</a></td></tr
><tr id="gr_svn141_894"

><td id="894"><a href="#894">894</a></td></tr
><tr id="gr_svn141_895"

><td id="895"><a href="#895">895</a></td></tr
><tr id="gr_svn141_896"

><td id="896"><a href="#896">896</a></td></tr
><tr id="gr_svn141_897"

><td id="897"><a href="#897">897</a></td></tr
><tr id="gr_svn141_898"

><td id="898"><a href="#898">898</a></td></tr
><tr id="gr_svn141_899"

><td id="899"><a href="#899">899</a></td></tr
><tr id="gr_svn141_900"

><td id="900"><a href="#900">900</a></td></tr
><tr id="gr_svn141_901"

><td id="901"><a href="#901">901</a></td></tr
><tr id="gr_svn141_902"

><td id="902"><a href="#902">902</a></td></tr
><tr id="gr_svn141_903"

><td id="903"><a href="#903">903</a></td></tr
><tr id="gr_svn141_904"

><td id="904"><a href="#904">904</a></td></tr
><tr id="gr_svn141_905"

><td id="905"><a href="#905">905</a></td></tr
><tr id="gr_svn141_906"

><td id="906"><a href="#906">906</a></td></tr
><tr id="gr_svn141_907"

><td id="907"><a href="#907">907</a></td></tr
><tr id="gr_svn141_908"

><td id="908"><a href="#908">908</a></td></tr
><tr id="gr_svn141_909"

><td id="909"><a href="#909">909</a></td></tr
><tr id="gr_svn141_910"

><td id="910"><a href="#910">910</a></td></tr
><tr id="gr_svn141_911"

><td id="911"><a href="#911">911</a></td></tr
><tr id="gr_svn141_912"

><td id="912"><a href="#912">912</a></td></tr
><tr id="gr_svn141_913"

><td id="913"><a href="#913">913</a></td></tr
><tr id="gr_svn141_914"

><td id="914"><a href="#914">914</a></td></tr
><tr id="gr_svn141_915"

><td id="915"><a href="#915">915</a></td></tr
><tr id="gr_svn141_916"

><td id="916"><a href="#916">916</a></td></tr
><tr id="gr_svn141_917"

><td id="917"><a href="#917">917</a></td></tr
><tr id="gr_svn141_918"

><td id="918"><a href="#918">918</a></td></tr
><tr id="gr_svn141_919"

><td id="919"><a href="#919">919</a></td></tr
><tr id="gr_svn141_920"

><td id="920"><a href="#920">920</a></td></tr
><tr id="gr_svn141_921"

><td id="921"><a href="#921">921</a></td></tr
><tr id="gr_svn141_922"

><td id="922"><a href="#922">922</a></td></tr
><tr id="gr_svn141_923"

><td id="923"><a href="#923">923</a></td></tr
><tr id="gr_svn141_924"

><td id="924"><a href="#924">924</a></td></tr
><tr id="gr_svn141_925"

><td id="925"><a href="#925">925</a></td></tr
><tr id="gr_svn141_926"

><td id="926"><a href="#926">926</a></td></tr
><tr id="gr_svn141_927"

><td id="927"><a href="#927">927</a></td></tr
><tr id="gr_svn141_928"

><td id="928"><a href="#928">928</a></td></tr
><tr id="gr_svn141_929"

><td id="929"><a href="#929">929</a></td></tr
><tr id="gr_svn141_930"

><td id="930"><a href="#930">930</a></td></tr
><tr id="gr_svn141_931"

><td id="931"><a href="#931">931</a></td></tr
><tr id="gr_svn141_932"

><td id="932"><a href="#932">932</a></td></tr
><tr id="gr_svn141_933"

><td id="933"><a href="#933">933</a></td></tr
><tr id="gr_svn141_934"

><td id="934"><a href="#934">934</a></td></tr
><tr id="gr_svn141_935"

><td id="935"><a href="#935">935</a></td></tr
><tr id="gr_svn141_936"

><td id="936"><a href="#936">936</a></td></tr
><tr id="gr_svn141_937"

><td id="937"><a href="#937">937</a></td></tr
><tr id="gr_svn141_938"

><td id="938"><a href="#938">938</a></td></tr
><tr id="gr_svn141_939"

><td id="939"><a href="#939">939</a></td></tr
><tr id="gr_svn141_940"

><td id="940"><a href="#940">940</a></td></tr
><tr id="gr_svn141_941"

><td id="941"><a href="#941">941</a></td></tr
><tr id="gr_svn141_942"

><td id="942"><a href="#942">942</a></td></tr
><tr id="gr_svn141_943"

><td id="943"><a href="#943">943</a></td></tr
><tr id="gr_svn141_944"

><td id="944"><a href="#944">944</a></td></tr
><tr id="gr_svn141_945"

><td id="945"><a href="#945">945</a></td></tr
><tr id="gr_svn141_946"

><td id="946"><a href="#946">946</a></td></tr
><tr id="gr_svn141_947"

><td id="947"><a href="#947">947</a></td></tr
><tr id="gr_svn141_948"

><td id="948"><a href="#948">948</a></td></tr
><tr id="gr_svn141_949"

><td id="949"><a href="#949">949</a></td></tr
><tr id="gr_svn141_950"

><td id="950"><a href="#950">950</a></td></tr
><tr id="gr_svn141_951"

><td id="951"><a href="#951">951</a></td></tr
><tr id="gr_svn141_952"

><td id="952"><a href="#952">952</a></td></tr
><tr id="gr_svn141_953"

><td id="953"><a href="#953">953</a></td></tr
><tr id="gr_svn141_954"

><td id="954"><a href="#954">954</a></td></tr
><tr id="gr_svn141_955"

><td id="955"><a href="#955">955</a></td></tr
><tr id="gr_svn141_956"

><td id="956"><a href="#956">956</a></td></tr
><tr id="gr_svn141_957"

><td id="957"><a href="#957">957</a></td></tr
><tr id="gr_svn141_958"

><td id="958"><a href="#958">958</a></td></tr
><tr id="gr_svn141_959"

><td id="959"><a href="#959">959</a></td></tr
><tr id="gr_svn141_960"

><td id="960"><a href="#960">960</a></td></tr
><tr id="gr_svn141_961"

><td id="961"><a href="#961">961</a></td></tr
><tr id="gr_svn141_962"

><td id="962"><a href="#962">962</a></td></tr
><tr id="gr_svn141_963"

><td id="963"><a href="#963">963</a></td></tr
><tr id="gr_svn141_964"

><td id="964"><a href="#964">964</a></td></tr
><tr id="gr_svn141_965"

><td id="965"><a href="#965">965</a></td></tr
><tr id="gr_svn141_966"

><td id="966"><a href="#966">966</a></td></tr
><tr id="gr_svn141_967"

><td id="967"><a href="#967">967</a></td></tr
><tr id="gr_svn141_968"

><td id="968"><a href="#968">968</a></td></tr
><tr id="gr_svn141_969"

><td id="969"><a href="#969">969</a></td></tr
><tr id="gr_svn141_970"

><td id="970"><a href="#970">970</a></td></tr
><tr id="gr_svn141_971"

><td id="971"><a href="#971">971</a></td></tr
><tr id="gr_svn141_972"

><td id="972"><a href="#972">972</a></td></tr
><tr id="gr_svn141_973"

><td id="973"><a href="#973">973</a></td></tr
><tr id="gr_svn141_974"

><td id="974"><a href="#974">974</a></td></tr
><tr id="gr_svn141_975"

><td id="975"><a href="#975">975</a></td></tr
><tr id="gr_svn141_976"

><td id="976"><a href="#976">976</a></td></tr
><tr id="gr_svn141_977"

><td id="977"><a href="#977">977</a></td></tr
><tr id="gr_svn141_978"

><td id="978"><a href="#978">978</a></td></tr
><tr id="gr_svn141_979"

><td id="979"><a href="#979">979</a></td></tr
><tr id="gr_svn141_980"

><td id="980"><a href="#980">980</a></td></tr
><tr id="gr_svn141_981"

><td id="981"><a href="#981">981</a></td></tr
><tr id="gr_svn141_982"

><td id="982"><a href="#982">982</a></td></tr
><tr id="gr_svn141_983"

><td id="983"><a href="#983">983</a></td></tr
><tr id="gr_svn141_984"

><td id="984"><a href="#984">984</a></td></tr
><tr id="gr_svn141_985"

><td id="985"><a href="#985">985</a></td></tr
><tr id="gr_svn141_986"

><td id="986"><a href="#986">986</a></td></tr
><tr id="gr_svn141_987"

><td id="987"><a href="#987">987</a></td></tr
><tr id="gr_svn141_988"

><td id="988"><a href="#988">988</a></td></tr
><tr id="gr_svn141_989"

><td id="989"><a href="#989">989</a></td></tr
><tr id="gr_svn141_990"

><td id="990"><a href="#990">990</a></td></tr
><tr id="gr_svn141_991"

><td id="991"><a href="#991">991</a></td></tr
><tr id="gr_svn141_992"

><td id="992"><a href="#992">992</a></td></tr
><tr id="gr_svn141_993"

><td id="993"><a href="#993">993</a></td></tr
><tr id="gr_svn141_994"

><td id="994"><a href="#994">994</a></td></tr
><tr id="gr_svn141_995"

><td id="995"><a href="#995">995</a></td></tr
><tr id="gr_svn141_996"

><td id="996"><a href="#996">996</a></td></tr
><tr id="gr_svn141_997"

><td id="997"><a href="#997">997</a></td></tr
><tr id="gr_svn141_998"

><td id="998"><a href="#998">998</a></td></tr
><tr id="gr_svn141_999"

><td id="999"><a href="#999">999</a></td></tr
><tr id="gr_svn141_1000"

><td id="1000"><a href="#1000">1000</a></td></tr
><tr id="gr_svn141_1001"

><td id="1001"><a href="#1001">1001</a></td></tr
><tr id="gr_svn141_1002"

><td id="1002"><a href="#1002">1002</a></td></tr
><tr id="gr_svn141_1003"

><td id="1003"><a href="#1003">1003</a></td></tr
><tr id="gr_svn141_1004"

><td id="1004"><a href="#1004">1004</a></td></tr
><tr id="gr_svn141_1005"

><td id="1005"><a href="#1005">1005</a></td></tr
><tr id="gr_svn141_1006"

><td id="1006"><a href="#1006">1006</a></td></tr
><tr id="gr_svn141_1007"

><td id="1007"><a href="#1007">1007</a></td></tr
><tr id="gr_svn141_1008"

><td id="1008"><a href="#1008">1008</a></td></tr
><tr id="gr_svn141_1009"

><td id="1009"><a href="#1009">1009</a></td></tr
><tr id="gr_svn141_1010"

><td id="1010"><a href="#1010">1010</a></td></tr
><tr id="gr_svn141_1011"

><td id="1011"><a href="#1011">1011</a></td></tr
><tr id="gr_svn141_1012"

><td id="1012"><a href="#1012">1012</a></td></tr
><tr id="gr_svn141_1013"

><td id="1013"><a href="#1013">1013</a></td></tr
><tr id="gr_svn141_1014"

><td id="1014"><a href="#1014">1014</a></td></tr
><tr id="gr_svn141_1015"

><td id="1015"><a href="#1015">1015</a></td></tr
><tr id="gr_svn141_1016"

><td id="1016"><a href="#1016">1016</a></td></tr
><tr id="gr_svn141_1017"

><td id="1017"><a href="#1017">1017</a></td></tr
><tr id="gr_svn141_1018"

><td id="1018"><a href="#1018">1018</a></td></tr
><tr id="gr_svn141_1019"

><td id="1019"><a href="#1019">1019</a></td></tr
><tr id="gr_svn141_1020"

><td id="1020"><a href="#1020">1020</a></td></tr
><tr id="gr_svn141_1021"

><td id="1021"><a href="#1021">1021</a></td></tr
><tr id="gr_svn141_1022"

><td id="1022"><a href="#1022">1022</a></td></tr
><tr id="gr_svn141_1023"

><td id="1023"><a href="#1023">1023</a></td></tr
><tr id="gr_svn141_1024"

><td id="1024"><a href="#1024">1024</a></td></tr
><tr id="gr_svn141_1025"

><td id="1025"><a href="#1025">1025</a></td></tr
><tr id="gr_svn141_1026"

><td id="1026"><a href="#1026">1026</a></td></tr
><tr id="gr_svn141_1027"

><td id="1027"><a href="#1027">1027</a></td></tr
><tr id="gr_svn141_1028"

><td id="1028"><a href="#1028">1028</a></td></tr
><tr id="gr_svn141_1029"

><td id="1029"><a href="#1029">1029</a></td></tr
><tr id="gr_svn141_1030"

><td id="1030"><a href="#1030">1030</a></td></tr
><tr id="gr_svn141_1031"

><td id="1031"><a href="#1031">1031</a></td></tr
><tr id="gr_svn141_1032"

><td id="1032"><a href="#1032">1032</a></td></tr
><tr id="gr_svn141_1033"

><td id="1033"><a href="#1033">1033</a></td></tr
><tr id="gr_svn141_1034"

><td id="1034"><a href="#1034">1034</a></td></tr
><tr id="gr_svn141_1035"

><td id="1035"><a href="#1035">1035</a></td></tr
><tr id="gr_svn141_1036"

><td id="1036"><a href="#1036">1036</a></td></tr
><tr id="gr_svn141_1037"

><td id="1037"><a href="#1037">1037</a></td></tr
><tr id="gr_svn141_1038"

><td id="1038"><a href="#1038">1038</a></td></tr
><tr id="gr_svn141_1039"

><td id="1039"><a href="#1039">1039</a></td></tr
><tr id="gr_svn141_1040"

><td id="1040"><a href="#1040">1040</a></td></tr
><tr id="gr_svn141_1041"

><td id="1041"><a href="#1041">1041</a></td></tr
><tr id="gr_svn141_1042"

><td id="1042"><a href="#1042">1042</a></td></tr
><tr id="gr_svn141_1043"

><td id="1043"><a href="#1043">1043</a></td></tr
><tr id="gr_svn141_1044"

><td id="1044"><a href="#1044">1044</a></td></tr
><tr id="gr_svn141_1045"

><td id="1045"><a href="#1045">1045</a></td></tr
><tr id="gr_svn141_1046"

><td id="1046"><a href="#1046">1046</a></td></tr
><tr id="gr_svn141_1047"

><td id="1047"><a href="#1047">1047</a></td></tr
><tr id="gr_svn141_1048"

><td id="1048"><a href="#1048">1048</a></td></tr
><tr id="gr_svn141_1049"

><td id="1049"><a href="#1049">1049</a></td></tr
><tr id="gr_svn141_1050"

><td id="1050"><a href="#1050">1050</a></td></tr
><tr id="gr_svn141_1051"

><td id="1051"><a href="#1051">1051</a></td></tr
><tr id="gr_svn141_1052"

><td id="1052"><a href="#1052">1052</a></td></tr
><tr id="gr_svn141_1053"

><td id="1053"><a href="#1053">1053</a></td></tr
><tr id="gr_svn141_1054"

><td id="1054"><a href="#1054">1054</a></td></tr
><tr id="gr_svn141_1055"

><td id="1055"><a href="#1055">1055</a></td></tr
><tr id="gr_svn141_1056"

><td id="1056"><a href="#1056">1056</a></td></tr
><tr id="gr_svn141_1057"

><td id="1057"><a href="#1057">1057</a></td></tr
><tr id="gr_svn141_1058"

><td id="1058"><a href="#1058">1058</a></td></tr
><tr id="gr_svn141_1059"

><td id="1059"><a href="#1059">1059</a></td></tr
><tr id="gr_svn141_1060"

><td id="1060"><a href="#1060">1060</a></td></tr
><tr id="gr_svn141_1061"

><td id="1061"><a href="#1061">1061</a></td></tr
><tr id="gr_svn141_1062"

><td id="1062"><a href="#1062">1062</a></td></tr
><tr id="gr_svn141_1063"

><td id="1063"><a href="#1063">1063</a></td></tr
><tr id="gr_svn141_1064"

><td id="1064"><a href="#1064">1064</a></td></tr
><tr id="gr_svn141_1065"

><td id="1065"><a href="#1065">1065</a></td></tr
><tr id="gr_svn141_1066"

><td id="1066"><a href="#1066">1066</a></td></tr
><tr id="gr_svn141_1067"

><td id="1067"><a href="#1067">1067</a></td></tr
><tr id="gr_svn141_1068"

><td id="1068"><a href="#1068">1068</a></td></tr
><tr id="gr_svn141_1069"

><td id="1069"><a href="#1069">1069</a></td></tr
><tr id="gr_svn141_1070"

><td id="1070"><a href="#1070">1070</a></td></tr
><tr id="gr_svn141_1071"

><td id="1071"><a href="#1071">1071</a></td></tr
><tr id="gr_svn141_1072"

><td id="1072"><a href="#1072">1072</a></td></tr
><tr id="gr_svn141_1073"

><td id="1073"><a href="#1073">1073</a></td></tr
><tr id="gr_svn141_1074"

><td id="1074"><a href="#1074">1074</a></td></tr
><tr id="gr_svn141_1075"

><td id="1075"><a href="#1075">1075</a></td></tr
><tr id="gr_svn141_1076"

><td id="1076"><a href="#1076">1076</a></td></tr
><tr id="gr_svn141_1077"

><td id="1077"><a href="#1077">1077</a></td></tr
><tr id="gr_svn141_1078"

><td id="1078"><a href="#1078">1078</a></td></tr
><tr id="gr_svn141_1079"

><td id="1079"><a href="#1079">1079</a></td></tr
><tr id="gr_svn141_1080"

><td id="1080"><a href="#1080">1080</a></td></tr
><tr id="gr_svn141_1081"

><td id="1081"><a href="#1081">1081</a></td></tr
><tr id="gr_svn141_1082"

><td id="1082"><a href="#1082">1082</a></td></tr
><tr id="gr_svn141_1083"

><td id="1083"><a href="#1083">1083</a></td></tr
><tr id="gr_svn141_1084"

><td id="1084"><a href="#1084">1084</a></td></tr
><tr id="gr_svn141_1085"

><td id="1085"><a href="#1085">1085</a></td></tr
><tr id="gr_svn141_1086"

><td id="1086"><a href="#1086">1086</a></td></tr
><tr id="gr_svn141_1087"

><td id="1087"><a href="#1087">1087</a></td></tr
><tr id="gr_svn141_1088"

><td id="1088"><a href="#1088">1088</a></td></tr
><tr id="gr_svn141_1089"

><td id="1089"><a href="#1089">1089</a></td></tr
><tr id="gr_svn141_1090"

><td id="1090"><a href="#1090">1090</a></td></tr
><tr id="gr_svn141_1091"

><td id="1091"><a href="#1091">1091</a></td></tr
><tr id="gr_svn141_1092"

><td id="1092"><a href="#1092">1092</a></td></tr
><tr id="gr_svn141_1093"

><td id="1093"><a href="#1093">1093</a></td></tr
><tr id="gr_svn141_1094"

><td id="1094"><a href="#1094">1094</a></td></tr
><tr id="gr_svn141_1095"

><td id="1095"><a href="#1095">1095</a></td></tr
><tr id="gr_svn141_1096"

><td id="1096"><a href="#1096">1096</a></td></tr
><tr id="gr_svn141_1097"

><td id="1097"><a href="#1097">1097</a></td></tr
><tr id="gr_svn141_1098"

><td id="1098"><a href="#1098">1098</a></td></tr
><tr id="gr_svn141_1099"

><td id="1099"><a href="#1099">1099</a></td></tr
><tr id="gr_svn141_1100"

><td id="1100"><a href="#1100">1100</a></td></tr
><tr id="gr_svn141_1101"

><td id="1101"><a href="#1101">1101</a></td></tr
><tr id="gr_svn141_1102"

><td id="1102"><a href="#1102">1102</a></td></tr
><tr id="gr_svn141_1103"

><td id="1103"><a href="#1103">1103</a></td></tr
><tr id="gr_svn141_1104"

><td id="1104"><a href="#1104">1104</a></td></tr
><tr id="gr_svn141_1105"

><td id="1105"><a href="#1105">1105</a></td></tr
><tr id="gr_svn141_1106"

><td id="1106"><a href="#1106">1106</a></td></tr
><tr id="gr_svn141_1107"

><td id="1107"><a href="#1107">1107</a></td></tr
><tr id="gr_svn141_1108"

><td id="1108"><a href="#1108">1108</a></td></tr
><tr id="gr_svn141_1109"

><td id="1109"><a href="#1109">1109</a></td></tr
><tr id="gr_svn141_1110"

><td id="1110"><a href="#1110">1110</a></td></tr
><tr id="gr_svn141_1111"

><td id="1111"><a href="#1111">1111</a></td></tr
><tr id="gr_svn141_1112"

><td id="1112"><a href="#1112">1112</a></td></tr
><tr id="gr_svn141_1113"

><td id="1113"><a href="#1113">1113</a></td></tr
><tr id="gr_svn141_1114"

><td id="1114"><a href="#1114">1114</a></td></tr
><tr id="gr_svn141_1115"

><td id="1115"><a href="#1115">1115</a></td></tr
><tr id="gr_svn141_1116"

><td id="1116"><a href="#1116">1116</a></td></tr
><tr id="gr_svn141_1117"

><td id="1117"><a href="#1117">1117</a></td></tr
><tr id="gr_svn141_1118"

><td id="1118"><a href="#1118">1118</a></td></tr
><tr id="gr_svn141_1119"

><td id="1119"><a href="#1119">1119</a></td></tr
><tr id="gr_svn141_1120"

><td id="1120"><a href="#1120">1120</a></td></tr
><tr id="gr_svn141_1121"

><td id="1121"><a href="#1121">1121</a></td></tr
><tr id="gr_svn141_1122"

><td id="1122"><a href="#1122">1122</a></td></tr
><tr id="gr_svn141_1123"

><td id="1123"><a href="#1123">1123</a></td></tr
><tr id="gr_svn141_1124"

><td id="1124"><a href="#1124">1124</a></td></tr
><tr id="gr_svn141_1125"

><td id="1125"><a href="#1125">1125</a></td></tr
><tr id="gr_svn141_1126"

><td id="1126"><a href="#1126">1126</a></td></tr
><tr id="gr_svn141_1127"

><td id="1127"><a href="#1127">1127</a></td></tr
><tr id="gr_svn141_1128"

><td id="1128"><a href="#1128">1128</a></td></tr
><tr id="gr_svn141_1129"

><td id="1129"><a href="#1129">1129</a></td></tr
><tr id="gr_svn141_1130"

><td id="1130"><a href="#1130">1130</a></td></tr
><tr id="gr_svn141_1131"

><td id="1131"><a href="#1131">1131</a></td></tr
><tr id="gr_svn141_1132"

><td id="1132"><a href="#1132">1132</a></td></tr
><tr id="gr_svn141_1133"

><td id="1133"><a href="#1133">1133</a></td></tr
><tr id="gr_svn141_1134"

><td id="1134"><a href="#1134">1134</a></td></tr
><tr id="gr_svn141_1135"

><td id="1135"><a href="#1135">1135</a></td></tr
><tr id="gr_svn141_1136"

><td id="1136"><a href="#1136">1136</a></td></tr
><tr id="gr_svn141_1137"

><td id="1137"><a href="#1137">1137</a></td></tr
><tr id="gr_svn141_1138"

><td id="1138"><a href="#1138">1138</a></td></tr
><tr id="gr_svn141_1139"

><td id="1139"><a href="#1139">1139</a></td></tr
><tr id="gr_svn141_1140"

><td id="1140"><a href="#1140">1140</a></td></tr
><tr id="gr_svn141_1141"

><td id="1141"><a href="#1141">1141</a></td></tr
><tr id="gr_svn141_1142"

><td id="1142"><a href="#1142">1142</a></td></tr
><tr id="gr_svn141_1143"

><td id="1143"><a href="#1143">1143</a></td></tr
><tr id="gr_svn141_1144"

><td id="1144"><a href="#1144">1144</a></td></tr
><tr id="gr_svn141_1145"

><td id="1145"><a href="#1145">1145</a></td></tr
><tr id="gr_svn141_1146"

><td id="1146"><a href="#1146">1146</a></td></tr
><tr id="gr_svn141_1147"

><td id="1147"><a href="#1147">1147</a></td></tr
><tr id="gr_svn141_1148"

><td id="1148"><a href="#1148">1148</a></td></tr
><tr id="gr_svn141_1149"

><td id="1149"><a href="#1149">1149</a></td></tr
><tr id="gr_svn141_1150"

><td id="1150"><a href="#1150">1150</a></td></tr
><tr id="gr_svn141_1151"

><td id="1151"><a href="#1151">1151</a></td></tr
><tr id="gr_svn141_1152"

><td id="1152"><a href="#1152">1152</a></td></tr
><tr id="gr_svn141_1153"

><td id="1153"><a href="#1153">1153</a></td></tr
><tr id="gr_svn141_1154"

><td id="1154"><a href="#1154">1154</a></td></tr
><tr id="gr_svn141_1155"

><td id="1155"><a href="#1155">1155</a></td></tr
><tr id="gr_svn141_1156"

><td id="1156"><a href="#1156">1156</a></td></tr
><tr id="gr_svn141_1157"

><td id="1157"><a href="#1157">1157</a></td></tr
><tr id="gr_svn141_1158"

><td id="1158"><a href="#1158">1158</a></td></tr
><tr id="gr_svn141_1159"

><td id="1159"><a href="#1159">1159</a></td></tr
><tr id="gr_svn141_1160"

><td id="1160"><a href="#1160">1160</a></td></tr
><tr id="gr_svn141_1161"

><td id="1161"><a href="#1161">1161</a></td></tr
><tr id="gr_svn141_1162"

><td id="1162"><a href="#1162">1162</a></td></tr
><tr id="gr_svn141_1163"

><td id="1163"><a href="#1163">1163</a></td></tr
><tr id="gr_svn141_1164"

><td id="1164"><a href="#1164">1164</a></td></tr
><tr id="gr_svn141_1165"

><td id="1165"><a href="#1165">1165</a></td></tr
><tr id="gr_svn141_1166"

><td id="1166"><a href="#1166">1166</a></td></tr
><tr id="gr_svn141_1167"

><td id="1167"><a href="#1167">1167</a></td></tr
><tr id="gr_svn141_1168"

><td id="1168"><a href="#1168">1168</a></td></tr
><tr id="gr_svn141_1169"

><td id="1169"><a href="#1169">1169</a></td></tr
><tr id="gr_svn141_1170"

><td id="1170"><a href="#1170">1170</a></td></tr
><tr id="gr_svn141_1171"

><td id="1171"><a href="#1171">1171</a></td></tr
><tr id="gr_svn141_1172"

><td id="1172"><a href="#1172">1172</a></td></tr
><tr id="gr_svn141_1173"

><td id="1173"><a href="#1173">1173</a></td></tr
><tr id="gr_svn141_1174"

><td id="1174"><a href="#1174">1174</a></td></tr
><tr id="gr_svn141_1175"

><td id="1175"><a href="#1175">1175</a></td></tr
><tr id="gr_svn141_1176"

><td id="1176"><a href="#1176">1176</a></td></tr
><tr id="gr_svn141_1177"

><td id="1177"><a href="#1177">1177</a></td></tr
><tr id="gr_svn141_1178"

><td id="1178"><a href="#1178">1178</a></td></tr
><tr id="gr_svn141_1179"

><td id="1179"><a href="#1179">1179</a></td></tr
><tr id="gr_svn141_1180"

><td id="1180"><a href="#1180">1180</a></td></tr
><tr id="gr_svn141_1181"

><td id="1181"><a href="#1181">1181</a></td></tr
><tr id="gr_svn141_1182"

><td id="1182"><a href="#1182">1182</a></td></tr
><tr id="gr_svn141_1183"

><td id="1183"><a href="#1183">1183</a></td></tr
><tr id="gr_svn141_1184"

><td id="1184"><a href="#1184">1184</a></td></tr
><tr id="gr_svn141_1185"

><td id="1185"><a href="#1185">1185</a></td></tr
><tr id="gr_svn141_1186"

><td id="1186"><a href="#1186">1186</a></td></tr
><tr id="gr_svn141_1187"

><td id="1187"><a href="#1187">1187</a></td></tr
><tr id="gr_svn141_1188"

><td id="1188"><a href="#1188">1188</a></td></tr
><tr id="gr_svn141_1189"

><td id="1189"><a href="#1189">1189</a></td></tr
><tr id="gr_svn141_1190"

><td id="1190"><a href="#1190">1190</a></td></tr
><tr id="gr_svn141_1191"

><td id="1191"><a href="#1191">1191</a></td></tr
><tr id="gr_svn141_1192"

><td id="1192"><a href="#1192">1192</a></td></tr
><tr id="gr_svn141_1193"

><td id="1193"><a href="#1193">1193</a></td></tr
><tr id="gr_svn141_1194"

><td id="1194"><a href="#1194">1194</a></td></tr
><tr id="gr_svn141_1195"

><td id="1195"><a href="#1195">1195</a></td></tr
><tr id="gr_svn141_1196"

><td id="1196"><a href="#1196">1196</a></td></tr
><tr id="gr_svn141_1197"

><td id="1197"><a href="#1197">1197</a></td></tr
><tr id="gr_svn141_1198"

><td id="1198"><a href="#1198">1198</a></td></tr
><tr id="gr_svn141_1199"

><td id="1199"><a href="#1199">1199</a></td></tr
><tr id="gr_svn141_1200"

><td id="1200"><a href="#1200">1200</a></td></tr
><tr id="gr_svn141_1201"

><td id="1201"><a href="#1201">1201</a></td></tr
><tr id="gr_svn141_1202"

><td id="1202"><a href="#1202">1202</a></td></tr
><tr id="gr_svn141_1203"

><td id="1203"><a href="#1203">1203</a></td></tr
><tr id="gr_svn141_1204"

><td id="1204"><a href="#1204">1204</a></td></tr
><tr id="gr_svn141_1205"

><td id="1205"><a href="#1205">1205</a></td></tr
><tr id="gr_svn141_1206"

><td id="1206"><a href="#1206">1206</a></td></tr
><tr id="gr_svn141_1207"

><td id="1207"><a href="#1207">1207</a></td></tr
><tr id="gr_svn141_1208"

><td id="1208"><a href="#1208">1208</a></td></tr
><tr id="gr_svn141_1209"

><td id="1209"><a href="#1209">1209</a></td></tr
><tr id="gr_svn141_1210"

><td id="1210"><a href="#1210">1210</a></td></tr
><tr id="gr_svn141_1211"

><td id="1211"><a href="#1211">1211</a></td></tr
><tr id="gr_svn141_1212"

><td id="1212"><a href="#1212">1212</a></td></tr
><tr id="gr_svn141_1213"

><td id="1213"><a href="#1213">1213</a></td></tr
><tr id="gr_svn141_1214"

><td id="1214"><a href="#1214">1214</a></td></tr
><tr id="gr_svn141_1215"

><td id="1215"><a href="#1215">1215</a></td></tr
><tr id="gr_svn141_1216"

><td id="1216"><a href="#1216">1216</a></td></tr
><tr id="gr_svn141_1217"

><td id="1217"><a href="#1217">1217</a></td></tr
><tr id="gr_svn141_1218"

><td id="1218"><a href="#1218">1218</a></td></tr
><tr id="gr_svn141_1219"

><td id="1219"><a href="#1219">1219</a></td></tr
><tr id="gr_svn141_1220"

><td id="1220"><a href="#1220">1220</a></td></tr
><tr id="gr_svn141_1221"

><td id="1221"><a href="#1221">1221</a></td></tr
><tr id="gr_svn141_1222"

><td id="1222"><a href="#1222">1222</a></td></tr
><tr id="gr_svn141_1223"

><td id="1223"><a href="#1223">1223</a></td></tr
><tr id="gr_svn141_1224"

><td id="1224"><a href="#1224">1224</a></td></tr
><tr id="gr_svn141_1225"

><td id="1225"><a href="#1225">1225</a></td></tr
><tr id="gr_svn141_1226"

><td id="1226"><a href="#1226">1226</a></td></tr
><tr id="gr_svn141_1227"

><td id="1227"><a href="#1227">1227</a></td></tr
><tr id="gr_svn141_1228"

><td id="1228"><a href="#1228">1228</a></td></tr
><tr id="gr_svn141_1229"

><td id="1229"><a href="#1229">1229</a></td></tr
><tr id="gr_svn141_1230"

><td id="1230"><a href="#1230">1230</a></td></tr
><tr id="gr_svn141_1231"

><td id="1231"><a href="#1231">1231</a></td></tr
><tr id="gr_svn141_1232"

><td id="1232"><a href="#1232">1232</a></td></tr
><tr id="gr_svn141_1233"

><td id="1233"><a href="#1233">1233</a></td></tr
><tr id="gr_svn141_1234"

><td id="1234"><a href="#1234">1234</a></td></tr
><tr id="gr_svn141_1235"

><td id="1235"><a href="#1235">1235</a></td></tr
><tr id="gr_svn141_1236"

><td id="1236"><a href="#1236">1236</a></td></tr
><tr id="gr_svn141_1237"

><td id="1237"><a href="#1237">1237</a></td></tr
><tr id="gr_svn141_1238"

><td id="1238"><a href="#1238">1238</a></td></tr
><tr id="gr_svn141_1239"

><td id="1239"><a href="#1239">1239</a></td></tr
><tr id="gr_svn141_1240"

><td id="1240"><a href="#1240">1240</a></td></tr
><tr id="gr_svn141_1241"

><td id="1241"><a href="#1241">1241</a></td></tr
><tr id="gr_svn141_1242"

><td id="1242"><a href="#1242">1242</a></td></tr
><tr id="gr_svn141_1243"

><td id="1243"><a href="#1243">1243</a></td></tr
><tr id="gr_svn141_1244"

><td id="1244"><a href="#1244">1244</a></td></tr
><tr id="gr_svn141_1245"

><td id="1245"><a href="#1245">1245</a></td></tr
><tr id="gr_svn141_1246"

><td id="1246"><a href="#1246">1246</a></td></tr
><tr id="gr_svn141_1247"

><td id="1247"><a href="#1247">1247</a></td></tr
><tr id="gr_svn141_1248"

><td id="1248"><a href="#1248">1248</a></td></tr
><tr id="gr_svn141_1249"

><td id="1249"><a href="#1249">1249</a></td></tr
><tr id="gr_svn141_1250"

><td id="1250"><a href="#1250">1250</a></td></tr
><tr id="gr_svn141_1251"

><td id="1251"><a href="#1251">1251</a></td></tr
><tr id="gr_svn141_1252"

><td id="1252"><a href="#1252">1252</a></td></tr
><tr id="gr_svn141_1253"

><td id="1253"><a href="#1253">1253</a></td></tr
><tr id="gr_svn141_1254"

><td id="1254"><a href="#1254">1254</a></td></tr
><tr id="gr_svn141_1255"

><td id="1255"><a href="#1255">1255</a></td></tr
><tr id="gr_svn141_1256"

><td id="1256"><a href="#1256">1256</a></td></tr
><tr id="gr_svn141_1257"

><td id="1257"><a href="#1257">1257</a></td></tr
><tr id="gr_svn141_1258"

><td id="1258"><a href="#1258">1258</a></td></tr
><tr id="gr_svn141_1259"

><td id="1259"><a href="#1259">1259</a></td></tr
><tr id="gr_svn141_1260"

><td id="1260"><a href="#1260">1260</a></td></tr
><tr id="gr_svn141_1261"

><td id="1261"><a href="#1261">1261</a></td></tr
><tr id="gr_svn141_1262"

><td id="1262"><a href="#1262">1262</a></td></tr
><tr id="gr_svn141_1263"

><td id="1263"><a href="#1263">1263</a></td></tr
><tr id="gr_svn141_1264"

><td id="1264"><a href="#1264">1264</a></td></tr
><tr id="gr_svn141_1265"

><td id="1265"><a href="#1265">1265</a></td></tr
><tr id="gr_svn141_1266"

><td id="1266"><a href="#1266">1266</a></td></tr
><tr id="gr_svn141_1267"

><td id="1267"><a href="#1267">1267</a></td></tr
><tr id="gr_svn141_1268"

><td id="1268"><a href="#1268">1268</a></td></tr
><tr id="gr_svn141_1269"

><td id="1269"><a href="#1269">1269</a></td></tr
><tr id="gr_svn141_1270"

><td id="1270"><a href="#1270">1270</a></td></tr
><tr id="gr_svn141_1271"

><td id="1271"><a href="#1271">1271</a></td></tr
><tr id="gr_svn141_1272"

><td id="1272"><a href="#1272">1272</a></td></tr
><tr id="gr_svn141_1273"

><td id="1273"><a href="#1273">1273</a></td></tr
><tr id="gr_svn141_1274"

><td id="1274"><a href="#1274">1274</a></td></tr
><tr id="gr_svn141_1275"

><td id="1275"><a href="#1275">1275</a></td></tr
><tr id="gr_svn141_1276"

><td id="1276"><a href="#1276">1276</a></td></tr
><tr id="gr_svn141_1277"

><td id="1277"><a href="#1277">1277</a></td></tr
><tr id="gr_svn141_1278"

><td id="1278"><a href="#1278">1278</a></td></tr
><tr id="gr_svn141_1279"

><td id="1279"><a href="#1279">1279</a></td></tr
><tr id="gr_svn141_1280"

><td id="1280"><a href="#1280">1280</a></td></tr
><tr id="gr_svn141_1281"

><td id="1281"><a href="#1281">1281</a></td></tr
><tr id="gr_svn141_1282"

><td id="1282"><a href="#1282">1282</a></td></tr
><tr id="gr_svn141_1283"

><td id="1283"><a href="#1283">1283</a></td></tr
><tr id="gr_svn141_1284"

><td id="1284"><a href="#1284">1284</a></td></tr
><tr id="gr_svn141_1285"

><td id="1285"><a href="#1285">1285</a></td></tr
><tr id="gr_svn141_1286"

><td id="1286"><a href="#1286">1286</a></td></tr
><tr id="gr_svn141_1287"

><td id="1287"><a href="#1287">1287</a></td></tr
><tr id="gr_svn141_1288"

><td id="1288"><a href="#1288">1288</a></td></tr
><tr id="gr_svn141_1289"

><td id="1289"><a href="#1289">1289</a></td></tr
><tr id="gr_svn141_1290"

><td id="1290"><a href="#1290">1290</a></td></tr
><tr id="gr_svn141_1291"

><td id="1291"><a href="#1291">1291</a></td></tr
><tr id="gr_svn141_1292"

><td id="1292"><a href="#1292">1292</a></td></tr
><tr id="gr_svn141_1293"

><td id="1293"><a href="#1293">1293</a></td></tr
><tr id="gr_svn141_1294"

><td id="1294"><a href="#1294">1294</a></td></tr
><tr id="gr_svn141_1295"

><td id="1295"><a href="#1295">1295</a></td></tr
><tr id="gr_svn141_1296"

><td id="1296"><a href="#1296">1296</a></td></tr
><tr id="gr_svn141_1297"

><td id="1297"><a href="#1297">1297</a></td></tr
><tr id="gr_svn141_1298"

><td id="1298"><a href="#1298">1298</a></td></tr
><tr id="gr_svn141_1299"

><td id="1299"><a href="#1299">1299</a></td></tr
><tr id="gr_svn141_1300"

><td id="1300"><a href="#1300">1300</a></td></tr
><tr id="gr_svn141_1301"

><td id="1301"><a href="#1301">1301</a></td></tr
><tr id="gr_svn141_1302"

><td id="1302"><a href="#1302">1302</a></td></tr
><tr id="gr_svn141_1303"

><td id="1303"><a href="#1303">1303</a></td></tr
><tr id="gr_svn141_1304"

><td id="1304"><a href="#1304">1304</a></td></tr
><tr id="gr_svn141_1305"

><td id="1305"><a href="#1305">1305</a></td></tr
><tr id="gr_svn141_1306"

><td id="1306"><a href="#1306">1306</a></td></tr
><tr id="gr_svn141_1307"

><td id="1307"><a href="#1307">1307</a></td></tr
><tr id="gr_svn141_1308"

><td id="1308"><a href="#1308">1308</a></td></tr
><tr id="gr_svn141_1309"

><td id="1309"><a href="#1309">1309</a></td></tr
><tr id="gr_svn141_1310"

><td id="1310"><a href="#1310">1310</a></td></tr
><tr id="gr_svn141_1311"

><td id="1311"><a href="#1311">1311</a></td></tr
><tr id="gr_svn141_1312"

><td id="1312"><a href="#1312">1312</a></td></tr
><tr id="gr_svn141_1313"

><td id="1313"><a href="#1313">1313</a></td></tr
><tr id="gr_svn141_1314"

><td id="1314"><a href="#1314">1314</a></td></tr
><tr id="gr_svn141_1315"

><td id="1315"><a href="#1315">1315</a></td></tr
><tr id="gr_svn141_1316"

><td id="1316"><a href="#1316">1316</a></td></tr
><tr id="gr_svn141_1317"

><td id="1317"><a href="#1317">1317</a></td></tr
><tr id="gr_svn141_1318"

><td id="1318"><a href="#1318">1318</a></td></tr
><tr id="gr_svn141_1319"

><td id="1319"><a href="#1319">1319</a></td></tr
><tr id="gr_svn141_1320"

><td id="1320"><a href="#1320">1320</a></td></tr
><tr id="gr_svn141_1321"

><td id="1321"><a href="#1321">1321</a></td></tr
><tr id="gr_svn141_1322"

><td id="1322"><a href="#1322">1322</a></td></tr
><tr id="gr_svn141_1323"

><td id="1323"><a href="#1323">1323</a></td></tr
><tr id="gr_svn141_1324"

><td id="1324"><a href="#1324">1324</a></td></tr
><tr id="gr_svn141_1325"

><td id="1325"><a href="#1325">1325</a></td></tr
><tr id="gr_svn141_1326"

><td id="1326"><a href="#1326">1326</a></td></tr
><tr id="gr_svn141_1327"

><td id="1327"><a href="#1327">1327</a></td></tr
><tr id="gr_svn141_1328"

><td id="1328"><a href="#1328">1328</a></td></tr
><tr id="gr_svn141_1329"

><td id="1329"><a href="#1329">1329</a></td></tr
><tr id="gr_svn141_1330"

><td id="1330"><a href="#1330">1330</a></td></tr
><tr id="gr_svn141_1331"

><td id="1331"><a href="#1331">1331</a></td></tr
><tr id="gr_svn141_1332"

><td id="1332"><a href="#1332">1332</a></td></tr
><tr id="gr_svn141_1333"

><td id="1333"><a href="#1333">1333</a></td></tr
><tr id="gr_svn141_1334"

><td id="1334"><a href="#1334">1334</a></td></tr
><tr id="gr_svn141_1335"

><td id="1335"><a href="#1335">1335</a></td></tr
><tr id="gr_svn141_1336"

><td id="1336"><a href="#1336">1336</a></td></tr
><tr id="gr_svn141_1337"

><td id="1337"><a href="#1337">1337</a></td></tr
><tr id="gr_svn141_1338"

><td id="1338"><a href="#1338">1338</a></td></tr
><tr id="gr_svn141_1339"

><td id="1339"><a href="#1339">1339</a></td></tr
><tr id="gr_svn141_1340"

><td id="1340"><a href="#1340">1340</a></td></tr
><tr id="gr_svn141_1341"

><td id="1341"><a href="#1341">1341</a></td></tr
><tr id="gr_svn141_1342"

><td id="1342"><a href="#1342">1342</a></td></tr
><tr id="gr_svn141_1343"

><td id="1343"><a href="#1343">1343</a></td></tr
><tr id="gr_svn141_1344"

><td id="1344"><a href="#1344">1344</a></td></tr
><tr id="gr_svn141_1345"

><td id="1345"><a href="#1345">1345</a></td></tr
><tr id="gr_svn141_1346"

><td id="1346"><a href="#1346">1346</a></td></tr
><tr id="gr_svn141_1347"

><td id="1347"><a href="#1347">1347</a></td></tr
><tr id="gr_svn141_1348"

><td id="1348"><a href="#1348">1348</a></td></tr
><tr id="gr_svn141_1349"

><td id="1349"><a href="#1349">1349</a></td></tr
><tr id="gr_svn141_1350"

><td id="1350"><a href="#1350">1350</a></td></tr
><tr id="gr_svn141_1351"

><td id="1351"><a href="#1351">1351</a></td></tr
><tr id="gr_svn141_1352"

><td id="1352"><a href="#1352">1352</a></td></tr
><tr id="gr_svn141_1353"

><td id="1353"><a href="#1353">1353</a></td></tr
><tr id="gr_svn141_1354"

><td id="1354"><a href="#1354">1354</a></td></tr
><tr id="gr_svn141_1355"

><td id="1355"><a href="#1355">1355</a></td></tr
><tr id="gr_svn141_1356"

><td id="1356"><a href="#1356">1356</a></td></tr
><tr id="gr_svn141_1357"

><td id="1357"><a href="#1357">1357</a></td></tr
><tr id="gr_svn141_1358"

><td id="1358"><a href="#1358">1358</a></td></tr
><tr id="gr_svn141_1359"

><td id="1359"><a href="#1359">1359</a></td></tr
><tr id="gr_svn141_1360"

><td id="1360"><a href="#1360">1360</a></td></tr
><tr id="gr_svn141_1361"

><td id="1361"><a href="#1361">1361</a></td></tr
><tr id="gr_svn141_1362"

><td id="1362"><a href="#1362">1362</a></td></tr
><tr id="gr_svn141_1363"

><td id="1363"><a href="#1363">1363</a></td></tr
><tr id="gr_svn141_1364"

><td id="1364"><a href="#1364">1364</a></td></tr
><tr id="gr_svn141_1365"

><td id="1365"><a href="#1365">1365</a></td></tr
><tr id="gr_svn141_1366"

><td id="1366"><a href="#1366">1366</a></td></tr
><tr id="gr_svn141_1367"

><td id="1367"><a href="#1367">1367</a></td></tr
><tr id="gr_svn141_1368"

><td id="1368"><a href="#1368">1368</a></td></tr
><tr id="gr_svn141_1369"

><td id="1369"><a href="#1369">1369</a></td></tr
><tr id="gr_svn141_1370"

><td id="1370"><a href="#1370">1370</a></td></tr
><tr id="gr_svn141_1371"

><td id="1371"><a href="#1371">1371</a></td></tr
><tr id="gr_svn141_1372"

><td id="1372"><a href="#1372">1372</a></td></tr
><tr id="gr_svn141_1373"

><td id="1373"><a href="#1373">1373</a></td></tr
><tr id="gr_svn141_1374"

><td id="1374"><a href="#1374">1374</a></td></tr
><tr id="gr_svn141_1375"

><td id="1375"><a href="#1375">1375</a></td></tr
><tr id="gr_svn141_1376"

><td id="1376"><a href="#1376">1376</a></td></tr
><tr id="gr_svn141_1377"

><td id="1377"><a href="#1377">1377</a></td></tr
><tr id="gr_svn141_1378"

><td id="1378"><a href="#1378">1378</a></td></tr
><tr id="gr_svn141_1379"

><td id="1379"><a href="#1379">1379</a></td></tr
><tr id="gr_svn141_1380"

><td id="1380"><a href="#1380">1380</a></td></tr
><tr id="gr_svn141_1381"

><td id="1381"><a href="#1381">1381</a></td></tr
><tr id="gr_svn141_1382"

><td id="1382"><a href="#1382">1382</a></td></tr
><tr id="gr_svn141_1383"

><td id="1383"><a href="#1383">1383</a></td></tr
><tr id="gr_svn141_1384"

><td id="1384"><a href="#1384">1384</a></td></tr
><tr id="gr_svn141_1385"

><td id="1385"><a href="#1385">1385</a></td></tr
><tr id="gr_svn141_1386"

><td id="1386"><a href="#1386">1386</a></td></tr
><tr id="gr_svn141_1387"

><td id="1387"><a href="#1387">1387</a></td></tr
><tr id="gr_svn141_1388"

><td id="1388"><a href="#1388">1388</a></td></tr
><tr id="gr_svn141_1389"

><td id="1389"><a href="#1389">1389</a></td></tr
><tr id="gr_svn141_1390"

><td id="1390"><a href="#1390">1390</a></td></tr
><tr id="gr_svn141_1391"

><td id="1391"><a href="#1391">1391</a></td></tr
><tr id="gr_svn141_1392"

><td id="1392"><a href="#1392">1392</a></td></tr
><tr id="gr_svn141_1393"

><td id="1393"><a href="#1393">1393</a></td></tr
><tr id="gr_svn141_1394"

><td id="1394"><a href="#1394">1394</a></td></tr
><tr id="gr_svn141_1395"

><td id="1395"><a href="#1395">1395</a></td></tr
><tr id="gr_svn141_1396"

><td id="1396"><a href="#1396">1396</a></td></tr
><tr id="gr_svn141_1397"

><td id="1397"><a href="#1397">1397</a></td></tr
><tr id="gr_svn141_1398"

><td id="1398"><a href="#1398">1398</a></td></tr
><tr id="gr_svn141_1399"

><td id="1399"><a href="#1399">1399</a></td></tr
><tr id="gr_svn141_1400"

><td id="1400"><a href="#1400">1400</a></td></tr
><tr id="gr_svn141_1401"

><td id="1401"><a href="#1401">1401</a></td></tr
><tr id="gr_svn141_1402"

><td id="1402"><a href="#1402">1402</a></td></tr
><tr id="gr_svn141_1403"

><td id="1403"><a href="#1403">1403</a></td></tr
><tr id="gr_svn141_1404"

><td id="1404"><a href="#1404">1404</a></td></tr
><tr id="gr_svn141_1405"

><td id="1405"><a href="#1405">1405</a></td></tr
><tr id="gr_svn141_1406"

><td id="1406"><a href="#1406">1406</a></td></tr
><tr id="gr_svn141_1407"

><td id="1407"><a href="#1407">1407</a></td></tr
><tr id="gr_svn141_1408"

><td id="1408"><a href="#1408">1408</a></td></tr
><tr id="gr_svn141_1409"

><td id="1409"><a href="#1409">1409</a></td></tr
><tr id="gr_svn141_1410"

><td id="1410"><a href="#1410">1410</a></td></tr
><tr id="gr_svn141_1411"

><td id="1411"><a href="#1411">1411</a></td></tr
><tr id="gr_svn141_1412"

><td id="1412"><a href="#1412">1412</a></td></tr
><tr id="gr_svn141_1413"

><td id="1413"><a href="#1413">1413</a></td></tr
><tr id="gr_svn141_1414"

><td id="1414"><a href="#1414">1414</a></td></tr
><tr id="gr_svn141_1415"

><td id="1415"><a href="#1415">1415</a></td></tr
><tr id="gr_svn141_1416"

><td id="1416"><a href="#1416">1416</a></td></tr
><tr id="gr_svn141_1417"

><td id="1417"><a href="#1417">1417</a></td></tr
><tr id="gr_svn141_1418"

><td id="1418"><a href="#1418">1418</a></td></tr
><tr id="gr_svn141_1419"

><td id="1419"><a href="#1419">1419</a></td></tr
><tr id="gr_svn141_1420"

><td id="1420"><a href="#1420">1420</a></td></tr
><tr id="gr_svn141_1421"

><td id="1421"><a href="#1421">1421</a></td></tr
><tr id="gr_svn141_1422"

><td id="1422"><a href="#1422">1422</a></td></tr
><tr id="gr_svn141_1423"

><td id="1423"><a href="#1423">1423</a></td></tr
><tr id="gr_svn141_1424"

><td id="1424"><a href="#1424">1424</a></td></tr
><tr id="gr_svn141_1425"

><td id="1425"><a href="#1425">1425</a></td></tr
><tr id="gr_svn141_1426"

><td id="1426"><a href="#1426">1426</a></td></tr
><tr id="gr_svn141_1427"

><td id="1427"><a href="#1427">1427</a></td></tr
><tr id="gr_svn141_1428"

><td id="1428"><a href="#1428">1428</a></td></tr
><tr id="gr_svn141_1429"

><td id="1429"><a href="#1429">1429</a></td></tr
><tr id="gr_svn141_1430"

><td id="1430"><a href="#1430">1430</a></td></tr
><tr id="gr_svn141_1431"

><td id="1431"><a href="#1431">1431</a></td></tr
><tr id="gr_svn141_1432"

><td id="1432"><a href="#1432">1432</a></td></tr
><tr id="gr_svn141_1433"

><td id="1433"><a href="#1433">1433</a></td></tr
><tr id="gr_svn141_1434"

><td id="1434"><a href="#1434">1434</a></td></tr
><tr id="gr_svn141_1435"

><td id="1435"><a href="#1435">1435</a></td></tr
><tr id="gr_svn141_1436"

><td id="1436"><a href="#1436">1436</a></td></tr
><tr id="gr_svn141_1437"

><td id="1437"><a href="#1437">1437</a></td></tr
><tr id="gr_svn141_1438"

><td id="1438"><a href="#1438">1438</a></td></tr
><tr id="gr_svn141_1439"

><td id="1439"><a href="#1439">1439</a></td></tr
><tr id="gr_svn141_1440"

><td id="1440"><a href="#1440">1440</a></td></tr
><tr id="gr_svn141_1441"

><td id="1441"><a href="#1441">1441</a></td></tr
><tr id="gr_svn141_1442"

><td id="1442"><a href="#1442">1442</a></td></tr
><tr id="gr_svn141_1443"

><td id="1443"><a href="#1443">1443</a></td></tr
><tr id="gr_svn141_1444"

><td id="1444"><a href="#1444">1444</a></td></tr
><tr id="gr_svn141_1445"

><td id="1445"><a href="#1445">1445</a></td></tr
><tr id="gr_svn141_1446"

><td id="1446"><a href="#1446">1446</a></td></tr
><tr id="gr_svn141_1447"

><td id="1447"><a href="#1447">1447</a></td></tr
><tr id="gr_svn141_1448"

><td id="1448"><a href="#1448">1448</a></td></tr
><tr id="gr_svn141_1449"

><td id="1449"><a href="#1449">1449</a></td></tr
><tr id="gr_svn141_1450"

><td id="1450"><a href="#1450">1450</a></td></tr
><tr id="gr_svn141_1451"

><td id="1451"><a href="#1451">1451</a></td></tr
><tr id="gr_svn141_1452"

><td id="1452"><a href="#1452">1452</a></td></tr
><tr id="gr_svn141_1453"

><td id="1453"><a href="#1453">1453</a></td></tr
><tr id="gr_svn141_1454"

><td id="1454"><a href="#1454">1454</a></td></tr
><tr id="gr_svn141_1455"

><td id="1455"><a href="#1455">1455</a></td></tr
><tr id="gr_svn141_1456"

><td id="1456"><a href="#1456">1456</a></td></tr
><tr id="gr_svn141_1457"

><td id="1457"><a href="#1457">1457</a></td></tr
><tr id="gr_svn141_1458"

><td id="1458"><a href="#1458">1458</a></td></tr
><tr id="gr_svn141_1459"

><td id="1459"><a href="#1459">1459</a></td></tr
><tr id="gr_svn141_1460"

><td id="1460"><a href="#1460">1460</a></td></tr
><tr id="gr_svn141_1461"

><td id="1461"><a href="#1461">1461</a></td></tr
><tr id="gr_svn141_1462"

><td id="1462"><a href="#1462">1462</a></td></tr
><tr id="gr_svn141_1463"

><td id="1463"><a href="#1463">1463</a></td></tr
><tr id="gr_svn141_1464"

><td id="1464"><a href="#1464">1464</a></td></tr
><tr id="gr_svn141_1465"

><td id="1465"><a href="#1465">1465</a></td></tr
><tr id="gr_svn141_1466"

><td id="1466"><a href="#1466">1466</a></td></tr
><tr id="gr_svn141_1467"

><td id="1467"><a href="#1467">1467</a></td></tr
><tr id="gr_svn141_1468"

><td id="1468"><a href="#1468">1468</a></td></tr
><tr id="gr_svn141_1469"

><td id="1469"><a href="#1469">1469</a></td></tr
><tr id="gr_svn141_1470"

><td id="1470"><a href="#1470">1470</a></td></tr
><tr id="gr_svn141_1471"

><td id="1471"><a href="#1471">1471</a></td></tr
><tr id="gr_svn141_1472"

><td id="1472"><a href="#1472">1472</a></td></tr
><tr id="gr_svn141_1473"

><td id="1473"><a href="#1473">1473</a></td></tr
><tr id="gr_svn141_1474"

><td id="1474"><a href="#1474">1474</a></td></tr
><tr id="gr_svn141_1475"

><td id="1475"><a href="#1475">1475</a></td></tr
><tr id="gr_svn141_1476"

><td id="1476"><a href="#1476">1476</a></td></tr
><tr id="gr_svn141_1477"

><td id="1477"><a href="#1477">1477</a></td></tr
><tr id="gr_svn141_1478"

><td id="1478"><a href="#1478">1478</a></td></tr
><tr id="gr_svn141_1479"

><td id="1479"><a href="#1479">1479</a></td></tr
><tr id="gr_svn141_1480"

><td id="1480"><a href="#1480">1480</a></td></tr
><tr id="gr_svn141_1481"

><td id="1481"><a href="#1481">1481</a></td></tr
><tr id="gr_svn141_1482"

><td id="1482"><a href="#1482">1482</a></td></tr
><tr id="gr_svn141_1483"

><td id="1483"><a href="#1483">1483</a></td></tr
><tr id="gr_svn141_1484"

><td id="1484"><a href="#1484">1484</a></td></tr
><tr id="gr_svn141_1485"

><td id="1485"><a href="#1485">1485</a></td></tr
><tr id="gr_svn141_1486"

><td id="1486"><a href="#1486">1486</a></td></tr
><tr id="gr_svn141_1487"

><td id="1487"><a href="#1487">1487</a></td></tr
><tr id="gr_svn141_1488"

><td id="1488"><a href="#1488">1488</a></td></tr
><tr id="gr_svn141_1489"

><td id="1489"><a href="#1489">1489</a></td></tr
><tr id="gr_svn141_1490"

><td id="1490"><a href="#1490">1490</a></td></tr
><tr id="gr_svn141_1491"

><td id="1491"><a href="#1491">1491</a></td></tr
><tr id="gr_svn141_1492"

><td id="1492"><a href="#1492">1492</a></td></tr
><tr id="gr_svn141_1493"

><td id="1493"><a href="#1493">1493</a></td></tr
><tr id="gr_svn141_1494"

><td id="1494"><a href="#1494">1494</a></td></tr
><tr id="gr_svn141_1495"

><td id="1495"><a href="#1495">1495</a></td></tr
><tr id="gr_svn141_1496"

><td id="1496"><a href="#1496">1496</a></td></tr
><tr id="gr_svn141_1497"

><td id="1497"><a href="#1497">1497</a></td></tr
><tr id="gr_svn141_1498"

><td id="1498"><a href="#1498">1498</a></td></tr
><tr id="gr_svn141_1499"

><td id="1499"><a href="#1499">1499</a></td></tr
><tr id="gr_svn141_1500"

><td id="1500"><a href="#1500">1500</a></td></tr
><tr id="gr_svn141_1501"

><td id="1501"><a href="#1501">1501</a></td></tr
><tr id="gr_svn141_1502"

><td id="1502"><a href="#1502">1502</a></td></tr
><tr id="gr_svn141_1503"

><td id="1503"><a href="#1503">1503</a></td></tr
><tr id="gr_svn141_1504"

><td id="1504"><a href="#1504">1504</a></td></tr
><tr id="gr_svn141_1505"

><td id="1505"><a href="#1505">1505</a></td></tr
><tr id="gr_svn141_1506"

><td id="1506"><a href="#1506">1506</a></td></tr
><tr id="gr_svn141_1507"

><td id="1507"><a href="#1507">1507</a></td></tr
><tr id="gr_svn141_1508"

><td id="1508"><a href="#1508">1508</a></td></tr
><tr id="gr_svn141_1509"

><td id="1509"><a href="#1509">1509</a></td></tr
><tr id="gr_svn141_1510"

><td id="1510"><a href="#1510">1510</a></td></tr
><tr id="gr_svn141_1511"

><td id="1511"><a href="#1511">1511</a></td></tr
><tr id="gr_svn141_1512"

><td id="1512"><a href="#1512">1512</a></td></tr
><tr id="gr_svn141_1513"

><td id="1513"><a href="#1513">1513</a></td></tr
><tr id="gr_svn141_1514"

><td id="1514"><a href="#1514">1514</a></td></tr
><tr id="gr_svn141_1515"

><td id="1515"><a href="#1515">1515</a></td></tr
><tr id="gr_svn141_1516"

><td id="1516"><a href="#1516">1516</a></td></tr
><tr id="gr_svn141_1517"

><td id="1517"><a href="#1517">1517</a></td></tr
><tr id="gr_svn141_1518"

><td id="1518"><a href="#1518">1518</a></td></tr
><tr id="gr_svn141_1519"

><td id="1519"><a href="#1519">1519</a></td></tr
><tr id="gr_svn141_1520"

><td id="1520"><a href="#1520">1520</a></td></tr
><tr id="gr_svn141_1521"

><td id="1521"><a href="#1521">1521</a></td></tr
><tr id="gr_svn141_1522"

><td id="1522"><a href="#1522">1522</a></td></tr
><tr id="gr_svn141_1523"

><td id="1523"><a href="#1523">1523</a></td></tr
><tr id="gr_svn141_1524"

><td id="1524"><a href="#1524">1524</a></td></tr
><tr id="gr_svn141_1525"

><td id="1525"><a href="#1525">1525</a></td></tr
><tr id="gr_svn141_1526"

><td id="1526"><a href="#1526">1526</a></td></tr
><tr id="gr_svn141_1527"

><td id="1527"><a href="#1527">1527</a></td></tr
><tr id="gr_svn141_1528"

><td id="1528"><a href="#1528">1528</a></td></tr
><tr id="gr_svn141_1529"

><td id="1529"><a href="#1529">1529</a></td></tr
><tr id="gr_svn141_1530"

><td id="1530"><a href="#1530">1530</a></td></tr
><tr id="gr_svn141_1531"

><td id="1531"><a href="#1531">1531</a></td></tr
><tr id="gr_svn141_1532"

><td id="1532"><a href="#1532">1532</a></td></tr
><tr id="gr_svn141_1533"

><td id="1533"><a href="#1533">1533</a></td></tr
><tr id="gr_svn141_1534"

><td id="1534"><a href="#1534">1534</a></td></tr
><tr id="gr_svn141_1535"

><td id="1535"><a href="#1535">1535</a></td></tr
><tr id="gr_svn141_1536"

><td id="1536"><a href="#1536">1536</a></td></tr
><tr id="gr_svn141_1537"

><td id="1537"><a href="#1537">1537</a></td></tr
><tr id="gr_svn141_1538"

><td id="1538"><a href="#1538">1538</a></td></tr
><tr id="gr_svn141_1539"

><td id="1539"><a href="#1539">1539</a></td></tr
><tr id="gr_svn141_1540"

><td id="1540"><a href="#1540">1540</a></td></tr
><tr id="gr_svn141_1541"

><td id="1541"><a href="#1541">1541</a></td></tr
><tr id="gr_svn141_1542"

><td id="1542"><a href="#1542">1542</a></td></tr
><tr id="gr_svn141_1543"

><td id="1543"><a href="#1543">1543</a></td></tr
><tr id="gr_svn141_1544"

><td id="1544"><a href="#1544">1544</a></td></tr
><tr id="gr_svn141_1545"

><td id="1545"><a href="#1545">1545</a></td></tr
><tr id="gr_svn141_1546"

><td id="1546"><a href="#1546">1546</a></td></tr
><tr id="gr_svn141_1547"

><td id="1547"><a href="#1547">1547</a></td></tr
><tr id="gr_svn141_1548"

><td id="1548"><a href="#1548">1548</a></td></tr
><tr id="gr_svn141_1549"

><td id="1549"><a href="#1549">1549</a></td></tr
><tr id="gr_svn141_1550"

><td id="1550"><a href="#1550">1550</a></td></tr
><tr id="gr_svn141_1551"

><td id="1551"><a href="#1551">1551</a></td></tr
><tr id="gr_svn141_1552"

><td id="1552"><a href="#1552">1552</a></td></tr
><tr id="gr_svn141_1553"

><td id="1553"><a href="#1553">1553</a></td></tr
><tr id="gr_svn141_1554"

><td id="1554"><a href="#1554">1554</a></td></tr
><tr id="gr_svn141_1555"

><td id="1555"><a href="#1555">1555</a></td></tr
><tr id="gr_svn141_1556"

><td id="1556"><a href="#1556">1556</a></td></tr
><tr id="gr_svn141_1557"

><td id="1557"><a href="#1557">1557</a></td></tr
><tr id="gr_svn141_1558"

><td id="1558"><a href="#1558">1558</a></td></tr
><tr id="gr_svn141_1559"

><td id="1559"><a href="#1559">1559</a></td></tr
><tr id="gr_svn141_1560"

><td id="1560"><a href="#1560">1560</a></td></tr
><tr id="gr_svn141_1561"

><td id="1561"><a href="#1561">1561</a></td></tr
><tr id="gr_svn141_1562"

><td id="1562"><a href="#1562">1562</a></td></tr
><tr id="gr_svn141_1563"

><td id="1563"><a href="#1563">1563</a></td></tr
><tr id="gr_svn141_1564"

><td id="1564"><a href="#1564">1564</a></td></tr
><tr id="gr_svn141_1565"

><td id="1565"><a href="#1565">1565</a></td></tr
><tr id="gr_svn141_1566"

><td id="1566"><a href="#1566">1566</a></td></tr
><tr id="gr_svn141_1567"

><td id="1567"><a href="#1567">1567</a></td></tr
><tr id="gr_svn141_1568"

><td id="1568"><a href="#1568">1568</a></td></tr
><tr id="gr_svn141_1569"

><td id="1569"><a href="#1569">1569</a></td></tr
><tr id="gr_svn141_1570"

><td id="1570"><a href="#1570">1570</a></td></tr
><tr id="gr_svn141_1571"

><td id="1571"><a href="#1571">1571</a></td></tr
><tr id="gr_svn141_1572"

><td id="1572"><a href="#1572">1572</a></td></tr
><tr id="gr_svn141_1573"

><td id="1573"><a href="#1573">1573</a></td></tr
><tr id="gr_svn141_1574"

><td id="1574"><a href="#1574">1574</a></td></tr
><tr id="gr_svn141_1575"

><td id="1575"><a href="#1575">1575</a></td></tr
><tr id="gr_svn141_1576"

><td id="1576"><a href="#1576">1576</a></td></tr
><tr id="gr_svn141_1577"

><td id="1577"><a href="#1577">1577</a></td></tr
><tr id="gr_svn141_1578"

><td id="1578"><a href="#1578">1578</a></td></tr
><tr id="gr_svn141_1579"

><td id="1579"><a href="#1579">1579</a></td></tr
><tr id="gr_svn141_1580"

><td id="1580"><a href="#1580">1580</a></td></tr
><tr id="gr_svn141_1581"

><td id="1581"><a href="#1581">1581</a></td></tr
><tr id="gr_svn141_1582"

><td id="1582"><a href="#1582">1582</a></td></tr
><tr id="gr_svn141_1583"

><td id="1583"><a href="#1583">1583</a></td></tr
><tr id="gr_svn141_1584"

><td id="1584"><a href="#1584">1584</a></td></tr
><tr id="gr_svn141_1585"

><td id="1585"><a href="#1585">1585</a></td></tr
><tr id="gr_svn141_1586"

><td id="1586"><a href="#1586">1586</a></td></tr
><tr id="gr_svn141_1587"

><td id="1587"><a href="#1587">1587</a></td></tr
><tr id="gr_svn141_1588"

><td id="1588"><a href="#1588">1588</a></td></tr
><tr id="gr_svn141_1589"

><td id="1589"><a href="#1589">1589</a></td></tr
><tr id="gr_svn141_1590"

><td id="1590"><a href="#1590">1590</a></td></tr
><tr id="gr_svn141_1591"

><td id="1591"><a href="#1591">1591</a></td></tr
><tr id="gr_svn141_1592"

><td id="1592"><a href="#1592">1592</a></td></tr
><tr id="gr_svn141_1593"

><td id="1593"><a href="#1593">1593</a></td></tr
><tr id="gr_svn141_1594"

><td id="1594"><a href="#1594">1594</a></td></tr
><tr id="gr_svn141_1595"

><td id="1595"><a href="#1595">1595</a></td></tr
><tr id="gr_svn141_1596"

><td id="1596"><a href="#1596">1596</a></td></tr
><tr id="gr_svn141_1597"

><td id="1597"><a href="#1597">1597</a></td></tr
><tr id="gr_svn141_1598"

><td id="1598"><a href="#1598">1598</a></td></tr
><tr id="gr_svn141_1599"

><td id="1599"><a href="#1599">1599</a></td></tr
><tr id="gr_svn141_1600"

><td id="1600"><a href="#1600">1600</a></td></tr
><tr id="gr_svn141_1601"

><td id="1601"><a href="#1601">1601</a></td></tr
><tr id="gr_svn141_1602"

><td id="1602"><a href="#1602">1602</a></td></tr
><tr id="gr_svn141_1603"

><td id="1603"><a href="#1603">1603</a></td></tr
><tr id="gr_svn141_1604"

><td id="1604"><a href="#1604">1604</a></td></tr
><tr id="gr_svn141_1605"

><td id="1605"><a href="#1605">1605</a></td></tr
><tr id="gr_svn141_1606"

><td id="1606"><a href="#1606">1606</a></td></tr
><tr id="gr_svn141_1607"

><td id="1607"><a href="#1607">1607</a></td></tr
><tr id="gr_svn141_1608"

><td id="1608"><a href="#1608">1608</a></td></tr
><tr id="gr_svn141_1609"

><td id="1609"><a href="#1609">1609</a></td></tr
><tr id="gr_svn141_1610"

><td id="1610"><a href="#1610">1610</a></td></tr
><tr id="gr_svn141_1611"

><td id="1611"><a href="#1611">1611</a></td></tr
><tr id="gr_svn141_1612"

><td id="1612"><a href="#1612">1612</a></td></tr
><tr id="gr_svn141_1613"

><td id="1613"><a href="#1613">1613</a></td></tr
><tr id="gr_svn141_1614"

><td id="1614"><a href="#1614">1614</a></td></tr
><tr id="gr_svn141_1615"

><td id="1615"><a href="#1615">1615</a></td></tr
><tr id="gr_svn141_1616"

><td id="1616"><a href="#1616">1616</a></td></tr
><tr id="gr_svn141_1617"

><td id="1617"><a href="#1617">1617</a></td></tr
><tr id="gr_svn141_1618"

><td id="1618"><a href="#1618">1618</a></td></tr
><tr id="gr_svn141_1619"

><td id="1619"><a href="#1619">1619</a></td></tr
><tr id="gr_svn141_1620"

><td id="1620"><a href="#1620">1620</a></td></tr
><tr id="gr_svn141_1621"

><td id="1621"><a href="#1621">1621</a></td></tr
><tr id="gr_svn141_1622"

><td id="1622"><a href="#1622">1622</a></td></tr
><tr id="gr_svn141_1623"

><td id="1623"><a href="#1623">1623</a></td></tr
><tr id="gr_svn141_1624"

><td id="1624"><a href="#1624">1624</a></td></tr
><tr id="gr_svn141_1625"

><td id="1625"><a href="#1625">1625</a></td></tr
><tr id="gr_svn141_1626"

><td id="1626"><a href="#1626">1626</a></td></tr
><tr id="gr_svn141_1627"

><td id="1627"><a href="#1627">1627</a></td></tr
><tr id="gr_svn141_1628"

><td id="1628"><a href="#1628">1628</a></td></tr
><tr id="gr_svn141_1629"

><td id="1629"><a href="#1629">1629</a></td></tr
><tr id="gr_svn141_1630"

><td id="1630"><a href="#1630">1630</a></td></tr
><tr id="gr_svn141_1631"

><td id="1631"><a href="#1631">1631</a></td></tr
><tr id="gr_svn141_1632"

><td id="1632"><a href="#1632">1632</a></td></tr
><tr id="gr_svn141_1633"

><td id="1633"><a href="#1633">1633</a></td></tr
><tr id="gr_svn141_1634"

><td id="1634"><a href="#1634">1634</a></td></tr
><tr id="gr_svn141_1635"

><td id="1635"><a href="#1635">1635</a></td></tr
><tr id="gr_svn141_1636"

><td id="1636"><a href="#1636">1636</a></td></tr
><tr id="gr_svn141_1637"

><td id="1637"><a href="#1637">1637</a></td></tr
><tr id="gr_svn141_1638"

><td id="1638"><a href="#1638">1638</a></td></tr
><tr id="gr_svn141_1639"

><td id="1639"><a href="#1639">1639</a></td></tr
><tr id="gr_svn141_1640"

><td id="1640"><a href="#1640">1640</a></td></tr
><tr id="gr_svn141_1641"

><td id="1641"><a href="#1641">1641</a></td></tr
><tr id="gr_svn141_1642"

><td id="1642"><a href="#1642">1642</a></td></tr
><tr id="gr_svn141_1643"

><td id="1643"><a href="#1643">1643</a></td></tr
><tr id="gr_svn141_1644"

><td id="1644"><a href="#1644">1644</a></td></tr
><tr id="gr_svn141_1645"

><td id="1645"><a href="#1645">1645</a></td></tr
><tr id="gr_svn141_1646"

><td id="1646"><a href="#1646">1646</a></td></tr
><tr id="gr_svn141_1647"

><td id="1647"><a href="#1647">1647</a></td></tr
><tr id="gr_svn141_1648"

><td id="1648"><a href="#1648">1648</a></td></tr
><tr id="gr_svn141_1649"

><td id="1649"><a href="#1649">1649</a></td></tr
><tr id="gr_svn141_1650"

><td id="1650"><a href="#1650">1650</a></td></tr
><tr id="gr_svn141_1651"

><td id="1651"><a href="#1651">1651</a></td></tr
><tr id="gr_svn141_1652"

><td id="1652"><a href="#1652">1652</a></td></tr
><tr id="gr_svn141_1653"

><td id="1653"><a href="#1653">1653</a></td></tr
><tr id="gr_svn141_1654"

><td id="1654"><a href="#1654">1654</a></td></tr
><tr id="gr_svn141_1655"

><td id="1655"><a href="#1655">1655</a></td></tr
><tr id="gr_svn141_1656"

><td id="1656"><a href="#1656">1656</a></td></tr
><tr id="gr_svn141_1657"

><td id="1657"><a href="#1657">1657</a></td></tr
><tr id="gr_svn141_1658"

><td id="1658"><a href="#1658">1658</a></td></tr
><tr id="gr_svn141_1659"

><td id="1659"><a href="#1659">1659</a></td></tr
><tr id="gr_svn141_1660"

><td id="1660"><a href="#1660">1660</a></td></tr
><tr id="gr_svn141_1661"

><td id="1661"><a href="#1661">1661</a></td></tr
><tr id="gr_svn141_1662"

><td id="1662"><a href="#1662">1662</a></td></tr
><tr id="gr_svn141_1663"

><td id="1663"><a href="#1663">1663</a></td></tr
><tr id="gr_svn141_1664"

><td id="1664"><a href="#1664">1664</a></td></tr
><tr id="gr_svn141_1665"

><td id="1665"><a href="#1665">1665</a></td></tr
><tr id="gr_svn141_1666"

><td id="1666"><a href="#1666">1666</a></td></tr
><tr id="gr_svn141_1667"

><td id="1667"><a href="#1667">1667</a></td></tr
><tr id="gr_svn141_1668"

><td id="1668"><a href="#1668">1668</a></td></tr
><tr id="gr_svn141_1669"

><td id="1669"><a href="#1669">1669</a></td></tr
><tr id="gr_svn141_1670"

><td id="1670"><a href="#1670">1670</a></td></tr
><tr id="gr_svn141_1671"

><td id="1671"><a href="#1671">1671</a></td></tr
><tr id="gr_svn141_1672"

><td id="1672"><a href="#1672">1672</a></td></tr
><tr id="gr_svn141_1673"

><td id="1673"><a href="#1673">1673</a></td></tr
><tr id="gr_svn141_1674"

><td id="1674"><a href="#1674">1674</a></td></tr
><tr id="gr_svn141_1675"

><td id="1675"><a href="#1675">1675</a></td></tr
><tr id="gr_svn141_1676"

><td id="1676"><a href="#1676">1676</a></td></tr
><tr id="gr_svn141_1677"

><td id="1677"><a href="#1677">1677</a></td></tr
><tr id="gr_svn141_1678"

><td id="1678"><a href="#1678">1678</a></td></tr
><tr id="gr_svn141_1679"

><td id="1679"><a href="#1679">1679</a></td></tr
><tr id="gr_svn141_1680"

><td id="1680"><a href="#1680">1680</a></td></tr
><tr id="gr_svn141_1681"

><td id="1681"><a href="#1681">1681</a></td></tr
><tr id="gr_svn141_1682"

><td id="1682"><a href="#1682">1682</a></td></tr
><tr id="gr_svn141_1683"

><td id="1683"><a href="#1683">1683</a></td></tr
><tr id="gr_svn141_1684"

><td id="1684"><a href="#1684">1684</a></td></tr
><tr id="gr_svn141_1685"

><td id="1685"><a href="#1685">1685</a></td></tr
><tr id="gr_svn141_1686"

><td id="1686"><a href="#1686">1686</a></td></tr
><tr id="gr_svn141_1687"

><td id="1687"><a href="#1687">1687</a></td></tr
><tr id="gr_svn141_1688"

><td id="1688"><a href="#1688">1688</a></td></tr
><tr id="gr_svn141_1689"

><td id="1689"><a href="#1689">1689</a></td></tr
><tr id="gr_svn141_1690"

><td id="1690"><a href="#1690">1690</a></td></tr
><tr id="gr_svn141_1691"

><td id="1691"><a href="#1691">1691</a></td></tr
><tr id="gr_svn141_1692"

><td id="1692"><a href="#1692">1692</a></td></tr
><tr id="gr_svn141_1693"

><td id="1693"><a href="#1693">1693</a></td></tr
><tr id="gr_svn141_1694"

><td id="1694"><a href="#1694">1694</a></td></tr
><tr id="gr_svn141_1695"

><td id="1695"><a href="#1695">1695</a></td></tr
><tr id="gr_svn141_1696"

><td id="1696"><a href="#1696">1696</a></td></tr
><tr id="gr_svn141_1697"

><td id="1697"><a href="#1697">1697</a></td></tr
><tr id="gr_svn141_1698"

><td id="1698"><a href="#1698">1698</a></td></tr
><tr id="gr_svn141_1699"

><td id="1699"><a href="#1699">1699</a></td></tr
><tr id="gr_svn141_1700"

><td id="1700"><a href="#1700">1700</a></td></tr
><tr id="gr_svn141_1701"

><td id="1701"><a href="#1701">1701</a></td></tr
><tr id="gr_svn141_1702"

><td id="1702"><a href="#1702">1702</a></td></tr
><tr id="gr_svn141_1703"

><td id="1703"><a href="#1703">1703</a></td></tr
><tr id="gr_svn141_1704"

><td id="1704"><a href="#1704">1704</a></td></tr
><tr id="gr_svn141_1705"

><td id="1705"><a href="#1705">1705</a></td></tr
><tr id="gr_svn141_1706"

><td id="1706"><a href="#1706">1706</a></td></tr
><tr id="gr_svn141_1707"

><td id="1707"><a href="#1707">1707</a></td></tr
><tr id="gr_svn141_1708"

><td id="1708"><a href="#1708">1708</a></td></tr
><tr id="gr_svn141_1709"

><td id="1709"><a href="#1709">1709</a></td></tr
><tr id="gr_svn141_1710"

><td id="1710"><a href="#1710">1710</a></td></tr
><tr id="gr_svn141_1711"

><td id="1711"><a href="#1711">1711</a></td></tr
><tr id="gr_svn141_1712"

><td id="1712"><a href="#1712">1712</a></td></tr
><tr id="gr_svn141_1713"

><td id="1713"><a href="#1713">1713</a></td></tr
><tr id="gr_svn141_1714"

><td id="1714"><a href="#1714">1714</a></td></tr
><tr id="gr_svn141_1715"

><td id="1715"><a href="#1715">1715</a></td></tr
><tr id="gr_svn141_1716"

><td id="1716"><a href="#1716">1716</a></td></tr
><tr id="gr_svn141_1717"

><td id="1717"><a href="#1717">1717</a></td></tr
><tr id="gr_svn141_1718"

><td id="1718"><a href="#1718">1718</a></td></tr
><tr id="gr_svn141_1719"

><td id="1719"><a href="#1719">1719</a></td></tr
><tr id="gr_svn141_1720"

><td id="1720"><a href="#1720">1720</a></td></tr
><tr id="gr_svn141_1721"

><td id="1721"><a href="#1721">1721</a></td></tr
><tr id="gr_svn141_1722"

><td id="1722"><a href="#1722">1722</a></td></tr
><tr id="gr_svn141_1723"

><td id="1723"><a href="#1723">1723</a></td></tr
><tr id="gr_svn141_1724"

><td id="1724"><a href="#1724">1724</a></td></tr
><tr id="gr_svn141_1725"

><td id="1725"><a href="#1725">1725</a></td></tr
><tr id="gr_svn141_1726"

><td id="1726"><a href="#1726">1726</a></td></tr
><tr id="gr_svn141_1727"

><td id="1727"><a href="#1727">1727</a></td></tr
><tr id="gr_svn141_1728"

><td id="1728"><a href="#1728">1728</a></td></tr
><tr id="gr_svn141_1729"

><td id="1729"><a href="#1729">1729</a></td></tr
><tr id="gr_svn141_1730"

><td id="1730"><a href="#1730">1730</a></td></tr
><tr id="gr_svn141_1731"

><td id="1731"><a href="#1731">1731</a></td></tr
><tr id="gr_svn141_1732"

><td id="1732"><a href="#1732">1732</a></td></tr
><tr id="gr_svn141_1733"

><td id="1733"><a href="#1733">1733</a></td></tr
><tr id="gr_svn141_1734"

><td id="1734"><a href="#1734">1734</a></td></tr
><tr id="gr_svn141_1735"

><td id="1735"><a href="#1735">1735</a></td></tr
><tr id="gr_svn141_1736"

><td id="1736"><a href="#1736">1736</a></td></tr
><tr id="gr_svn141_1737"

><td id="1737"><a href="#1737">1737</a></td></tr
><tr id="gr_svn141_1738"

><td id="1738"><a href="#1738">1738</a></td></tr
><tr id="gr_svn141_1739"

><td id="1739"><a href="#1739">1739</a></td></tr
><tr id="gr_svn141_1740"

><td id="1740"><a href="#1740">1740</a></td></tr
><tr id="gr_svn141_1741"

><td id="1741"><a href="#1741">1741</a></td></tr
><tr id="gr_svn141_1742"

><td id="1742"><a href="#1742">1742</a></td></tr
><tr id="gr_svn141_1743"

><td id="1743"><a href="#1743">1743</a></td></tr
><tr id="gr_svn141_1744"

><td id="1744"><a href="#1744">1744</a></td></tr
><tr id="gr_svn141_1745"

><td id="1745"><a href="#1745">1745</a></td></tr
><tr id="gr_svn141_1746"

><td id="1746"><a href="#1746">1746</a></td></tr
><tr id="gr_svn141_1747"

><td id="1747"><a href="#1747">1747</a></td></tr
><tr id="gr_svn141_1748"

><td id="1748"><a href="#1748">1748</a></td></tr
><tr id="gr_svn141_1749"

><td id="1749"><a href="#1749">1749</a></td></tr
><tr id="gr_svn141_1750"

><td id="1750"><a href="#1750">1750</a></td></tr
><tr id="gr_svn141_1751"

><td id="1751"><a href="#1751">1751</a></td></tr
><tr id="gr_svn141_1752"

><td id="1752"><a href="#1752">1752</a></td></tr
><tr id="gr_svn141_1753"

><td id="1753"><a href="#1753">1753</a></td></tr
><tr id="gr_svn141_1754"

><td id="1754"><a href="#1754">1754</a></td></tr
><tr id="gr_svn141_1755"

><td id="1755"><a href="#1755">1755</a></td></tr
><tr id="gr_svn141_1756"

><td id="1756"><a href="#1756">1756</a></td></tr
><tr id="gr_svn141_1757"

><td id="1757"><a href="#1757">1757</a></td></tr
><tr id="gr_svn141_1758"

><td id="1758"><a href="#1758">1758</a></td></tr
><tr id="gr_svn141_1759"

><td id="1759"><a href="#1759">1759</a></td></tr
><tr id="gr_svn141_1760"

><td id="1760"><a href="#1760">1760</a></td></tr
><tr id="gr_svn141_1761"

><td id="1761"><a href="#1761">1761</a></td></tr
><tr id="gr_svn141_1762"

><td id="1762"><a href="#1762">1762</a></td></tr
><tr id="gr_svn141_1763"

><td id="1763"><a href="#1763">1763</a></td></tr
><tr id="gr_svn141_1764"

><td id="1764"><a href="#1764">1764</a></td></tr
><tr id="gr_svn141_1765"

><td id="1765"><a href="#1765">1765</a></td></tr
><tr id="gr_svn141_1766"

><td id="1766"><a href="#1766">1766</a></td></tr
><tr id="gr_svn141_1767"

><td id="1767"><a href="#1767">1767</a></td></tr
><tr id="gr_svn141_1768"

><td id="1768"><a href="#1768">1768</a></td></tr
><tr id="gr_svn141_1769"

><td id="1769"><a href="#1769">1769</a></td></tr
><tr id="gr_svn141_1770"

><td id="1770"><a href="#1770">1770</a></td></tr
><tr id="gr_svn141_1771"

><td id="1771"><a href="#1771">1771</a></td></tr
><tr id="gr_svn141_1772"

><td id="1772"><a href="#1772">1772</a></td></tr
><tr id="gr_svn141_1773"

><td id="1773"><a href="#1773">1773</a></td></tr
><tr id="gr_svn141_1774"

><td id="1774"><a href="#1774">1774</a></td></tr
><tr id="gr_svn141_1775"

><td id="1775"><a href="#1775">1775</a></td></tr
><tr id="gr_svn141_1776"

><td id="1776"><a href="#1776">1776</a></td></tr
><tr id="gr_svn141_1777"

><td id="1777"><a href="#1777">1777</a></td></tr
><tr id="gr_svn141_1778"

><td id="1778"><a href="#1778">1778</a></td></tr
><tr id="gr_svn141_1779"

><td id="1779"><a href="#1779">1779</a></td></tr
><tr id="gr_svn141_1780"

><td id="1780"><a href="#1780">1780</a></td></tr
><tr id="gr_svn141_1781"

><td id="1781"><a href="#1781">1781</a></td></tr
><tr id="gr_svn141_1782"

><td id="1782"><a href="#1782">1782</a></td></tr
><tr id="gr_svn141_1783"

><td id="1783"><a href="#1783">1783</a></td></tr
><tr id="gr_svn141_1784"

><td id="1784"><a href="#1784">1784</a></td></tr
><tr id="gr_svn141_1785"

><td id="1785"><a href="#1785">1785</a></td></tr
><tr id="gr_svn141_1786"

><td id="1786"><a href="#1786">1786</a></td></tr
><tr id="gr_svn141_1787"

><td id="1787"><a href="#1787">1787</a></td></tr
><tr id="gr_svn141_1788"

><td id="1788"><a href="#1788">1788</a></td></tr
><tr id="gr_svn141_1789"

><td id="1789"><a href="#1789">1789</a></td></tr
><tr id="gr_svn141_1790"

><td id="1790"><a href="#1790">1790</a></td></tr
><tr id="gr_svn141_1791"

><td id="1791"><a href="#1791">1791</a></td></tr
><tr id="gr_svn141_1792"

><td id="1792"><a href="#1792">1792</a></td></tr
><tr id="gr_svn141_1793"

><td id="1793"><a href="#1793">1793</a></td></tr
><tr id="gr_svn141_1794"

><td id="1794"><a href="#1794">1794</a></td></tr
><tr id="gr_svn141_1795"

><td id="1795"><a href="#1795">1795</a></td></tr
><tr id="gr_svn141_1796"

><td id="1796"><a href="#1796">1796</a></td></tr
><tr id="gr_svn141_1797"

><td id="1797"><a href="#1797">1797</a></td></tr
><tr id="gr_svn141_1798"

><td id="1798"><a href="#1798">1798</a></td></tr
><tr id="gr_svn141_1799"

><td id="1799"><a href="#1799">1799</a></td></tr
><tr id="gr_svn141_1800"

><td id="1800"><a href="#1800">1800</a></td></tr
><tr id="gr_svn141_1801"

><td id="1801"><a href="#1801">1801</a></td></tr
><tr id="gr_svn141_1802"

><td id="1802"><a href="#1802">1802</a></td></tr
><tr id="gr_svn141_1803"

><td id="1803"><a href="#1803">1803</a></td></tr
><tr id="gr_svn141_1804"

><td id="1804"><a href="#1804">1804</a></td></tr
><tr id="gr_svn141_1805"

><td id="1805"><a href="#1805">1805</a></td></tr
><tr id="gr_svn141_1806"

><td id="1806"><a href="#1806">1806</a></td></tr
><tr id="gr_svn141_1807"

><td id="1807"><a href="#1807">1807</a></td></tr
><tr id="gr_svn141_1808"

><td id="1808"><a href="#1808">1808</a></td></tr
><tr id="gr_svn141_1809"

><td id="1809"><a href="#1809">1809</a></td></tr
><tr id="gr_svn141_1810"

><td id="1810"><a href="#1810">1810</a></td></tr
><tr id="gr_svn141_1811"

><td id="1811"><a href="#1811">1811</a></td></tr
><tr id="gr_svn141_1812"

><td id="1812"><a href="#1812">1812</a></td></tr
><tr id="gr_svn141_1813"

><td id="1813"><a href="#1813">1813</a></td></tr
><tr id="gr_svn141_1814"

><td id="1814"><a href="#1814">1814</a></td></tr
><tr id="gr_svn141_1815"

><td id="1815"><a href="#1815">1815</a></td></tr
><tr id="gr_svn141_1816"

><td id="1816"><a href="#1816">1816</a></td></tr
><tr id="gr_svn141_1817"

><td id="1817"><a href="#1817">1817</a></td></tr
><tr id="gr_svn141_1818"

><td id="1818"><a href="#1818">1818</a></td></tr
><tr id="gr_svn141_1819"

><td id="1819"><a href="#1819">1819</a></td></tr
><tr id="gr_svn141_1820"

><td id="1820"><a href="#1820">1820</a></td></tr
><tr id="gr_svn141_1821"

><td id="1821"><a href="#1821">1821</a></td></tr
><tr id="gr_svn141_1822"

><td id="1822"><a href="#1822">1822</a></td></tr
><tr id="gr_svn141_1823"

><td id="1823"><a href="#1823">1823</a></td></tr
><tr id="gr_svn141_1824"

><td id="1824"><a href="#1824">1824</a></td></tr
><tr id="gr_svn141_1825"

><td id="1825"><a href="#1825">1825</a></td></tr
><tr id="gr_svn141_1826"

><td id="1826"><a href="#1826">1826</a></td></tr
><tr id="gr_svn141_1827"

><td id="1827"><a href="#1827">1827</a></td></tr
><tr id="gr_svn141_1828"

><td id="1828"><a href="#1828">1828</a></td></tr
><tr id="gr_svn141_1829"

><td id="1829"><a href="#1829">1829</a></td></tr
><tr id="gr_svn141_1830"

><td id="1830"><a href="#1830">1830</a></td></tr
><tr id="gr_svn141_1831"

><td id="1831"><a href="#1831">1831</a></td></tr
><tr id="gr_svn141_1832"

><td id="1832"><a href="#1832">1832</a></td></tr
><tr id="gr_svn141_1833"

><td id="1833"><a href="#1833">1833</a></td></tr
><tr id="gr_svn141_1834"

><td id="1834"><a href="#1834">1834</a></td></tr
><tr id="gr_svn141_1835"

><td id="1835"><a href="#1835">1835</a></td></tr
><tr id="gr_svn141_1836"

><td id="1836"><a href="#1836">1836</a></td></tr
><tr id="gr_svn141_1837"

><td id="1837"><a href="#1837">1837</a></td></tr
><tr id="gr_svn141_1838"

><td id="1838"><a href="#1838">1838</a></td></tr
><tr id="gr_svn141_1839"

><td id="1839"><a href="#1839">1839</a></td></tr
><tr id="gr_svn141_1840"

><td id="1840"><a href="#1840">1840</a></td></tr
><tr id="gr_svn141_1841"

><td id="1841"><a href="#1841">1841</a></td></tr
><tr id="gr_svn141_1842"

><td id="1842"><a href="#1842">1842</a></td></tr
><tr id="gr_svn141_1843"

><td id="1843"><a href="#1843">1843</a></td></tr
><tr id="gr_svn141_1844"

><td id="1844"><a href="#1844">1844</a></td></tr
><tr id="gr_svn141_1845"

><td id="1845"><a href="#1845">1845</a></td></tr
><tr id="gr_svn141_1846"

><td id="1846"><a href="#1846">1846</a></td></tr
><tr id="gr_svn141_1847"

><td id="1847"><a href="#1847">1847</a></td></tr
><tr id="gr_svn141_1848"

><td id="1848"><a href="#1848">1848</a></td></tr
><tr id="gr_svn141_1849"

><td id="1849"><a href="#1849">1849</a></td></tr
><tr id="gr_svn141_1850"

><td id="1850"><a href="#1850">1850</a></td></tr
><tr id="gr_svn141_1851"

><td id="1851"><a href="#1851">1851</a></td></tr
><tr id="gr_svn141_1852"

><td id="1852"><a href="#1852">1852</a></td></tr
><tr id="gr_svn141_1853"

><td id="1853"><a href="#1853">1853</a></td></tr
><tr id="gr_svn141_1854"

><td id="1854"><a href="#1854">1854</a></td></tr
><tr id="gr_svn141_1855"

><td id="1855"><a href="#1855">1855</a></td></tr
><tr id="gr_svn141_1856"

><td id="1856"><a href="#1856">1856</a></td></tr
><tr id="gr_svn141_1857"

><td id="1857"><a href="#1857">1857</a></td></tr
><tr id="gr_svn141_1858"

><td id="1858"><a href="#1858">1858</a></td></tr
><tr id="gr_svn141_1859"

><td id="1859"><a href="#1859">1859</a></td></tr
><tr id="gr_svn141_1860"

><td id="1860"><a href="#1860">1860</a></td></tr
><tr id="gr_svn141_1861"

><td id="1861"><a href="#1861">1861</a></td></tr
><tr id="gr_svn141_1862"

><td id="1862"><a href="#1862">1862</a></td></tr
><tr id="gr_svn141_1863"

><td id="1863"><a href="#1863">1863</a></td></tr
><tr id="gr_svn141_1864"

><td id="1864"><a href="#1864">1864</a></td></tr
><tr id="gr_svn141_1865"

><td id="1865"><a href="#1865">1865</a></td></tr
><tr id="gr_svn141_1866"

><td id="1866"><a href="#1866">1866</a></td></tr
><tr id="gr_svn141_1867"

><td id="1867"><a href="#1867">1867</a></td></tr
><tr id="gr_svn141_1868"

><td id="1868"><a href="#1868">1868</a></td></tr
><tr id="gr_svn141_1869"

><td id="1869"><a href="#1869">1869</a></td></tr
><tr id="gr_svn141_1870"

><td id="1870"><a href="#1870">1870</a></td></tr
><tr id="gr_svn141_1871"

><td id="1871"><a href="#1871">1871</a></td></tr
><tr id="gr_svn141_1872"

><td id="1872"><a href="#1872">1872</a></td></tr
><tr id="gr_svn141_1873"

><td id="1873"><a href="#1873">1873</a></td></tr
><tr id="gr_svn141_1874"

><td id="1874"><a href="#1874">1874</a></td></tr
><tr id="gr_svn141_1875"

><td id="1875"><a href="#1875">1875</a></td></tr
><tr id="gr_svn141_1876"

><td id="1876"><a href="#1876">1876</a></td></tr
><tr id="gr_svn141_1877"

><td id="1877"><a href="#1877">1877</a></td></tr
><tr id="gr_svn141_1878"

><td id="1878"><a href="#1878">1878</a></td></tr
><tr id="gr_svn141_1879"

><td id="1879"><a href="#1879">1879</a></td></tr
><tr id="gr_svn141_1880"

><td id="1880"><a href="#1880">1880</a></td></tr
><tr id="gr_svn141_1881"

><td id="1881"><a href="#1881">1881</a></td></tr
><tr id="gr_svn141_1882"

><td id="1882"><a href="#1882">1882</a></td></tr
><tr id="gr_svn141_1883"

><td id="1883"><a href="#1883">1883</a></td></tr
><tr id="gr_svn141_1884"

><td id="1884"><a href="#1884">1884</a></td></tr
><tr id="gr_svn141_1885"

><td id="1885"><a href="#1885">1885</a></td></tr
><tr id="gr_svn141_1886"

><td id="1886"><a href="#1886">1886</a></td></tr
><tr id="gr_svn141_1887"

><td id="1887"><a href="#1887">1887</a></td></tr
><tr id="gr_svn141_1888"

><td id="1888"><a href="#1888">1888</a></td></tr
><tr id="gr_svn141_1889"

><td id="1889"><a href="#1889">1889</a></td></tr
><tr id="gr_svn141_1890"

><td id="1890"><a href="#1890">1890</a></td></tr
><tr id="gr_svn141_1891"

><td id="1891"><a href="#1891">1891</a></td></tr
><tr id="gr_svn141_1892"

><td id="1892"><a href="#1892">1892</a></td></tr
><tr id="gr_svn141_1893"

><td id="1893"><a href="#1893">1893</a></td></tr
><tr id="gr_svn141_1894"

><td id="1894"><a href="#1894">1894</a></td></tr
><tr id="gr_svn141_1895"

><td id="1895"><a href="#1895">1895</a></td></tr
><tr id="gr_svn141_1896"

><td id="1896"><a href="#1896">1896</a></td></tr
><tr id="gr_svn141_1897"

><td id="1897"><a href="#1897">1897</a></td></tr
><tr id="gr_svn141_1898"

><td id="1898"><a href="#1898">1898</a></td></tr
><tr id="gr_svn141_1899"

><td id="1899"><a href="#1899">1899</a></td></tr
><tr id="gr_svn141_1900"

><td id="1900"><a href="#1900">1900</a></td></tr
><tr id="gr_svn141_1901"

><td id="1901"><a href="#1901">1901</a></td></tr
><tr id="gr_svn141_1902"

><td id="1902"><a href="#1902">1902</a></td></tr
><tr id="gr_svn141_1903"

><td id="1903"><a href="#1903">1903</a></td></tr
><tr id="gr_svn141_1904"

><td id="1904"><a href="#1904">1904</a></td></tr
><tr id="gr_svn141_1905"

><td id="1905"><a href="#1905">1905</a></td></tr
><tr id="gr_svn141_1906"

><td id="1906"><a href="#1906">1906</a></td></tr
><tr id="gr_svn141_1907"

><td id="1907"><a href="#1907">1907</a></td></tr
><tr id="gr_svn141_1908"

><td id="1908"><a href="#1908">1908</a></td></tr
><tr id="gr_svn141_1909"

><td id="1909"><a href="#1909">1909</a></td></tr
><tr id="gr_svn141_1910"

><td id="1910"><a href="#1910">1910</a></td></tr
><tr id="gr_svn141_1911"

><td id="1911"><a href="#1911">1911</a></td></tr
><tr id="gr_svn141_1912"

><td id="1912"><a href="#1912">1912</a></td></tr
><tr id="gr_svn141_1913"

><td id="1913"><a href="#1913">1913</a></td></tr
><tr id="gr_svn141_1914"

><td id="1914"><a href="#1914">1914</a></td></tr
><tr id="gr_svn141_1915"

><td id="1915"><a href="#1915">1915</a></td></tr
><tr id="gr_svn141_1916"

><td id="1916"><a href="#1916">1916</a></td></tr
><tr id="gr_svn141_1917"

><td id="1917"><a href="#1917">1917</a></td></tr
><tr id="gr_svn141_1918"

><td id="1918"><a href="#1918">1918</a></td></tr
><tr id="gr_svn141_1919"

><td id="1919"><a href="#1919">1919</a></td></tr
><tr id="gr_svn141_1920"

><td id="1920"><a href="#1920">1920</a></td></tr
><tr id="gr_svn141_1921"

><td id="1921"><a href="#1921">1921</a></td></tr
><tr id="gr_svn141_1922"

><td id="1922"><a href="#1922">1922</a></td></tr
><tr id="gr_svn141_1923"

><td id="1923"><a href="#1923">1923</a></td></tr
><tr id="gr_svn141_1924"

><td id="1924"><a href="#1924">1924</a></td></tr
><tr id="gr_svn141_1925"

><td id="1925"><a href="#1925">1925</a></td></tr
><tr id="gr_svn141_1926"

><td id="1926"><a href="#1926">1926</a></td></tr
><tr id="gr_svn141_1927"

><td id="1927"><a href="#1927">1927</a></td></tr
><tr id="gr_svn141_1928"

><td id="1928"><a href="#1928">1928</a></td></tr
><tr id="gr_svn141_1929"

><td id="1929"><a href="#1929">1929</a></td></tr
><tr id="gr_svn141_1930"

><td id="1930"><a href="#1930">1930</a></td></tr
><tr id="gr_svn141_1931"

><td id="1931"><a href="#1931">1931</a></td></tr
><tr id="gr_svn141_1932"

><td id="1932"><a href="#1932">1932</a></td></tr
><tr id="gr_svn141_1933"

><td id="1933"><a href="#1933">1933</a></td></tr
><tr id="gr_svn141_1934"

><td id="1934"><a href="#1934">1934</a></td></tr
><tr id="gr_svn141_1935"

><td id="1935"><a href="#1935">1935</a></td></tr
><tr id="gr_svn141_1936"

><td id="1936"><a href="#1936">1936</a></td></tr
><tr id="gr_svn141_1937"

><td id="1937"><a href="#1937">1937</a></td></tr
><tr id="gr_svn141_1938"

><td id="1938"><a href="#1938">1938</a></td></tr
><tr id="gr_svn141_1939"

><td id="1939"><a href="#1939">1939</a></td></tr
><tr id="gr_svn141_1940"

><td id="1940"><a href="#1940">1940</a></td></tr
><tr id="gr_svn141_1941"

><td id="1941"><a href="#1941">1941</a></td></tr
><tr id="gr_svn141_1942"

><td id="1942"><a href="#1942">1942</a></td></tr
><tr id="gr_svn141_1943"

><td id="1943"><a href="#1943">1943</a></td></tr
><tr id="gr_svn141_1944"

><td id="1944"><a href="#1944">1944</a></td></tr
><tr id="gr_svn141_1945"

><td id="1945"><a href="#1945">1945</a></td></tr
><tr id="gr_svn141_1946"

><td id="1946"><a href="#1946">1946</a></td></tr
><tr id="gr_svn141_1947"

><td id="1947"><a href="#1947">1947</a></td></tr
><tr id="gr_svn141_1948"

><td id="1948"><a href="#1948">1948</a></td></tr
><tr id="gr_svn141_1949"

><td id="1949"><a href="#1949">1949</a></td></tr
><tr id="gr_svn141_1950"

><td id="1950"><a href="#1950">1950</a></td></tr
><tr id="gr_svn141_1951"

><td id="1951"><a href="#1951">1951</a></td></tr
><tr id="gr_svn141_1952"

><td id="1952"><a href="#1952">1952</a></td></tr
><tr id="gr_svn141_1953"

><td id="1953"><a href="#1953">1953</a></td></tr
><tr id="gr_svn141_1954"

><td id="1954"><a href="#1954">1954</a></td></tr
><tr id="gr_svn141_1955"

><td id="1955"><a href="#1955">1955</a></td></tr
><tr id="gr_svn141_1956"

><td id="1956"><a href="#1956">1956</a></td></tr
><tr id="gr_svn141_1957"

><td id="1957"><a href="#1957">1957</a></td></tr
><tr id="gr_svn141_1958"

><td id="1958"><a href="#1958">1958</a></td></tr
><tr id="gr_svn141_1959"

><td id="1959"><a href="#1959">1959</a></td></tr
><tr id="gr_svn141_1960"

><td id="1960"><a href="#1960">1960</a></td></tr
><tr id="gr_svn141_1961"

><td id="1961"><a href="#1961">1961</a></td></tr
><tr id="gr_svn141_1962"

><td id="1962"><a href="#1962">1962</a></td></tr
><tr id="gr_svn141_1963"

><td id="1963"><a href="#1963">1963</a></td></tr
><tr id="gr_svn141_1964"

><td id="1964"><a href="#1964">1964</a></td></tr
><tr id="gr_svn141_1965"

><td id="1965"><a href="#1965">1965</a></td></tr
><tr id="gr_svn141_1966"

><td id="1966"><a href="#1966">1966</a></td></tr
><tr id="gr_svn141_1967"

><td id="1967"><a href="#1967">1967</a></td></tr
><tr id="gr_svn141_1968"

><td id="1968"><a href="#1968">1968</a></td></tr
><tr id="gr_svn141_1969"

><td id="1969"><a href="#1969">1969</a></td></tr
><tr id="gr_svn141_1970"

><td id="1970"><a href="#1970">1970</a></td></tr
><tr id="gr_svn141_1971"

><td id="1971"><a href="#1971">1971</a></td></tr
><tr id="gr_svn141_1972"

><td id="1972"><a href="#1972">1972</a></td></tr
><tr id="gr_svn141_1973"

><td id="1973"><a href="#1973">1973</a></td></tr
><tr id="gr_svn141_1974"

><td id="1974"><a href="#1974">1974</a></td></tr
><tr id="gr_svn141_1975"

><td id="1975"><a href="#1975">1975</a></td></tr
><tr id="gr_svn141_1976"

><td id="1976"><a href="#1976">1976</a></td></tr
><tr id="gr_svn141_1977"

><td id="1977"><a href="#1977">1977</a></td></tr
><tr id="gr_svn141_1978"

><td id="1978"><a href="#1978">1978</a></td></tr
><tr id="gr_svn141_1979"

><td id="1979"><a href="#1979">1979</a></td></tr
><tr id="gr_svn141_1980"

><td id="1980"><a href="#1980">1980</a></td></tr
><tr id="gr_svn141_1981"

><td id="1981"><a href="#1981">1981</a></td></tr
><tr id="gr_svn141_1982"

><td id="1982"><a href="#1982">1982</a></td></tr
><tr id="gr_svn141_1983"

><td id="1983"><a href="#1983">1983</a></td></tr
><tr id="gr_svn141_1984"

><td id="1984"><a href="#1984">1984</a></td></tr
><tr id="gr_svn141_1985"

><td id="1985"><a href="#1985">1985</a></td></tr
><tr id="gr_svn141_1986"

><td id="1986"><a href="#1986">1986</a></td></tr
><tr id="gr_svn141_1987"

><td id="1987"><a href="#1987">1987</a></td></tr
><tr id="gr_svn141_1988"

><td id="1988"><a href="#1988">1988</a></td></tr
><tr id="gr_svn141_1989"

><td id="1989"><a href="#1989">1989</a></td></tr
><tr id="gr_svn141_1990"

><td id="1990"><a href="#1990">1990</a></td></tr
><tr id="gr_svn141_1991"

><td id="1991"><a href="#1991">1991</a></td></tr
><tr id="gr_svn141_1992"

><td id="1992"><a href="#1992">1992</a></td></tr
><tr id="gr_svn141_1993"

><td id="1993"><a href="#1993">1993</a></td></tr
><tr id="gr_svn141_1994"

><td id="1994"><a href="#1994">1994</a></td></tr
><tr id="gr_svn141_1995"

><td id="1995"><a href="#1995">1995</a></td></tr
><tr id="gr_svn141_1996"

><td id="1996"><a href="#1996">1996</a></td></tr
><tr id="gr_svn141_1997"

><td id="1997"><a href="#1997">1997</a></td></tr
><tr id="gr_svn141_1998"

><td id="1998"><a href="#1998">1998</a></td></tr
><tr id="gr_svn141_1999"

><td id="1999"><a href="#1999">1999</a></td></tr
><tr id="gr_svn141_2000"

><td id="2000"><a href="#2000">2000</a></td></tr
><tr id="gr_svn141_2001"

><td id="2001"><a href="#2001">2001</a></td></tr
><tr id="gr_svn141_2002"

><td id="2002"><a href="#2002">2002</a></td></tr
><tr id="gr_svn141_2003"

><td id="2003"><a href="#2003">2003</a></td></tr
><tr id="gr_svn141_2004"

><td id="2004"><a href="#2004">2004</a></td></tr
><tr id="gr_svn141_2005"

><td id="2005"><a href="#2005">2005</a></td></tr
><tr id="gr_svn141_2006"

><td id="2006"><a href="#2006">2006</a></td></tr
><tr id="gr_svn141_2007"

><td id="2007"><a href="#2007">2007</a></td></tr
><tr id="gr_svn141_2008"

><td id="2008"><a href="#2008">2008</a></td></tr
><tr id="gr_svn141_2009"

><td id="2009"><a href="#2009">2009</a></td></tr
><tr id="gr_svn141_2010"

><td id="2010"><a href="#2010">2010</a></td></tr
><tr id="gr_svn141_2011"

><td id="2011"><a href="#2011">2011</a></td></tr
><tr id="gr_svn141_2012"

><td id="2012"><a href="#2012">2012</a></td></tr
><tr id="gr_svn141_2013"

><td id="2013"><a href="#2013">2013</a></td></tr
><tr id="gr_svn141_2014"

><td id="2014"><a href="#2014">2014</a></td></tr
><tr id="gr_svn141_2015"

><td id="2015"><a href="#2015">2015</a></td></tr
><tr id="gr_svn141_2016"

><td id="2016"><a href="#2016">2016</a></td></tr
><tr id="gr_svn141_2017"

><td id="2017"><a href="#2017">2017</a></td></tr
><tr id="gr_svn141_2018"

><td id="2018"><a href="#2018">2018</a></td></tr
><tr id="gr_svn141_2019"

><td id="2019"><a href="#2019">2019</a></td></tr
><tr id="gr_svn141_2020"

><td id="2020"><a href="#2020">2020</a></td></tr
><tr id="gr_svn141_2021"

><td id="2021"><a href="#2021">2021</a></td></tr
><tr id="gr_svn141_2022"

><td id="2022"><a href="#2022">2022</a></td></tr
><tr id="gr_svn141_2023"

><td id="2023"><a href="#2023">2023</a></td></tr
><tr id="gr_svn141_2024"

><td id="2024"><a href="#2024">2024</a></td></tr
><tr id="gr_svn141_2025"

><td id="2025"><a href="#2025">2025</a></td></tr
><tr id="gr_svn141_2026"

><td id="2026"><a href="#2026">2026</a></td></tr
><tr id="gr_svn141_2027"

><td id="2027"><a href="#2027">2027</a></td></tr
><tr id="gr_svn141_2028"

><td id="2028"><a href="#2028">2028</a></td></tr
><tr id="gr_svn141_2029"

><td id="2029"><a href="#2029">2029</a></td></tr
><tr id="gr_svn141_2030"

><td id="2030"><a href="#2030">2030</a></td></tr
><tr id="gr_svn141_2031"

><td id="2031"><a href="#2031">2031</a></td></tr
><tr id="gr_svn141_2032"

><td id="2032"><a href="#2032">2032</a></td></tr
><tr id="gr_svn141_2033"

><td id="2033"><a href="#2033">2033</a></td></tr
><tr id="gr_svn141_2034"

><td id="2034"><a href="#2034">2034</a></td></tr
><tr id="gr_svn141_2035"

><td id="2035"><a href="#2035">2035</a></td></tr
><tr id="gr_svn141_2036"

><td id="2036"><a href="#2036">2036</a></td></tr
><tr id="gr_svn141_2037"

><td id="2037"><a href="#2037">2037</a></td></tr
><tr id="gr_svn141_2038"

><td id="2038"><a href="#2038">2038</a></td></tr
><tr id="gr_svn141_2039"

><td id="2039"><a href="#2039">2039</a></td></tr
><tr id="gr_svn141_2040"

><td id="2040"><a href="#2040">2040</a></td></tr
><tr id="gr_svn141_2041"

><td id="2041"><a href="#2041">2041</a></td></tr
><tr id="gr_svn141_2042"

><td id="2042"><a href="#2042">2042</a></td></tr
><tr id="gr_svn141_2043"

><td id="2043"><a href="#2043">2043</a></td></tr
><tr id="gr_svn141_2044"

><td id="2044"><a href="#2044">2044</a></td></tr
><tr id="gr_svn141_2045"

><td id="2045"><a href="#2045">2045</a></td></tr
><tr id="gr_svn141_2046"

><td id="2046"><a href="#2046">2046</a></td></tr
><tr id="gr_svn141_2047"

><td id="2047"><a href="#2047">2047</a></td></tr
><tr id="gr_svn141_2048"

><td id="2048"><a href="#2048">2048</a></td></tr
><tr id="gr_svn141_2049"

><td id="2049"><a href="#2049">2049</a></td></tr
><tr id="gr_svn141_2050"

><td id="2050"><a href="#2050">2050</a></td></tr
><tr id="gr_svn141_2051"

><td id="2051"><a href="#2051">2051</a></td></tr
><tr id="gr_svn141_2052"

><td id="2052"><a href="#2052">2052</a></td></tr
><tr id="gr_svn141_2053"

><td id="2053"><a href="#2053">2053</a></td></tr
><tr id="gr_svn141_2054"

><td id="2054"><a href="#2054">2054</a></td></tr
><tr id="gr_svn141_2055"

><td id="2055"><a href="#2055">2055</a></td></tr
><tr id="gr_svn141_2056"

><td id="2056"><a href="#2056">2056</a></td></tr
><tr id="gr_svn141_2057"

><td id="2057"><a href="#2057">2057</a></td></tr
><tr id="gr_svn141_2058"

><td id="2058"><a href="#2058">2058</a></td></tr
><tr id="gr_svn141_2059"

><td id="2059"><a href="#2059">2059</a></td></tr
><tr id="gr_svn141_2060"

><td id="2060"><a href="#2060">2060</a></td></tr
><tr id="gr_svn141_2061"

><td id="2061"><a href="#2061">2061</a></td></tr
><tr id="gr_svn141_2062"

><td id="2062"><a href="#2062">2062</a></td></tr
><tr id="gr_svn141_2063"

><td id="2063"><a href="#2063">2063</a></td></tr
><tr id="gr_svn141_2064"

><td id="2064"><a href="#2064">2064</a></td></tr
><tr id="gr_svn141_2065"

><td id="2065"><a href="#2065">2065</a></td></tr
><tr id="gr_svn141_2066"

><td id="2066"><a href="#2066">2066</a></td></tr
><tr id="gr_svn141_2067"

><td id="2067"><a href="#2067">2067</a></td></tr
><tr id="gr_svn141_2068"

><td id="2068"><a href="#2068">2068</a></td></tr
><tr id="gr_svn141_2069"

><td id="2069"><a href="#2069">2069</a></td></tr
><tr id="gr_svn141_2070"

><td id="2070"><a href="#2070">2070</a></td></tr
><tr id="gr_svn141_2071"

><td id="2071"><a href="#2071">2071</a></td></tr
><tr id="gr_svn141_2072"

><td id="2072"><a href="#2072">2072</a></td></tr
><tr id="gr_svn141_2073"

><td id="2073"><a href="#2073">2073</a></td></tr
><tr id="gr_svn141_2074"

><td id="2074"><a href="#2074">2074</a></td></tr
><tr id="gr_svn141_2075"

><td id="2075"><a href="#2075">2075</a></td></tr
><tr id="gr_svn141_2076"

><td id="2076"><a href="#2076">2076</a></td></tr
><tr id="gr_svn141_2077"

><td id="2077"><a href="#2077">2077</a></td></tr
><tr id="gr_svn141_2078"

><td id="2078"><a href="#2078">2078</a></td></tr
><tr id="gr_svn141_2079"

><td id="2079"><a href="#2079">2079</a></td></tr
><tr id="gr_svn141_2080"

><td id="2080"><a href="#2080">2080</a></td></tr
><tr id="gr_svn141_2081"

><td id="2081"><a href="#2081">2081</a></td></tr
><tr id="gr_svn141_2082"

><td id="2082"><a href="#2082">2082</a></td></tr
><tr id="gr_svn141_2083"

><td id="2083"><a href="#2083">2083</a></td></tr
><tr id="gr_svn141_2084"

><td id="2084"><a href="#2084">2084</a></td></tr
><tr id="gr_svn141_2085"

><td id="2085"><a href="#2085">2085</a></td></tr
><tr id="gr_svn141_2086"

><td id="2086"><a href="#2086">2086</a></td></tr
><tr id="gr_svn141_2087"

><td id="2087"><a href="#2087">2087</a></td></tr
><tr id="gr_svn141_2088"

><td id="2088"><a href="#2088">2088</a></td></tr
><tr id="gr_svn141_2089"

><td id="2089"><a href="#2089">2089</a></td></tr
><tr id="gr_svn141_2090"

><td id="2090"><a href="#2090">2090</a></td></tr
><tr id="gr_svn141_2091"

><td id="2091"><a href="#2091">2091</a></td></tr
><tr id="gr_svn141_2092"

><td id="2092"><a href="#2092">2092</a></td></tr
><tr id="gr_svn141_2093"

><td id="2093"><a href="#2093">2093</a></td></tr
><tr id="gr_svn141_2094"

><td id="2094"><a href="#2094">2094</a></td></tr
><tr id="gr_svn141_2095"

><td id="2095"><a href="#2095">2095</a></td></tr
><tr id="gr_svn141_2096"

><td id="2096"><a href="#2096">2096</a></td></tr
><tr id="gr_svn141_2097"

><td id="2097"><a href="#2097">2097</a></td></tr
><tr id="gr_svn141_2098"

><td id="2098"><a href="#2098">2098</a></td></tr
><tr id="gr_svn141_2099"

><td id="2099"><a href="#2099">2099</a></td></tr
><tr id="gr_svn141_2100"

><td id="2100"><a href="#2100">2100</a></td></tr
><tr id="gr_svn141_2101"

><td id="2101"><a href="#2101">2101</a></td></tr
><tr id="gr_svn141_2102"

><td id="2102"><a href="#2102">2102</a></td></tr
><tr id="gr_svn141_2103"

><td id="2103"><a href="#2103">2103</a></td></tr
><tr id="gr_svn141_2104"

><td id="2104"><a href="#2104">2104</a></td></tr
><tr id="gr_svn141_2105"

><td id="2105"><a href="#2105">2105</a></td></tr
><tr id="gr_svn141_2106"

><td id="2106"><a href="#2106">2106</a></td></tr
><tr id="gr_svn141_2107"

><td id="2107"><a href="#2107">2107</a></td></tr
><tr id="gr_svn141_2108"

><td id="2108"><a href="#2108">2108</a></td></tr
><tr id="gr_svn141_2109"

><td id="2109"><a href="#2109">2109</a></td></tr
><tr id="gr_svn141_2110"

><td id="2110"><a href="#2110">2110</a></td></tr
><tr id="gr_svn141_2111"

><td id="2111"><a href="#2111">2111</a></td></tr
><tr id="gr_svn141_2112"

><td id="2112"><a href="#2112">2112</a></td></tr
><tr id="gr_svn141_2113"

><td id="2113"><a href="#2113">2113</a></td></tr
><tr id="gr_svn141_2114"

><td id="2114"><a href="#2114">2114</a></td></tr
><tr id="gr_svn141_2115"

><td id="2115"><a href="#2115">2115</a></td></tr
><tr id="gr_svn141_2116"

><td id="2116"><a href="#2116">2116</a></td></tr
><tr id="gr_svn141_2117"

><td id="2117"><a href="#2117">2117</a></td></tr
><tr id="gr_svn141_2118"

><td id="2118"><a href="#2118">2118</a></td></tr
><tr id="gr_svn141_2119"

><td id="2119"><a href="#2119">2119</a></td></tr
><tr id="gr_svn141_2120"

><td id="2120"><a href="#2120">2120</a></td></tr
><tr id="gr_svn141_2121"

><td id="2121"><a href="#2121">2121</a></td></tr
><tr id="gr_svn141_2122"

><td id="2122"><a href="#2122">2122</a></td></tr
><tr id="gr_svn141_2123"

><td id="2123"><a href="#2123">2123</a></td></tr
><tr id="gr_svn141_2124"

><td id="2124"><a href="#2124">2124</a></td></tr
><tr id="gr_svn141_2125"

><td id="2125"><a href="#2125">2125</a></td></tr
><tr id="gr_svn141_2126"

><td id="2126"><a href="#2126">2126</a></td></tr
><tr id="gr_svn141_2127"

><td id="2127"><a href="#2127">2127</a></td></tr
><tr id="gr_svn141_2128"

><td id="2128"><a href="#2128">2128</a></td></tr
><tr id="gr_svn141_2129"

><td id="2129"><a href="#2129">2129</a></td></tr
><tr id="gr_svn141_2130"

><td id="2130"><a href="#2130">2130</a></td></tr
><tr id="gr_svn141_2131"

><td id="2131"><a href="#2131">2131</a></td></tr
><tr id="gr_svn141_2132"

><td id="2132"><a href="#2132">2132</a></td></tr
><tr id="gr_svn141_2133"

><td id="2133"><a href="#2133">2133</a></td></tr
><tr id="gr_svn141_2134"

><td id="2134"><a href="#2134">2134</a></td></tr
><tr id="gr_svn141_2135"

><td id="2135"><a href="#2135">2135</a></td></tr
><tr id="gr_svn141_2136"

><td id="2136"><a href="#2136">2136</a></td></tr
><tr id="gr_svn141_2137"

><td id="2137"><a href="#2137">2137</a></td></tr
><tr id="gr_svn141_2138"

><td id="2138"><a href="#2138">2138</a></td></tr
><tr id="gr_svn141_2139"

><td id="2139"><a href="#2139">2139</a></td></tr
><tr id="gr_svn141_2140"

><td id="2140"><a href="#2140">2140</a></td></tr
><tr id="gr_svn141_2141"

><td id="2141"><a href="#2141">2141</a></td></tr
><tr id="gr_svn141_2142"

><td id="2142"><a href="#2142">2142</a></td></tr
><tr id="gr_svn141_2143"

><td id="2143"><a href="#2143">2143</a></td></tr
><tr id="gr_svn141_2144"

><td id="2144"><a href="#2144">2144</a></td></tr
><tr id="gr_svn141_2145"

><td id="2145"><a href="#2145">2145</a></td></tr
><tr id="gr_svn141_2146"

><td id="2146"><a href="#2146">2146</a></td></tr
><tr id="gr_svn141_2147"

><td id="2147"><a href="#2147">2147</a></td></tr
><tr id="gr_svn141_2148"

><td id="2148"><a href="#2148">2148</a></td></tr
><tr id="gr_svn141_2149"

><td id="2149"><a href="#2149">2149</a></td></tr
><tr id="gr_svn141_2150"

><td id="2150"><a href="#2150">2150</a></td></tr
><tr id="gr_svn141_2151"

><td id="2151"><a href="#2151">2151</a></td></tr
><tr id="gr_svn141_2152"

><td id="2152"><a href="#2152">2152</a></td></tr
><tr id="gr_svn141_2153"

><td id="2153"><a href="#2153">2153</a></td></tr
><tr id="gr_svn141_2154"

><td id="2154"><a href="#2154">2154</a></td></tr
><tr id="gr_svn141_2155"

><td id="2155"><a href="#2155">2155</a></td></tr
><tr id="gr_svn141_2156"

><td id="2156"><a href="#2156">2156</a></td></tr
><tr id="gr_svn141_2157"

><td id="2157"><a href="#2157">2157</a></td></tr
><tr id="gr_svn141_2158"

><td id="2158"><a href="#2158">2158</a></td></tr
><tr id="gr_svn141_2159"

><td id="2159"><a href="#2159">2159</a></td></tr
><tr id="gr_svn141_2160"

><td id="2160"><a href="#2160">2160</a></td></tr
><tr id="gr_svn141_2161"

><td id="2161"><a href="#2161">2161</a></td></tr
><tr id="gr_svn141_2162"

><td id="2162"><a href="#2162">2162</a></td></tr
><tr id="gr_svn141_2163"

><td id="2163"><a href="#2163">2163</a></td></tr
><tr id="gr_svn141_2164"

><td id="2164"><a href="#2164">2164</a></td></tr
><tr id="gr_svn141_2165"

><td id="2165"><a href="#2165">2165</a></td></tr
><tr id="gr_svn141_2166"

><td id="2166"><a href="#2166">2166</a></td></tr
><tr id="gr_svn141_2167"

><td id="2167"><a href="#2167">2167</a></td></tr
><tr id="gr_svn141_2168"

><td id="2168"><a href="#2168">2168</a></td></tr
><tr id="gr_svn141_2169"

><td id="2169"><a href="#2169">2169</a></td></tr
><tr id="gr_svn141_2170"

><td id="2170"><a href="#2170">2170</a></td></tr
><tr id="gr_svn141_2171"

><td id="2171"><a href="#2171">2171</a></td></tr
><tr id="gr_svn141_2172"

><td id="2172"><a href="#2172">2172</a></td></tr
><tr id="gr_svn141_2173"

><td id="2173"><a href="#2173">2173</a></td></tr
><tr id="gr_svn141_2174"

><td id="2174"><a href="#2174">2174</a></td></tr
><tr id="gr_svn141_2175"

><td id="2175"><a href="#2175">2175</a></td></tr
><tr id="gr_svn141_2176"

><td id="2176"><a href="#2176">2176</a></td></tr
><tr id="gr_svn141_2177"

><td id="2177"><a href="#2177">2177</a></td></tr
><tr id="gr_svn141_2178"

><td id="2178"><a href="#2178">2178</a></td></tr
><tr id="gr_svn141_2179"

><td id="2179"><a href="#2179">2179</a></td></tr
><tr id="gr_svn141_2180"

><td id="2180"><a href="#2180">2180</a></td></tr
><tr id="gr_svn141_2181"

><td id="2181"><a href="#2181">2181</a></td></tr
><tr id="gr_svn141_2182"

><td id="2182"><a href="#2182">2182</a></td></tr
><tr id="gr_svn141_2183"

><td id="2183"><a href="#2183">2183</a></td></tr
><tr id="gr_svn141_2184"

><td id="2184"><a href="#2184">2184</a></td></tr
><tr id="gr_svn141_2185"

><td id="2185"><a href="#2185">2185</a></td></tr
><tr id="gr_svn141_2186"

><td id="2186"><a href="#2186">2186</a></td></tr
><tr id="gr_svn141_2187"

><td id="2187"><a href="#2187">2187</a></td></tr
><tr id="gr_svn141_2188"

><td id="2188"><a href="#2188">2188</a></td></tr
><tr id="gr_svn141_2189"

><td id="2189"><a href="#2189">2189</a></td></tr
><tr id="gr_svn141_2190"

><td id="2190"><a href="#2190">2190</a></td></tr
><tr id="gr_svn141_2191"

><td id="2191"><a href="#2191">2191</a></td></tr
><tr id="gr_svn141_2192"

><td id="2192"><a href="#2192">2192</a></td></tr
><tr id="gr_svn141_2193"

><td id="2193"><a href="#2193">2193</a></td></tr
><tr id="gr_svn141_2194"

><td id="2194"><a href="#2194">2194</a></td></tr
><tr id="gr_svn141_2195"

><td id="2195"><a href="#2195">2195</a></td></tr
><tr id="gr_svn141_2196"

><td id="2196"><a href="#2196">2196</a></td></tr
><tr id="gr_svn141_2197"

><td id="2197"><a href="#2197">2197</a></td></tr
><tr id="gr_svn141_2198"

><td id="2198"><a href="#2198">2198</a></td></tr
><tr id="gr_svn141_2199"

><td id="2199"><a href="#2199">2199</a></td></tr
><tr id="gr_svn141_2200"

><td id="2200"><a href="#2200">2200</a></td></tr
><tr id="gr_svn141_2201"

><td id="2201"><a href="#2201">2201</a></td></tr
><tr id="gr_svn141_2202"

><td id="2202"><a href="#2202">2202</a></td></tr
><tr id="gr_svn141_2203"

><td id="2203"><a href="#2203">2203</a></td></tr
><tr id="gr_svn141_2204"

><td id="2204"><a href="#2204">2204</a></td></tr
><tr id="gr_svn141_2205"

><td id="2205"><a href="#2205">2205</a></td></tr
><tr id="gr_svn141_2206"

><td id="2206"><a href="#2206">2206</a></td></tr
><tr id="gr_svn141_2207"

><td id="2207"><a href="#2207">2207</a></td></tr
><tr id="gr_svn141_2208"

><td id="2208"><a href="#2208">2208</a></td></tr
><tr id="gr_svn141_2209"

><td id="2209"><a href="#2209">2209</a></td></tr
><tr id="gr_svn141_2210"

><td id="2210"><a href="#2210">2210</a></td></tr
><tr id="gr_svn141_2211"

><td id="2211"><a href="#2211">2211</a></td></tr
><tr id="gr_svn141_2212"

><td id="2212"><a href="#2212">2212</a></td></tr
><tr id="gr_svn141_2213"

><td id="2213"><a href="#2213">2213</a></td></tr
><tr id="gr_svn141_2214"

><td id="2214"><a href="#2214">2214</a></td></tr
><tr id="gr_svn141_2215"

><td id="2215"><a href="#2215">2215</a></td></tr
><tr id="gr_svn141_2216"

><td id="2216"><a href="#2216">2216</a></td></tr
><tr id="gr_svn141_2217"

><td id="2217"><a href="#2217">2217</a></td></tr
><tr id="gr_svn141_2218"

><td id="2218"><a href="#2218">2218</a></td></tr
><tr id="gr_svn141_2219"

><td id="2219"><a href="#2219">2219</a></td></tr
><tr id="gr_svn141_2220"

><td id="2220"><a href="#2220">2220</a></td></tr
><tr id="gr_svn141_2221"

><td id="2221"><a href="#2221">2221</a></td></tr
><tr id="gr_svn141_2222"

><td id="2222"><a href="#2222">2222</a></td></tr
><tr id="gr_svn141_2223"

><td id="2223"><a href="#2223">2223</a></td></tr
><tr id="gr_svn141_2224"

><td id="2224"><a href="#2224">2224</a></td></tr
><tr id="gr_svn141_2225"

><td id="2225"><a href="#2225">2225</a></td></tr
><tr id="gr_svn141_2226"

><td id="2226"><a href="#2226">2226</a></td></tr
><tr id="gr_svn141_2227"

><td id="2227"><a href="#2227">2227</a></td></tr
><tr id="gr_svn141_2228"

><td id="2228"><a href="#2228">2228</a></td></tr
><tr id="gr_svn141_2229"

><td id="2229"><a href="#2229">2229</a></td></tr
><tr id="gr_svn141_2230"

><td id="2230"><a href="#2230">2230</a></td></tr
><tr id="gr_svn141_2231"

><td id="2231"><a href="#2231">2231</a></td></tr
><tr id="gr_svn141_2232"

><td id="2232"><a href="#2232">2232</a></td></tr
><tr id="gr_svn141_2233"

><td id="2233"><a href="#2233">2233</a></td></tr
><tr id="gr_svn141_2234"

><td id="2234"><a href="#2234">2234</a></td></tr
><tr id="gr_svn141_2235"

><td id="2235"><a href="#2235">2235</a></td></tr
><tr id="gr_svn141_2236"

><td id="2236"><a href="#2236">2236</a></td></tr
><tr id="gr_svn141_2237"

><td id="2237"><a href="#2237">2237</a></td></tr
><tr id="gr_svn141_2238"

><td id="2238"><a href="#2238">2238</a></td></tr
><tr id="gr_svn141_2239"

><td id="2239"><a href="#2239">2239</a></td></tr
><tr id="gr_svn141_2240"

><td id="2240"><a href="#2240">2240</a></td></tr
><tr id="gr_svn141_2241"

><td id="2241"><a href="#2241">2241</a></td></tr
><tr id="gr_svn141_2242"

><td id="2242"><a href="#2242">2242</a></td></tr
><tr id="gr_svn141_2243"

><td id="2243"><a href="#2243">2243</a></td></tr
><tr id="gr_svn141_2244"

><td id="2244"><a href="#2244">2244</a></td></tr
><tr id="gr_svn141_2245"

><td id="2245"><a href="#2245">2245</a></td></tr
><tr id="gr_svn141_2246"

><td id="2246"><a href="#2246">2246</a></td></tr
><tr id="gr_svn141_2247"

><td id="2247"><a href="#2247">2247</a></td></tr
><tr id="gr_svn141_2248"

><td id="2248"><a href="#2248">2248</a></td></tr
><tr id="gr_svn141_2249"

><td id="2249"><a href="#2249">2249</a></td></tr
><tr id="gr_svn141_2250"

><td id="2250"><a href="#2250">2250</a></td></tr
><tr id="gr_svn141_2251"

><td id="2251"><a href="#2251">2251</a></td></tr
><tr id="gr_svn141_2252"

><td id="2252"><a href="#2252">2252</a></td></tr
><tr id="gr_svn141_2253"

><td id="2253"><a href="#2253">2253</a></td></tr
><tr id="gr_svn141_2254"

><td id="2254"><a href="#2254">2254</a></td></tr
><tr id="gr_svn141_2255"

><td id="2255"><a href="#2255">2255</a></td></tr
><tr id="gr_svn141_2256"

><td id="2256"><a href="#2256">2256</a></td></tr
><tr id="gr_svn141_2257"

><td id="2257"><a href="#2257">2257</a></td></tr
><tr id="gr_svn141_2258"

><td id="2258"><a href="#2258">2258</a></td></tr
><tr id="gr_svn141_2259"

><td id="2259"><a href="#2259">2259</a></td></tr
><tr id="gr_svn141_2260"

><td id="2260"><a href="#2260">2260</a></td></tr
><tr id="gr_svn141_2261"

><td id="2261"><a href="#2261">2261</a></td></tr
><tr id="gr_svn141_2262"

><td id="2262"><a href="#2262">2262</a></td></tr
><tr id="gr_svn141_2263"

><td id="2263"><a href="#2263">2263</a></td></tr
><tr id="gr_svn141_2264"

><td id="2264"><a href="#2264">2264</a></td></tr
><tr id="gr_svn141_2265"

><td id="2265"><a href="#2265">2265</a></td></tr
><tr id="gr_svn141_2266"

><td id="2266"><a href="#2266">2266</a></td></tr
><tr id="gr_svn141_2267"

><td id="2267"><a href="#2267">2267</a></td></tr
><tr id="gr_svn141_2268"

><td id="2268"><a href="#2268">2268</a></td></tr
><tr id="gr_svn141_2269"

><td id="2269"><a href="#2269">2269</a></td></tr
><tr id="gr_svn141_2270"

><td id="2270"><a href="#2270">2270</a></td></tr
><tr id="gr_svn141_2271"

><td id="2271"><a href="#2271">2271</a></td></tr
><tr id="gr_svn141_2272"

><td id="2272"><a href="#2272">2272</a></td></tr
><tr id="gr_svn141_2273"

><td id="2273"><a href="#2273">2273</a></td></tr
><tr id="gr_svn141_2274"

><td id="2274"><a href="#2274">2274</a></td></tr
><tr id="gr_svn141_2275"

><td id="2275"><a href="#2275">2275</a></td></tr
><tr id="gr_svn141_2276"

><td id="2276"><a href="#2276">2276</a></td></tr
><tr id="gr_svn141_2277"

><td id="2277"><a href="#2277">2277</a></td></tr
><tr id="gr_svn141_2278"

><td id="2278"><a href="#2278">2278</a></td></tr
><tr id="gr_svn141_2279"

><td id="2279"><a href="#2279">2279</a></td></tr
><tr id="gr_svn141_2280"

><td id="2280"><a href="#2280">2280</a></td></tr
><tr id="gr_svn141_2281"

><td id="2281"><a href="#2281">2281</a></td></tr
><tr id="gr_svn141_2282"

><td id="2282"><a href="#2282">2282</a></td></tr
><tr id="gr_svn141_2283"

><td id="2283"><a href="#2283">2283</a></td></tr
><tr id="gr_svn141_2284"

><td id="2284"><a href="#2284">2284</a></td></tr
><tr id="gr_svn141_2285"

><td id="2285"><a href="#2285">2285</a></td></tr
><tr id="gr_svn141_2286"

><td id="2286"><a href="#2286">2286</a></td></tr
><tr id="gr_svn141_2287"

><td id="2287"><a href="#2287">2287</a></td></tr
><tr id="gr_svn141_2288"

><td id="2288"><a href="#2288">2288</a></td></tr
><tr id="gr_svn141_2289"

><td id="2289"><a href="#2289">2289</a></td></tr
><tr id="gr_svn141_2290"

><td id="2290"><a href="#2290">2290</a></td></tr
><tr id="gr_svn141_2291"

><td id="2291"><a href="#2291">2291</a></td></tr
><tr id="gr_svn141_2292"

><td id="2292"><a href="#2292">2292</a></td></tr
><tr id="gr_svn141_2293"

><td id="2293"><a href="#2293">2293</a></td></tr
><tr id="gr_svn141_2294"

><td id="2294"><a href="#2294">2294</a></td></tr
><tr id="gr_svn141_2295"

><td id="2295"><a href="#2295">2295</a></td></tr
><tr id="gr_svn141_2296"

><td id="2296"><a href="#2296">2296</a></td></tr
><tr id="gr_svn141_2297"

><td id="2297"><a href="#2297">2297</a></td></tr
><tr id="gr_svn141_2298"

><td id="2298"><a href="#2298">2298</a></td></tr
><tr id="gr_svn141_2299"

><td id="2299"><a href="#2299">2299</a></td></tr
><tr id="gr_svn141_2300"

><td id="2300"><a href="#2300">2300</a></td></tr
><tr id="gr_svn141_2301"

><td id="2301"><a href="#2301">2301</a></td></tr
><tr id="gr_svn141_2302"

><td id="2302"><a href="#2302">2302</a></td></tr
><tr id="gr_svn141_2303"

><td id="2303"><a href="#2303">2303</a></td></tr
><tr id="gr_svn141_2304"

><td id="2304"><a href="#2304">2304</a></td></tr
><tr id="gr_svn141_2305"

><td id="2305"><a href="#2305">2305</a></td></tr
><tr id="gr_svn141_2306"

><td id="2306"><a href="#2306">2306</a></td></tr
><tr id="gr_svn141_2307"

><td id="2307"><a href="#2307">2307</a></td></tr
><tr id="gr_svn141_2308"

><td id="2308"><a href="#2308">2308</a></td></tr
><tr id="gr_svn141_2309"

><td id="2309"><a href="#2309">2309</a></td></tr
><tr id="gr_svn141_2310"

><td id="2310"><a href="#2310">2310</a></td></tr
><tr id="gr_svn141_2311"

><td id="2311"><a href="#2311">2311</a></td></tr
><tr id="gr_svn141_2312"

><td id="2312"><a href="#2312">2312</a></td></tr
><tr id="gr_svn141_2313"

><td id="2313"><a href="#2313">2313</a></td></tr
><tr id="gr_svn141_2314"

><td id="2314"><a href="#2314">2314</a></td></tr
><tr id="gr_svn141_2315"

><td id="2315"><a href="#2315">2315</a></td></tr
><tr id="gr_svn141_2316"

><td id="2316"><a href="#2316">2316</a></td></tr
><tr id="gr_svn141_2317"

><td id="2317"><a href="#2317">2317</a></td></tr
><tr id="gr_svn141_2318"

><td id="2318"><a href="#2318">2318</a></td></tr
><tr id="gr_svn141_2319"

><td id="2319"><a href="#2319">2319</a></td></tr
><tr id="gr_svn141_2320"

><td id="2320"><a href="#2320">2320</a></td></tr
><tr id="gr_svn141_2321"

><td id="2321"><a href="#2321">2321</a></td></tr
><tr id="gr_svn141_2322"

><td id="2322"><a href="#2322">2322</a></td></tr
><tr id="gr_svn141_2323"

><td id="2323"><a href="#2323">2323</a></td></tr
><tr id="gr_svn141_2324"

><td id="2324"><a href="#2324">2324</a></td></tr
><tr id="gr_svn141_2325"

><td id="2325"><a href="#2325">2325</a></td></tr
><tr id="gr_svn141_2326"

><td id="2326"><a href="#2326">2326</a></td></tr
><tr id="gr_svn141_2327"

><td id="2327"><a href="#2327">2327</a></td></tr
><tr id="gr_svn141_2328"

><td id="2328"><a href="#2328">2328</a></td></tr
><tr id="gr_svn141_2329"

><td id="2329"><a href="#2329">2329</a></td></tr
><tr id="gr_svn141_2330"

><td id="2330"><a href="#2330">2330</a></td></tr
><tr id="gr_svn141_2331"

><td id="2331"><a href="#2331">2331</a></td></tr
><tr id="gr_svn141_2332"

><td id="2332"><a href="#2332">2332</a></td></tr
><tr id="gr_svn141_2333"

><td id="2333"><a href="#2333">2333</a></td></tr
><tr id="gr_svn141_2334"

><td id="2334"><a href="#2334">2334</a></td></tr
><tr id="gr_svn141_2335"

><td id="2335"><a href="#2335">2335</a></td></tr
><tr id="gr_svn141_2336"

><td id="2336"><a href="#2336">2336</a></td></tr
><tr id="gr_svn141_2337"

><td id="2337"><a href="#2337">2337</a></td></tr
><tr id="gr_svn141_2338"

><td id="2338"><a href="#2338">2338</a></td></tr
><tr id="gr_svn141_2339"

><td id="2339"><a href="#2339">2339</a></td></tr
><tr id="gr_svn141_2340"

><td id="2340"><a href="#2340">2340</a></td></tr
><tr id="gr_svn141_2341"

><td id="2341"><a href="#2341">2341</a></td></tr
><tr id="gr_svn141_2342"

><td id="2342"><a href="#2342">2342</a></td></tr
><tr id="gr_svn141_2343"

><td id="2343"><a href="#2343">2343</a></td></tr
><tr id="gr_svn141_2344"

><td id="2344"><a href="#2344">2344</a></td></tr
><tr id="gr_svn141_2345"

><td id="2345"><a href="#2345">2345</a></td></tr
><tr id="gr_svn141_2346"

><td id="2346"><a href="#2346">2346</a></td></tr
><tr id="gr_svn141_2347"

><td id="2347"><a href="#2347">2347</a></td></tr
><tr id="gr_svn141_2348"

><td id="2348"><a href="#2348">2348</a></td></tr
><tr id="gr_svn141_2349"

><td id="2349"><a href="#2349">2349</a></td></tr
><tr id="gr_svn141_2350"

><td id="2350"><a href="#2350">2350</a></td></tr
><tr id="gr_svn141_2351"

><td id="2351"><a href="#2351">2351</a></td></tr
><tr id="gr_svn141_2352"

><td id="2352"><a href="#2352">2352</a></td></tr
><tr id="gr_svn141_2353"

><td id="2353"><a href="#2353">2353</a></td></tr
><tr id="gr_svn141_2354"

><td id="2354"><a href="#2354">2354</a></td></tr
><tr id="gr_svn141_2355"

><td id="2355"><a href="#2355">2355</a></td></tr
><tr id="gr_svn141_2356"

><td id="2356"><a href="#2356">2356</a></td></tr
><tr id="gr_svn141_2357"

><td id="2357"><a href="#2357">2357</a></td></tr
><tr id="gr_svn141_2358"

><td id="2358"><a href="#2358">2358</a></td></tr
><tr id="gr_svn141_2359"

><td id="2359"><a href="#2359">2359</a></td></tr
><tr id="gr_svn141_2360"

><td id="2360"><a href="#2360">2360</a></td></tr
><tr id="gr_svn141_2361"

><td id="2361"><a href="#2361">2361</a></td></tr
><tr id="gr_svn141_2362"

><td id="2362"><a href="#2362">2362</a></td></tr
><tr id="gr_svn141_2363"

><td id="2363"><a href="#2363">2363</a></td></tr
><tr id="gr_svn141_2364"

><td id="2364"><a href="#2364">2364</a></td></tr
><tr id="gr_svn141_2365"

><td id="2365"><a href="#2365">2365</a></td></tr
><tr id="gr_svn141_2366"

><td id="2366"><a href="#2366">2366</a></td></tr
><tr id="gr_svn141_2367"

><td id="2367"><a href="#2367">2367</a></td></tr
><tr id="gr_svn141_2368"

><td id="2368"><a href="#2368">2368</a></td></tr
><tr id="gr_svn141_2369"

><td id="2369"><a href="#2369">2369</a></td></tr
><tr id="gr_svn141_2370"

><td id="2370"><a href="#2370">2370</a></td></tr
><tr id="gr_svn141_2371"

><td id="2371"><a href="#2371">2371</a></td></tr
><tr id="gr_svn141_2372"

><td id="2372"><a href="#2372">2372</a></td></tr
><tr id="gr_svn141_2373"

><td id="2373"><a href="#2373">2373</a></td></tr
><tr id="gr_svn141_2374"

><td id="2374"><a href="#2374">2374</a></td></tr
><tr id="gr_svn141_2375"

><td id="2375"><a href="#2375">2375</a></td></tr
><tr id="gr_svn141_2376"

><td id="2376"><a href="#2376">2376</a></td></tr
><tr id="gr_svn141_2377"

><td id="2377"><a href="#2377">2377</a></td></tr
><tr id="gr_svn141_2378"

><td id="2378"><a href="#2378">2378</a></td></tr
><tr id="gr_svn141_2379"

><td id="2379"><a href="#2379">2379</a></td></tr
><tr id="gr_svn141_2380"

><td id="2380"><a href="#2380">2380</a></td></tr
><tr id="gr_svn141_2381"

><td id="2381"><a href="#2381">2381</a></td></tr
><tr id="gr_svn141_2382"

><td id="2382"><a href="#2382">2382</a></td></tr
><tr id="gr_svn141_2383"

><td id="2383"><a href="#2383">2383</a></td></tr
><tr id="gr_svn141_2384"

><td id="2384"><a href="#2384">2384</a></td></tr
><tr id="gr_svn141_2385"

><td id="2385"><a href="#2385">2385</a></td></tr
><tr id="gr_svn141_2386"

><td id="2386"><a href="#2386">2386</a></td></tr
><tr id="gr_svn141_2387"

><td id="2387"><a href="#2387">2387</a></td></tr
><tr id="gr_svn141_2388"

><td id="2388"><a href="#2388">2388</a></td></tr
><tr id="gr_svn141_2389"

><td id="2389"><a href="#2389">2389</a></td></tr
><tr id="gr_svn141_2390"

><td id="2390"><a href="#2390">2390</a></td></tr
><tr id="gr_svn141_2391"

><td id="2391"><a href="#2391">2391</a></td></tr
><tr id="gr_svn141_2392"

><td id="2392"><a href="#2392">2392</a></td></tr
><tr id="gr_svn141_2393"

><td id="2393"><a href="#2393">2393</a></td></tr
><tr id="gr_svn141_2394"

><td id="2394"><a href="#2394">2394</a></td></tr
><tr id="gr_svn141_2395"

><td id="2395"><a href="#2395">2395</a></td></tr
><tr id="gr_svn141_2396"

><td id="2396"><a href="#2396">2396</a></td></tr
><tr id="gr_svn141_2397"

><td id="2397"><a href="#2397">2397</a></td></tr
><tr id="gr_svn141_2398"

><td id="2398"><a href="#2398">2398</a></td></tr
><tr id="gr_svn141_2399"

><td id="2399"><a href="#2399">2399</a></td></tr
><tr id="gr_svn141_2400"

><td id="2400"><a href="#2400">2400</a></td></tr
><tr id="gr_svn141_2401"

><td id="2401"><a href="#2401">2401</a></td></tr
><tr id="gr_svn141_2402"

><td id="2402"><a href="#2402">2402</a></td></tr
><tr id="gr_svn141_2403"

><td id="2403"><a href="#2403">2403</a></td></tr
><tr id="gr_svn141_2404"

><td id="2404"><a href="#2404">2404</a></td></tr
><tr id="gr_svn141_2405"

><td id="2405"><a href="#2405">2405</a></td></tr
><tr id="gr_svn141_2406"

><td id="2406"><a href="#2406">2406</a></td></tr
><tr id="gr_svn141_2407"

><td id="2407"><a href="#2407">2407</a></td></tr
><tr id="gr_svn141_2408"

><td id="2408"><a href="#2408">2408</a></td></tr
><tr id="gr_svn141_2409"

><td id="2409"><a href="#2409">2409</a></td></tr
><tr id="gr_svn141_2410"

><td id="2410"><a href="#2410">2410</a></td></tr
><tr id="gr_svn141_2411"

><td id="2411"><a href="#2411">2411</a></td></tr
><tr id="gr_svn141_2412"

><td id="2412"><a href="#2412">2412</a></td></tr
><tr id="gr_svn141_2413"

><td id="2413"><a href="#2413">2413</a></td></tr
><tr id="gr_svn141_2414"

><td id="2414"><a href="#2414">2414</a></td></tr
><tr id="gr_svn141_2415"

><td id="2415"><a href="#2415">2415</a></td></tr
><tr id="gr_svn141_2416"

><td id="2416"><a href="#2416">2416</a></td></tr
><tr id="gr_svn141_2417"

><td id="2417"><a href="#2417">2417</a></td></tr
><tr id="gr_svn141_2418"

><td id="2418"><a href="#2418">2418</a></td></tr
><tr id="gr_svn141_2419"

><td id="2419"><a href="#2419">2419</a></td></tr
><tr id="gr_svn141_2420"

><td id="2420"><a href="#2420">2420</a></td></tr
><tr id="gr_svn141_2421"

><td id="2421"><a href="#2421">2421</a></td></tr
><tr id="gr_svn141_2422"

><td id="2422"><a href="#2422">2422</a></td></tr
><tr id="gr_svn141_2423"

><td id="2423"><a href="#2423">2423</a></td></tr
><tr id="gr_svn141_2424"

><td id="2424"><a href="#2424">2424</a></td></tr
><tr id="gr_svn141_2425"

><td id="2425"><a href="#2425">2425</a></td></tr
><tr id="gr_svn141_2426"

><td id="2426"><a href="#2426">2426</a></td></tr
><tr id="gr_svn141_2427"

><td id="2427"><a href="#2427">2427</a></td></tr
><tr id="gr_svn141_2428"

><td id="2428"><a href="#2428">2428</a></td></tr
><tr id="gr_svn141_2429"

><td id="2429"><a href="#2429">2429</a></td></tr
><tr id="gr_svn141_2430"

><td id="2430"><a href="#2430">2430</a></td></tr
><tr id="gr_svn141_2431"

><td id="2431"><a href="#2431">2431</a></td></tr
><tr id="gr_svn141_2432"

><td id="2432"><a href="#2432">2432</a></td></tr
><tr id="gr_svn141_2433"

><td id="2433"><a href="#2433">2433</a></td></tr
><tr id="gr_svn141_2434"

><td id="2434"><a href="#2434">2434</a></td></tr
><tr id="gr_svn141_2435"

><td id="2435"><a href="#2435">2435</a></td></tr
><tr id="gr_svn141_2436"

><td id="2436"><a href="#2436">2436</a></td></tr
><tr id="gr_svn141_2437"

><td id="2437"><a href="#2437">2437</a></td></tr
><tr id="gr_svn141_2438"

><td id="2438"><a href="#2438">2438</a></td></tr
><tr id="gr_svn141_2439"

><td id="2439"><a href="#2439">2439</a></td></tr
><tr id="gr_svn141_2440"

><td id="2440"><a href="#2440">2440</a></td></tr
><tr id="gr_svn141_2441"

><td id="2441"><a href="#2441">2441</a></td></tr
><tr id="gr_svn141_2442"

><td id="2442"><a href="#2442">2442</a></td></tr
><tr id="gr_svn141_2443"

><td id="2443"><a href="#2443">2443</a></td></tr
><tr id="gr_svn141_2444"

><td id="2444"><a href="#2444">2444</a></td></tr
><tr id="gr_svn141_2445"

><td id="2445"><a href="#2445">2445</a></td></tr
><tr id="gr_svn141_2446"

><td id="2446"><a href="#2446">2446</a></td></tr
><tr id="gr_svn141_2447"

><td id="2447"><a href="#2447">2447</a></td></tr
><tr id="gr_svn141_2448"

><td id="2448"><a href="#2448">2448</a></td></tr
><tr id="gr_svn141_2449"

><td id="2449"><a href="#2449">2449</a></td></tr
><tr id="gr_svn141_2450"

><td id="2450"><a href="#2450">2450</a></td></tr
><tr id="gr_svn141_2451"

><td id="2451"><a href="#2451">2451</a></td></tr
><tr id="gr_svn141_2452"

><td id="2452"><a href="#2452">2452</a></td></tr
><tr id="gr_svn141_2453"

><td id="2453"><a href="#2453">2453</a></td></tr
><tr id="gr_svn141_2454"

><td id="2454"><a href="#2454">2454</a></td></tr
><tr id="gr_svn141_2455"

><td id="2455"><a href="#2455">2455</a></td></tr
><tr id="gr_svn141_2456"

><td id="2456"><a href="#2456">2456</a></td></tr
><tr id="gr_svn141_2457"

><td id="2457"><a href="#2457">2457</a></td></tr
><tr id="gr_svn141_2458"

><td id="2458"><a href="#2458">2458</a></td></tr
><tr id="gr_svn141_2459"

><td id="2459"><a href="#2459">2459</a></td></tr
><tr id="gr_svn141_2460"

><td id="2460"><a href="#2460">2460</a></td></tr
><tr id="gr_svn141_2461"

><td id="2461"><a href="#2461">2461</a></td></tr
><tr id="gr_svn141_2462"

><td id="2462"><a href="#2462">2462</a></td></tr
><tr id="gr_svn141_2463"

><td id="2463"><a href="#2463">2463</a></td></tr
><tr id="gr_svn141_2464"

><td id="2464"><a href="#2464">2464</a></td></tr
><tr id="gr_svn141_2465"

><td id="2465"><a href="#2465">2465</a></td></tr
><tr id="gr_svn141_2466"

><td id="2466"><a href="#2466">2466</a></td></tr
><tr id="gr_svn141_2467"

><td id="2467"><a href="#2467">2467</a></td></tr
><tr id="gr_svn141_2468"

><td id="2468"><a href="#2468">2468</a></td></tr
><tr id="gr_svn141_2469"

><td id="2469"><a href="#2469">2469</a></td></tr
><tr id="gr_svn141_2470"

><td id="2470"><a href="#2470">2470</a></td></tr
><tr id="gr_svn141_2471"

><td id="2471"><a href="#2471">2471</a></td></tr
><tr id="gr_svn141_2472"

><td id="2472"><a href="#2472">2472</a></td></tr
><tr id="gr_svn141_2473"

><td id="2473"><a href="#2473">2473</a></td></tr
><tr id="gr_svn141_2474"

><td id="2474"><a href="#2474">2474</a></td></tr
><tr id="gr_svn141_2475"

><td id="2475"><a href="#2475">2475</a></td></tr
><tr id="gr_svn141_2476"

><td id="2476"><a href="#2476">2476</a></td></tr
><tr id="gr_svn141_2477"

><td id="2477"><a href="#2477">2477</a></td></tr
><tr id="gr_svn141_2478"

><td id="2478"><a href="#2478">2478</a></td></tr
><tr id="gr_svn141_2479"

><td id="2479"><a href="#2479">2479</a></td></tr
><tr id="gr_svn141_2480"

><td id="2480"><a href="#2480">2480</a></td></tr
><tr id="gr_svn141_2481"

><td id="2481"><a href="#2481">2481</a></td></tr
><tr id="gr_svn141_2482"

><td id="2482"><a href="#2482">2482</a></td></tr
><tr id="gr_svn141_2483"

><td id="2483"><a href="#2483">2483</a></td></tr
><tr id="gr_svn141_2484"

><td id="2484"><a href="#2484">2484</a></td></tr
><tr id="gr_svn141_2485"

><td id="2485"><a href="#2485">2485</a></td></tr
><tr id="gr_svn141_2486"

><td id="2486"><a href="#2486">2486</a></td></tr
><tr id="gr_svn141_2487"

><td id="2487"><a href="#2487">2487</a></td></tr
><tr id="gr_svn141_2488"

><td id="2488"><a href="#2488">2488</a></td></tr
><tr id="gr_svn141_2489"

><td id="2489"><a href="#2489">2489</a></td></tr
><tr id="gr_svn141_2490"

><td id="2490"><a href="#2490">2490</a></td></tr
><tr id="gr_svn141_2491"

><td id="2491"><a href="#2491">2491</a></td></tr
><tr id="gr_svn141_2492"

><td id="2492"><a href="#2492">2492</a></td></tr
><tr id="gr_svn141_2493"

><td id="2493"><a href="#2493">2493</a></td></tr
><tr id="gr_svn141_2494"

><td id="2494"><a href="#2494">2494</a></td></tr
><tr id="gr_svn141_2495"

><td id="2495"><a href="#2495">2495</a></td></tr
><tr id="gr_svn141_2496"

><td id="2496"><a href="#2496">2496</a></td></tr
><tr id="gr_svn141_2497"

><td id="2497"><a href="#2497">2497</a></td></tr
><tr id="gr_svn141_2498"

><td id="2498"><a href="#2498">2498</a></td></tr
><tr id="gr_svn141_2499"

><td id="2499"><a href="#2499">2499</a></td></tr
><tr id="gr_svn141_2500"

><td id="2500"><a href="#2500">2500</a></td></tr
><tr id="gr_svn141_2501"

><td id="2501"><a href="#2501">2501</a></td></tr
><tr id="gr_svn141_2502"

><td id="2502"><a href="#2502">2502</a></td></tr
><tr id="gr_svn141_2503"

><td id="2503"><a href="#2503">2503</a></td></tr
><tr id="gr_svn141_2504"

><td id="2504"><a href="#2504">2504</a></td></tr
><tr id="gr_svn141_2505"

><td id="2505"><a href="#2505">2505</a></td></tr
><tr id="gr_svn141_2506"

><td id="2506"><a href="#2506">2506</a></td></tr
><tr id="gr_svn141_2507"

><td id="2507"><a href="#2507">2507</a></td></tr
><tr id="gr_svn141_2508"

><td id="2508"><a href="#2508">2508</a></td></tr
><tr id="gr_svn141_2509"

><td id="2509"><a href="#2509">2509</a></td></tr
><tr id="gr_svn141_2510"

><td id="2510"><a href="#2510">2510</a></td></tr
><tr id="gr_svn141_2511"

><td id="2511"><a href="#2511">2511</a></td></tr
><tr id="gr_svn141_2512"

><td id="2512"><a href="#2512">2512</a></td></tr
><tr id="gr_svn141_2513"

><td id="2513"><a href="#2513">2513</a></td></tr
><tr id="gr_svn141_2514"

><td id="2514"><a href="#2514">2514</a></td></tr
><tr id="gr_svn141_2515"

><td id="2515"><a href="#2515">2515</a></td></tr
><tr id="gr_svn141_2516"

><td id="2516"><a href="#2516">2516</a></td></tr
><tr id="gr_svn141_2517"

><td id="2517"><a href="#2517">2517</a></td></tr
><tr id="gr_svn141_2518"

><td id="2518"><a href="#2518">2518</a></td></tr
><tr id="gr_svn141_2519"

><td id="2519"><a href="#2519">2519</a></td></tr
><tr id="gr_svn141_2520"

><td id="2520"><a href="#2520">2520</a></td></tr
><tr id="gr_svn141_2521"

><td id="2521"><a href="#2521">2521</a></td></tr
><tr id="gr_svn141_2522"

><td id="2522"><a href="#2522">2522</a></td></tr
><tr id="gr_svn141_2523"

><td id="2523"><a href="#2523">2523</a></td></tr
><tr id="gr_svn141_2524"

><td id="2524"><a href="#2524">2524</a></td></tr
><tr id="gr_svn141_2525"

><td id="2525"><a href="#2525">2525</a></td></tr
><tr id="gr_svn141_2526"

><td id="2526"><a href="#2526">2526</a></td></tr
><tr id="gr_svn141_2527"

><td id="2527"><a href="#2527">2527</a></td></tr
><tr id="gr_svn141_2528"

><td id="2528"><a href="#2528">2528</a></td></tr
><tr id="gr_svn141_2529"

><td id="2529"><a href="#2529">2529</a></td></tr
><tr id="gr_svn141_2530"

><td id="2530"><a href="#2530">2530</a></td></tr
><tr id="gr_svn141_2531"

><td id="2531"><a href="#2531">2531</a></td></tr
><tr id="gr_svn141_2532"

><td id="2532"><a href="#2532">2532</a></td></tr
><tr id="gr_svn141_2533"

><td id="2533"><a href="#2533">2533</a></td></tr
><tr id="gr_svn141_2534"

><td id="2534"><a href="#2534">2534</a></td></tr
><tr id="gr_svn141_2535"

><td id="2535"><a href="#2535">2535</a></td></tr
><tr id="gr_svn141_2536"

><td id="2536"><a href="#2536">2536</a></td></tr
><tr id="gr_svn141_2537"

><td id="2537"><a href="#2537">2537</a></td></tr
><tr id="gr_svn141_2538"

><td id="2538"><a href="#2538">2538</a></td></tr
><tr id="gr_svn141_2539"

><td id="2539"><a href="#2539">2539</a></td></tr
><tr id="gr_svn141_2540"

><td id="2540"><a href="#2540">2540</a></td></tr
><tr id="gr_svn141_2541"

><td id="2541"><a href="#2541">2541</a></td></tr
><tr id="gr_svn141_2542"

><td id="2542"><a href="#2542">2542</a></td></tr
><tr id="gr_svn141_2543"

><td id="2543"><a href="#2543">2543</a></td></tr
><tr id="gr_svn141_2544"

><td id="2544"><a href="#2544">2544</a></td></tr
><tr id="gr_svn141_2545"

><td id="2545"><a href="#2545">2545</a></td></tr
><tr id="gr_svn141_2546"

><td id="2546"><a href="#2546">2546</a></td></tr
><tr id="gr_svn141_2547"

><td id="2547"><a href="#2547">2547</a></td></tr
><tr id="gr_svn141_2548"

><td id="2548"><a href="#2548">2548</a></td></tr
><tr id="gr_svn141_2549"

><td id="2549"><a href="#2549">2549</a></td></tr
><tr id="gr_svn141_2550"

><td id="2550"><a href="#2550">2550</a></td></tr
><tr id="gr_svn141_2551"

><td id="2551"><a href="#2551">2551</a></td></tr
><tr id="gr_svn141_2552"

><td id="2552"><a href="#2552">2552</a></td></tr
><tr id="gr_svn141_2553"

><td id="2553"><a href="#2553">2553</a></td></tr
><tr id="gr_svn141_2554"

><td id="2554"><a href="#2554">2554</a></td></tr
><tr id="gr_svn141_2555"

><td id="2555"><a href="#2555">2555</a></td></tr
><tr id="gr_svn141_2556"

><td id="2556"><a href="#2556">2556</a></td></tr
><tr id="gr_svn141_2557"

><td id="2557"><a href="#2557">2557</a></td></tr
><tr id="gr_svn141_2558"

><td id="2558"><a href="#2558">2558</a></td></tr
><tr id="gr_svn141_2559"

><td id="2559"><a href="#2559">2559</a></td></tr
><tr id="gr_svn141_2560"

><td id="2560"><a href="#2560">2560</a></td></tr
><tr id="gr_svn141_2561"

><td id="2561"><a href="#2561">2561</a></td></tr
><tr id="gr_svn141_2562"

><td id="2562"><a href="#2562">2562</a></td></tr
><tr id="gr_svn141_2563"

><td id="2563"><a href="#2563">2563</a></td></tr
><tr id="gr_svn141_2564"

><td id="2564"><a href="#2564">2564</a></td></tr
><tr id="gr_svn141_2565"

><td id="2565"><a href="#2565">2565</a></td></tr
><tr id="gr_svn141_2566"

><td id="2566"><a href="#2566">2566</a></td></tr
><tr id="gr_svn141_2567"

><td id="2567"><a href="#2567">2567</a></td></tr
><tr id="gr_svn141_2568"

><td id="2568"><a href="#2568">2568</a></td></tr
><tr id="gr_svn141_2569"

><td id="2569"><a href="#2569">2569</a></td></tr
><tr id="gr_svn141_2570"

><td id="2570"><a href="#2570">2570</a></td></tr
><tr id="gr_svn141_2571"

><td id="2571"><a href="#2571">2571</a></td></tr
><tr id="gr_svn141_2572"

><td id="2572"><a href="#2572">2572</a></td></tr
><tr id="gr_svn141_2573"

><td id="2573"><a href="#2573">2573</a></td></tr
><tr id="gr_svn141_2574"

><td id="2574"><a href="#2574">2574</a></td></tr
><tr id="gr_svn141_2575"

><td id="2575"><a href="#2575">2575</a></td></tr
><tr id="gr_svn141_2576"

><td id="2576"><a href="#2576">2576</a></td></tr
><tr id="gr_svn141_2577"

><td id="2577"><a href="#2577">2577</a></td></tr
><tr id="gr_svn141_2578"

><td id="2578"><a href="#2578">2578</a></td></tr
><tr id="gr_svn141_2579"

><td id="2579"><a href="#2579">2579</a></td></tr
><tr id="gr_svn141_2580"

><td id="2580"><a href="#2580">2580</a></td></tr
><tr id="gr_svn141_2581"

><td id="2581"><a href="#2581">2581</a></td></tr
><tr id="gr_svn141_2582"

><td id="2582"><a href="#2582">2582</a></td></tr
><tr id="gr_svn141_2583"

><td id="2583"><a href="#2583">2583</a></td></tr
><tr id="gr_svn141_2584"

><td id="2584"><a href="#2584">2584</a></td></tr
><tr id="gr_svn141_2585"

><td id="2585"><a href="#2585">2585</a></td></tr
><tr id="gr_svn141_2586"

><td id="2586"><a href="#2586">2586</a></td></tr
><tr id="gr_svn141_2587"

><td id="2587"><a href="#2587">2587</a></td></tr
><tr id="gr_svn141_2588"

><td id="2588"><a href="#2588">2588</a></td></tr
><tr id="gr_svn141_2589"

><td id="2589"><a href="#2589">2589</a></td></tr
><tr id="gr_svn141_2590"

><td id="2590"><a href="#2590">2590</a></td></tr
><tr id="gr_svn141_2591"

><td id="2591"><a href="#2591">2591</a></td></tr
><tr id="gr_svn141_2592"

><td id="2592"><a href="#2592">2592</a></td></tr
><tr id="gr_svn141_2593"

><td id="2593"><a href="#2593">2593</a></td></tr
><tr id="gr_svn141_2594"

><td id="2594"><a href="#2594">2594</a></td></tr
><tr id="gr_svn141_2595"

><td id="2595"><a href="#2595">2595</a></td></tr
><tr id="gr_svn141_2596"

><td id="2596"><a href="#2596">2596</a></td></tr
><tr id="gr_svn141_2597"

><td id="2597"><a href="#2597">2597</a></td></tr
><tr id="gr_svn141_2598"

><td id="2598"><a href="#2598">2598</a></td></tr
><tr id="gr_svn141_2599"

><td id="2599"><a href="#2599">2599</a></td></tr
><tr id="gr_svn141_2600"

><td id="2600"><a href="#2600">2600</a></td></tr
><tr id="gr_svn141_2601"

><td id="2601"><a href="#2601">2601</a></td></tr
><tr id="gr_svn141_2602"

><td id="2602"><a href="#2602">2602</a></td></tr
><tr id="gr_svn141_2603"

><td id="2603"><a href="#2603">2603</a></td></tr
><tr id="gr_svn141_2604"

><td id="2604"><a href="#2604">2604</a></td></tr
><tr id="gr_svn141_2605"

><td id="2605"><a href="#2605">2605</a></td></tr
><tr id="gr_svn141_2606"

><td id="2606"><a href="#2606">2606</a></td></tr
><tr id="gr_svn141_2607"

><td id="2607"><a href="#2607">2607</a></td></tr
><tr id="gr_svn141_2608"

><td id="2608"><a href="#2608">2608</a></td></tr
><tr id="gr_svn141_2609"

><td id="2609"><a href="#2609">2609</a></td></tr
><tr id="gr_svn141_2610"

><td id="2610"><a href="#2610">2610</a></td></tr
><tr id="gr_svn141_2611"

><td id="2611"><a href="#2611">2611</a></td></tr
><tr id="gr_svn141_2612"

><td id="2612"><a href="#2612">2612</a></td></tr
><tr id="gr_svn141_2613"

><td id="2613"><a href="#2613">2613</a></td></tr
><tr id="gr_svn141_2614"

><td id="2614"><a href="#2614">2614</a></td></tr
><tr id="gr_svn141_2615"

><td id="2615"><a href="#2615">2615</a></td></tr
><tr id="gr_svn141_2616"

><td id="2616"><a href="#2616">2616</a></td></tr
><tr id="gr_svn141_2617"

><td id="2617"><a href="#2617">2617</a></td></tr
><tr id="gr_svn141_2618"

><td id="2618"><a href="#2618">2618</a></td></tr
><tr id="gr_svn141_2619"

><td id="2619"><a href="#2619">2619</a></td></tr
><tr id="gr_svn141_2620"

><td id="2620"><a href="#2620">2620</a></td></tr
><tr id="gr_svn141_2621"

><td id="2621"><a href="#2621">2621</a></td></tr
><tr id="gr_svn141_2622"

><td id="2622"><a href="#2622">2622</a></td></tr
><tr id="gr_svn141_2623"

><td id="2623"><a href="#2623">2623</a></td></tr
><tr id="gr_svn141_2624"

><td id="2624"><a href="#2624">2624</a></td></tr
><tr id="gr_svn141_2625"

><td id="2625"><a href="#2625">2625</a></td></tr
><tr id="gr_svn141_2626"

><td id="2626"><a href="#2626">2626</a></td></tr
><tr id="gr_svn141_2627"

><td id="2627"><a href="#2627">2627</a></td></tr
><tr id="gr_svn141_2628"

><td id="2628"><a href="#2628">2628</a></td></tr
><tr id="gr_svn141_2629"

><td id="2629"><a href="#2629">2629</a></td></tr
><tr id="gr_svn141_2630"

><td id="2630"><a href="#2630">2630</a></td></tr
><tr id="gr_svn141_2631"

><td id="2631"><a href="#2631">2631</a></td></tr
><tr id="gr_svn141_2632"

><td id="2632"><a href="#2632">2632</a></td></tr
><tr id="gr_svn141_2633"

><td id="2633"><a href="#2633">2633</a></td></tr
><tr id="gr_svn141_2634"

><td id="2634"><a href="#2634">2634</a></td></tr
><tr id="gr_svn141_2635"

><td id="2635"><a href="#2635">2635</a></td></tr
><tr id="gr_svn141_2636"

><td id="2636"><a href="#2636">2636</a></td></tr
><tr id="gr_svn141_2637"

><td id="2637"><a href="#2637">2637</a></td></tr
><tr id="gr_svn141_2638"

><td id="2638"><a href="#2638">2638</a></td></tr
><tr id="gr_svn141_2639"

><td id="2639"><a href="#2639">2639</a></td></tr
><tr id="gr_svn141_2640"

><td id="2640"><a href="#2640">2640</a></td></tr
><tr id="gr_svn141_2641"

><td id="2641"><a href="#2641">2641</a></td></tr
><tr id="gr_svn141_2642"

><td id="2642"><a href="#2642">2642</a></td></tr
><tr id="gr_svn141_2643"

><td id="2643"><a href="#2643">2643</a></td></tr
><tr id="gr_svn141_2644"

><td id="2644"><a href="#2644">2644</a></td></tr
><tr id="gr_svn141_2645"

><td id="2645"><a href="#2645">2645</a></td></tr
><tr id="gr_svn141_2646"

><td id="2646"><a href="#2646">2646</a></td></tr
><tr id="gr_svn141_2647"

><td id="2647"><a href="#2647">2647</a></td></tr
><tr id="gr_svn141_2648"

><td id="2648"><a href="#2648">2648</a></td></tr
><tr id="gr_svn141_2649"

><td id="2649"><a href="#2649">2649</a></td></tr
><tr id="gr_svn141_2650"

><td id="2650"><a href="#2650">2650</a></td></tr
><tr id="gr_svn141_2651"

><td id="2651"><a href="#2651">2651</a></td></tr
><tr id="gr_svn141_2652"

><td id="2652"><a href="#2652">2652</a></td></tr
><tr id="gr_svn141_2653"

><td id="2653"><a href="#2653">2653</a></td></tr
><tr id="gr_svn141_2654"

><td id="2654"><a href="#2654">2654</a></td></tr
><tr id="gr_svn141_2655"

><td id="2655"><a href="#2655">2655</a></td></tr
><tr id="gr_svn141_2656"

><td id="2656"><a href="#2656">2656</a></td></tr
><tr id="gr_svn141_2657"

><td id="2657"><a href="#2657">2657</a></td></tr
><tr id="gr_svn141_2658"

><td id="2658"><a href="#2658">2658</a></td></tr
><tr id="gr_svn141_2659"

><td id="2659"><a href="#2659">2659</a></td></tr
><tr id="gr_svn141_2660"

><td id="2660"><a href="#2660">2660</a></td></tr
><tr id="gr_svn141_2661"

><td id="2661"><a href="#2661">2661</a></td></tr
><tr id="gr_svn141_2662"

><td id="2662"><a href="#2662">2662</a></td></tr
><tr id="gr_svn141_2663"

><td id="2663"><a href="#2663">2663</a></td></tr
><tr id="gr_svn141_2664"

><td id="2664"><a href="#2664">2664</a></td></tr
><tr id="gr_svn141_2665"

><td id="2665"><a href="#2665">2665</a></td></tr
><tr id="gr_svn141_2666"

><td id="2666"><a href="#2666">2666</a></td></tr
><tr id="gr_svn141_2667"

><td id="2667"><a href="#2667">2667</a></td></tr
><tr id="gr_svn141_2668"

><td id="2668"><a href="#2668">2668</a></td></tr
><tr id="gr_svn141_2669"

><td id="2669"><a href="#2669">2669</a></td></tr
><tr id="gr_svn141_2670"

><td id="2670"><a href="#2670">2670</a></td></tr
><tr id="gr_svn141_2671"

><td id="2671"><a href="#2671">2671</a></td></tr
><tr id="gr_svn141_2672"

><td id="2672"><a href="#2672">2672</a></td></tr
><tr id="gr_svn141_2673"

><td id="2673"><a href="#2673">2673</a></td></tr
><tr id="gr_svn141_2674"

><td id="2674"><a href="#2674">2674</a></td></tr
><tr id="gr_svn141_2675"

><td id="2675"><a href="#2675">2675</a></td></tr
><tr id="gr_svn141_2676"

><td id="2676"><a href="#2676">2676</a></td></tr
><tr id="gr_svn141_2677"

><td id="2677"><a href="#2677">2677</a></td></tr
><tr id="gr_svn141_2678"

><td id="2678"><a href="#2678">2678</a></td></tr
><tr id="gr_svn141_2679"

><td id="2679"><a href="#2679">2679</a></td></tr
><tr id="gr_svn141_2680"

><td id="2680"><a href="#2680">2680</a></td></tr
><tr id="gr_svn141_2681"

><td id="2681"><a href="#2681">2681</a></td></tr
><tr id="gr_svn141_2682"

><td id="2682"><a href="#2682">2682</a></td></tr
><tr id="gr_svn141_2683"

><td id="2683"><a href="#2683">2683</a></td></tr
><tr id="gr_svn141_2684"

><td id="2684"><a href="#2684">2684</a></td></tr
><tr id="gr_svn141_2685"

><td id="2685"><a href="#2685">2685</a></td></tr
><tr id="gr_svn141_2686"

><td id="2686"><a href="#2686">2686</a></td></tr
><tr id="gr_svn141_2687"

><td id="2687"><a href="#2687">2687</a></td></tr
><tr id="gr_svn141_2688"

><td id="2688"><a href="#2688">2688</a></td></tr
><tr id="gr_svn141_2689"

><td id="2689"><a href="#2689">2689</a></td></tr
><tr id="gr_svn141_2690"

><td id="2690"><a href="#2690">2690</a></td></tr
><tr id="gr_svn141_2691"

><td id="2691"><a href="#2691">2691</a></td></tr
><tr id="gr_svn141_2692"

><td id="2692"><a href="#2692">2692</a></td></tr
><tr id="gr_svn141_2693"

><td id="2693"><a href="#2693">2693</a></td></tr
><tr id="gr_svn141_2694"

><td id="2694"><a href="#2694">2694</a></td></tr
><tr id="gr_svn141_2695"

><td id="2695"><a href="#2695">2695</a></td></tr
><tr id="gr_svn141_2696"

><td id="2696"><a href="#2696">2696</a></td></tr
><tr id="gr_svn141_2697"

><td id="2697"><a href="#2697">2697</a></td></tr
><tr id="gr_svn141_2698"

><td id="2698"><a href="#2698">2698</a></td></tr
><tr id="gr_svn141_2699"

><td id="2699"><a href="#2699">2699</a></td></tr
><tr id="gr_svn141_2700"

><td id="2700"><a href="#2700">2700</a></td></tr
><tr id="gr_svn141_2701"

><td id="2701"><a href="#2701">2701</a></td></tr
><tr id="gr_svn141_2702"

><td id="2702"><a href="#2702">2702</a></td></tr
><tr id="gr_svn141_2703"

><td id="2703"><a href="#2703">2703</a></td></tr
><tr id="gr_svn141_2704"

><td id="2704"><a href="#2704">2704</a></td></tr
><tr id="gr_svn141_2705"

><td id="2705"><a href="#2705">2705</a></td></tr
><tr id="gr_svn141_2706"

><td id="2706"><a href="#2706">2706</a></td></tr
><tr id="gr_svn141_2707"

><td id="2707"><a href="#2707">2707</a></td></tr
><tr id="gr_svn141_2708"

><td id="2708"><a href="#2708">2708</a></td></tr
><tr id="gr_svn141_2709"

><td id="2709"><a href="#2709">2709</a></td></tr
><tr id="gr_svn141_2710"

><td id="2710"><a href="#2710">2710</a></td></tr
><tr id="gr_svn141_2711"

><td id="2711"><a href="#2711">2711</a></td></tr
><tr id="gr_svn141_2712"

><td id="2712"><a href="#2712">2712</a></td></tr
><tr id="gr_svn141_2713"

><td id="2713"><a href="#2713">2713</a></td></tr
><tr id="gr_svn141_2714"

><td id="2714"><a href="#2714">2714</a></td></tr
><tr id="gr_svn141_2715"

><td id="2715"><a href="#2715">2715</a></td></tr
><tr id="gr_svn141_2716"

><td id="2716"><a href="#2716">2716</a></td></tr
><tr id="gr_svn141_2717"

><td id="2717"><a href="#2717">2717</a></td></tr
><tr id="gr_svn141_2718"

><td id="2718"><a href="#2718">2718</a></td></tr
><tr id="gr_svn141_2719"

><td id="2719"><a href="#2719">2719</a></td></tr
><tr id="gr_svn141_2720"

><td id="2720"><a href="#2720">2720</a></td></tr
><tr id="gr_svn141_2721"

><td id="2721"><a href="#2721">2721</a></td></tr
><tr id="gr_svn141_2722"

><td id="2722"><a href="#2722">2722</a></td></tr
><tr id="gr_svn141_2723"

><td id="2723"><a href="#2723">2723</a></td></tr
><tr id="gr_svn141_2724"

><td id="2724"><a href="#2724">2724</a></td></tr
><tr id="gr_svn141_2725"

><td id="2725"><a href="#2725">2725</a></td></tr
><tr id="gr_svn141_2726"

><td id="2726"><a href="#2726">2726</a></td></tr
><tr id="gr_svn141_2727"

><td id="2727"><a href="#2727">2727</a></td></tr
><tr id="gr_svn141_2728"

><td id="2728"><a href="#2728">2728</a></td></tr
><tr id="gr_svn141_2729"

><td id="2729"><a href="#2729">2729</a></td></tr
><tr id="gr_svn141_2730"

><td id="2730"><a href="#2730">2730</a></td></tr
><tr id="gr_svn141_2731"

><td id="2731"><a href="#2731">2731</a></td></tr
><tr id="gr_svn141_2732"

><td id="2732"><a href="#2732">2732</a></td></tr
><tr id="gr_svn141_2733"

><td id="2733"><a href="#2733">2733</a></td></tr
><tr id="gr_svn141_2734"

><td id="2734"><a href="#2734">2734</a></td></tr
><tr id="gr_svn141_2735"

><td id="2735"><a href="#2735">2735</a></td></tr
><tr id="gr_svn141_2736"

><td id="2736"><a href="#2736">2736</a></td></tr
><tr id="gr_svn141_2737"

><td id="2737"><a href="#2737">2737</a></td></tr
><tr id="gr_svn141_2738"

><td id="2738"><a href="#2738">2738</a></td></tr
><tr id="gr_svn141_2739"

><td id="2739"><a href="#2739">2739</a></td></tr
><tr id="gr_svn141_2740"

><td id="2740"><a href="#2740">2740</a></td></tr
><tr id="gr_svn141_2741"

><td id="2741"><a href="#2741">2741</a></td></tr
><tr id="gr_svn141_2742"

><td id="2742"><a href="#2742">2742</a></td></tr
><tr id="gr_svn141_2743"

><td id="2743"><a href="#2743">2743</a></td></tr
><tr id="gr_svn141_2744"

><td id="2744"><a href="#2744">2744</a></td></tr
><tr id="gr_svn141_2745"

><td id="2745"><a href="#2745">2745</a></td></tr
><tr id="gr_svn141_2746"

><td id="2746"><a href="#2746">2746</a></td></tr
><tr id="gr_svn141_2747"

><td id="2747"><a href="#2747">2747</a></td></tr
><tr id="gr_svn141_2748"

><td id="2748"><a href="#2748">2748</a></td></tr
><tr id="gr_svn141_2749"

><td id="2749"><a href="#2749">2749</a></td></tr
><tr id="gr_svn141_2750"

><td id="2750"><a href="#2750">2750</a></td></tr
><tr id="gr_svn141_2751"

><td id="2751"><a href="#2751">2751</a></td></tr
><tr id="gr_svn141_2752"

><td id="2752"><a href="#2752">2752</a></td></tr
><tr id="gr_svn141_2753"

><td id="2753"><a href="#2753">2753</a></td></tr
><tr id="gr_svn141_2754"

><td id="2754"><a href="#2754">2754</a></td></tr
><tr id="gr_svn141_2755"

><td id="2755"><a href="#2755">2755</a></td></tr
><tr id="gr_svn141_2756"

><td id="2756"><a href="#2756">2756</a></td></tr
><tr id="gr_svn141_2757"

><td id="2757"><a href="#2757">2757</a></td></tr
><tr id="gr_svn141_2758"

><td id="2758"><a href="#2758">2758</a></td></tr
><tr id="gr_svn141_2759"

><td id="2759"><a href="#2759">2759</a></td></tr
><tr id="gr_svn141_2760"

><td id="2760"><a href="#2760">2760</a></td></tr
><tr id="gr_svn141_2761"

><td id="2761"><a href="#2761">2761</a></td></tr
><tr id="gr_svn141_2762"

><td id="2762"><a href="#2762">2762</a></td></tr
><tr id="gr_svn141_2763"

><td id="2763"><a href="#2763">2763</a></td></tr
><tr id="gr_svn141_2764"

><td id="2764"><a href="#2764">2764</a></td></tr
><tr id="gr_svn141_2765"

><td id="2765"><a href="#2765">2765</a></td></tr
><tr id="gr_svn141_2766"

><td id="2766"><a href="#2766">2766</a></td></tr
><tr id="gr_svn141_2767"

><td id="2767"><a href="#2767">2767</a></td></tr
><tr id="gr_svn141_2768"

><td id="2768"><a href="#2768">2768</a></td></tr
><tr id="gr_svn141_2769"

><td id="2769"><a href="#2769">2769</a></td></tr
><tr id="gr_svn141_2770"

><td id="2770"><a href="#2770">2770</a></td></tr
><tr id="gr_svn141_2771"

><td id="2771"><a href="#2771">2771</a></td></tr
><tr id="gr_svn141_2772"

><td id="2772"><a href="#2772">2772</a></td></tr
><tr id="gr_svn141_2773"

><td id="2773"><a href="#2773">2773</a></td></tr
><tr id="gr_svn141_2774"

><td id="2774"><a href="#2774">2774</a></td></tr
><tr id="gr_svn141_2775"

><td id="2775"><a href="#2775">2775</a></td></tr
><tr id="gr_svn141_2776"

><td id="2776"><a href="#2776">2776</a></td></tr
><tr id="gr_svn141_2777"

><td id="2777"><a href="#2777">2777</a></td></tr
><tr id="gr_svn141_2778"

><td id="2778"><a href="#2778">2778</a></td></tr
><tr id="gr_svn141_2779"

><td id="2779"><a href="#2779">2779</a></td></tr
><tr id="gr_svn141_2780"

><td id="2780"><a href="#2780">2780</a></td></tr
><tr id="gr_svn141_2781"

><td id="2781"><a href="#2781">2781</a></td></tr
><tr id="gr_svn141_2782"

><td id="2782"><a href="#2782">2782</a></td></tr
><tr id="gr_svn141_2783"

><td id="2783"><a href="#2783">2783</a></td></tr
><tr id="gr_svn141_2784"

><td id="2784"><a href="#2784">2784</a></td></tr
><tr id="gr_svn141_2785"

><td id="2785"><a href="#2785">2785</a></td></tr
><tr id="gr_svn141_2786"

><td id="2786"><a href="#2786">2786</a></td></tr
><tr id="gr_svn141_2787"

><td id="2787"><a href="#2787">2787</a></td></tr
><tr id="gr_svn141_2788"

><td id="2788"><a href="#2788">2788</a></td></tr
><tr id="gr_svn141_2789"

><td id="2789"><a href="#2789">2789</a></td></tr
><tr id="gr_svn141_2790"

><td id="2790"><a href="#2790">2790</a></td></tr
><tr id="gr_svn141_2791"

><td id="2791"><a href="#2791">2791</a></td></tr
><tr id="gr_svn141_2792"

><td id="2792"><a href="#2792">2792</a></td></tr
><tr id="gr_svn141_2793"

><td id="2793"><a href="#2793">2793</a></td></tr
><tr id="gr_svn141_2794"

><td id="2794"><a href="#2794">2794</a></td></tr
><tr id="gr_svn141_2795"

><td id="2795"><a href="#2795">2795</a></td></tr
><tr id="gr_svn141_2796"

><td id="2796"><a href="#2796">2796</a></td></tr
><tr id="gr_svn141_2797"

><td id="2797"><a href="#2797">2797</a></td></tr
><tr id="gr_svn141_2798"

><td id="2798"><a href="#2798">2798</a></td></tr
><tr id="gr_svn141_2799"

><td id="2799"><a href="#2799">2799</a></td></tr
><tr id="gr_svn141_2800"

><td id="2800"><a href="#2800">2800</a></td></tr
><tr id="gr_svn141_2801"

><td id="2801"><a href="#2801">2801</a></td></tr
><tr id="gr_svn141_2802"

><td id="2802"><a href="#2802">2802</a></td></tr
><tr id="gr_svn141_2803"

><td id="2803"><a href="#2803">2803</a></td></tr
><tr id="gr_svn141_2804"

><td id="2804"><a href="#2804">2804</a></td></tr
><tr id="gr_svn141_2805"

><td id="2805"><a href="#2805">2805</a></td></tr
><tr id="gr_svn141_2806"

><td id="2806"><a href="#2806">2806</a></td></tr
><tr id="gr_svn141_2807"

><td id="2807"><a href="#2807">2807</a></td></tr
><tr id="gr_svn141_2808"

><td id="2808"><a href="#2808">2808</a></td></tr
><tr id="gr_svn141_2809"

><td id="2809"><a href="#2809">2809</a></td></tr
><tr id="gr_svn141_2810"

><td id="2810"><a href="#2810">2810</a></td></tr
><tr id="gr_svn141_2811"

><td id="2811"><a href="#2811">2811</a></td></tr
><tr id="gr_svn141_2812"

><td id="2812"><a href="#2812">2812</a></td></tr
><tr id="gr_svn141_2813"

><td id="2813"><a href="#2813">2813</a></td></tr
><tr id="gr_svn141_2814"

><td id="2814"><a href="#2814">2814</a></td></tr
><tr id="gr_svn141_2815"

><td id="2815"><a href="#2815">2815</a></td></tr
><tr id="gr_svn141_2816"

><td id="2816"><a href="#2816">2816</a></td></tr
><tr id="gr_svn141_2817"

><td id="2817"><a href="#2817">2817</a></td></tr
><tr id="gr_svn141_2818"

><td id="2818"><a href="#2818">2818</a></td></tr
><tr id="gr_svn141_2819"

><td id="2819"><a href="#2819">2819</a></td></tr
><tr id="gr_svn141_2820"

><td id="2820"><a href="#2820">2820</a></td></tr
><tr id="gr_svn141_2821"

><td id="2821"><a href="#2821">2821</a></td></tr
><tr id="gr_svn141_2822"

><td id="2822"><a href="#2822">2822</a></td></tr
><tr id="gr_svn141_2823"

><td id="2823"><a href="#2823">2823</a></td></tr
><tr id="gr_svn141_2824"

><td id="2824"><a href="#2824">2824</a></td></tr
><tr id="gr_svn141_2825"

><td id="2825"><a href="#2825">2825</a></td></tr
><tr id="gr_svn141_2826"

><td id="2826"><a href="#2826">2826</a></td></tr
><tr id="gr_svn141_2827"

><td id="2827"><a href="#2827">2827</a></td></tr
><tr id="gr_svn141_2828"

><td id="2828"><a href="#2828">2828</a></td></tr
><tr id="gr_svn141_2829"

><td id="2829"><a href="#2829">2829</a></td></tr
><tr id="gr_svn141_2830"

><td id="2830"><a href="#2830">2830</a></td></tr
><tr id="gr_svn141_2831"

><td id="2831"><a href="#2831">2831</a></td></tr
><tr id="gr_svn141_2832"

><td id="2832"><a href="#2832">2832</a></td></tr
><tr id="gr_svn141_2833"

><td id="2833"><a href="#2833">2833</a></td></tr
><tr id="gr_svn141_2834"

><td id="2834"><a href="#2834">2834</a></td></tr
><tr id="gr_svn141_2835"

><td id="2835"><a href="#2835">2835</a></td></tr
><tr id="gr_svn141_2836"

><td id="2836"><a href="#2836">2836</a></td></tr
><tr id="gr_svn141_2837"

><td id="2837"><a href="#2837">2837</a></td></tr
><tr id="gr_svn141_2838"

><td id="2838"><a href="#2838">2838</a></td></tr
><tr id="gr_svn141_2839"

><td id="2839"><a href="#2839">2839</a></td></tr
><tr id="gr_svn141_2840"

><td id="2840"><a href="#2840">2840</a></td></tr
><tr id="gr_svn141_2841"

><td id="2841"><a href="#2841">2841</a></td></tr
><tr id="gr_svn141_2842"

><td id="2842"><a href="#2842">2842</a></td></tr
><tr id="gr_svn141_2843"

><td id="2843"><a href="#2843">2843</a></td></tr
><tr id="gr_svn141_2844"

><td id="2844"><a href="#2844">2844</a></td></tr
><tr id="gr_svn141_2845"

><td id="2845"><a href="#2845">2845</a></td></tr
><tr id="gr_svn141_2846"

><td id="2846"><a href="#2846">2846</a></td></tr
><tr id="gr_svn141_2847"

><td id="2847"><a href="#2847">2847</a></td></tr
><tr id="gr_svn141_2848"

><td id="2848"><a href="#2848">2848</a></td></tr
><tr id="gr_svn141_2849"

><td id="2849"><a href="#2849">2849</a></td></tr
><tr id="gr_svn141_2850"

><td id="2850"><a href="#2850">2850</a></td></tr
><tr id="gr_svn141_2851"

><td id="2851"><a href="#2851">2851</a></td></tr
><tr id="gr_svn141_2852"

><td id="2852"><a href="#2852">2852</a></td></tr
><tr id="gr_svn141_2853"

><td id="2853"><a href="#2853">2853</a></td></tr
><tr id="gr_svn141_2854"

><td id="2854"><a href="#2854">2854</a></td></tr
><tr id="gr_svn141_2855"

><td id="2855"><a href="#2855">2855</a></td></tr
><tr id="gr_svn141_2856"

><td id="2856"><a href="#2856">2856</a></td></tr
><tr id="gr_svn141_2857"

><td id="2857"><a href="#2857">2857</a></td></tr
><tr id="gr_svn141_2858"

><td id="2858"><a href="#2858">2858</a></td></tr
><tr id="gr_svn141_2859"

><td id="2859"><a href="#2859">2859</a></td></tr
><tr id="gr_svn141_2860"

><td id="2860"><a href="#2860">2860</a></td></tr
><tr id="gr_svn141_2861"

><td id="2861"><a href="#2861">2861</a></td></tr
><tr id="gr_svn141_2862"

><td id="2862"><a href="#2862">2862</a></td></tr
><tr id="gr_svn141_2863"

><td id="2863"><a href="#2863">2863</a></td></tr
><tr id="gr_svn141_2864"

><td id="2864"><a href="#2864">2864</a></td></tr
><tr id="gr_svn141_2865"

><td id="2865"><a href="#2865">2865</a></td></tr
><tr id="gr_svn141_2866"

><td id="2866"><a href="#2866">2866</a></td></tr
><tr id="gr_svn141_2867"

><td id="2867"><a href="#2867">2867</a></td></tr
><tr id="gr_svn141_2868"

><td id="2868"><a href="#2868">2868</a></td></tr
><tr id="gr_svn141_2869"

><td id="2869"><a href="#2869">2869</a></td></tr
><tr id="gr_svn141_2870"

><td id="2870"><a href="#2870">2870</a></td></tr
><tr id="gr_svn141_2871"

><td id="2871"><a href="#2871">2871</a></td></tr
><tr id="gr_svn141_2872"

><td id="2872"><a href="#2872">2872</a></td></tr
><tr id="gr_svn141_2873"

><td id="2873"><a href="#2873">2873</a></td></tr
><tr id="gr_svn141_2874"

><td id="2874"><a href="#2874">2874</a></td></tr
><tr id="gr_svn141_2875"

><td id="2875"><a href="#2875">2875</a></td></tr
><tr id="gr_svn141_2876"

><td id="2876"><a href="#2876">2876</a></td></tr
><tr id="gr_svn141_2877"

><td id="2877"><a href="#2877">2877</a></td></tr
><tr id="gr_svn141_2878"

><td id="2878"><a href="#2878">2878</a></td></tr
><tr id="gr_svn141_2879"

><td id="2879"><a href="#2879">2879</a></td></tr
><tr id="gr_svn141_2880"

><td id="2880"><a href="#2880">2880</a></td></tr
><tr id="gr_svn141_2881"

><td id="2881"><a href="#2881">2881</a></td></tr
><tr id="gr_svn141_2882"

><td id="2882"><a href="#2882">2882</a></td></tr
><tr id="gr_svn141_2883"

><td id="2883"><a href="#2883">2883</a></td></tr
><tr id="gr_svn141_2884"

><td id="2884"><a href="#2884">2884</a></td></tr
><tr id="gr_svn141_2885"

><td id="2885"><a href="#2885">2885</a></td></tr
><tr id="gr_svn141_2886"

><td id="2886"><a href="#2886">2886</a></td></tr
><tr id="gr_svn141_2887"

><td id="2887"><a href="#2887">2887</a></td></tr
><tr id="gr_svn141_2888"

><td id="2888"><a href="#2888">2888</a></td></tr
><tr id="gr_svn141_2889"

><td id="2889"><a href="#2889">2889</a></td></tr
><tr id="gr_svn141_2890"

><td id="2890"><a href="#2890">2890</a></td></tr
><tr id="gr_svn141_2891"

><td id="2891"><a href="#2891">2891</a></td></tr
><tr id="gr_svn141_2892"

><td id="2892"><a href="#2892">2892</a></td></tr
><tr id="gr_svn141_2893"

><td id="2893"><a href="#2893">2893</a></td></tr
><tr id="gr_svn141_2894"

><td id="2894"><a href="#2894">2894</a></td></tr
><tr id="gr_svn141_2895"

><td id="2895"><a href="#2895">2895</a></td></tr
><tr id="gr_svn141_2896"

><td id="2896"><a href="#2896">2896</a></td></tr
><tr id="gr_svn141_2897"

><td id="2897"><a href="#2897">2897</a></td></tr
><tr id="gr_svn141_2898"

><td id="2898"><a href="#2898">2898</a></td></tr
><tr id="gr_svn141_2899"

><td id="2899"><a href="#2899">2899</a></td></tr
><tr id="gr_svn141_2900"

><td id="2900"><a href="#2900">2900</a></td></tr
><tr id="gr_svn141_2901"

><td id="2901"><a href="#2901">2901</a></td></tr
><tr id="gr_svn141_2902"

><td id="2902"><a href="#2902">2902</a></td></tr
><tr id="gr_svn141_2903"

><td id="2903"><a href="#2903">2903</a></td></tr
><tr id="gr_svn141_2904"

><td id="2904"><a href="#2904">2904</a></td></tr
><tr id="gr_svn141_2905"

><td id="2905"><a href="#2905">2905</a></td></tr
><tr id="gr_svn141_2906"

><td id="2906"><a href="#2906">2906</a></td></tr
><tr id="gr_svn141_2907"

><td id="2907"><a href="#2907">2907</a></td></tr
><tr id="gr_svn141_2908"

><td id="2908"><a href="#2908">2908</a></td></tr
><tr id="gr_svn141_2909"

><td id="2909"><a href="#2909">2909</a></td></tr
><tr id="gr_svn141_2910"

><td id="2910"><a href="#2910">2910</a></td></tr
><tr id="gr_svn141_2911"

><td id="2911"><a href="#2911">2911</a></td></tr
><tr id="gr_svn141_2912"

><td id="2912"><a href="#2912">2912</a></td></tr
><tr id="gr_svn141_2913"

><td id="2913"><a href="#2913">2913</a></td></tr
><tr id="gr_svn141_2914"

><td id="2914"><a href="#2914">2914</a></td></tr
><tr id="gr_svn141_2915"

><td id="2915"><a href="#2915">2915</a></td></tr
><tr id="gr_svn141_2916"

><td id="2916"><a href="#2916">2916</a></td></tr
><tr id="gr_svn141_2917"

><td id="2917"><a href="#2917">2917</a></td></tr
><tr id="gr_svn141_2918"

><td id="2918"><a href="#2918">2918</a></td></tr
><tr id="gr_svn141_2919"

><td id="2919"><a href="#2919">2919</a></td></tr
><tr id="gr_svn141_2920"

><td id="2920"><a href="#2920">2920</a></td></tr
><tr id="gr_svn141_2921"

><td id="2921"><a href="#2921">2921</a></td></tr
><tr id="gr_svn141_2922"

><td id="2922"><a href="#2922">2922</a></td></tr
><tr id="gr_svn141_2923"

><td id="2923"><a href="#2923">2923</a></td></tr
><tr id="gr_svn141_2924"

><td id="2924"><a href="#2924">2924</a></td></tr
><tr id="gr_svn141_2925"

><td id="2925"><a href="#2925">2925</a></td></tr
><tr id="gr_svn141_2926"

><td id="2926"><a href="#2926">2926</a></td></tr
><tr id="gr_svn141_2927"

><td id="2927"><a href="#2927">2927</a></td></tr
><tr id="gr_svn141_2928"

><td id="2928"><a href="#2928">2928</a></td></tr
><tr id="gr_svn141_2929"

><td id="2929"><a href="#2929">2929</a></td></tr
><tr id="gr_svn141_2930"

><td id="2930"><a href="#2930">2930</a></td></tr
><tr id="gr_svn141_2931"

><td id="2931"><a href="#2931">2931</a></td></tr
><tr id="gr_svn141_2932"

><td id="2932"><a href="#2932">2932</a></td></tr
><tr id="gr_svn141_2933"

><td id="2933"><a href="#2933">2933</a></td></tr
><tr id="gr_svn141_2934"

><td id="2934"><a href="#2934">2934</a></td></tr
><tr id="gr_svn141_2935"

><td id="2935"><a href="#2935">2935</a></td></tr
><tr id="gr_svn141_2936"

><td id="2936"><a href="#2936">2936</a></td></tr
><tr id="gr_svn141_2937"

><td id="2937"><a href="#2937">2937</a></td></tr
><tr id="gr_svn141_2938"

><td id="2938"><a href="#2938">2938</a></td></tr
><tr id="gr_svn141_2939"

><td id="2939"><a href="#2939">2939</a></td></tr
><tr id="gr_svn141_2940"

><td id="2940"><a href="#2940">2940</a></td></tr
><tr id="gr_svn141_2941"

><td id="2941"><a href="#2941">2941</a></td></tr
><tr id="gr_svn141_2942"

><td id="2942"><a href="#2942">2942</a></td></tr
><tr id="gr_svn141_2943"

><td id="2943"><a href="#2943">2943</a></td></tr
><tr id="gr_svn141_2944"

><td id="2944"><a href="#2944">2944</a></td></tr
><tr id="gr_svn141_2945"

><td id="2945"><a href="#2945">2945</a></td></tr
><tr id="gr_svn141_2946"

><td id="2946"><a href="#2946">2946</a></td></tr
><tr id="gr_svn141_2947"

><td id="2947"><a href="#2947">2947</a></td></tr
><tr id="gr_svn141_2948"

><td id="2948"><a href="#2948">2948</a></td></tr
><tr id="gr_svn141_2949"

><td id="2949"><a href="#2949">2949</a></td></tr
><tr id="gr_svn141_2950"

><td id="2950"><a href="#2950">2950</a></td></tr
><tr id="gr_svn141_2951"

><td id="2951"><a href="#2951">2951</a></td></tr
><tr id="gr_svn141_2952"

><td id="2952"><a href="#2952">2952</a></td></tr
><tr id="gr_svn141_2953"

><td id="2953"><a href="#2953">2953</a></td></tr
><tr id="gr_svn141_2954"

><td id="2954"><a href="#2954">2954</a></td></tr
><tr id="gr_svn141_2955"

><td id="2955"><a href="#2955">2955</a></td></tr
><tr id="gr_svn141_2956"

><td id="2956"><a href="#2956">2956</a></td></tr
><tr id="gr_svn141_2957"

><td id="2957"><a href="#2957">2957</a></td></tr
><tr id="gr_svn141_2958"

><td id="2958"><a href="#2958">2958</a></td></tr
><tr id="gr_svn141_2959"

><td id="2959"><a href="#2959">2959</a></td></tr
><tr id="gr_svn141_2960"

><td id="2960"><a href="#2960">2960</a></td></tr
><tr id="gr_svn141_2961"

><td id="2961"><a href="#2961">2961</a></td></tr
><tr id="gr_svn141_2962"

><td id="2962"><a href="#2962">2962</a></td></tr
><tr id="gr_svn141_2963"

><td id="2963"><a href="#2963">2963</a></td></tr
><tr id="gr_svn141_2964"

><td id="2964"><a href="#2964">2964</a></td></tr
><tr id="gr_svn141_2965"

><td id="2965"><a href="#2965">2965</a></td></tr
><tr id="gr_svn141_2966"

><td id="2966"><a href="#2966">2966</a></td></tr
><tr id="gr_svn141_2967"

><td id="2967"><a href="#2967">2967</a></td></tr
><tr id="gr_svn141_2968"

><td id="2968"><a href="#2968">2968</a></td></tr
><tr id="gr_svn141_2969"

><td id="2969"><a href="#2969">2969</a></td></tr
><tr id="gr_svn141_2970"

><td id="2970"><a href="#2970">2970</a></td></tr
><tr id="gr_svn141_2971"

><td id="2971"><a href="#2971">2971</a></td></tr
><tr id="gr_svn141_2972"

><td id="2972"><a href="#2972">2972</a></td></tr
><tr id="gr_svn141_2973"

><td id="2973"><a href="#2973">2973</a></td></tr
><tr id="gr_svn141_2974"

><td id="2974"><a href="#2974">2974</a></td></tr
><tr id="gr_svn141_2975"

><td id="2975"><a href="#2975">2975</a></td></tr
><tr id="gr_svn141_2976"

><td id="2976"><a href="#2976">2976</a></td></tr
><tr id="gr_svn141_2977"

><td id="2977"><a href="#2977">2977</a></td></tr
><tr id="gr_svn141_2978"

><td id="2978"><a href="#2978">2978</a></td></tr
><tr id="gr_svn141_2979"

><td id="2979"><a href="#2979">2979</a></td></tr
><tr id="gr_svn141_2980"

><td id="2980"><a href="#2980">2980</a></td></tr
><tr id="gr_svn141_2981"

><td id="2981"><a href="#2981">2981</a></td></tr
><tr id="gr_svn141_2982"

><td id="2982"><a href="#2982">2982</a></td></tr
><tr id="gr_svn141_2983"

><td id="2983"><a href="#2983">2983</a></td></tr
><tr id="gr_svn141_2984"

><td id="2984"><a href="#2984">2984</a></td></tr
><tr id="gr_svn141_2985"

><td id="2985"><a href="#2985">2985</a></td></tr
><tr id="gr_svn141_2986"

><td id="2986"><a href="#2986">2986</a></td></tr
><tr id="gr_svn141_2987"

><td id="2987"><a href="#2987">2987</a></td></tr
><tr id="gr_svn141_2988"

><td id="2988"><a href="#2988">2988</a></td></tr
><tr id="gr_svn141_2989"

><td id="2989"><a href="#2989">2989</a></td></tr
><tr id="gr_svn141_2990"

><td id="2990"><a href="#2990">2990</a></td></tr
><tr id="gr_svn141_2991"

><td id="2991"><a href="#2991">2991</a></td></tr
><tr id="gr_svn141_2992"

><td id="2992"><a href="#2992">2992</a></td></tr
><tr id="gr_svn141_2993"

><td id="2993"><a href="#2993">2993</a></td></tr
><tr id="gr_svn141_2994"

><td id="2994"><a href="#2994">2994</a></td></tr
><tr id="gr_svn141_2995"

><td id="2995"><a href="#2995">2995</a></td></tr
><tr id="gr_svn141_2996"

><td id="2996"><a href="#2996">2996</a></td></tr
><tr id="gr_svn141_2997"

><td id="2997"><a href="#2997">2997</a></td></tr
><tr id="gr_svn141_2998"

><td id="2998"><a href="#2998">2998</a></td></tr
><tr id="gr_svn141_2999"

><td id="2999"><a href="#2999">2999</a></td></tr
><tr id="gr_svn141_3000"

><td id="3000"><a href="#3000">3000</a></td></tr
><tr id="gr_svn141_3001"

><td id="3001"><a href="#3001">3001</a></td></tr
><tr id="gr_svn141_3002"

><td id="3002"><a href="#3002">3002</a></td></tr
><tr id="gr_svn141_3003"

><td id="3003"><a href="#3003">3003</a></td></tr
><tr id="gr_svn141_3004"

><td id="3004"><a href="#3004">3004</a></td></tr
><tr id="gr_svn141_3005"

><td id="3005"><a href="#3005">3005</a></td></tr
><tr id="gr_svn141_3006"

><td id="3006"><a href="#3006">3006</a></td></tr
><tr id="gr_svn141_3007"

><td id="3007"><a href="#3007">3007</a></td></tr
><tr id="gr_svn141_3008"

><td id="3008"><a href="#3008">3008</a></td></tr
><tr id="gr_svn141_3009"

><td id="3009"><a href="#3009">3009</a></td></tr
><tr id="gr_svn141_3010"

><td id="3010"><a href="#3010">3010</a></td></tr
><tr id="gr_svn141_3011"

><td id="3011"><a href="#3011">3011</a></td></tr
><tr id="gr_svn141_3012"

><td id="3012"><a href="#3012">3012</a></td></tr
><tr id="gr_svn141_3013"

><td id="3013"><a href="#3013">3013</a></td></tr
><tr id="gr_svn141_3014"

><td id="3014"><a href="#3014">3014</a></td></tr
><tr id="gr_svn141_3015"

><td id="3015"><a href="#3015">3015</a></td></tr
><tr id="gr_svn141_3016"

><td id="3016"><a href="#3016">3016</a></td></tr
><tr id="gr_svn141_3017"

><td id="3017"><a href="#3017">3017</a></td></tr
><tr id="gr_svn141_3018"

><td id="3018"><a href="#3018">3018</a></td></tr
><tr id="gr_svn141_3019"

><td id="3019"><a href="#3019">3019</a></td></tr
><tr id="gr_svn141_3020"

><td id="3020"><a href="#3020">3020</a></td></tr
><tr id="gr_svn141_3021"

><td id="3021"><a href="#3021">3021</a></td></tr
><tr id="gr_svn141_3022"

><td id="3022"><a href="#3022">3022</a></td></tr
><tr id="gr_svn141_3023"

><td id="3023"><a href="#3023">3023</a></td></tr
><tr id="gr_svn141_3024"

><td id="3024"><a href="#3024">3024</a></td></tr
><tr id="gr_svn141_3025"

><td id="3025"><a href="#3025">3025</a></td></tr
><tr id="gr_svn141_3026"

><td id="3026"><a href="#3026">3026</a></td></tr
><tr id="gr_svn141_3027"

><td id="3027"><a href="#3027">3027</a></td></tr
><tr id="gr_svn141_3028"

><td id="3028"><a href="#3028">3028</a></td></tr
><tr id="gr_svn141_3029"

><td id="3029"><a href="#3029">3029</a></td></tr
><tr id="gr_svn141_3030"

><td id="3030"><a href="#3030">3030</a></td></tr
><tr id="gr_svn141_3031"

><td id="3031"><a href="#3031">3031</a></td></tr
><tr id="gr_svn141_3032"

><td id="3032"><a href="#3032">3032</a></td></tr
><tr id="gr_svn141_3033"

><td id="3033"><a href="#3033">3033</a></td></tr
><tr id="gr_svn141_3034"

><td id="3034"><a href="#3034">3034</a></td></tr
><tr id="gr_svn141_3035"

><td id="3035"><a href="#3035">3035</a></td></tr
><tr id="gr_svn141_3036"

><td id="3036"><a href="#3036">3036</a></td></tr
><tr id="gr_svn141_3037"

><td id="3037"><a href="#3037">3037</a></td></tr
><tr id="gr_svn141_3038"

><td id="3038"><a href="#3038">3038</a></td></tr
><tr id="gr_svn141_3039"

><td id="3039"><a href="#3039">3039</a></td></tr
><tr id="gr_svn141_3040"

><td id="3040"><a href="#3040">3040</a></td></tr
><tr id="gr_svn141_3041"

><td id="3041"><a href="#3041">3041</a></td></tr
><tr id="gr_svn141_3042"

><td id="3042"><a href="#3042">3042</a></td></tr
><tr id="gr_svn141_3043"

><td id="3043"><a href="#3043">3043</a></td></tr
><tr id="gr_svn141_3044"

><td id="3044"><a href="#3044">3044</a></td></tr
><tr id="gr_svn141_3045"

><td id="3045"><a href="#3045">3045</a></td></tr
><tr id="gr_svn141_3046"

><td id="3046"><a href="#3046">3046</a></td></tr
><tr id="gr_svn141_3047"

><td id="3047"><a href="#3047">3047</a></td></tr
><tr id="gr_svn141_3048"

><td id="3048"><a href="#3048">3048</a></td></tr
><tr id="gr_svn141_3049"

><td id="3049"><a href="#3049">3049</a></td></tr
><tr id="gr_svn141_3050"

><td id="3050"><a href="#3050">3050</a></td></tr
><tr id="gr_svn141_3051"

><td id="3051"><a href="#3051">3051</a></td></tr
><tr id="gr_svn141_3052"

><td id="3052"><a href="#3052">3052</a></td></tr
><tr id="gr_svn141_3053"

><td id="3053"><a href="#3053">3053</a></td></tr
><tr id="gr_svn141_3054"

><td id="3054"><a href="#3054">3054</a></td></tr
><tr id="gr_svn141_3055"

><td id="3055"><a href="#3055">3055</a></td></tr
><tr id="gr_svn141_3056"

><td id="3056"><a href="#3056">3056</a></td></tr
><tr id="gr_svn141_3057"

><td id="3057"><a href="#3057">3057</a></td></tr
><tr id="gr_svn141_3058"

><td id="3058"><a href="#3058">3058</a></td></tr
><tr id="gr_svn141_3059"

><td id="3059"><a href="#3059">3059</a></td></tr
><tr id="gr_svn141_3060"

><td id="3060"><a href="#3060">3060</a></td></tr
><tr id="gr_svn141_3061"

><td id="3061"><a href="#3061">3061</a></td></tr
><tr id="gr_svn141_3062"

><td id="3062"><a href="#3062">3062</a></td></tr
><tr id="gr_svn141_3063"

><td id="3063"><a href="#3063">3063</a></td></tr
><tr id="gr_svn141_3064"

><td id="3064"><a href="#3064">3064</a></td></tr
><tr id="gr_svn141_3065"

><td id="3065"><a href="#3065">3065</a></td></tr
><tr id="gr_svn141_3066"

><td id="3066"><a href="#3066">3066</a></td></tr
><tr id="gr_svn141_3067"

><td id="3067"><a href="#3067">3067</a></td></tr
><tr id="gr_svn141_3068"

><td id="3068"><a href="#3068">3068</a></td></tr
><tr id="gr_svn141_3069"

><td id="3069"><a href="#3069">3069</a></td></tr
><tr id="gr_svn141_3070"

><td id="3070"><a href="#3070">3070</a></td></tr
><tr id="gr_svn141_3071"

><td id="3071"><a href="#3071">3071</a></td></tr
><tr id="gr_svn141_3072"

><td id="3072"><a href="#3072">3072</a></td></tr
><tr id="gr_svn141_3073"

><td id="3073"><a href="#3073">3073</a></td></tr
><tr id="gr_svn141_3074"

><td id="3074"><a href="#3074">3074</a></td></tr
><tr id="gr_svn141_3075"

><td id="3075"><a href="#3075">3075</a></td></tr
><tr id="gr_svn141_3076"

><td id="3076"><a href="#3076">3076</a></td></tr
><tr id="gr_svn141_3077"

><td id="3077"><a href="#3077">3077</a></td></tr
><tr id="gr_svn141_3078"

><td id="3078"><a href="#3078">3078</a></td></tr
><tr id="gr_svn141_3079"

><td id="3079"><a href="#3079">3079</a></td></tr
><tr id="gr_svn141_3080"

><td id="3080"><a href="#3080">3080</a></td></tr
><tr id="gr_svn141_3081"

><td id="3081"><a href="#3081">3081</a></td></tr
><tr id="gr_svn141_3082"

><td id="3082"><a href="#3082">3082</a></td></tr
><tr id="gr_svn141_3083"

><td id="3083"><a href="#3083">3083</a></td></tr
><tr id="gr_svn141_3084"

><td id="3084"><a href="#3084">3084</a></td></tr
><tr id="gr_svn141_3085"

><td id="3085"><a href="#3085">3085</a></td></tr
><tr id="gr_svn141_3086"

><td id="3086"><a href="#3086">3086</a></td></tr
><tr id="gr_svn141_3087"

><td id="3087"><a href="#3087">3087</a></td></tr
><tr id="gr_svn141_3088"

><td id="3088"><a href="#3088">3088</a></td></tr
><tr id="gr_svn141_3089"

><td id="3089"><a href="#3089">3089</a></td></tr
><tr id="gr_svn141_3090"

><td id="3090"><a href="#3090">3090</a></td></tr
><tr id="gr_svn141_3091"

><td id="3091"><a href="#3091">3091</a></td></tr
><tr id="gr_svn141_3092"

><td id="3092"><a href="#3092">3092</a></td></tr
><tr id="gr_svn141_3093"

><td id="3093"><a href="#3093">3093</a></td></tr
><tr id="gr_svn141_3094"

><td id="3094"><a href="#3094">3094</a></td></tr
><tr id="gr_svn141_3095"

><td id="3095"><a href="#3095">3095</a></td></tr
><tr id="gr_svn141_3096"

><td id="3096"><a href="#3096">3096</a></td></tr
><tr id="gr_svn141_3097"

><td id="3097"><a href="#3097">3097</a></td></tr
><tr id="gr_svn141_3098"

><td id="3098"><a href="#3098">3098</a></td></tr
><tr id="gr_svn141_3099"

><td id="3099"><a href="#3099">3099</a></td></tr
><tr id="gr_svn141_3100"

><td id="3100"><a href="#3100">3100</a></td></tr
><tr id="gr_svn141_3101"

><td id="3101"><a href="#3101">3101</a></td></tr
><tr id="gr_svn141_3102"

><td id="3102"><a href="#3102">3102</a></td></tr
><tr id="gr_svn141_3103"

><td id="3103"><a href="#3103">3103</a></td></tr
><tr id="gr_svn141_3104"

><td id="3104"><a href="#3104">3104</a></td></tr
><tr id="gr_svn141_3105"

><td id="3105"><a href="#3105">3105</a></td></tr
><tr id="gr_svn141_3106"

><td id="3106"><a href="#3106">3106</a></td></tr
><tr id="gr_svn141_3107"

><td id="3107"><a href="#3107">3107</a></td></tr
><tr id="gr_svn141_3108"

><td id="3108"><a href="#3108">3108</a></td></tr
><tr id="gr_svn141_3109"

><td id="3109"><a href="#3109">3109</a></td></tr
><tr id="gr_svn141_3110"

><td id="3110"><a href="#3110">3110</a></td></tr
><tr id="gr_svn141_3111"

><td id="3111"><a href="#3111">3111</a></td></tr
><tr id="gr_svn141_3112"

><td id="3112"><a href="#3112">3112</a></td></tr
><tr id="gr_svn141_3113"

><td id="3113"><a href="#3113">3113</a></td></tr
><tr id="gr_svn141_3114"

><td id="3114"><a href="#3114">3114</a></td></tr
><tr id="gr_svn141_3115"

><td id="3115"><a href="#3115">3115</a></td></tr
><tr id="gr_svn141_3116"

><td id="3116"><a href="#3116">3116</a></td></tr
><tr id="gr_svn141_3117"

><td id="3117"><a href="#3117">3117</a></td></tr
><tr id="gr_svn141_3118"

><td id="3118"><a href="#3118">3118</a></td></tr
><tr id="gr_svn141_3119"

><td id="3119"><a href="#3119">3119</a></td></tr
><tr id="gr_svn141_3120"

><td id="3120"><a href="#3120">3120</a></td></tr
><tr id="gr_svn141_3121"

><td id="3121"><a href="#3121">3121</a></td></tr
><tr id="gr_svn141_3122"

><td id="3122"><a href="#3122">3122</a></td></tr
><tr id="gr_svn141_3123"

><td id="3123"><a href="#3123">3123</a></td></tr
><tr id="gr_svn141_3124"

><td id="3124"><a href="#3124">3124</a></td></tr
><tr id="gr_svn141_3125"

><td id="3125"><a href="#3125">3125</a></td></tr
><tr id="gr_svn141_3126"

><td id="3126"><a href="#3126">3126</a></td></tr
><tr id="gr_svn141_3127"

><td id="3127"><a href="#3127">3127</a></td></tr
><tr id="gr_svn141_3128"

><td id="3128"><a href="#3128">3128</a></td></tr
><tr id="gr_svn141_3129"

><td id="3129"><a href="#3129">3129</a></td></tr
><tr id="gr_svn141_3130"

><td id="3130"><a href="#3130">3130</a></td></tr
><tr id="gr_svn141_3131"

><td id="3131"><a href="#3131">3131</a></td></tr
><tr id="gr_svn141_3132"

><td id="3132"><a href="#3132">3132</a></td></tr
><tr id="gr_svn141_3133"

><td id="3133"><a href="#3133">3133</a></td></tr
><tr id="gr_svn141_3134"

><td id="3134"><a href="#3134">3134</a></td></tr
><tr id="gr_svn141_3135"

><td id="3135"><a href="#3135">3135</a></td></tr
><tr id="gr_svn141_3136"

><td id="3136"><a href="#3136">3136</a></td></tr
><tr id="gr_svn141_3137"

><td id="3137"><a href="#3137">3137</a></td></tr
><tr id="gr_svn141_3138"

><td id="3138"><a href="#3138">3138</a></td></tr
><tr id="gr_svn141_3139"

><td id="3139"><a href="#3139">3139</a></td></tr
><tr id="gr_svn141_3140"

><td id="3140"><a href="#3140">3140</a></td></tr
><tr id="gr_svn141_3141"

><td id="3141"><a href="#3141">3141</a></td></tr
><tr id="gr_svn141_3142"

><td id="3142"><a href="#3142">3142</a></td></tr
><tr id="gr_svn141_3143"

><td id="3143"><a href="#3143">3143</a></td></tr
><tr id="gr_svn141_3144"

><td id="3144"><a href="#3144">3144</a></td></tr
><tr id="gr_svn141_3145"

><td id="3145"><a href="#3145">3145</a></td></tr
><tr id="gr_svn141_3146"

><td id="3146"><a href="#3146">3146</a></td></tr
><tr id="gr_svn141_3147"

><td id="3147"><a href="#3147">3147</a></td></tr
><tr id="gr_svn141_3148"

><td id="3148"><a href="#3148">3148</a></td></tr
><tr id="gr_svn141_3149"

><td id="3149"><a href="#3149">3149</a></td></tr
><tr id="gr_svn141_3150"

><td id="3150"><a href="#3150">3150</a></td></tr
><tr id="gr_svn141_3151"

><td id="3151"><a href="#3151">3151</a></td></tr
><tr id="gr_svn141_3152"

><td id="3152"><a href="#3152">3152</a></td></tr
><tr id="gr_svn141_3153"

><td id="3153"><a href="#3153">3153</a></td></tr
><tr id="gr_svn141_3154"

><td id="3154"><a href="#3154">3154</a></td></tr
><tr id="gr_svn141_3155"

><td id="3155"><a href="#3155">3155</a></td></tr
><tr id="gr_svn141_3156"

><td id="3156"><a href="#3156">3156</a></td></tr
><tr id="gr_svn141_3157"

><td id="3157"><a href="#3157">3157</a></td></tr
><tr id="gr_svn141_3158"

><td id="3158"><a href="#3158">3158</a></td></tr
><tr id="gr_svn141_3159"

><td id="3159"><a href="#3159">3159</a></td></tr
><tr id="gr_svn141_3160"

><td id="3160"><a href="#3160">3160</a></td></tr
><tr id="gr_svn141_3161"

><td id="3161"><a href="#3161">3161</a></td></tr
><tr id="gr_svn141_3162"

><td id="3162"><a href="#3162">3162</a></td></tr
><tr id="gr_svn141_3163"

><td id="3163"><a href="#3163">3163</a></td></tr
><tr id="gr_svn141_3164"

><td id="3164"><a href="#3164">3164</a></td></tr
><tr id="gr_svn141_3165"

><td id="3165"><a href="#3165">3165</a></td></tr
><tr id="gr_svn141_3166"

><td id="3166"><a href="#3166">3166</a></td></tr
><tr id="gr_svn141_3167"

><td id="3167"><a href="#3167">3167</a></td></tr
><tr id="gr_svn141_3168"

><td id="3168"><a href="#3168">3168</a></td></tr
><tr id="gr_svn141_3169"

><td id="3169"><a href="#3169">3169</a></td></tr
><tr id="gr_svn141_3170"

><td id="3170"><a href="#3170">3170</a></td></tr
><tr id="gr_svn141_3171"

><td id="3171"><a href="#3171">3171</a></td></tr
><tr id="gr_svn141_3172"

><td id="3172"><a href="#3172">3172</a></td></tr
><tr id="gr_svn141_3173"

><td id="3173"><a href="#3173">3173</a></td></tr
><tr id="gr_svn141_3174"

><td id="3174"><a href="#3174">3174</a></td></tr
><tr id="gr_svn141_3175"

><td id="3175"><a href="#3175">3175</a></td></tr
><tr id="gr_svn141_3176"

><td id="3176"><a href="#3176">3176</a></td></tr
><tr id="gr_svn141_3177"

><td id="3177"><a href="#3177">3177</a></td></tr
><tr id="gr_svn141_3178"

><td id="3178"><a href="#3178">3178</a></td></tr
><tr id="gr_svn141_3179"

><td id="3179"><a href="#3179">3179</a></td></tr
><tr id="gr_svn141_3180"

><td id="3180"><a href="#3180">3180</a></td></tr
><tr id="gr_svn141_3181"

><td id="3181"><a href="#3181">3181</a></td></tr
><tr id="gr_svn141_3182"

><td id="3182"><a href="#3182">3182</a></td></tr
><tr id="gr_svn141_3183"

><td id="3183"><a href="#3183">3183</a></td></tr
><tr id="gr_svn141_3184"

><td id="3184"><a href="#3184">3184</a></td></tr
><tr id="gr_svn141_3185"

><td id="3185"><a href="#3185">3185</a></td></tr
><tr id="gr_svn141_3186"

><td id="3186"><a href="#3186">3186</a></td></tr
><tr id="gr_svn141_3187"

><td id="3187"><a href="#3187">3187</a></td></tr
><tr id="gr_svn141_3188"

><td id="3188"><a href="#3188">3188</a></td></tr
><tr id="gr_svn141_3189"

><td id="3189"><a href="#3189">3189</a></td></tr
><tr id="gr_svn141_3190"

><td id="3190"><a href="#3190">3190</a></td></tr
><tr id="gr_svn141_3191"

><td id="3191"><a href="#3191">3191</a></td></tr
><tr id="gr_svn141_3192"

><td id="3192"><a href="#3192">3192</a></td></tr
><tr id="gr_svn141_3193"

><td id="3193"><a href="#3193">3193</a></td></tr
><tr id="gr_svn141_3194"

><td id="3194"><a href="#3194">3194</a></td></tr
><tr id="gr_svn141_3195"

><td id="3195"><a href="#3195">3195</a></td></tr
><tr id="gr_svn141_3196"

><td id="3196"><a href="#3196">3196</a></td></tr
><tr id="gr_svn141_3197"

><td id="3197"><a href="#3197">3197</a></td></tr
><tr id="gr_svn141_3198"

><td id="3198"><a href="#3198">3198</a></td></tr
><tr id="gr_svn141_3199"

><td id="3199"><a href="#3199">3199</a></td></tr
><tr id="gr_svn141_3200"

><td id="3200"><a href="#3200">3200</a></td></tr
><tr id="gr_svn141_3201"

><td id="3201"><a href="#3201">3201</a></td></tr
><tr id="gr_svn141_3202"

><td id="3202"><a href="#3202">3202</a></td></tr
><tr id="gr_svn141_3203"

><td id="3203"><a href="#3203">3203</a></td></tr
><tr id="gr_svn141_3204"

><td id="3204"><a href="#3204">3204</a></td></tr
><tr id="gr_svn141_3205"

><td id="3205"><a href="#3205">3205</a></td></tr
><tr id="gr_svn141_3206"

><td id="3206"><a href="#3206">3206</a></td></tr
><tr id="gr_svn141_3207"

><td id="3207"><a href="#3207">3207</a></td></tr
><tr id="gr_svn141_3208"

><td id="3208"><a href="#3208">3208</a></td></tr
><tr id="gr_svn141_3209"

><td id="3209"><a href="#3209">3209</a></td></tr
><tr id="gr_svn141_3210"

><td id="3210"><a href="#3210">3210</a></td></tr
><tr id="gr_svn141_3211"

><td id="3211"><a href="#3211">3211</a></td></tr
><tr id="gr_svn141_3212"

><td id="3212"><a href="#3212">3212</a></td></tr
><tr id="gr_svn141_3213"

><td id="3213"><a href="#3213">3213</a></td></tr
><tr id="gr_svn141_3214"

><td id="3214"><a href="#3214">3214</a></td></tr
><tr id="gr_svn141_3215"

><td id="3215"><a href="#3215">3215</a></td></tr
><tr id="gr_svn141_3216"

><td id="3216"><a href="#3216">3216</a></td></tr
><tr id="gr_svn141_3217"

><td id="3217"><a href="#3217">3217</a></td></tr
><tr id="gr_svn141_3218"

><td id="3218"><a href="#3218">3218</a></td></tr
><tr id="gr_svn141_3219"

><td id="3219"><a href="#3219">3219</a></td></tr
><tr id="gr_svn141_3220"

><td id="3220"><a href="#3220">3220</a></td></tr
><tr id="gr_svn141_3221"

><td id="3221"><a href="#3221">3221</a></td></tr
><tr id="gr_svn141_3222"

><td id="3222"><a href="#3222">3222</a></td></tr
><tr id="gr_svn141_3223"

><td id="3223"><a href="#3223">3223</a></td></tr
><tr id="gr_svn141_3224"

><td id="3224"><a href="#3224">3224</a></td></tr
><tr id="gr_svn141_3225"

><td id="3225"><a href="#3225">3225</a></td></tr
><tr id="gr_svn141_3226"

><td id="3226"><a href="#3226">3226</a></td></tr
><tr id="gr_svn141_3227"

><td id="3227"><a href="#3227">3227</a></td></tr
><tr id="gr_svn141_3228"

><td id="3228"><a href="#3228">3228</a></td></tr
><tr id="gr_svn141_3229"

><td id="3229"><a href="#3229">3229</a></td></tr
><tr id="gr_svn141_3230"

><td id="3230"><a href="#3230">3230</a></td></tr
><tr id="gr_svn141_3231"

><td id="3231"><a href="#3231">3231</a></td></tr
><tr id="gr_svn141_3232"

><td id="3232"><a href="#3232">3232</a></td></tr
><tr id="gr_svn141_3233"

><td id="3233"><a href="#3233">3233</a></td></tr
><tr id="gr_svn141_3234"

><td id="3234"><a href="#3234">3234</a></td></tr
><tr id="gr_svn141_3235"

><td id="3235"><a href="#3235">3235</a></td></tr
><tr id="gr_svn141_3236"

><td id="3236"><a href="#3236">3236</a></td></tr
><tr id="gr_svn141_3237"

><td id="3237"><a href="#3237">3237</a></td></tr
><tr id="gr_svn141_3238"

><td id="3238"><a href="#3238">3238</a></td></tr
><tr id="gr_svn141_3239"

><td id="3239"><a href="#3239">3239</a></td></tr
><tr id="gr_svn141_3240"

><td id="3240"><a href="#3240">3240</a></td></tr
><tr id="gr_svn141_3241"

><td id="3241"><a href="#3241">3241</a></td></tr
><tr id="gr_svn141_3242"

><td id="3242"><a href="#3242">3242</a></td></tr
><tr id="gr_svn141_3243"

><td id="3243"><a href="#3243">3243</a></td></tr
><tr id="gr_svn141_3244"

><td id="3244"><a href="#3244">3244</a></td></tr
><tr id="gr_svn141_3245"

><td id="3245"><a href="#3245">3245</a></td></tr
><tr id="gr_svn141_3246"

><td id="3246"><a href="#3246">3246</a></td></tr
><tr id="gr_svn141_3247"

><td id="3247"><a href="#3247">3247</a></td></tr
><tr id="gr_svn141_3248"

><td id="3248"><a href="#3248">3248</a></td></tr
><tr id="gr_svn141_3249"

><td id="3249"><a href="#3249">3249</a></td></tr
><tr id="gr_svn141_3250"

><td id="3250"><a href="#3250">3250</a></td></tr
><tr id="gr_svn141_3251"

><td id="3251"><a href="#3251">3251</a></td></tr
><tr id="gr_svn141_3252"

><td id="3252"><a href="#3252">3252</a></td></tr
><tr id="gr_svn141_3253"

><td id="3253"><a href="#3253">3253</a></td></tr
><tr id="gr_svn141_3254"

><td id="3254"><a href="#3254">3254</a></td></tr
><tr id="gr_svn141_3255"

><td id="3255"><a href="#3255">3255</a></td></tr
><tr id="gr_svn141_3256"

><td id="3256"><a href="#3256">3256</a></td></tr
><tr id="gr_svn141_3257"

><td id="3257"><a href="#3257">3257</a></td></tr
><tr id="gr_svn141_3258"

><td id="3258"><a href="#3258">3258</a></td></tr
><tr id="gr_svn141_3259"

><td id="3259"><a href="#3259">3259</a></td></tr
><tr id="gr_svn141_3260"

><td id="3260"><a href="#3260">3260</a></td></tr
><tr id="gr_svn141_3261"

><td id="3261"><a href="#3261">3261</a></td></tr
><tr id="gr_svn141_3262"

><td id="3262"><a href="#3262">3262</a></td></tr
><tr id="gr_svn141_3263"

><td id="3263"><a href="#3263">3263</a></td></tr
><tr id="gr_svn141_3264"

><td id="3264"><a href="#3264">3264</a></td></tr
><tr id="gr_svn141_3265"

><td id="3265"><a href="#3265">3265</a></td></tr
><tr id="gr_svn141_3266"

><td id="3266"><a href="#3266">3266</a></td></tr
><tr id="gr_svn141_3267"

><td id="3267"><a href="#3267">3267</a></td></tr
><tr id="gr_svn141_3268"

><td id="3268"><a href="#3268">3268</a></td></tr
><tr id="gr_svn141_3269"

><td id="3269"><a href="#3269">3269</a></td></tr
><tr id="gr_svn141_3270"

><td id="3270"><a href="#3270">3270</a></td></tr
><tr id="gr_svn141_3271"

><td id="3271"><a href="#3271">3271</a></td></tr
><tr id="gr_svn141_3272"

><td id="3272"><a href="#3272">3272</a></td></tr
><tr id="gr_svn141_3273"

><td id="3273"><a href="#3273">3273</a></td></tr
><tr id="gr_svn141_3274"

><td id="3274"><a href="#3274">3274</a></td></tr
><tr id="gr_svn141_3275"

><td id="3275"><a href="#3275">3275</a></td></tr
><tr id="gr_svn141_3276"

><td id="3276"><a href="#3276">3276</a></td></tr
><tr id="gr_svn141_3277"

><td id="3277"><a href="#3277">3277</a></td></tr
><tr id="gr_svn141_3278"

><td id="3278"><a href="#3278">3278</a></td></tr
><tr id="gr_svn141_3279"

><td id="3279"><a href="#3279">3279</a></td></tr
><tr id="gr_svn141_3280"

><td id="3280"><a href="#3280">3280</a></td></tr
><tr id="gr_svn141_3281"

><td id="3281"><a href="#3281">3281</a></td></tr
><tr id="gr_svn141_3282"

><td id="3282"><a href="#3282">3282</a></td></tr
><tr id="gr_svn141_3283"

><td id="3283"><a href="#3283">3283</a></td></tr
><tr id="gr_svn141_3284"

><td id="3284"><a href="#3284">3284</a></td></tr
><tr id="gr_svn141_3285"

><td id="3285"><a href="#3285">3285</a></td></tr
><tr id="gr_svn141_3286"

><td id="3286"><a href="#3286">3286</a></td></tr
><tr id="gr_svn141_3287"

><td id="3287"><a href="#3287">3287</a></td></tr
><tr id="gr_svn141_3288"

><td id="3288"><a href="#3288">3288</a></td></tr
><tr id="gr_svn141_3289"

><td id="3289"><a href="#3289">3289</a></td></tr
><tr id="gr_svn141_3290"

><td id="3290"><a href="#3290">3290</a></td></tr
><tr id="gr_svn141_3291"

><td id="3291"><a href="#3291">3291</a></td></tr
><tr id="gr_svn141_3292"

><td id="3292"><a href="#3292">3292</a></td></tr
><tr id="gr_svn141_3293"

><td id="3293"><a href="#3293">3293</a></td></tr
><tr id="gr_svn141_3294"

><td id="3294"><a href="#3294">3294</a></td></tr
><tr id="gr_svn141_3295"

><td id="3295"><a href="#3295">3295</a></td></tr
><tr id="gr_svn141_3296"

><td id="3296"><a href="#3296">3296</a></td></tr
><tr id="gr_svn141_3297"

><td id="3297"><a href="#3297">3297</a></td></tr
><tr id="gr_svn141_3298"

><td id="3298"><a href="#3298">3298</a></td></tr
><tr id="gr_svn141_3299"

><td id="3299"><a href="#3299">3299</a></td></tr
><tr id="gr_svn141_3300"

><td id="3300"><a href="#3300">3300</a></td></tr
><tr id="gr_svn141_3301"

><td id="3301"><a href="#3301">3301</a></td></tr
><tr id="gr_svn141_3302"

><td id="3302"><a href="#3302">3302</a></td></tr
><tr id="gr_svn141_3303"

><td id="3303"><a href="#3303">3303</a></td></tr
><tr id="gr_svn141_3304"

><td id="3304"><a href="#3304">3304</a></td></tr
><tr id="gr_svn141_3305"

><td id="3305"><a href="#3305">3305</a></td></tr
><tr id="gr_svn141_3306"

><td id="3306"><a href="#3306">3306</a></td></tr
><tr id="gr_svn141_3307"

><td id="3307"><a href="#3307">3307</a></td></tr
><tr id="gr_svn141_3308"

><td id="3308"><a href="#3308">3308</a></td></tr
><tr id="gr_svn141_3309"

><td id="3309"><a href="#3309">3309</a></td></tr
><tr id="gr_svn141_3310"

><td id="3310"><a href="#3310">3310</a></td></tr
><tr id="gr_svn141_3311"

><td id="3311"><a href="#3311">3311</a></td></tr
><tr id="gr_svn141_3312"

><td id="3312"><a href="#3312">3312</a></td></tr
><tr id="gr_svn141_3313"

><td id="3313"><a href="#3313">3313</a></td></tr
><tr id="gr_svn141_3314"

><td id="3314"><a href="#3314">3314</a></td></tr
><tr id="gr_svn141_3315"

><td id="3315"><a href="#3315">3315</a></td></tr
><tr id="gr_svn141_3316"

><td id="3316"><a href="#3316">3316</a></td></tr
><tr id="gr_svn141_3317"

><td id="3317"><a href="#3317">3317</a></td></tr
><tr id="gr_svn141_3318"

><td id="3318"><a href="#3318">3318</a></td></tr
><tr id="gr_svn141_3319"

><td id="3319"><a href="#3319">3319</a></td></tr
><tr id="gr_svn141_3320"

><td id="3320"><a href="#3320">3320</a></td></tr
><tr id="gr_svn141_3321"

><td id="3321"><a href="#3321">3321</a></td></tr
><tr id="gr_svn141_3322"

><td id="3322"><a href="#3322">3322</a></td></tr
><tr id="gr_svn141_3323"

><td id="3323"><a href="#3323">3323</a></td></tr
><tr id="gr_svn141_3324"

><td id="3324"><a href="#3324">3324</a></td></tr
><tr id="gr_svn141_3325"

><td id="3325"><a href="#3325">3325</a></td></tr
><tr id="gr_svn141_3326"

><td id="3326"><a href="#3326">3326</a></td></tr
><tr id="gr_svn141_3327"

><td id="3327"><a href="#3327">3327</a></td></tr
><tr id="gr_svn141_3328"

><td id="3328"><a href="#3328">3328</a></td></tr
><tr id="gr_svn141_3329"

><td id="3329"><a href="#3329">3329</a></td></tr
><tr id="gr_svn141_3330"

><td id="3330"><a href="#3330">3330</a></td></tr
><tr id="gr_svn141_3331"

><td id="3331"><a href="#3331">3331</a></td></tr
><tr id="gr_svn141_3332"

><td id="3332"><a href="#3332">3332</a></td></tr
><tr id="gr_svn141_3333"

><td id="3333"><a href="#3333">3333</a></td></tr
><tr id="gr_svn141_3334"

><td id="3334"><a href="#3334">3334</a></td></tr
><tr id="gr_svn141_3335"

><td id="3335"><a href="#3335">3335</a></td></tr
><tr id="gr_svn141_3336"

><td id="3336"><a href="#3336">3336</a></td></tr
><tr id="gr_svn141_3337"

><td id="3337"><a href="#3337">3337</a></td></tr
><tr id="gr_svn141_3338"

><td id="3338"><a href="#3338">3338</a></td></tr
><tr id="gr_svn141_3339"

><td id="3339"><a href="#3339">3339</a></td></tr
><tr id="gr_svn141_3340"

><td id="3340"><a href="#3340">3340</a></td></tr
><tr id="gr_svn141_3341"

><td id="3341"><a href="#3341">3341</a></td></tr
><tr id="gr_svn141_3342"

><td id="3342"><a href="#3342">3342</a></td></tr
><tr id="gr_svn141_3343"

><td id="3343"><a href="#3343">3343</a></td></tr
><tr id="gr_svn141_3344"

><td id="3344"><a href="#3344">3344</a></td></tr
><tr id="gr_svn141_3345"

><td id="3345"><a href="#3345">3345</a></td></tr
><tr id="gr_svn141_3346"

><td id="3346"><a href="#3346">3346</a></td></tr
><tr id="gr_svn141_3347"

><td id="3347"><a href="#3347">3347</a></td></tr
><tr id="gr_svn141_3348"

><td id="3348"><a href="#3348">3348</a></td></tr
><tr id="gr_svn141_3349"

><td id="3349"><a href="#3349">3349</a></td></tr
><tr id="gr_svn141_3350"

><td id="3350"><a href="#3350">3350</a></td></tr
><tr id="gr_svn141_3351"

><td id="3351"><a href="#3351">3351</a></td></tr
><tr id="gr_svn141_3352"

><td id="3352"><a href="#3352">3352</a></td></tr
><tr id="gr_svn141_3353"

><td id="3353"><a href="#3353">3353</a></td></tr
><tr id="gr_svn141_3354"

><td id="3354"><a href="#3354">3354</a></td></tr
><tr id="gr_svn141_3355"

><td id="3355"><a href="#3355">3355</a></td></tr
><tr id="gr_svn141_3356"

><td id="3356"><a href="#3356">3356</a></td></tr
><tr id="gr_svn141_3357"

><td id="3357"><a href="#3357">3357</a></td></tr
><tr id="gr_svn141_3358"

><td id="3358"><a href="#3358">3358</a></td></tr
><tr id="gr_svn141_3359"

><td id="3359"><a href="#3359">3359</a></td></tr
><tr id="gr_svn141_3360"

><td id="3360"><a href="#3360">3360</a></td></tr
><tr id="gr_svn141_3361"

><td id="3361"><a href="#3361">3361</a></td></tr
><tr id="gr_svn141_3362"

><td id="3362"><a href="#3362">3362</a></td></tr
><tr id="gr_svn141_3363"

><td id="3363"><a href="#3363">3363</a></td></tr
><tr id="gr_svn141_3364"

><td id="3364"><a href="#3364">3364</a></td></tr
><tr id="gr_svn141_3365"

><td id="3365"><a href="#3365">3365</a></td></tr
><tr id="gr_svn141_3366"

><td id="3366"><a href="#3366">3366</a></td></tr
><tr id="gr_svn141_3367"

><td id="3367"><a href="#3367">3367</a></td></tr
><tr id="gr_svn141_3368"

><td id="3368"><a href="#3368">3368</a></td></tr
><tr id="gr_svn141_3369"

><td id="3369"><a href="#3369">3369</a></td></tr
><tr id="gr_svn141_3370"

><td id="3370"><a href="#3370">3370</a></td></tr
><tr id="gr_svn141_3371"

><td id="3371"><a href="#3371">3371</a></td></tr
><tr id="gr_svn141_3372"

><td id="3372"><a href="#3372">3372</a></td></tr
><tr id="gr_svn141_3373"

><td id="3373"><a href="#3373">3373</a></td></tr
><tr id="gr_svn141_3374"

><td id="3374"><a href="#3374">3374</a></td></tr
><tr id="gr_svn141_3375"

><td id="3375"><a href="#3375">3375</a></td></tr
><tr id="gr_svn141_3376"

><td id="3376"><a href="#3376">3376</a></td></tr
><tr id="gr_svn141_3377"

><td id="3377"><a href="#3377">3377</a></td></tr
><tr id="gr_svn141_3378"

><td id="3378"><a href="#3378">3378</a></td></tr
><tr id="gr_svn141_3379"

><td id="3379"><a href="#3379">3379</a></td></tr
><tr id="gr_svn141_3380"

><td id="3380"><a href="#3380">3380</a></td></tr
><tr id="gr_svn141_3381"

><td id="3381"><a href="#3381">3381</a></td></tr
><tr id="gr_svn141_3382"

><td id="3382"><a href="#3382">3382</a></td></tr
><tr id="gr_svn141_3383"

><td id="3383"><a href="#3383">3383</a></td></tr
><tr id="gr_svn141_3384"

><td id="3384"><a href="#3384">3384</a></td></tr
><tr id="gr_svn141_3385"

><td id="3385"><a href="#3385">3385</a></td></tr
><tr id="gr_svn141_3386"

><td id="3386"><a href="#3386">3386</a></td></tr
><tr id="gr_svn141_3387"

><td id="3387"><a href="#3387">3387</a></td></tr
><tr id="gr_svn141_3388"

><td id="3388"><a href="#3388">3388</a></td></tr
><tr id="gr_svn141_3389"

><td id="3389"><a href="#3389">3389</a></td></tr
><tr id="gr_svn141_3390"

><td id="3390"><a href="#3390">3390</a></td></tr
><tr id="gr_svn141_3391"

><td id="3391"><a href="#3391">3391</a></td></tr
><tr id="gr_svn141_3392"

><td id="3392"><a href="#3392">3392</a></td></tr
><tr id="gr_svn141_3393"

><td id="3393"><a href="#3393">3393</a></td></tr
><tr id="gr_svn141_3394"

><td id="3394"><a href="#3394">3394</a></td></tr
><tr id="gr_svn141_3395"

><td id="3395"><a href="#3395">3395</a></td></tr
><tr id="gr_svn141_3396"

><td id="3396"><a href="#3396">3396</a></td></tr
><tr id="gr_svn141_3397"

><td id="3397"><a href="#3397">3397</a></td></tr
><tr id="gr_svn141_3398"

><td id="3398"><a href="#3398">3398</a></td></tr
><tr id="gr_svn141_3399"

><td id="3399"><a href="#3399">3399</a></td></tr
><tr id="gr_svn141_3400"

><td id="3400"><a href="#3400">3400</a></td></tr
><tr id="gr_svn141_3401"

><td id="3401"><a href="#3401">3401</a></td></tr
><tr id="gr_svn141_3402"

><td id="3402"><a href="#3402">3402</a></td></tr
><tr id="gr_svn141_3403"

><td id="3403"><a href="#3403">3403</a></td></tr
><tr id="gr_svn141_3404"

><td id="3404"><a href="#3404">3404</a></td></tr
><tr id="gr_svn141_3405"

><td id="3405"><a href="#3405">3405</a></td></tr
><tr id="gr_svn141_3406"

><td id="3406"><a href="#3406">3406</a></td></tr
><tr id="gr_svn141_3407"

><td id="3407"><a href="#3407">3407</a></td></tr
><tr id="gr_svn141_3408"

><td id="3408"><a href="#3408">3408</a></td></tr
><tr id="gr_svn141_3409"

><td id="3409"><a href="#3409">3409</a></td></tr
><tr id="gr_svn141_3410"

><td id="3410"><a href="#3410">3410</a></td></tr
><tr id="gr_svn141_3411"

><td id="3411"><a href="#3411">3411</a></td></tr
><tr id="gr_svn141_3412"

><td id="3412"><a href="#3412">3412</a></td></tr
><tr id="gr_svn141_3413"

><td id="3413"><a href="#3413">3413</a></td></tr
><tr id="gr_svn141_3414"

><td id="3414"><a href="#3414">3414</a></td></tr
><tr id="gr_svn141_3415"

><td id="3415"><a href="#3415">3415</a></td></tr
><tr id="gr_svn141_3416"

><td id="3416"><a href="#3416">3416</a></td></tr
><tr id="gr_svn141_3417"

><td id="3417"><a href="#3417">3417</a></td></tr
><tr id="gr_svn141_3418"

><td id="3418"><a href="#3418">3418</a></td></tr
><tr id="gr_svn141_3419"

><td id="3419"><a href="#3419">3419</a></td></tr
><tr id="gr_svn141_3420"

><td id="3420"><a href="#3420">3420</a></td></tr
><tr id="gr_svn141_3421"

><td id="3421"><a href="#3421">3421</a></td></tr
><tr id="gr_svn141_3422"

><td id="3422"><a href="#3422">3422</a></td></tr
><tr id="gr_svn141_3423"

><td id="3423"><a href="#3423">3423</a></td></tr
><tr id="gr_svn141_3424"

><td id="3424"><a href="#3424">3424</a></td></tr
><tr id="gr_svn141_3425"

><td id="3425"><a href="#3425">3425</a></td></tr
><tr id="gr_svn141_3426"

><td id="3426"><a href="#3426">3426</a></td></tr
><tr id="gr_svn141_3427"

><td id="3427"><a href="#3427">3427</a></td></tr
><tr id="gr_svn141_3428"

><td id="3428"><a href="#3428">3428</a></td></tr
><tr id="gr_svn141_3429"

><td id="3429"><a href="#3429">3429</a></td></tr
><tr id="gr_svn141_3430"

><td id="3430"><a href="#3430">3430</a></td></tr
><tr id="gr_svn141_3431"

><td id="3431"><a href="#3431">3431</a></td></tr
><tr id="gr_svn141_3432"

><td id="3432"><a href="#3432">3432</a></td></tr
><tr id="gr_svn141_3433"

><td id="3433"><a href="#3433">3433</a></td></tr
><tr id="gr_svn141_3434"

><td id="3434"><a href="#3434">3434</a></td></tr
><tr id="gr_svn141_3435"

><td id="3435"><a href="#3435">3435</a></td></tr
><tr id="gr_svn141_3436"

><td id="3436"><a href="#3436">3436</a></td></tr
><tr id="gr_svn141_3437"

><td id="3437"><a href="#3437">3437</a></td></tr
><tr id="gr_svn141_3438"

><td id="3438"><a href="#3438">3438</a></td></tr
><tr id="gr_svn141_3439"

><td id="3439"><a href="#3439">3439</a></td></tr
><tr id="gr_svn141_3440"

><td id="3440"><a href="#3440">3440</a></td></tr
><tr id="gr_svn141_3441"

><td id="3441"><a href="#3441">3441</a></td></tr
><tr id="gr_svn141_3442"

><td id="3442"><a href="#3442">3442</a></td></tr
><tr id="gr_svn141_3443"

><td id="3443"><a href="#3443">3443</a></td></tr
><tr id="gr_svn141_3444"

><td id="3444"><a href="#3444">3444</a></td></tr
><tr id="gr_svn141_3445"

><td id="3445"><a href="#3445">3445</a></td></tr
><tr id="gr_svn141_3446"

><td id="3446"><a href="#3446">3446</a></td></tr
><tr id="gr_svn141_3447"

><td id="3447"><a href="#3447">3447</a></td></tr
><tr id="gr_svn141_3448"

><td id="3448"><a href="#3448">3448</a></td></tr
><tr id="gr_svn141_3449"

><td id="3449"><a href="#3449">3449</a></td></tr
><tr id="gr_svn141_3450"

><td id="3450"><a href="#3450">3450</a></td></tr
><tr id="gr_svn141_3451"

><td id="3451"><a href="#3451">3451</a></td></tr
><tr id="gr_svn141_3452"

><td id="3452"><a href="#3452">3452</a></td></tr
><tr id="gr_svn141_3453"

><td id="3453"><a href="#3453">3453</a></td></tr
><tr id="gr_svn141_3454"

><td id="3454"><a href="#3454">3454</a></td></tr
><tr id="gr_svn141_3455"

><td id="3455"><a href="#3455">3455</a></td></tr
><tr id="gr_svn141_3456"

><td id="3456"><a href="#3456">3456</a></td></tr
><tr id="gr_svn141_3457"

><td id="3457"><a href="#3457">3457</a></td></tr
><tr id="gr_svn141_3458"

><td id="3458"><a href="#3458">3458</a></td></tr
><tr id="gr_svn141_3459"

><td id="3459"><a href="#3459">3459</a></td></tr
><tr id="gr_svn141_3460"

><td id="3460"><a href="#3460">3460</a></td></tr
><tr id="gr_svn141_3461"

><td id="3461"><a href="#3461">3461</a></td></tr
><tr id="gr_svn141_3462"

><td id="3462"><a href="#3462">3462</a></td></tr
><tr id="gr_svn141_3463"

><td id="3463"><a href="#3463">3463</a></td></tr
><tr id="gr_svn141_3464"

><td id="3464"><a href="#3464">3464</a></td></tr
><tr id="gr_svn141_3465"

><td id="3465"><a href="#3465">3465</a></td></tr
><tr id="gr_svn141_3466"

><td id="3466"><a href="#3466">3466</a></td></tr
><tr id="gr_svn141_3467"

><td id="3467"><a href="#3467">3467</a></td></tr
><tr id="gr_svn141_3468"

><td id="3468"><a href="#3468">3468</a></td></tr
><tr id="gr_svn141_3469"

><td id="3469"><a href="#3469">3469</a></td></tr
><tr id="gr_svn141_3470"

><td id="3470"><a href="#3470">3470</a></td></tr
><tr id="gr_svn141_3471"

><td id="3471"><a href="#3471">3471</a></td></tr
><tr id="gr_svn141_3472"

><td id="3472"><a href="#3472">3472</a></td></tr
><tr id="gr_svn141_3473"

><td id="3473"><a href="#3473">3473</a></td></tr
><tr id="gr_svn141_3474"

><td id="3474"><a href="#3474">3474</a></td></tr
><tr id="gr_svn141_3475"

><td id="3475"><a href="#3475">3475</a></td></tr
><tr id="gr_svn141_3476"

><td id="3476"><a href="#3476">3476</a></td></tr
><tr id="gr_svn141_3477"

><td id="3477"><a href="#3477">3477</a></td></tr
><tr id="gr_svn141_3478"

><td id="3478"><a href="#3478">3478</a></td></tr
><tr id="gr_svn141_3479"

><td id="3479"><a href="#3479">3479</a></td></tr
><tr id="gr_svn141_3480"

><td id="3480"><a href="#3480">3480</a></td></tr
><tr id="gr_svn141_3481"

><td id="3481"><a href="#3481">3481</a></td></tr
><tr id="gr_svn141_3482"

><td id="3482"><a href="#3482">3482</a></td></tr
><tr id="gr_svn141_3483"

><td id="3483"><a href="#3483">3483</a></td></tr
><tr id="gr_svn141_3484"

><td id="3484"><a href="#3484">3484</a></td></tr
><tr id="gr_svn141_3485"

><td id="3485"><a href="#3485">3485</a></td></tr
><tr id="gr_svn141_3486"

><td id="3486"><a href="#3486">3486</a></td></tr
><tr id="gr_svn141_3487"

><td id="3487"><a href="#3487">3487</a></td></tr
><tr id="gr_svn141_3488"

><td id="3488"><a href="#3488">3488</a></td></tr
><tr id="gr_svn141_3489"

><td id="3489"><a href="#3489">3489</a></td></tr
><tr id="gr_svn141_3490"

><td id="3490"><a href="#3490">3490</a></td></tr
><tr id="gr_svn141_3491"

><td id="3491"><a href="#3491">3491</a></td></tr
><tr id="gr_svn141_3492"

><td id="3492"><a href="#3492">3492</a></td></tr
><tr id="gr_svn141_3493"

><td id="3493"><a href="#3493">3493</a></td></tr
><tr id="gr_svn141_3494"

><td id="3494"><a href="#3494">3494</a></td></tr
><tr id="gr_svn141_3495"

><td id="3495"><a href="#3495">3495</a></td></tr
><tr id="gr_svn141_3496"

><td id="3496"><a href="#3496">3496</a></td></tr
><tr id="gr_svn141_3497"

><td id="3497"><a href="#3497">3497</a></td></tr
><tr id="gr_svn141_3498"

><td id="3498"><a href="#3498">3498</a></td></tr
><tr id="gr_svn141_3499"

><td id="3499"><a href="#3499">3499</a></td></tr
><tr id="gr_svn141_3500"

><td id="3500"><a href="#3500">3500</a></td></tr
><tr id="gr_svn141_3501"

><td id="3501"><a href="#3501">3501</a></td></tr
><tr id="gr_svn141_3502"

><td id="3502"><a href="#3502">3502</a></td></tr
><tr id="gr_svn141_3503"

><td id="3503"><a href="#3503">3503</a></td></tr
><tr id="gr_svn141_3504"

><td id="3504"><a href="#3504">3504</a></td></tr
><tr id="gr_svn141_3505"

><td id="3505"><a href="#3505">3505</a></td></tr
><tr id="gr_svn141_3506"

><td id="3506"><a href="#3506">3506</a></td></tr
><tr id="gr_svn141_3507"

><td id="3507"><a href="#3507">3507</a></td></tr
><tr id="gr_svn141_3508"

><td id="3508"><a href="#3508">3508</a></td></tr
><tr id="gr_svn141_3509"

><td id="3509"><a href="#3509">3509</a></td></tr
><tr id="gr_svn141_3510"

><td id="3510"><a href="#3510">3510</a></td></tr
><tr id="gr_svn141_3511"

><td id="3511"><a href="#3511">3511</a></td></tr
><tr id="gr_svn141_3512"

><td id="3512"><a href="#3512">3512</a></td></tr
><tr id="gr_svn141_3513"

><td id="3513"><a href="#3513">3513</a></td></tr
><tr id="gr_svn141_3514"

><td id="3514"><a href="#3514">3514</a></td></tr
><tr id="gr_svn141_3515"

><td id="3515"><a href="#3515">3515</a></td></tr
><tr id="gr_svn141_3516"

><td id="3516"><a href="#3516">3516</a></td></tr
><tr id="gr_svn141_3517"

><td id="3517"><a href="#3517">3517</a></td></tr
><tr id="gr_svn141_3518"

><td id="3518"><a href="#3518">3518</a></td></tr
><tr id="gr_svn141_3519"

><td id="3519"><a href="#3519">3519</a></td></tr
><tr id="gr_svn141_3520"

><td id="3520"><a href="#3520">3520</a></td></tr
><tr id="gr_svn141_3521"

><td id="3521"><a href="#3521">3521</a></td></tr
><tr id="gr_svn141_3522"

><td id="3522"><a href="#3522">3522</a></td></tr
><tr id="gr_svn141_3523"

><td id="3523"><a href="#3523">3523</a></td></tr
><tr id="gr_svn141_3524"

><td id="3524"><a href="#3524">3524</a></td></tr
><tr id="gr_svn141_3525"

><td id="3525"><a href="#3525">3525</a></td></tr
><tr id="gr_svn141_3526"

><td id="3526"><a href="#3526">3526</a></td></tr
><tr id="gr_svn141_3527"

><td id="3527"><a href="#3527">3527</a></td></tr
><tr id="gr_svn141_3528"

><td id="3528"><a href="#3528">3528</a></td></tr
><tr id="gr_svn141_3529"

><td id="3529"><a href="#3529">3529</a></td></tr
><tr id="gr_svn141_3530"

><td id="3530"><a href="#3530">3530</a></td></tr
><tr id="gr_svn141_3531"

><td id="3531"><a href="#3531">3531</a></td></tr
><tr id="gr_svn141_3532"

><td id="3532"><a href="#3532">3532</a></td></tr
><tr id="gr_svn141_3533"

><td id="3533"><a href="#3533">3533</a></td></tr
><tr id="gr_svn141_3534"

><td id="3534"><a href="#3534">3534</a></td></tr
><tr id="gr_svn141_3535"

><td id="3535"><a href="#3535">3535</a></td></tr
><tr id="gr_svn141_3536"

><td id="3536"><a href="#3536">3536</a></td></tr
><tr id="gr_svn141_3537"

><td id="3537"><a href="#3537">3537</a></td></tr
><tr id="gr_svn141_3538"

><td id="3538"><a href="#3538">3538</a></td></tr
><tr id="gr_svn141_3539"

><td id="3539"><a href="#3539">3539</a></td></tr
><tr id="gr_svn141_3540"

><td id="3540"><a href="#3540">3540</a></td></tr
><tr id="gr_svn141_3541"

><td id="3541"><a href="#3541">3541</a></td></tr
><tr id="gr_svn141_3542"

><td id="3542"><a href="#3542">3542</a></td></tr
><tr id="gr_svn141_3543"

><td id="3543"><a href="#3543">3543</a></td></tr
><tr id="gr_svn141_3544"

><td id="3544"><a href="#3544">3544</a></td></tr
><tr id="gr_svn141_3545"

><td id="3545"><a href="#3545">3545</a></td></tr
><tr id="gr_svn141_3546"

><td id="3546"><a href="#3546">3546</a></td></tr
><tr id="gr_svn141_3547"

><td id="3547"><a href="#3547">3547</a></td></tr
><tr id="gr_svn141_3548"

><td id="3548"><a href="#3548">3548</a></td></tr
><tr id="gr_svn141_3549"

><td id="3549"><a href="#3549">3549</a></td></tr
><tr id="gr_svn141_3550"

><td id="3550"><a href="#3550">3550</a></td></tr
><tr id="gr_svn141_3551"

><td id="3551"><a href="#3551">3551</a></td></tr
><tr id="gr_svn141_3552"

><td id="3552"><a href="#3552">3552</a></td></tr
><tr id="gr_svn141_3553"

><td id="3553"><a href="#3553">3553</a></td></tr
><tr id="gr_svn141_3554"

><td id="3554"><a href="#3554">3554</a></td></tr
><tr id="gr_svn141_3555"

><td id="3555"><a href="#3555">3555</a></td></tr
><tr id="gr_svn141_3556"

><td id="3556"><a href="#3556">3556</a></td></tr
><tr id="gr_svn141_3557"

><td id="3557"><a href="#3557">3557</a></td></tr
><tr id="gr_svn141_3558"

><td id="3558"><a href="#3558">3558</a></td></tr
><tr id="gr_svn141_3559"

><td id="3559"><a href="#3559">3559</a></td></tr
><tr id="gr_svn141_3560"

><td id="3560"><a href="#3560">3560</a></td></tr
><tr id="gr_svn141_3561"

><td id="3561"><a href="#3561">3561</a></td></tr
><tr id="gr_svn141_3562"

><td id="3562"><a href="#3562">3562</a></td></tr
><tr id="gr_svn141_3563"

><td id="3563"><a href="#3563">3563</a></td></tr
><tr id="gr_svn141_3564"

><td id="3564"><a href="#3564">3564</a></td></tr
><tr id="gr_svn141_3565"

><td id="3565"><a href="#3565">3565</a></td></tr
><tr id="gr_svn141_3566"

><td id="3566"><a href="#3566">3566</a></td></tr
><tr id="gr_svn141_3567"

><td id="3567"><a href="#3567">3567</a></td></tr
><tr id="gr_svn141_3568"

><td id="3568"><a href="#3568">3568</a></td></tr
><tr id="gr_svn141_3569"

><td id="3569"><a href="#3569">3569</a></td></tr
><tr id="gr_svn141_3570"

><td id="3570"><a href="#3570">3570</a></td></tr
><tr id="gr_svn141_3571"

><td id="3571"><a href="#3571">3571</a></td></tr
><tr id="gr_svn141_3572"

><td id="3572"><a href="#3572">3572</a></td></tr
><tr id="gr_svn141_3573"

><td id="3573"><a href="#3573">3573</a></td></tr
><tr id="gr_svn141_3574"

><td id="3574"><a href="#3574">3574</a></td></tr
><tr id="gr_svn141_3575"

><td id="3575"><a href="#3575">3575</a></td></tr
><tr id="gr_svn141_3576"

><td id="3576"><a href="#3576">3576</a></td></tr
><tr id="gr_svn141_3577"

><td id="3577"><a href="#3577">3577</a></td></tr
><tr id="gr_svn141_3578"

><td id="3578"><a href="#3578">3578</a></td></tr
><tr id="gr_svn141_3579"

><td id="3579"><a href="#3579">3579</a></td></tr
><tr id="gr_svn141_3580"

><td id="3580"><a href="#3580">3580</a></td></tr
><tr id="gr_svn141_3581"

><td id="3581"><a href="#3581">3581</a></td></tr
><tr id="gr_svn141_3582"

><td id="3582"><a href="#3582">3582</a></td></tr
><tr id="gr_svn141_3583"

><td id="3583"><a href="#3583">3583</a></td></tr
><tr id="gr_svn141_3584"

><td id="3584"><a href="#3584">3584</a></td></tr
><tr id="gr_svn141_3585"

><td id="3585"><a href="#3585">3585</a></td></tr
><tr id="gr_svn141_3586"

><td id="3586"><a href="#3586">3586</a></td></tr
><tr id="gr_svn141_3587"

><td id="3587"><a href="#3587">3587</a></td></tr
><tr id="gr_svn141_3588"

><td id="3588"><a href="#3588">3588</a></td></tr
><tr id="gr_svn141_3589"

><td id="3589"><a href="#3589">3589</a></td></tr
><tr id="gr_svn141_3590"

><td id="3590"><a href="#3590">3590</a></td></tr
><tr id="gr_svn141_3591"

><td id="3591"><a href="#3591">3591</a></td></tr
><tr id="gr_svn141_3592"

><td id="3592"><a href="#3592">3592</a></td></tr
><tr id="gr_svn141_3593"

><td id="3593"><a href="#3593">3593</a></td></tr
><tr id="gr_svn141_3594"

><td id="3594"><a href="#3594">3594</a></td></tr
><tr id="gr_svn141_3595"

><td id="3595"><a href="#3595">3595</a></td></tr
><tr id="gr_svn141_3596"

><td id="3596"><a href="#3596">3596</a></td></tr
><tr id="gr_svn141_3597"

><td id="3597"><a href="#3597">3597</a></td></tr
><tr id="gr_svn141_3598"

><td id="3598"><a href="#3598">3598</a></td></tr
><tr id="gr_svn141_3599"

><td id="3599"><a href="#3599">3599</a></td></tr
><tr id="gr_svn141_3600"

><td id="3600"><a href="#3600">3600</a></td></tr
><tr id="gr_svn141_3601"

><td id="3601"><a href="#3601">3601</a></td></tr
><tr id="gr_svn141_3602"

><td id="3602"><a href="#3602">3602</a></td></tr
><tr id="gr_svn141_3603"

><td id="3603"><a href="#3603">3603</a></td></tr
><tr id="gr_svn141_3604"

><td id="3604"><a href="#3604">3604</a></td></tr
><tr id="gr_svn141_3605"

><td id="3605"><a href="#3605">3605</a></td></tr
><tr id="gr_svn141_3606"

><td id="3606"><a href="#3606">3606</a></td></tr
><tr id="gr_svn141_3607"

><td id="3607"><a href="#3607">3607</a></td></tr
><tr id="gr_svn141_3608"

><td id="3608"><a href="#3608">3608</a></td></tr
><tr id="gr_svn141_3609"

><td id="3609"><a href="#3609">3609</a></td></tr
><tr id="gr_svn141_3610"

><td id="3610"><a href="#3610">3610</a></td></tr
><tr id="gr_svn141_3611"

><td id="3611"><a href="#3611">3611</a></td></tr
><tr id="gr_svn141_3612"

><td id="3612"><a href="#3612">3612</a></td></tr
><tr id="gr_svn141_3613"

><td id="3613"><a href="#3613">3613</a></td></tr
><tr id="gr_svn141_3614"

><td id="3614"><a href="#3614">3614</a></td></tr
><tr id="gr_svn141_3615"

><td id="3615"><a href="#3615">3615</a></td></tr
><tr id="gr_svn141_3616"

><td id="3616"><a href="#3616">3616</a></td></tr
><tr id="gr_svn141_3617"

><td id="3617"><a href="#3617">3617</a></td></tr
><tr id="gr_svn141_3618"

><td id="3618"><a href="#3618">3618</a></td></tr
><tr id="gr_svn141_3619"

><td id="3619"><a href="#3619">3619</a></td></tr
><tr id="gr_svn141_3620"

><td id="3620"><a href="#3620">3620</a></td></tr
><tr id="gr_svn141_3621"

><td id="3621"><a href="#3621">3621</a></td></tr
><tr id="gr_svn141_3622"

><td id="3622"><a href="#3622">3622</a></td></tr
><tr id="gr_svn141_3623"

><td id="3623"><a href="#3623">3623</a></td></tr
><tr id="gr_svn141_3624"

><td id="3624"><a href="#3624">3624</a></td></tr
><tr id="gr_svn141_3625"

><td id="3625"><a href="#3625">3625</a></td></tr
><tr id="gr_svn141_3626"

><td id="3626"><a href="#3626">3626</a></td></tr
><tr id="gr_svn141_3627"

><td id="3627"><a href="#3627">3627</a></td></tr
><tr id="gr_svn141_3628"

><td id="3628"><a href="#3628">3628</a></td></tr
><tr id="gr_svn141_3629"

><td id="3629"><a href="#3629">3629</a></td></tr
><tr id="gr_svn141_3630"

><td id="3630"><a href="#3630">3630</a></td></tr
><tr id="gr_svn141_3631"

><td id="3631"><a href="#3631">3631</a></td></tr
><tr id="gr_svn141_3632"

><td id="3632"><a href="#3632">3632</a></td></tr
><tr id="gr_svn141_3633"

><td id="3633"><a href="#3633">3633</a></td></tr
><tr id="gr_svn141_3634"

><td id="3634"><a href="#3634">3634</a></td></tr
><tr id="gr_svn141_3635"

><td id="3635"><a href="#3635">3635</a></td></tr
><tr id="gr_svn141_3636"

><td id="3636"><a href="#3636">3636</a></td></tr
><tr id="gr_svn141_3637"

><td id="3637"><a href="#3637">3637</a></td></tr
><tr id="gr_svn141_3638"

><td id="3638"><a href="#3638">3638</a></td></tr
><tr id="gr_svn141_3639"

><td id="3639"><a href="#3639">3639</a></td></tr
><tr id="gr_svn141_3640"

><td id="3640"><a href="#3640">3640</a></td></tr
><tr id="gr_svn141_3641"

><td id="3641"><a href="#3641">3641</a></td></tr
><tr id="gr_svn141_3642"

><td id="3642"><a href="#3642">3642</a></td></tr
><tr id="gr_svn141_3643"

><td id="3643"><a href="#3643">3643</a></td></tr
><tr id="gr_svn141_3644"

><td id="3644"><a href="#3644">3644</a></td></tr
><tr id="gr_svn141_3645"

><td id="3645"><a href="#3645">3645</a></td></tr
><tr id="gr_svn141_3646"

><td id="3646"><a href="#3646">3646</a></td></tr
><tr id="gr_svn141_3647"

><td id="3647"><a href="#3647">3647</a></td></tr
><tr id="gr_svn141_3648"

><td id="3648"><a href="#3648">3648</a></td></tr
><tr id="gr_svn141_3649"

><td id="3649"><a href="#3649">3649</a></td></tr
><tr id="gr_svn141_3650"

><td id="3650"><a href="#3650">3650</a></td></tr
><tr id="gr_svn141_3651"

><td id="3651"><a href="#3651">3651</a></td></tr
><tr id="gr_svn141_3652"

><td id="3652"><a href="#3652">3652</a></td></tr
><tr id="gr_svn141_3653"

><td id="3653"><a href="#3653">3653</a></td></tr
><tr id="gr_svn141_3654"

><td id="3654"><a href="#3654">3654</a></td></tr
><tr id="gr_svn141_3655"

><td id="3655"><a href="#3655">3655</a></td></tr
><tr id="gr_svn141_3656"

><td id="3656"><a href="#3656">3656</a></td></tr
><tr id="gr_svn141_3657"

><td id="3657"><a href="#3657">3657</a></td></tr
><tr id="gr_svn141_3658"

><td id="3658"><a href="#3658">3658</a></td></tr
><tr id="gr_svn141_3659"

><td id="3659"><a href="#3659">3659</a></td></tr
><tr id="gr_svn141_3660"

><td id="3660"><a href="#3660">3660</a></td></tr
><tr id="gr_svn141_3661"

><td id="3661"><a href="#3661">3661</a></td></tr
><tr id="gr_svn141_3662"

><td id="3662"><a href="#3662">3662</a></td></tr
><tr id="gr_svn141_3663"

><td id="3663"><a href="#3663">3663</a></td></tr
><tr id="gr_svn141_3664"

><td id="3664"><a href="#3664">3664</a></td></tr
><tr id="gr_svn141_3665"

><td id="3665"><a href="#3665">3665</a></td></tr
><tr id="gr_svn141_3666"

><td id="3666"><a href="#3666">3666</a></td></tr
><tr id="gr_svn141_3667"

><td id="3667"><a href="#3667">3667</a></td></tr
><tr id="gr_svn141_3668"

><td id="3668"><a href="#3668">3668</a></td></tr
><tr id="gr_svn141_3669"

><td id="3669"><a href="#3669">3669</a></td></tr
><tr id="gr_svn141_3670"

><td id="3670"><a href="#3670">3670</a></td></tr
><tr id="gr_svn141_3671"

><td id="3671"><a href="#3671">3671</a></td></tr
><tr id="gr_svn141_3672"

><td id="3672"><a href="#3672">3672</a></td></tr
><tr id="gr_svn141_3673"

><td id="3673"><a href="#3673">3673</a></td></tr
><tr id="gr_svn141_3674"

><td id="3674"><a href="#3674">3674</a></td></tr
><tr id="gr_svn141_3675"

><td id="3675"><a href="#3675">3675</a></td></tr
><tr id="gr_svn141_3676"

><td id="3676"><a href="#3676">3676</a></td></tr
><tr id="gr_svn141_3677"

><td id="3677"><a href="#3677">3677</a></td></tr
><tr id="gr_svn141_3678"

><td id="3678"><a href="#3678">3678</a></td></tr
><tr id="gr_svn141_3679"

><td id="3679"><a href="#3679">3679</a></td></tr
><tr id="gr_svn141_3680"

><td id="3680"><a href="#3680">3680</a></td></tr
><tr id="gr_svn141_3681"

><td id="3681"><a href="#3681">3681</a></td></tr
><tr id="gr_svn141_3682"

><td id="3682"><a href="#3682">3682</a></td></tr
><tr id="gr_svn141_3683"

><td id="3683"><a href="#3683">3683</a></td></tr
><tr id="gr_svn141_3684"

><td id="3684"><a href="#3684">3684</a></td></tr
><tr id="gr_svn141_3685"

><td id="3685"><a href="#3685">3685</a></td></tr
><tr id="gr_svn141_3686"

><td id="3686"><a href="#3686">3686</a></td></tr
><tr id="gr_svn141_3687"

><td id="3687"><a href="#3687">3687</a></td></tr
><tr id="gr_svn141_3688"

><td id="3688"><a href="#3688">3688</a></td></tr
><tr id="gr_svn141_3689"

><td id="3689"><a href="#3689">3689</a></td></tr
><tr id="gr_svn141_3690"

><td id="3690"><a href="#3690">3690</a></td></tr
><tr id="gr_svn141_3691"

><td id="3691"><a href="#3691">3691</a></td></tr
><tr id="gr_svn141_3692"

><td id="3692"><a href="#3692">3692</a></td></tr
><tr id="gr_svn141_3693"

><td id="3693"><a href="#3693">3693</a></td></tr
><tr id="gr_svn141_3694"

><td id="3694"><a href="#3694">3694</a></td></tr
><tr id="gr_svn141_3695"

><td id="3695"><a href="#3695">3695</a></td></tr
><tr id="gr_svn141_3696"

><td id="3696"><a href="#3696">3696</a></td></tr
><tr id="gr_svn141_3697"

><td id="3697"><a href="#3697">3697</a></td></tr
><tr id="gr_svn141_3698"

><td id="3698"><a href="#3698">3698</a></td></tr
><tr id="gr_svn141_3699"

><td id="3699"><a href="#3699">3699</a></td></tr
><tr id="gr_svn141_3700"

><td id="3700"><a href="#3700">3700</a></td></tr
><tr id="gr_svn141_3701"

><td id="3701"><a href="#3701">3701</a></td></tr
><tr id="gr_svn141_3702"

><td id="3702"><a href="#3702">3702</a></td></tr
><tr id="gr_svn141_3703"

><td id="3703"><a href="#3703">3703</a></td></tr
><tr id="gr_svn141_3704"

><td id="3704"><a href="#3704">3704</a></td></tr
><tr id="gr_svn141_3705"

><td id="3705"><a href="#3705">3705</a></td></tr
><tr id="gr_svn141_3706"

><td id="3706"><a href="#3706">3706</a></td></tr
><tr id="gr_svn141_3707"

><td id="3707"><a href="#3707">3707</a></td></tr
><tr id="gr_svn141_3708"

><td id="3708"><a href="#3708">3708</a></td></tr
><tr id="gr_svn141_3709"

><td id="3709"><a href="#3709">3709</a></td></tr
><tr id="gr_svn141_3710"

><td id="3710"><a href="#3710">3710</a></td></tr
><tr id="gr_svn141_3711"

><td id="3711"><a href="#3711">3711</a></td></tr
><tr id="gr_svn141_3712"

><td id="3712"><a href="#3712">3712</a></td></tr
><tr id="gr_svn141_3713"

><td id="3713"><a href="#3713">3713</a></td></tr
><tr id="gr_svn141_3714"

><td id="3714"><a href="#3714">3714</a></td></tr
><tr id="gr_svn141_3715"

><td id="3715"><a href="#3715">3715</a></td></tr
><tr id="gr_svn141_3716"

><td id="3716"><a href="#3716">3716</a></td></tr
><tr id="gr_svn141_3717"

><td id="3717"><a href="#3717">3717</a></td></tr
><tr id="gr_svn141_3718"

><td id="3718"><a href="#3718">3718</a></td></tr
><tr id="gr_svn141_3719"

><td id="3719"><a href="#3719">3719</a></td></tr
><tr id="gr_svn141_3720"

><td id="3720"><a href="#3720">3720</a></td></tr
><tr id="gr_svn141_3721"

><td id="3721"><a href="#3721">3721</a></td></tr
><tr id="gr_svn141_3722"

><td id="3722"><a href="#3722">3722</a></td></tr
><tr id="gr_svn141_3723"

><td id="3723"><a href="#3723">3723</a></td></tr
><tr id="gr_svn141_3724"

><td id="3724"><a href="#3724">3724</a></td></tr
><tr id="gr_svn141_3725"

><td id="3725"><a href="#3725">3725</a></td></tr
><tr id="gr_svn141_3726"

><td id="3726"><a href="#3726">3726</a></td></tr
><tr id="gr_svn141_3727"

><td id="3727"><a href="#3727">3727</a></td></tr
><tr id="gr_svn141_3728"

><td id="3728"><a href="#3728">3728</a></td></tr
><tr id="gr_svn141_3729"

><td id="3729"><a href="#3729">3729</a></td></tr
><tr id="gr_svn141_3730"

><td id="3730"><a href="#3730">3730</a></td></tr
><tr id="gr_svn141_3731"

><td id="3731"><a href="#3731">3731</a></td></tr
><tr id="gr_svn141_3732"

><td id="3732"><a href="#3732">3732</a></td></tr
><tr id="gr_svn141_3733"

><td id="3733"><a href="#3733">3733</a></td></tr
><tr id="gr_svn141_3734"

><td id="3734"><a href="#3734">3734</a></td></tr
><tr id="gr_svn141_3735"

><td id="3735"><a href="#3735">3735</a></td></tr
><tr id="gr_svn141_3736"

><td id="3736"><a href="#3736">3736</a></td></tr
><tr id="gr_svn141_3737"

><td id="3737"><a href="#3737">3737</a></td></tr
><tr id="gr_svn141_3738"

><td id="3738"><a href="#3738">3738</a></td></tr
><tr id="gr_svn141_3739"

><td id="3739"><a href="#3739">3739</a></td></tr
><tr id="gr_svn141_3740"

><td id="3740"><a href="#3740">3740</a></td></tr
><tr id="gr_svn141_3741"

><td id="3741"><a href="#3741">3741</a></td></tr
><tr id="gr_svn141_3742"

><td id="3742"><a href="#3742">3742</a></td></tr
><tr id="gr_svn141_3743"

><td id="3743"><a href="#3743">3743</a></td></tr
><tr id="gr_svn141_3744"

><td id="3744"><a href="#3744">3744</a></td></tr
><tr id="gr_svn141_3745"

><td id="3745"><a href="#3745">3745</a></td></tr
><tr id="gr_svn141_3746"

><td id="3746"><a href="#3746">3746</a></td></tr
><tr id="gr_svn141_3747"

><td id="3747"><a href="#3747">3747</a></td></tr
><tr id="gr_svn141_3748"

><td id="3748"><a href="#3748">3748</a></td></tr
><tr id="gr_svn141_3749"

><td id="3749"><a href="#3749">3749</a></td></tr
><tr id="gr_svn141_3750"

><td id="3750"><a href="#3750">3750</a></td></tr
><tr id="gr_svn141_3751"

><td id="3751"><a href="#3751">3751</a></td></tr
><tr id="gr_svn141_3752"

><td id="3752"><a href="#3752">3752</a></td></tr
><tr id="gr_svn141_3753"

><td id="3753"><a href="#3753">3753</a></td></tr
><tr id="gr_svn141_3754"

><td id="3754"><a href="#3754">3754</a></td></tr
><tr id="gr_svn141_3755"

><td id="3755"><a href="#3755">3755</a></td></tr
><tr id="gr_svn141_3756"

><td id="3756"><a href="#3756">3756</a></td></tr
><tr id="gr_svn141_3757"

><td id="3757"><a href="#3757">3757</a></td></tr
><tr id="gr_svn141_3758"

><td id="3758"><a href="#3758">3758</a></td></tr
><tr id="gr_svn141_3759"

><td id="3759"><a href="#3759">3759</a></td></tr
><tr id="gr_svn141_3760"

><td id="3760"><a href="#3760">3760</a></td></tr
><tr id="gr_svn141_3761"

><td id="3761"><a href="#3761">3761</a></td></tr
><tr id="gr_svn141_3762"

><td id="3762"><a href="#3762">3762</a></td></tr
><tr id="gr_svn141_3763"

><td id="3763"><a href="#3763">3763</a></td></tr
><tr id="gr_svn141_3764"

><td id="3764"><a href="#3764">3764</a></td></tr
><tr id="gr_svn141_3765"

><td id="3765"><a href="#3765">3765</a></td></tr
><tr id="gr_svn141_3766"

><td id="3766"><a href="#3766">3766</a></td></tr
><tr id="gr_svn141_3767"

><td id="3767"><a href="#3767">3767</a></td></tr
><tr id="gr_svn141_3768"

><td id="3768"><a href="#3768">3768</a></td></tr
><tr id="gr_svn141_3769"

><td id="3769"><a href="#3769">3769</a></td></tr
><tr id="gr_svn141_3770"

><td id="3770"><a href="#3770">3770</a></td></tr
><tr id="gr_svn141_3771"

><td id="3771"><a href="#3771">3771</a></td></tr
><tr id="gr_svn141_3772"

><td id="3772"><a href="#3772">3772</a></td></tr
><tr id="gr_svn141_3773"

><td id="3773"><a href="#3773">3773</a></td></tr
><tr id="gr_svn141_3774"

><td id="3774"><a href="#3774">3774</a></td></tr
><tr id="gr_svn141_3775"

><td id="3775"><a href="#3775">3775</a></td></tr
><tr id="gr_svn141_3776"

><td id="3776"><a href="#3776">3776</a></td></tr
><tr id="gr_svn141_3777"

><td id="3777"><a href="#3777">3777</a></td></tr
><tr id="gr_svn141_3778"

><td id="3778"><a href="#3778">3778</a></td></tr
><tr id="gr_svn141_3779"

><td id="3779"><a href="#3779">3779</a></td></tr
><tr id="gr_svn141_3780"

><td id="3780"><a href="#3780">3780</a></td></tr
><tr id="gr_svn141_3781"

><td id="3781"><a href="#3781">3781</a></td></tr
><tr id="gr_svn141_3782"

><td id="3782"><a href="#3782">3782</a></td></tr
><tr id="gr_svn141_3783"

><td id="3783"><a href="#3783">3783</a></td></tr
><tr id="gr_svn141_3784"

><td id="3784"><a href="#3784">3784</a></td></tr
><tr id="gr_svn141_3785"

><td id="3785"><a href="#3785">3785</a></td></tr
><tr id="gr_svn141_3786"

><td id="3786"><a href="#3786">3786</a></td></tr
><tr id="gr_svn141_3787"

><td id="3787"><a href="#3787">3787</a></td></tr
><tr id="gr_svn141_3788"

><td id="3788"><a href="#3788">3788</a></td></tr
><tr id="gr_svn141_3789"

><td id="3789"><a href="#3789">3789</a></td></tr
><tr id="gr_svn141_3790"

><td id="3790"><a href="#3790">3790</a></td></tr
><tr id="gr_svn141_3791"

><td id="3791"><a href="#3791">3791</a></td></tr
><tr id="gr_svn141_3792"

><td id="3792"><a href="#3792">3792</a></td></tr
><tr id="gr_svn141_3793"

><td id="3793"><a href="#3793">3793</a></td></tr
><tr id="gr_svn141_3794"

><td id="3794"><a href="#3794">3794</a></td></tr
><tr id="gr_svn141_3795"

><td id="3795"><a href="#3795">3795</a></td></tr
><tr id="gr_svn141_3796"

><td id="3796"><a href="#3796">3796</a></td></tr
><tr id="gr_svn141_3797"

><td id="3797"><a href="#3797">3797</a></td></tr
><tr id="gr_svn141_3798"

><td id="3798"><a href="#3798">3798</a></td></tr
><tr id="gr_svn141_3799"

><td id="3799"><a href="#3799">3799</a></td></tr
><tr id="gr_svn141_3800"

><td id="3800"><a href="#3800">3800</a></td></tr
><tr id="gr_svn141_3801"

><td id="3801"><a href="#3801">3801</a></td></tr
><tr id="gr_svn141_3802"

><td id="3802"><a href="#3802">3802</a></td></tr
><tr id="gr_svn141_3803"

><td id="3803"><a href="#3803">3803</a></td></tr
><tr id="gr_svn141_3804"

><td id="3804"><a href="#3804">3804</a></td></tr
><tr id="gr_svn141_3805"

><td id="3805"><a href="#3805">3805</a></td></tr
><tr id="gr_svn141_3806"

><td id="3806"><a href="#3806">3806</a></td></tr
><tr id="gr_svn141_3807"

><td id="3807"><a href="#3807">3807</a></td></tr
><tr id="gr_svn141_3808"

><td id="3808"><a href="#3808">3808</a></td></tr
><tr id="gr_svn141_3809"

><td id="3809"><a href="#3809">3809</a></td></tr
><tr id="gr_svn141_3810"

><td id="3810"><a href="#3810">3810</a></td></tr
><tr id="gr_svn141_3811"

><td id="3811"><a href="#3811">3811</a></td></tr
><tr id="gr_svn141_3812"

><td id="3812"><a href="#3812">3812</a></td></tr
><tr id="gr_svn141_3813"

><td id="3813"><a href="#3813">3813</a></td></tr
><tr id="gr_svn141_3814"

><td id="3814"><a href="#3814">3814</a></td></tr
><tr id="gr_svn141_3815"

><td id="3815"><a href="#3815">3815</a></td></tr
><tr id="gr_svn141_3816"

><td id="3816"><a href="#3816">3816</a></td></tr
><tr id="gr_svn141_3817"

><td id="3817"><a href="#3817">3817</a></td></tr
><tr id="gr_svn141_3818"

><td id="3818"><a href="#3818">3818</a></td></tr
><tr id="gr_svn141_3819"

><td id="3819"><a href="#3819">3819</a></td></tr
><tr id="gr_svn141_3820"

><td id="3820"><a href="#3820">3820</a></td></tr
><tr id="gr_svn141_3821"

><td id="3821"><a href="#3821">3821</a></td></tr
><tr id="gr_svn141_3822"

><td id="3822"><a href="#3822">3822</a></td></tr
><tr id="gr_svn141_3823"

><td id="3823"><a href="#3823">3823</a></td></tr
><tr id="gr_svn141_3824"

><td id="3824"><a href="#3824">3824</a></td></tr
><tr id="gr_svn141_3825"

><td id="3825"><a href="#3825">3825</a></td></tr
><tr id="gr_svn141_3826"

><td id="3826"><a href="#3826">3826</a></td></tr
><tr id="gr_svn141_3827"

><td id="3827"><a href="#3827">3827</a></td></tr
><tr id="gr_svn141_3828"

><td id="3828"><a href="#3828">3828</a></td></tr
><tr id="gr_svn141_3829"

><td id="3829"><a href="#3829">3829</a></td></tr
><tr id="gr_svn141_3830"

><td id="3830"><a href="#3830">3830</a></td></tr
><tr id="gr_svn141_3831"

><td id="3831"><a href="#3831">3831</a></td></tr
><tr id="gr_svn141_3832"

><td id="3832"><a href="#3832">3832</a></td></tr
><tr id="gr_svn141_3833"

><td id="3833"><a href="#3833">3833</a></td></tr
><tr id="gr_svn141_3834"

><td id="3834"><a href="#3834">3834</a></td></tr
><tr id="gr_svn141_3835"

><td id="3835"><a href="#3835">3835</a></td></tr
><tr id="gr_svn141_3836"

><td id="3836"><a href="#3836">3836</a></td></tr
><tr id="gr_svn141_3837"

><td id="3837"><a href="#3837">3837</a></td></tr
><tr id="gr_svn141_3838"

><td id="3838"><a href="#3838">3838</a></td></tr
><tr id="gr_svn141_3839"

><td id="3839"><a href="#3839">3839</a></td></tr
><tr id="gr_svn141_3840"

><td id="3840"><a href="#3840">3840</a></td></tr
><tr id="gr_svn141_3841"

><td id="3841"><a href="#3841">3841</a></td></tr
><tr id="gr_svn141_3842"

><td id="3842"><a href="#3842">3842</a></td></tr
><tr id="gr_svn141_3843"

><td id="3843"><a href="#3843">3843</a></td></tr
><tr id="gr_svn141_3844"

><td id="3844"><a href="#3844">3844</a></td></tr
><tr id="gr_svn141_3845"

><td id="3845"><a href="#3845">3845</a></td></tr
><tr id="gr_svn141_3846"

><td id="3846"><a href="#3846">3846</a></td></tr
><tr id="gr_svn141_3847"

><td id="3847"><a href="#3847">3847</a></td></tr
><tr id="gr_svn141_3848"

><td id="3848"><a href="#3848">3848</a></td></tr
><tr id="gr_svn141_3849"

><td id="3849"><a href="#3849">3849</a></td></tr
><tr id="gr_svn141_3850"

><td id="3850"><a href="#3850">3850</a></td></tr
><tr id="gr_svn141_3851"

><td id="3851"><a href="#3851">3851</a></td></tr
><tr id="gr_svn141_3852"

><td id="3852"><a href="#3852">3852</a></td></tr
><tr id="gr_svn141_3853"

><td id="3853"><a href="#3853">3853</a></td></tr
><tr id="gr_svn141_3854"

><td id="3854"><a href="#3854">3854</a></td></tr
><tr id="gr_svn141_3855"

><td id="3855"><a href="#3855">3855</a></td></tr
><tr id="gr_svn141_3856"

><td id="3856"><a href="#3856">3856</a></td></tr
><tr id="gr_svn141_3857"

><td id="3857"><a href="#3857">3857</a></td></tr
><tr id="gr_svn141_3858"

><td id="3858"><a href="#3858">3858</a></td></tr
><tr id="gr_svn141_3859"

><td id="3859"><a href="#3859">3859</a></td></tr
><tr id="gr_svn141_3860"

><td id="3860"><a href="#3860">3860</a></td></tr
><tr id="gr_svn141_3861"

><td id="3861"><a href="#3861">3861</a></td></tr
><tr id="gr_svn141_3862"

><td id="3862"><a href="#3862">3862</a></td></tr
><tr id="gr_svn141_3863"

><td id="3863"><a href="#3863">3863</a></td></tr
><tr id="gr_svn141_3864"

><td id="3864"><a href="#3864">3864</a></td></tr
><tr id="gr_svn141_3865"

><td id="3865"><a href="#3865">3865</a></td></tr
><tr id="gr_svn141_3866"

><td id="3866"><a href="#3866">3866</a></td></tr
><tr id="gr_svn141_3867"

><td id="3867"><a href="#3867">3867</a></td></tr
><tr id="gr_svn141_3868"

><td id="3868"><a href="#3868">3868</a></td></tr
><tr id="gr_svn141_3869"

><td id="3869"><a href="#3869">3869</a></td></tr
><tr id="gr_svn141_3870"

><td id="3870"><a href="#3870">3870</a></td></tr
><tr id="gr_svn141_3871"

><td id="3871"><a href="#3871">3871</a></td></tr
><tr id="gr_svn141_3872"

><td id="3872"><a href="#3872">3872</a></td></tr
><tr id="gr_svn141_3873"

><td id="3873"><a href="#3873">3873</a></td></tr
><tr id="gr_svn141_3874"

><td id="3874"><a href="#3874">3874</a></td></tr
><tr id="gr_svn141_3875"

><td id="3875"><a href="#3875">3875</a></td></tr
><tr id="gr_svn141_3876"

><td id="3876"><a href="#3876">3876</a></td></tr
><tr id="gr_svn141_3877"

><td id="3877"><a href="#3877">3877</a></td></tr
><tr id="gr_svn141_3878"

><td id="3878"><a href="#3878">3878</a></td></tr
><tr id="gr_svn141_3879"

><td id="3879"><a href="#3879">3879</a></td></tr
><tr id="gr_svn141_3880"

><td id="3880"><a href="#3880">3880</a></td></tr
><tr id="gr_svn141_3881"

><td id="3881"><a href="#3881">3881</a></td></tr
><tr id="gr_svn141_3882"

><td id="3882"><a href="#3882">3882</a></td></tr
><tr id="gr_svn141_3883"

><td id="3883"><a href="#3883">3883</a></td></tr
><tr id="gr_svn141_3884"

><td id="3884"><a href="#3884">3884</a></td></tr
><tr id="gr_svn141_3885"

><td id="3885"><a href="#3885">3885</a></td></tr
><tr id="gr_svn141_3886"

><td id="3886"><a href="#3886">3886</a></td></tr
><tr id="gr_svn141_3887"

><td id="3887"><a href="#3887">3887</a></td></tr
><tr id="gr_svn141_3888"

><td id="3888"><a href="#3888">3888</a></td></tr
><tr id="gr_svn141_3889"

><td id="3889"><a href="#3889">3889</a></td></tr
><tr id="gr_svn141_3890"

><td id="3890"><a href="#3890">3890</a></td></tr
><tr id="gr_svn141_3891"

><td id="3891"><a href="#3891">3891</a></td></tr
><tr id="gr_svn141_3892"

><td id="3892"><a href="#3892">3892</a></td></tr
><tr id="gr_svn141_3893"

><td id="3893"><a href="#3893">3893</a></td></tr
><tr id="gr_svn141_3894"

><td id="3894"><a href="#3894">3894</a></td></tr
><tr id="gr_svn141_3895"

><td id="3895"><a href="#3895">3895</a></td></tr
><tr id="gr_svn141_3896"

><td id="3896"><a href="#3896">3896</a></td></tr
><tr id="gr_svn141_3897"

><td id="3897"><a href="#3897">3897</a></td></tr
><tr id="gr_svn141_3898"

><td id="3898"><a href="#3898">3898</a></td></tr
><tr id="gr_svn141_3899"

><td id="3899"><a href="#3899">3899</a></td></tr
><tr id="gr_svn141_3900"

><td id="3900"><a href="#3900">3900</a></td></tr
><tr id="gr_svn141_3901"

><td id="3901"><a href="#3901">3901</a></td></tr
><tr id="gr_svn141_3902"

><td id="3902"><a href="#3902">3902</a></td></tr
><tr id="gr_svn141_3903"

><td id="3903"><a href="#3903">3903</a></td></tr
><tr id="gr_svn141_3904"

><td id="3904"><a href="#3904">3904</a></td></tr
><tr id="gr_svn141_3905"

><td id="3905"><a href="#3905">3905</a></td></tr
><tr id="gr_svn141_3906"

><td id="3906"><a href="#3906">3906</a></td></tr
><tr id="gr_svn141_3907"

><td id="3907"><a href="#3907">3907</a></td></tr
><tr id="gr_svn141_3908"

><td id="3908"><a href="#3908">3908</a></td></tr
><tr id="gr_svn141_3909"

><td id="3909"><a href="#3909">3909</a></td></tr
><tr id="gr_svn141_3910"

><td id="3910"><a href="#3910">3910</a></td></tr
><tr id="gr_svn141_3911"

><td id="3911"><a href="#3911">3911</a></td></tr
><tr id="gr_svn141_3912"

><td id="3912"><a href="#3912">3912</a></td></tr
><tr id="gr_svn141_3913"

><td id="3913"><a href="#3913">3913</a></td></tr
><tr id="gr_svn141_3914"

><td id="3914"><a href="#3914">3914</a></td></tr
><tr id="gr_svn141_3915"

><td id="3915"><a href="#3915">3915</a></td></tr
><tr id="gr_svn141_3916"

><td id="3916"><a href="#3916">3916</a></td></tr
><tr id="gr_svn141_3917"

><td id="3917"><a href="#3917">3917</a></td></tr
><tr id="gr_svn141_3918"

><td id="3918"><a href="#3918">3918</a></td></tr
><tr id="gr_svn141_3919"

><td id="3919"><a href="#3919">3919</a></td></tr
><tr id="gr_svn141_3920"

><td id="3920"><a href="#3920">3920</a></td></tr
><tr id="gr_svn141_3921"

><td id="3921"><a href="#3921">3921</a></td></tr
><tr id="gr_svn141_3922"

><td id="3922"><a href="#3922">3922</a></td></tr
><tr id="gr_svn141_3923"

><td id="3923"><a href="#3923">3923</a></td></tr
><tr id="gr_svn141_3924"

><td id="3924"><a href="#3924">3924</a></td></tr
><tr id="gr_svn141_3925"

><td id="3925"><a href="#3925">3925</a></td></tr
><tr id="gr_svn141_3926"

><td id="3926"><a href="#3926">3926</a></td></tr
><tr id="gr_svn141_3927"

><td id="3927"><a href="#3927">3927</a></td></tr
><tr id="gr_svn141_3928"

><td id="3928"><a href="#3928">3928</a></td></tr
><tr id="gr_svn141_3929"

><td id="3929"><a href="#3929">3929</a></td></tr
><tr id="gr_svn141_3930"

><td id="3930"><a href="#3930">3930</a></td></tr
><tr id="gr_svn141_3931"

><td id="3931"><a href="#3931">3931</a></td></tr
><tr id="gr_svn141_3932"

><td id="3932"><a href="#3932">3932</a></td></tr
><tr id="gr_svn141_3933"

><td id="3933"><a href="#3933">3933</a></td></tr
><tr id="gr_svn141_3934"

><td id="3934"><a href="#3934">3934</a></td></tr
><tr id="gr_svn141_3935"

><td id="3935"><a href="#3935">3935</a></td></tr
><tr id="gr_svn141_3936"

><td id="3936"><a href="#3936">3936</a></td></tr
><tr id="gr_svn141_3937"

><td id="3937"><a href="#3937">3937</a></td></tr
><tr id="gr_svn141_3938"

><td id="3938"><a href="#3938">3938</a></td></tr
><tr id="gr_svn141_3939"

><td id="3939"><a href="#3939">3939</a></td></tr
><tr id="gr_svn141_3940"

><td id="3940"><a href="#3940">3940</a></td></tr
><tr id="gr_svn141_3941"

><td id="3941"><a href="#3941">3941</a></td></tr
><tr id="gr_svn141_3942"

><td id="3942"><a href="#3942">3942</a></td></tr
><tr id="gr_svn141_3943"

><td id="3943"><a href="#3943">3943</a></td></tr
><tr id="gr_svn141_3944"

><td id="3944"><a href="#3944">3944</a></td></tr
><tr id="gr_svn141_3945"

><td id="3945"><a href="#3945">3945</a></td></tr
><tr id="gr_svn141_3946"

><td id="3946"><a href="#3946">3946</a></td></tr
><tr id="gr_svn141_3947"

><td id="3947"><a href="#3947">3947</a></td></tr
><tr id="gr_svn141_3948"

><td id="3948"><a href="#3948">3948</a></td></tr
><tr id="gr_svn141_3949"

><td id="3949"><a href="#3949">3949</a></td></tr
><tr id="gr_svn141_3950"

><td id="3950"><a href="#3950">3950</a></td></tr
><tr id="gr_svn141_3951"

><td id="3951"><a href="#3951">3951</a></td></tr
><tr id="gr_svn141_3952"

><td id="3952"><a href="#3952">3952</a></td></tr
><tr id="gr_svn141_3953"

><td id="3953"><a href="#3953">3953</a></td></tr
><tr id="gr_svn141_3954"

><td id="3954"><a href="#3954">3954</a></td></tr
><tr id="gr_svn141_3955"

><td id="3955"><a href="#3955">3955</a></td></tr
><tr id="gr_svn141_3956"

><td id="3956"><a href="#3956">3956</a></td></tr
><tr id="gr_svn141_3957"

><td id="3957"><a href="#3957">3957</a></td></tr
><tr id="gr_svn141_3958"

><td id="3958"><a href="#3958">3958</a></td></tr
><tr id="gr_svn141_3959"

><td id="3959"><a href="#3959">3959</a></td></tr
><tr id="gr_svn141_3960"

><td id="3960"><a href="#3960">3960</a></td></tr
><tr id="gr_svn141_3961"

><td id="3961"><a href="#3961">3961</a></td></tr
><tr id="gr_svn141_3962"

><td id="3962"><a href="#3962">3962</a></td></tr
><tr id="gr_svn141_3963"

><td id="3963"><a href="#3963">3963</a></td></tr
><tr id="gr_svn141_3964"

><td id="3964"><a href="#3964">3964</a></td></tr
><tr id="gr_svn141_3965"

><td id="3965"><a href="#3965">3965</a></td></tr
><tr id="gr_svn141_3966"

><td id="3966"><a href="#3966">3966</a></td></tr
><tr id="gr_svn141_3967"

><td id="3967"><a href="#3967">3967</a></td></tr
><tr id="gr_svn141_3968"

><td id="3968"><a href="#3968">3968</a></td></tr
><tr id="gr_svn141_3969"

><td id="3969"><a href="#3969">3969</a></td></tr
><tr id="gr_svn141_3970"

><td id="3970"><a href="#3970">3970</a></td></tr
><tr id="gr_svn141_3971"

><td id="3971"><a href="#3971">3971</a></td></tr
><tr id="gr_svn141_3972"

><td id="3972"><a href="#3972">3972</a></td></tr
><tr id="gr_svn141_3973"

><td id="3973"><a href="#3973">3973</a></td></tr
><tr id="gr_svn141_3974"

><td id="3974"><a href="#3974">3974</a></td></tr
><tr id="gr_svn141_3975"

><td id="3975"><a href="#3975">3975</a></td></tr
><tr id="gr_svn141_3976"

><td id="3976"><a href="#3976">3976</a></td></tr
><tr id="gr_svn141_3977"

><td id="3977"><a href="#3977">3977</a></td></tr
><tr id="gr_svn141_3978"

><td id="3978"><a href="#3978">3978</a></td></tr
><tr id="gr_svn141_3979"

><td id="3979"><a href="#3979">3979</a></td></tr
><tr id="gr_svn141_3980"

><td id="3980"><a href="#3980">3980</a></td></tr
><tr id="gr_svn141_3981"

><td id="3981"><a href="#3981">3981</a></td></tr
><tr id="gr_svn141_3982"

><td id="3982"><a href="#3982">3982</a></td></tr
><tr id="gr_svn141_3983"

><td id="3983"><a href="#3983">3983</a></td></tr
><tr id="gr_svn141_3984"

><td id="3984"><a href="#3984">3984</a></td></tr
><tr id="gr_svn141_3985"

><td id="3985"><a href="#3985">3985</a></td></tr
><tr id="gr_svn141_3986"

><td id="3986"><a href="#3986">3986</a></td></tr
><tr id="gr_svn141_3987"

><td id="3987"><a href="#3987">3987</a></td></tr
><tr id="gr_svn141_3988"

><td id="3988"><a href="#3988">3988</a></td></tr
><tr id="gr_svn141_3989"

><td id="3989"><a href="#3989">3989</a></td></tr
><tr id="gr_svn141_3990"

><td id="3990"><a href="#3990">3990</a></td></tr
><tr id="gr_svn141_3991"

><td id="3991"><a href="#3991">3991</a></td></tr
><tr id="gr_svn141_3992"

><td id="3992"><a href="#3992">3992</a></td></tr
><tr id="gr_svn141_3993"

><td id="3993"><a href="#3993">3993</a></td></tr
><tr id="gr_svn141_3994"

><td id="3994"><a href="#3994">3994</a></td></tr
><tr id="gr_svn141_3995"

><td id="3995"><a href="#3995">3995</a></td></tr
><tr id="gr_svn141_3996"

><td id="3996"><a href="#3996">3996</a></td></tr
><tr id="gr_svn141_3997"

><td id="3997"><a href="#3997">3997</a></td></tr
><tr id="gr_svn141_3998"

><td id="3998"><a href="#3998">3998</a></td></tr
><tr id="gr_svn141_3999"

><td id="3999"><a href="#3999">3999</a></td></tr
><tr id="gr_svn141_4000"

><td id="4000"><a href="#4000">4000</a></td></tr
><tr id="gr_svn141_4001"

><td id="4001"><a href="#4001">4001</a></td></tr
><tr id="gr_svn141_4002"

><td id="4002"><a href="#4002">4002</a></td></tr
><tr id="gr_svn141_4003"

><td id="4003"><a href="#4003">4003</a></td></tr
><tr id="gr_svn141_4004"

><td id="4004"><a href="#4004">4004</a></td></tr
><tr id="gr_svn141_4005"

><td id="4005"><a href="#4005">4005</a></td></tr
><tr id="gr_svn141_4006"

><td id="4006"><a href="#4006">4006</a></td></tr
><tr id="gr_svn141_4007"

><td id="4007"><a href="#4007">4007</a></td></tr
><tr id="gr_svn141_4008"

><td id="4008"><a href="#4008">4008</a></td></tr
><tr id="gr_svn141_4009"

><td id="4009"><a href="#4009">4009</a></td></tr
><tr id="gr_svn141_4010"

><td id="4010"><a href="#4010">4010</a></td></tr
><tr id="gr_svn141_4011"

><td id="4011"><a href="#4011">4011</a></td></tr
><tr id="gr_svn141_4012"

><td id="4012"><a href="#4012">4012</a></td></tr
><tr id="gr_svn141_4013"

><td id="4013"><a href="#4013">4013</a></td></tr
><tr id="gr_svn141_4014"

><td id="4014"><a href="#4014">4014</a></td></tr
><tr id="gr_svn141_4015"

><td id="4015"><a href="#4015">4015</a></td></tr
><tr id="gr_svn141_4016"

><td id="4016"><a href="#4016">4016</a></td></tr
><tr id="gr_svn141_4017"

><td id="4017"><a href="#4017">4017</a></td></tr
><tr id="gr_svn141_4018"

><td id="4018"><a href="#4018">4018</a></td></tr
><tr id="gr_svn141_4019"

><td id="4019"><a href="#4019">4019</a></td></tr
><tr id="gr_svn141_4020"

><td id="4020"><a href="#4020">4020</a></td></tr
><tr id="gr_svn141_4021"

><td id="4021"><a href="#4021">4021</a></td></tr
><tr id="gr_svn141_4022"

><td id="4022"><a href="#4022">4022</a></td></tr
><tr id="gr_svn141_4023"

><td id="4023"><a href="#4023">4023</a></td></tr
><tr id="gr_svn141_4024"

><td id="4024"><a href="#4024">4024</a></td></tr
><tr id="gr_svn141_4025"

><td id="4025"><a href="#4025">4025</a></td></tr
><tr id="gr_svn141_4026"

><td id="4026"><a href="#4026">4026</a></td></tr
><tr id="gr_svn141_4027"

><td id="4027"><a href="#4027">4027</a></td></tr
><tr id="gr_svn141_4028"

><td id="4028"><a href="#4028">4028</a></td></tr
><tr id="gr_svn141_4029"

><td id="4029"><a href="#4029">4029</a></td></tr
><tr id="gr_svn141_4030"

><td id="4030"><a href="#4030">4030</a></td></tr
><tr id="gr_svn141_4031"

><td id="4031"><a href="#4031">4031</a></td></tr
><tr id="gr_svn141_4032"

><td id="4032"><a href="#4032">4032</a></td></tr
><tr id="gr_svn141_4033"

><td id="4033"><a href="#4033">4033</a></td></tr
><tr id="gr_svn141_4034"

><td id="4034"><a href="#4034">4034</a></td></tr
><tr id="gr_svn141_4035"

><td id="4035"><a href="#4035">4035</a></td></tr
><tr id="gr_svn141_4036"

><td id="4036"><a href="#4036">4036</a></td></tr
><tr id="gr_svn141_4037"

><td id="4037"><a href="#4037">4037</a></td></tr
><tr id="gr_svn141_4038"

><td id="4038"><a href="#4038">4038</a></td></tr
><tr id="gr_svn141_4039"

><td id="4039"><a href="#4039">4039</a></td></tr
><tr id="gr_svn141_4040"

><td id="4040"><a href="#4040">4040</a></td></tr
><tr id="gr_svn141_4041"

><td id="4041"><a href="#4041">4041</a></td></tr
><tr id="gr_svn141_4042"

><td id="4042"><a href="#4042">4042</a></td></tr
><tr id="gr_svn141_4043"

><td id="4043"><a href="#4043">4043</a></td></tr
><tr id="gr_svn141_4044"

><td id="4044"><a href="#4044">4044</a></td></tr
><tr id="gr_svn141_4045"

><td id="4045"><a href="#4045">4045</a></td></tr
><tr id="gr_svn141_4046"

><td id="4046"><a href="#4046">4046</a></td></tr
><tr id="gr_svn141_4047"

><td id="4047"><a href="#4047">4047</a></td></tr
><tr id="gr_svn141_4048"

><td id="4048"><a href="#4048">4048</a></td></tr
><tr id="gr_svn141_4049"

><td id="4049"><a href="#4049">4049</a></td></tr
><tr id="gr_svn141_4050"

><td id="4050"><a href="#4050">4050</a></td></tr
><tr id="gr_svn141_4051"

><td id="4051"><a href="#4051">4051</a></td></tr
><tr id="gr_svn141_4052"

><td id="4052"><a href="#4052">4052</a></td></tr
><tr id="gr_svn141_4053"

><td id="4053"><a href="#4053">4053</a></td></tr
><tr id="gr_svn141_4054"

><td id="4054"><a href="#4054">4054</a></td></tr
><tr id="gr_svn141_4055"

><td id="4055"><a href="#4055">4055</a></td></tr
><tr id="gr_svn141_4056"

><td id="4056"><a href="#4056">4056</a></td></tr
><tr id="gr_svn141_4057"

><td id="4057"><a href="#4057">4057</a></td></tr
><tr id="gr_svn141_4058"

><td id="4058"><a href="#4058">4058</a></td></tr
><tr id="gr_svn141_4059"

><td id="4059"><a href="#4059">4059</a></td></tr
><tr id="gr_svn141_4060"

><td id="4060"><a href="#4060">4060</a></td></tr
><tr id="gr_svn141_4061"

><td id="4061"><a href="#4061">4061</a></td></tr
><tr id="gr_svn141_4062"

><td id="4062"><a href="#4062">4062</a></td></tr
><tr id="gr_svn141_4063"

><td id="4063"><a href="#4063">4063</a></td></tr
><tr id="gr_svn141_4064"

><td id="4064"><a href="#4064">4064</a></td></tr
><tr id="gr_svn141_4065"

><td id="4065"><a href="#4065">4065</a></td></tr
><tr id="gr_svn141_4066"

><td id="4066"><a href="#4066">4066</a></td></tr
><tr id="gr_svn141_4067"

><td id="4067"><a href="#4067">4067</a></td></tr
><tr id="gr_svn141_4068"

><td id="4068"><a href="#4068">4068</a></td></tr
><tr id="gr_svn141_4069"

><td id="4069"><a href="#4069">4069</a></td></tr
><tr id="gr_svn141_4070"

><td id="4070"><a href="#4070">4070</a></td></tr
><tr id="gr_svn141_4071"

><td id="4071"><a href="#4071">4071</a></td></tr
><tr id="gr_svn141_4072"

><td id="4072"><a href="#4072">4072</a></td></tr
><tr id="gr_svn141_4073"

><td id="4073"><a href="#4073">4073</a></td></tr
><tr id="gr_svn141_4074"

><td id="4074"><a href="#4074">4074</a></td></tr
><tr id="gr_svn141_4075"

><td id="4075"><a href="#4075">4075</a></td></tr
><tr id="gr_svn141_4076"

><td id="4076"><a href="#4076">4076</a></td></tr
><tr id="gr_svn141_4077"

><td id="4077"><a href="#4077">4077</a></td></tr
><tr id="gr_svn141_4078"

><td id="4078"><a href="#4078">4078</a></td></tr
><tr id="gr_svn141_4079"

><td id="4079"><a href="#4079">4079</a></td></tr
><tr id="gr_svn141_4080"

><td id="4080"><a href="#4080">4080</a></td></tr
><tr id="gr_svn141_4081"

><td id="4081"><a href="#4081">4081</a></td></tr
><tr id="gr_svn141_4082"

><td id="4082"><a href="#4082">4082</a></td></tr
><tr id="gr_svn141_4083"

><td id="4083"><a href="#4083">4083</a></td></tr
><tr id="gr_svn141_4084"

><td id="4084"><a href="#4084">4084</a></td></tr
><tr id="gr_svn141_4085"

><td id="4085"><a href="#4085">4085</a></td></tr
><tr id="gr_svn141_4086"

><td id="4086"><a href="#4086">4086</a></td></tr
><tr id="gr_svn141_4087"

><td id="4087"><a href="#4087">4087</a></td></tr
><tr id="gr_svn141_4088"

><td id="4088"><a href="#4088">4088</a></td></tr
><tr id="gr_svn141_4089"

><td id="4089"><a href="#4089">4089</a></td></tr
><tr id="gr_svn141_4090"

><td id="4090"><a href="#4090">4090</a></td></tr
><tr id="gr_svn141_4091"

><td id="4091"><a href="#4091">4091</a></td></tr
><tr id="gr_svn141_4092"

><td id="4092"><a href="#4092">4092</a></td></tr
><tr id="gr_svn141_4093"

><td id="4093"><a href="#4093">4093</a></td></tr
><tr id="gr_svn141_4094"

><td id="4094"><a href="#4094">4094</a></td></tr
><tr id="gr_svn141_4095"

><td id="4095"><a href="#4095">4095</a></td></tr
><tr id="gr_svn141_4096"

><td id="4096"><a href="#4096">4096</a></td></tr
><tr id="gr_svn141_4097"

><td id="4097"><a href="#4097">4097</a></td></tr
><tr id="gr_svn141_4098"

><td id="4098"><a href="#4098">4098</a></td></tr
><tr id="gr_svn141_4099"

><td id="4099"><a href="#4099">4099</a></td></tr
><tr id="gr_svn141_4100"

><td id="4100"><a href="#4100">4100</a></td></tr
><tr id="gr_svn141_4101"

><td id="4101"><a href="#4101">4101</a></td></tr
><tr id="gr_svn141_4102"

><td id="4102"><a href="#4102">4102</a></td></tr
><tr id="gr_svn141_4103"

><td id="4103"><a href="#4103">4103</a></td></tr
><tr id="gr_svn141_4104"

><td id="4104"><a href="#4104">4104</a></td></tr
><tr id="gr_svn141_4105"

><td id="4105"><a href="#4105">4105</a></td></tr
><tr id="gr_svn141_4106"

><td id="4106"><a href="#4106">4106</a></td></tr
><tr id="gr_svn141_4107"

><td id="4107"><a href="#4107">4107</a></td></tr
><tr id="gr_svn141_4108"

><td id="4108"><a href="#4108">4108</a></td></tr
><tr id="gr_svn141_4109"

><td id="4109"><a href="#4109">4109</a></td></tr
><tr id="gr_svn141_4110"

><td id="4110"><a href="#4110">4110</a></td></tr
><tr id="gr_svn141_4111"

><td id="4111"><a href="#4111">4111</a></td></tr
><tr id="gr_svn141_4112"

><td id="4112"><a href="#4112">4112</a></td></tr
><tr id="gr_svn141_4113"

><td id="4113"><a href="#4113">4113</a></td></tr
><tr id="gr_svn141_4114"

><td id="4114"><a href="#4114">4114</a></td></tr
><tr id="gr_svn141_4115"

><td id="4115"><a href="#4115">4115</a></td></tr
><tr id="gr_svn141_4116"

><td id="4116"><a href="#4116">4116</a></td></tr
><tr id="gr_svn141_4117"

><td id="4117"><a href="#4117">4117</a></td></tr
><tr id="gr_svn141_4118"

><td id="4118"><a href="#4118">4118</a></td></tr
><tr id="gr_svn141_4119"

><td id="4119"><a href="#4119">4119</a></td></tr
><tr id="gr_svn141_4120"

><td id="4120"><a href="#4120">4120</a></td></tr
><tr id="gr_svn141_4121"

><td id="4121"><a href="#4121">4121</a></td></tr
><tr id="gr_svn141_4122"

><td id="4122"><a href="#4122">4122</a></td></tr
><tr id="gr_svn141_4123"

><td id="4123"><a href="#4123">4123</a></td></tr
><tr id="gr_svn141_4124"

><td id="4124"><a href="#4124">4124</a></td></tr
><tr id="gr_svn141_4125"

><td id="4125"><a href="#4125">4125</a></td></tr
><tr id="gr_svn141_4126"

><td id="4126"><a href="#4126">4126</a></td></tr
><tr id="gr_svn141_4127"

><td id="4127"><a href="#4127">4127</a></td></tr
><tr id="gr_svn141_4128"

><td id="4128"><a href="#4128">4128</a></td></tr
><tr id="gr_svn141_4129"

><td id="4129"><a href="#4129">4129</a></td></tr
><tr id="gr_svn141_4130"

><td id="4130"><a href="#4130">4130</a></td></tr
><tr id="gr_svn141_4131"

><td id="4131"><a href="#4131">4131</a></td></tr
><tr id="gr_svn141_4132"

><td id="4132"><a href="#4132">4132</a></td></tr
><tr id="gr_svn141_4133"

><td id="4133"><a href="#4133">4133</a></td></tr
><tr id="gr_svn141_4134"

><td id="4134"><a href="#4134">4134</a></td></tr
><tr id="gr_svn141_4135"

><td id="4135"><a href="#4135">4135</a></td></tr
><tr id="gr_svn141_4136"

><td id="4136"><a href="#4136">4136</a></td></tr
><tr id="gr_svn141_4137"

><td id="4137"><a href="#4137">4137</a></td></tr
><tr id="gr_svn141_4138"

><td id="4138"><a href="#4138">4138</a></td></tr
><tr id="gr_svn141_4139"

><td id="4139"><a href="#4139">4139</a></td></tr
><tr id="gr_svn141_4140"

><td id="4140"><a href="#4140">4140</a></td></tr
><tr id="gr_svn141_4141"

><td id="4141"><a href="#4141">4141</a></td></tr
><tr id="gr_svn141_4142"

><td id="4142"><a href="#4142">4142</a></td></tr
><tr id="gr_svn141_4143"

><td id="4143"><a href="#4143">4143</a></td></tr
><tr id="gr_svn141_4144"

><td id="4144"><a href="#4144">4144</a></td></tr
><tr id="gr_svn141_4145"

><td id="4145"><a href="#4145">4145</a></td></tr
><tr id="gr_svn141_4146"

><td id="4146"><a href="#4146">4146</a></td></tr
><tr id="gr_svn141_4147"

><td id="4147"><a href="#4147">4147</a></td></tr
><tr id="gr_svn141_4148"

><td id="4148"><a href="#4148">4148</a></td></tr
><tr id="gr_svn141_4149"

><td id="4149"><a href="#4149">4149</a></td></tr
><tr id="gr_svn141_4150"

><td id="4150"><a href="#4150">4150</a></td></tr
><tr id="gr_svn141_4151"

><td id="4151"><a href="#4151">4151</a></td></tr
><tr id="gr_svn141_4152"

><td id="4152"><a href="#4152">4152</a></td></tr
><tr id="gr_svn141_4153"

><td id="4153"><a href="#4153">4153</a></td></tr
><tr id="gr_svn141_4154"

><td id="4154"><a href="#4154">4154</a></td></tr
><tr id="gr_svn141_4155"

><td id="4155"><a href="#4155">4155</a></td></tr
><tr id="gr_svn141_4156"

><td id="4156"><a href="#4156">4156</a></td></tr
><tr id="gr_svn141_4157"

><td id="4157"><a href="#4157">4157</a></td></tr
><tr id="gr_svn141_4158"

><td id="4158"><a href="#4158">4158</a></td></tr
><tr id="gr_svn141_4159"

><td id="4159"><a href="#4159">4159</a></td></tr
><tr id="gr_svn141_4160"

><td id="4160"><a href="#4160">4160</a></td></tr
><tr id="gr_svn141_4161"

><td id="4161"><a href="#4161">4161</a></td></tr
><tr id="gr_svn141_4162"

><td id="4162"><a href="#4162">4162</a></td></tr
><tr id="gr_svn141_4163"

><td id="4163"><a href="#4163">4163</a></td></tr
><tr id="gr_svn141_4164"

><td id="4164"><a href="#4164">4164</a></td></tr
><tr id="gr_svn141_4165"

><td id="4165"><a href="#4165">4165</a></td></tr
><tr id="gr_svn141_4166"

><td id="4166"><a href="#4166">4166</a></td></tr
><tr id="gr_svn141_4167"

><td id="4167"><a href="#4167">4167</a></td></tr
><tr id="gr_svn141_4168"

><td id="4168"><a href="#4168">4168</a></td></tr
><tr id="gr_svn141_4169"

><td id="4169"><a href="#4169">4169</a></td></tr
><tr id="gr_svn141_4170"

><td id="4170"><a href="#4170">4170</a></td></tr
><tr id="gr_svn141_4171"

><td id="4171"><a href="#4171">4171</a></td></tr
><tr id="gr_svn141_4172"

><td id="4172"><a href="#4172">4172</a></td></tr
><tr id="gr_svn141_4173"

><td id="4173"><a href="#4173">4173</a></td></tr
><tr id="gr_svn141_4174"

><td id="4174"><a href="#4174">4174</a></td></tr
><tr id="gr_svn141_4175"

><td id="4175"><a href="#4175">4175</a></td></tr
><tr id="gr_svn141_4176"

><td id="4176"><a href="#4176">4176</a></td></tr
><tr id="gr_svn141_4177"

><td id="4177"><a href="#4177">4177</a></td></tr
><tr id="gr_svn141_4178"

><td id="4178"><a href="#4178">4178</a></td></tr
><tr id="gr_svn141_4179"

><td id="4179"><a href="#4179">4179</a></td></tr
><tr id="gr_svn141_4180"

><td id="4180"><a href="#4180">4180</a></td></tr
><tr id="gr_svn141_4181"

><td id="4181"><a href="#4181">4181</a></td></tr
><tr id="gr_svn141_4182"

><td id="4182"><a href="#4182">4182</a></td></tr
><tr id="gr_svn141_4183"

><td id="4183"><a href="#4183">4183</a></td></tr
><tr id="gr_svn141_4184"

><td id="4184"><a href="#4184">4184</a></td></tr
><tr id="gr_svn141_4185"

><td id="4185"><a href="#4185">4185</a></td></tr
><tr id="gr_svn141_4186"

><td id="4186"><a href="#4186">4186</a></td></tr
><tr id="gr_svn141_4187"

><td id="4187"><a href="#4187">4187</a></td></tr
><tr id="gr_svn141_4188"

><td id="4188"><a href="#4188">4188</a></td></tr
><tr id="gr_svn141_4189"

><td id="4189"><a href="#4189">4189</a></td></tr
><tr id="gr_svn141_4190"

><td id="4190"><a href="#4190">4190</a></td></tr
><tr id="gr_svn141_4191"

><td id="4191"><a href="#4191">4191</a></td></tr
><tr id="gr_svn141_4192"

><td id="4192"><a href="#4192">4192</a></td></tr
><tr id="gr_svn141_4193"

><td id="4193"><a href="#4193">4193</a></td></tr
><tr id="gr_svn141_4194"

><td id="4194"><a href="#4194">4194</a></td></tr
><tr id="gr_svn141_4195"

><td id="4195"><a href="#4195">4195</a></td></tr
><tr id="gr_svn141_4196"

><td id="4196"><a href="#4196">4196</a></td></tr
><tr id="gr_svn141_4197"

><td id="4197"><a href="#4197">4197</a></td></tr
><tr id="gr_svn141_4198"

><td id="4198"><a href="#4198">4198</a></td></tr
><tr id="gr_svn141_4199"

><td id="4199"><a href="#4199">4199</a></td></tr
><tr id="gr_svn141_4200"

><td id="4200"><a href="#4200">4200</a></td></tr
><tr id="gr_svn141_4201"

><td id="4201"><a href="#4201">4201</a></td></tr
><tr id="gr_svn141_4202"

><td id="4202"><a href="#4202">4202</a></td></tr
><tr id="gr_svn141_4203"

><td id="4203"><a href="#4203">4203</a></td></tr
><tr id="gr_svn141_4204"

><td id="4204"><a href="#4204">4204</a></td></tr
><tr id="gr_svn141_4205"

><td id="4205"><a href="#4205">4205</a></td></tr
><tr id="gr_svn141_4206"

><td id="4206"><a href="#4206">4206</a></td></tr
><tr id="gr_svn141_4207"

><td id="4207"><a href="#4207">4207</a></td></tr
><tr id="gr_svn141_4208"

><td id="4208"><a href="#4208">4208</a></td></tr
><tr id="gr_svn141_4209"

><td id="4209"><a href="#4209">4209</a></td></tr
><tr id="gr_svn141_4210"

><td id="4210"><a href="#4210">4210</a></td></tr
><tr id="gr_svn141_4211"

><td id="4211"><a href="#4211">4211</a></td></tr
><tr id="gr_svn141_4212"

><td id="4212"><a href="#4212">4212</a></td></tr
><tr id="gr_svn141_4213"

><td id="4213"><a href="#4213">4213</a></td></tr
><tr id="gr_svn141_4214"

><td id="4214"><a href="#4214">4214</a></td></tr
><tr id="gr_svn141_4215"

><td id="4215"><a href="#4215">4215</a></td></tr
><tr id="gr_svn141_4216"

><td id="4216"><a href="#4216">4216</a></td></tr
><tr id="gr_svn141_4217"

><td id="4217"><a href="#4217">4217</a></td></tr
><tr id="gr_svn141_4218"

><td id="4218"><a href="#4218">4218</a></td></tr
><tr id="gr_svn141_4219"

><td id="4219"><a href="#4219">4219</a></td></tr
><tr id="gr_svn141_4220"

><td id="4220"><a href="#4220">4220</a></td></tr
><tr id="gr_svn141_4221"

><td id="4221"><a href="#4221">4221</a></td></tr
><tr id="gr_svn141_4222"

><td id="4222"><a href="#4222">4222</a></td></tr
><tr id="gr_svn141_4223"

><td id="4223"><a href="#4223">4223</a></td></tr
><tr id="gr_svn141_4224"

><td id="4224"><a href="#4224">4224</a></td></tr
><tr id="gr_svn141_4225"

><td id="4225"><a href="#4225">4225</a></td></tr
><tr id="gr_svn141_4226"

><td id="4226"><a href="#4226">4226</a></td></tr
><tr id="gr_svn141_4227"

><td id="4227"><a href="#4227">4227</a></td></tr
><tr id="gr_svn141_4228"

><td id="4228"><a href="#4228">4228</a></td></tr
><tr id="gr_svn141_4229"

><td id="4229"><a href="#4229">4229</a></td></tr
><tr id="gr_svn141_4230"

><td id="4230"><a href="#4230">4230</a></td></tr
><tr id="gr_svn141_4231"

><td id="4231"><a href="#4231">4231</a></td></tr
><tr id="gr_svn141_4232"

><td id="4232"><a href="#4232">4232</a></td></tr
><tr id="gr_svn141_4233"

><td id="4233"><a href="#4233">4233</a></td></tr
><tr id="gr_svn141_4234"

><td id="4234"><a href="#4234">4234</a></td></tr
><tr id="gr_svn141_4235"

><td id="4235"><a href="#4235">4235</a></td></tr
><tr id="gr_svn141_4236"

><td id="4236"><a href="#4236">4236</a></td></tr
><tr id="gr_svn141_4237"

><td id="4237"><a href="#4237">4237</a></td></tr
><tr id="gr_svn141_4238"

><td id="4238"><a href="#4238">4238</a></td></tr
><tr id="gr_svn141_4239"

><td id="4239"><a href="#4239">4239</a></td></tr
><tr id="gr_svn141_4240"

><td id="4240"><a href="#4240">4240</a></td></tr
><tr id="gr_svn141_4241"

><td id="4241"><a href="#4241">4241</a></td></tr
><tr id="gr_svn141_4242"

><td id="4242"><a href="#4242">4242</a></td></tr
><tr id="gr_svn141_4243"

><td id="4243"><a href="#4243">4243</a></td></tr
><tr id="gr_svn141_4244"

><td id="4244"><a href="#4244">4244</a></td></tr
><tr id="gr_svn141_4245"

><td id="4245"><a href="#4245">4245</a></td></tr
><tr id="gr_svn141_4246"

><td id="4246"><a href="#4246">4246</a></td></tr
><tr id="gr_svn141_4247"

><td id="4247"><a href="#4247">4247</a></td></tr
><tr id="gr_svn141_4248"

><td id="4248"><a href="#4248">4248</a></td></tr
><tr id="gr_svn141_4249"

><td id="4249"><a href="#4249">4249</a></td></tr
><tr id="gr_svn141_4250"

><td id="4250"><a href="#4250">4250</a></td></tr
><tr id="gr_svn141_4251"

><td id="4251"><a href="#4251">4251</a></td></tr
><tr id="gr_svn141_4252"

><td id="4252"><a href="#4252">4252</a></td></tr
><tr id="gr_svn141_4253"

><td id="4253"><a href="#4253">4253</a></td></tr
><tr id="gr_svn141_4254"

><td id="4254"><a href="#4254">4254</a></td></tr
><tr id="gr_svn141_4255"

><td id="4255"><a href="#4255">4255</a></td></tr
><tr id="gr_svn141_4256"

><td id="4256"><a href="#4256">4256</a></td></tr
><tr id="gr_svn141_4257"

><td id="4257"><a href="#4257">4257</a></td></tr
><tr id="gr_svn141_4258"

><td id="4258"><a href="#4258">4258</a></td></tr
><tr id="gr_svn141_4259"

><td id="4259"><a href="#4259">4259</a></td></tr
><tr id="gr_svn141_4260"

><td id="4260"><a href="#4260">4260</a></td></tr
><tr id="gr_svn141_4261"

><td id="4261"><a href="#4261">4261</a></td></tr
><tr id="gr_svn141_4262"

><td id="4262"><a href="#4262">4262</a></td></tr
><tr id="gr_svn141_4263"

><td id="4263"><a href="#4263">4263</a></td></tr
><tr id="gr_svn141_4264"

><td id="4264"><a href="#4264">4264</a></td></tr
><tr id="gr_svn141_4265"

><td id="4265"><a href="#4265">4265</a></td></tr
><tr id="gr_svn141_4266"

><td id="4266"><a href="#4266">4266</a></td></tr
><tr id="gr_svn141_4267"

><td id="4267"><a href="#4267">4267</a></td></tr
><tr id="gr_svn141_4268"

><td id="4268"><a href="#4268">4268</a></td></tr
><tr id="gr_svn141_4269"

><td id="4269"><a href="#4269">4269</a></td></tr
><tr id="gr_svn141_4270"

><td id="4270"><a href="#4270">4270</a></td></tr
><tr id="gr_svn141_4271"

><td id="4271"><a href="#4271">4271</a></td></tr
><tr id="gr_svn141_4272"

><td id="4272"><a href="#4272">4272</a></td></tr
><tr id="gr_svn141_4273"

><td id="4273"><a href="#4273">4273</a></td></tr
><tr id="gr_svn141_4274"

><td id="4274"><a href="#4274">4274</a></td></tr
><tr id="gr_svn141_4275"

><td id="4275"><a href="#4275">4275</a></td></tr
><tr id="gr_svn141_4276"

><td id="4276"><a href="#4276">4276</a></td></tr
><tr id="gr_svn141_4277"

><td id="4277"><a href="#4277">4277</a></td></tr
><tr id="gr_svn141_4278"

><td id="4278"><a href="#4278">4278</a></td></tr
><tr id="gr_svn141_4279"

><td id="4279"><a href="#4279">4279</a></td></tr
><tr id="gr_svn141_4280"

><td id="4280"><a href="#4280">4280</a></td></tr
><tr id="gr_svn141_4281"

><td id="4281"><a href="#4281">4281</a></td></tr
><tr id="gr_svn141_4282"

><td id="4282"><a href="#4282">4282</a></td></tr
><tr id="gr_svn141_4283"

><td id="4283"><a href="#4283">4283</a></td></tr
><tr id="gr_svn141_4284"

><td id="4284"><a href="#4284">4284</a></td></tr
><tr id="gr_svn141_4285"

><td id="4285"><a href="#4285">4285</a></td></tr
><tr id="gr_svn141_4286"

><td id="4286"><a href="#4286">4286</a></td></tr
><tr id="gr_svn141_4287"

><td id="4287"><a href="#4287">4287</a></td></tr
><tr id="gr_svn141_4288"

><td id="4288"><a href="#4288">4288</a></td></tr
><tr id="gr_svn141_4289"

><td id="4289"><a href="#4289">4289</a></td></tr
><tr id="gr_svn141_4290"

><td id="4290"><a href="#4290">4290</a></td></tr
><tr id="gr_svn141_4291"

><td id="4291"><a href="#4291">4291</a></td></tr
><tr id="gr_svn141_4292"

><td id="4292"><a href="#4292">4292</a></td></tr
><tr id="gr_svn141_4293"

><td id="4293"><a href="#4293">4293</a></td></tr
><tr id="gr_svn141_4294"

><td id="4294"><a href="#4294">4294</a></td></tr
><tr id="gr_svn141_4295"

><td id="4295"><a href="#4295">4295</a></td></tr
><tr id="gr_svn141_4296"

><td id="4296"><a href="#4296">4296</a></td></tr
><tr id="gr_svn141_4297"

><td id="4297"><a href="#4297">4297</a></td></tr
><tr id="gr_svn141_4298"

><td id="4298"><a href="#4298">4298</a></td></tr
><tr id="gr_svn141_4299"

><td id="4299"><a href="#4299">4299</a></td></tr
><tr id="gr_svn141_4300"

><td id="4300"><a href="#4300">4300</a></td></tr
><tr id="gr_svn141_4301"

><td id="4301"><a href="#4301">4301</a></td></tr
><tr id="gr_svn141_4302"

><td id="4302"><a href="#4302">4302</a></td></tr
><tr id="gr_svn141_4303"

><td id="4303"><a href="#4303">4303</a></td></tr
><tr id="gr_svn141_4304"

><td id="4304"><a href="#4304">4304</a></td></tr
><tr id="gr_svn141_4305"

><td id="4305"><a href="#4305">4305</a></td></tr
><tr id="gr_svn141_4306"

><td id="4306"><a href="#4306">4306</a></td></tr
><tr id="gr_svn141_4307"

><td id="4307"><a href="#4307">4307</a></td></tr
><tr id="gr_svn141_4308"

><td id="4308"><a href="#4308">4308</a></td></tr
><tr id="gr_svn141_4309"

><td id="4309"><a href="#4309">4309</a></td></tr
><tr id="gr_svn141_4310"

><td id="4310"><a href="#4310">4310</a></td></tr
><tr id="gr_svn141_4311"

><td id="4311"><a href="#4311">4311</a></td></tr
><tr id="gr_svn141_4312"

><td id="4312"><a href="#4312">4312</a></td></tr
><tr id="gr_svn141_4313"

><td id="4313"><a href="#4313">4313</a></td></tr
><tr id="gr_svn141_4314"

><td id="4314"><a href="#4314">4314</a></td></tr
><tr id="gr_svn141_4315"

><td id="4315"><a href="#4315">4315</a></td></tr
><tr id="gr_svn141_4316"

><td id="4316"><a href="#4316">4316</a></td></tr
><tr id="gr_svn141_4317"

><td id="4317"><a href="#4317">4317</a></td></tr
><tr id="gr_svn141_4318"

><td id="4318"><a href="#4318">4318</a></td></tr
><tr id="gr_svn141_4319"

><td id="4319"><a href="#4319">4319</a></td></tr
><tr id="gr_svn141_4320"

><td id="4320"><a href="#4320">4320</a></td></tr
><tr id="gr_svn141_4321"

><td id="4321"><a href="#4321">4321</a></td></tr
><tr id="gr_svn141_4322"

><td id="4322"><a href="#4322">4322</a></td></tr
><tr id="gr_svn141_4323"

><td id="4323"><a href="#4323">4323</a></td></tr
><tr id="gr_svn141_4324"

><td id="4324"><a href="#4324">4324</a></td></tr
><tr id="gr_svn141_4325"

><td id="4325"><a href="#4325">4325</a></td></tr
><tr id="gr_svn141_4326"

><td id="4326"><a href="#4326">4326</a></td></tr
><tr id="gr_svn141_4327"

><td id="4327"><a href="#4327">4327</a></td></tr
><tr id="gr_svn141_4328"

><td id="4328"><a href="#4328">4328</a></td></tr
><tr id="gr_svn141_4329"

><td id="4329"><a href="#4329">4329</a></td></tr
><tr id="gr_svn141_4330"

><td id="4330"><a href="#4330">4330</a></td></tr
><tr id="gr_svn141_4331"

><td id="4331"><a href="#4331">4331</a></td></tr
><tr id="gr_svn141_4332"

><td id="4332"><a href="#4332">4332</a></td></tr
><tr id="gr_svn141_4333"

><td id="4333"><a href="#4333">4333</a></td></tr
><tr id="gr_svn141_4334"

><td id="4334"><a href="#4334">4334</a></td></tr
><tr id="gr_svn141_4335"

><td id="4335"><a href="#4335">4335</a></td></tr
><tr id="gr_svn141_4336"

><td id="4336"><a href="#4336">4336</a></td></tr
><tr id="gr_svn141_4337"

><td id="4337"><a href="#4337">4337</a></td></tr
><tr id="gr_svn141_4338"

><td id="4338"><a href="#4338">4338</a></td></tr
><tr id="gr_svn141_4339"

><td id="4339"><a href="#4339">4339</a></td></tr
><tr id="gr_svn141_4340"

><td id="4340"><a href="#4340">4340</a></td></tr
><tr id="gr_svn141_4341"

><td id="4341"><a href="#4341">4341</a></td></tr
><tr id="gr_svn141_4342"

><td id="4342"><a href="#4342">4342</a></td></tr
><tr id="gr_svn141_4343"

><td id="4343"><a href="#4343">4343</a></td></tr
><tr id="gr_svn141_4344"

><td id="4344"><a href="#4344">4344</a></td></tr
><tr id="gr_svn141_4345"

><td id="4345"><a href="#4345">4345</a></td></tr
><tr id="gr_svn141_4346"

><td id="4346"><a href="#4346">4346</a></td></tr
><tr id="gr_svn141_4347"

><td id="4347"><a href="#4347">4347</a></td></tr
><tr id="gr_svn141_4348"

><td id="4348"><a href="#4348">4348</a></td></tr
><tr id="gr_svn141_4349"

><td id="4349"><a href="#4349">4349</a></td></tr
><tr id="gr_svn141_4350"

><td id="4350"><a href="#4350">4350</a></td></tr
><tr id="gr_svn141_4351"

><td id="4351"><a href="#4351">4351</a></td></tr
><tr id="gr_svn141_4352"

><td id="4352"><a href="#4352">4352</a></td></tr
><tr id="gr_svn141_4353"

><td id="4353"><a href="#4353">4353</a></td></tr
><tr id="gr_svn141_4354"

><td id="4354"><a href="#4354">4354</a></td></tr
><tr id="gr_svn141_4355"

><td id="4355"><a href="#4355">4355</a></td></tr
><tr id="gr_svn141_4356"

><td id="4356"><a href="#4356">4356</a></td></tr
><tr id="gr_svn141_4357"

><td id="4357"><a href="#4357">4357</a></td></tr
><tr id="gr_svn141_4358"

><td id="4358"><a href="#4358">4358</a></td></tr
><tr id="gr_svn141_4359"

><td id="4359"><a href="#4359">4359</a></td></tr
><tr id="gr_svn141_4360"

><td id="4360"><a href="#4360">4360</a></td></tr
><tr id="gr_svn141_4361"

><td id="4361"><a href="#4361">4361</a></td></tr
><tr id="gr_svn141_4362"

><td id="4362"><a href="#4362">4362</a></td></tr
><tr id="gr_svn141_4363"

><td id="4363"><a href="#4363">4363</a></td></tr
><tr id="gr_svn141_4364"

><td id="4364"><a href="#4364">4364</a></td></tr
><tr id="gr_svn141_4365"

><td id="4365"><a href="#4365">4365</a></td></tr
><tr id="gr_svn141_4366"

><td id="4366"><a href="#4366">4366</a></td></tr
><tr id="gr_svn141_4367"

><td id="4367"><a href="#4367">4367</a></td></tr
><tr id="gr_svn141_4368"

><td id="4368"><a href="#4368">4368</a></td></tr
><tr id="gr_svn141_4369"

><td id="4369"><a href="#4369">4369</a></td></tr
><tr id="gr_svn141_4370"

><td id="4370"><a href="#4370">4370</a></td></tr
><tr id="gr_svn141_4371"

><td id="4371"><a href="#4371">4371</a></td></tr
><tr id="gr_svn141_4372"

><td id="4372"><a href="#4372">4372</a></td></tr
><tr id="gr_svn141_4373"

><td id="4373"><a href="#4373">4373</a></td></tr
><tr id="gr_svn141_4374"

><td id="4374"><a href="#4374">4374</a></td></tr
><tr id="gr_svn141_4375"

><td id="4375"><a href="#4375">4375</a></td></tr
><tr id="gr_svn141_4376"

><td id="4376"><a href="#4376">4376</a></td></tr
><tr id="gr_svn141_4377"

><td id="4377"><a href="#4377">4377</a></td></tr
><tr id="gr_svn141_4378"

><td id="4378"><a href="#4378">4378</a></td></tr
><tr id="gr_svn141_4379"

><td id="4379"><a href="#4379">4379</a></td></tr
><tr id="gr_svn141_4380"

><td id="4380"><a href="#4380">4380</a></td></tr
><tr id="gr_svn141_4381"

><td id="4381"><a href="#4381">4381</a></td></tr
><tr id="gr_svn141_4382"

><td id="4382"><a href="#4382">4382</a></td></tr
><tr id="gr_svn141_4383"

><td id="4383"><a href="#4383">4383</a></td></tr
><tr id="gr_svn141_4384"

><td id="4384"><a href="#4384">4384</a></td></tr
><tr id="gr_svn141_4385"

><td id="4385"><a href="#4385">4385</a></td></tr
><tr id="gr_svn141_4386"

><td id="4386"><a href="#4386">4386</a></td></tr
><tr id="gr_svn141_4387"

><td id="4387"><a href="#4387">4387</a></td></tr
><tr id="gr_svn141_4388"

><td id="4388"><a href="#4388">4388</a></td></tr
><tr id="gr_svn141_4389"

><td id="4389"><a href="#4389">4389</a></td></tr
><tr id="gr_svn141_4390"

><td id="4390"><a href="#4390">4390</a></td></tr
><tr id="gr_svn141_4391"

><td id="4391"><a href="#4391">4391</a></td></tr
><tr id="gr_svn141_4392"

><td id="4392"><a href="#4392">4392</a></td></tr
><tr id="gr_svn141_4393"

><td id="4393"><a href="#4393">4393</a></td></tr
><tr id="gr_svn141_4394"

><td id="4394"><a href="#4394">4394</a></td></tr
><tr id="gr_svn141_4395"

><td id="4395"><a href="#4395">4395</a></td></tr
><tr id="gr_svn141_4396"

><td id="4396"><a href="#4396">4396</a></td></tr
><tr id="gr_svn141_4397"

><td id="4397"><a href="#4397">4397</a></td></tr
><tr id="gr_svn141_4398"

><td id="4398"><a href="#4398">4398</a></td></tr
><tr id="gr_svn141_4399"

><td id="4399"><a href="#4399">4399</a></td></tr
><tr id="gr_svn141_4400"

><td id="4400"><a href="#4400">4400</a></td></tr
><tr id="gr_svn141_4401"

><td id="4401"><a href="#4401">4401</a></td></tr
><tr id="gr_svn141_4402"

><td id="4402"><a href="#4402">4402</a></td></tr
><tr id="gr_svn141_4403"

><td id="4403"><a href="#4403">4403</a></td></tr
><tr id="gr_svn141_4404"

><td id="4404"><a href="#4404">4404</a></td></tr
><tr id="gr_svn141_4405"

><td id="4405"><a href="#4405">4405</a></td></tr
><tr id="gr_svn141_4406"

><td id="4406"><a href="#4406">4406</a></td></tr
><tr id="gr_svn141_4407"

><td id="4407"><a href="#4407">4407</a></td></tr
><tr id="gr_svn141_4408"

><td id="4408"><a href="#4408">4408</a></td></tr
><tr id="gr_svn141_4409"

><td id="4409"><a href="#4409">4409</a></td></tr
><tr id="gr_svn141_4410"

><td id="4410"><a href="#4410">4410</a></td></tr
><tr id="gr_svn141_4411"

><td id="4411"><a href="#4411">4411</a></td></tr
><tr id="gr_svn141_4412"

><td id="4412"><a href="#4412">4412</a></td></tr
><tr id="gr_svn141_4413"

><td id="4413"><a href="#4413">4413</a></td></tr
><tr id="gr_svn141_4414"

><td id="4414"><a href="#4414">4414</a></td></tr
><tr id="gr_svn141_4415"

><td id="4415"><a href="#4415">4415</a></td></tr
><tr id="gr_svn141_4416"

><td id="4416"><a href="#4416">4416</a></td></tr
><tr id="gr_svn141_4417"

><td id="4417"><a href="#4417">4417</a></td></tr
><tr id="gr_svn141_4418"

><td id="4418"><a href="#4418">4418</a></td></tr
><tr id="gr_svn141_4419"

><td id="4419"><a href="#4419">4419</a></td></tr
><tr id="gr_svn141_4420"

><td id="4420"><a href="#4420">4420</a></td></tr
><tr id="gr_svn141_4421"

><td id="4421"><a href="#4421">4421</a></td></tr
><tr id="gr_svn141_4422"

><td id="4422"><a href="#4422">4422</a></td></tr
><tr id="gr_svn141_4423"

><td id="4423"><a href="#4423">4423</a></td></tr
><tr id="gr_svn141_4424"

><td id="4424"><a href="#4424">4424</a></td></tr
><tr id="gr_svn141_4425"

><td id="4425"><a href="#4425">4425</a></td></tr
><tr id="gr_svn141_4426"

><td id="4426"><a href="#4426">4426</a></td></tr
><tr id="gr_svn141_4427"

><td id="4427"><a href="#4427">4427</a></td></tr
><tr id="gr_svn141_4428"

><td id="4428"><a href="#4428">4428</a></td></tr
><tr id="gr_svn141_4429"

><td id="4429"><a href="#4429">4429</a></td></tr
><tr id="gr_svn141_4430"

><td id="4430"><a href="#4430">4430</a></td></tr
><tr id="gr_svn141_4431"

><td id="4431"><a href="#4431">4431</a></td></tr
><tr id="gr_svn141_4432"

><td id="4432"><a href="#4432">4432</a></td></tr
><tr id="gr_svn141_4433"

><td id="4433"><a href="#4433">4433</a></td></tr
><tr id="gr_svn141_4434"

><td id="4434"><a href="#4434">4434</a></td></tr
><tr id="gr_svn141_4435"

><td id="4435"><a href="#4435">4435</a></td></tr
><tr id="gr_svn141_4436"

><td id="4436"><a href="#4436">4436</a></td></tr
><tr id="gr_svn141_4437"

><td id="4437"><a href="#4437">4437</a></td></tr
><tr id="gr_svn141_4438"

><td id="4438"><a href="#4438">4438</a></td></tr
><tr id="gr_svn141_4439"

><td id="4439"><a href="#4439">4439</a></td></tr
><tr id="gr_svn141_4440"

><td id="4440"><a href="#4440">4440</a></td></tr
><tr id="gr_svn141_4441"

><td id="4441"><a href="#4441">4441</a></td></tr
><tr id="gr_svn141_4442"

><td id="4442"><a href="#4442">4442</a></td></tr
><tr id="gr_svn141_4443"

><td id="4443"><a href="#4443">4443</a></td></tr
><tr id="gr_svn141_4444"

><td id="4444"><a href="#4444">4444</a></td></tr
><tr id="gr_svn141_4445"

><td id="4445"><a href="#4445">4445</a></td></tr
><tr id="gr_svn141_4446"

><td id="4446"><a href="#4446">4446</a></td></tr
><tr id="gr_svn141_4447"

><td id="4447"><a href="#4447">4447</a></td></tr
><tr id="gr_svn141_4448"

><td id="4448"><a href="#4448">4448</a></td></tr
><tr id="gr_svn141_4449"

><td id="4449"><a href="#4449">4449</a></td></tr
><tr id="gr_svn141_4450"

><td id="4450"><a href="#4450">4450</a></td></tr
><tr id="gr_svn141_4451"

><td id="4451"><a href="#4451">4451</a></td></tr
><tr id="gr_svn141_4452"

><td id="4452"><a href="#4452">4452</a></td></tr
><tr id="gr_svn141_4453"

><td id="4453"><a href="#4453">4453</a></td></tr
><tr id="gr_svn141_4454"

><td id="4454"><a href="#4454">4454</a></td></tr
><tr id="gr_svn141_4455"

><td id="4455"><a href="#4455">4455</a></td></tr
><tr id="gr_svn141_4456"

><td id="4456"><a href="#4456">4456</a></td></tr
><tr id="gr_svn141_4457"

><td id="4457"><a href="#4457">4457</a></td></tr
><tr id="gr_svn141_4458"

><td id="4458"><a href="#4458">4458</a></td></tr
><tr id="gr_svn141_4459"

><td id="4459"><a href="#4459">4459</a></td></tr
><tr id="gr_svn141_4460"

><td id="4460"><a href="#4460">4460</a></td></tr
><tr id="gr_svn141_4461"

><td id="4461"><a href="#4461">4461</a></td></tr
><tr id="gr_svn141_4462"

><td id="4462"><a href="#4462">4462</a></td></tr
><tr id="gr_svn141_4463"

><td id="4463"><a href="#4463">4463</a></td></tr
><tr id="gr_svn141_4464"

><td id="4464"><a href="#4464">4464</a></td></tr
><tr id="gr_svn141_4465"

><td id="4465"><a href="#4465">4465</a></td></tr
><tr id="gr_svn141_4466"

><td id="4466"><a href="#4466">4466</a></td></tr
><tr id="gr_svn141_4467"

><td id="4467"><a href="#4467">4467</a></td></tr
><tr id="gr_svn141_4468"

><td id="4468"><a href="#4468">4468</a></td></tr
><tr id="gr_svn141_4469"

><td id="4469"><a href="#4469">4469</a></td></tr
><tr id="gr_svn141_4470"

><td id="4470"><a href="#4470">4470</a></td></tr
><tr id="gr_svn141_4471"

><td id="4471"><a href="#4471">4471</a></td></tr
><tr id="gr_svn141_4472"

><td id="4472"><a href="#4472">4472</a></td></tr
><tr id="gr_svn141_4473"

><td id="4473"><a href="#4473">4473</a></td></tr
><tr id="gr_svn141_4474"

><td id="4474"><a href="#4474">4474</a></td></tr
><tr id="gr_svn141_4475"

><td id="4475"><a href="#4475">4475</a></td></tr
><tr id="gr_svn141_4476"

><td id="4476"><a href="#4476">4476</a></td></tr
><tr id="gr_svn141_4477"

><td id="4477"><a href="#4477">4477</a></td></tr
><tr id="gr_svn141_4478"

><td id="4478"><a href="#4478">4478</a></td></tr
><tr id="gr_svn141_4479"

><td id="4479"><a href="#4479">4479</a></td></tr
><tr id="gr_svn141_4480"

><td id="4480"><a href="#4480">4480</a></td></tr
><tr id="gr_svn141_4481"

><td id="4481"><a href="#4481">4481</a></td></tr
><tr id="gr_svn141_4482"

><td id="4482"><a href="#4482">4482</a></td></tr
><tr id="gr_svn141_4483"

><td id="4483"><a href="#4483">4483</a></td></tr
><tr id="gr_svn141_4484"

><td id="4484"><a href="#4484">4484</a></td></tr
><tr id="gr_svn141_4485"

><td id="4485"><a href="#4485">4485</a></td></tr
><tr id="gr_svn141_4486"

><td id="4486"><a href="#4486">4486</a></td></tr
><tr id="gr_svn141_4487"

><td id="4487"><a href="#4487">4487</a></td></tr
><tr id="gr_svn141_4488"

><td id="4488"><a href="#4488">4488</a></td></tr
><tr id="gr_svn141_4489"

><td id="4489"><a href="#4489">4489</a></td></tr
><tr id="gr_svn141_4490"

><td id="4490"><a href="#4490">4490</a></td></tr
><tr id="gr_svn141_4491"

><td id="4491"><a href="#4491">4491</a></td></tr
><tr id="gr_svn141_4492"

><td id="4492"><a href="#4492">4492</a></td></tr
><tr id="gr_svn141_4493"

><td id="4493"><a href="#4493">4493</a></td></tr
><tr id="gr_svn141_4494"

><td id="4494"><a href="#4494">4494</a></td></tr
><tr id="gr_svn141_4495"

><td id="4495"><a href="#4495">4495</a></td></tr
><tr id="gr_svn141_4496"

><td id="4496"><a href="#4496">4496</a></td></tr
><tr id="gr_svn141_4497"

><td id="4497"><a href="#4497">4497</a></td></tr
><tr id="gr_svn141_4498"

><td id="4498"><a href="#4498">4498</a></td></tr
><tr id="gr_svn141_4499"

><td id="4499"><a href="#4499">4499</a></td></tr
><tr id="gr_svn141_4500"

><td id="4500"><a href="#4500">4500</a></td></tr
><tr id="gr_svn141_4501"

><td id="4501"><a href="#4501">4501</a></td></tr
><tr id="gr_svn141_4502"

><td id="4502"><a href="#4502">4502</a></td></tr
><tr id="gr_svn141_4503"

><td id="4503"><a href="#4503">4503</a></td></tr
><tr id="gr_svn141_4504"

><td id="4504"><a href="#4504">4504</a></td></tr
><tr id="gr_svn141_4505"

><td id="4505"><a href="#4505">4505</a></td></tr
><tr id="gr_svn141_4506"

><td id="4506"><a href="#4506">4506</a></td></tr
><tr id="gr_svn141_4507"

><td id="4507"><a href="#4507">4507</a></td></tr
><tr id="gr_svn141_4508"

><td id="4508"><a href="#4508">4508</a></td></tr
><tr id="gr_svn141_4509"

><td id="4509"><a href="#4509">4509</a></td></tr
><tr id="gr_svn141_4510"

><td id="4510"><a href="#4510">4510</a></td></tr
><tr id="gr_svn141_4511"

><td id="4511"><a href="#4511">4511</a></td></tr
><tr id="gr_svn141_4512"

><td id="4512"><a href="#4512">4512</a></td></tr
><tr id="gr_svn141_4513"

><td id="4513"><a href="#4513">4513</a></td></tr
><tr id="gr_svn141_4514"

><td id="4514"><a href="#4514">4514</a></td></tr
><tr id="gr_svn141_4515"

><td id="4515"><a href="#4515">4515</a></td></tr
><tr id="gr_svn141_4516"

><td id="4516"><a href="#4516">4516</a></td></tr
><tr id="gr_svn141_4517"

><td id="4517"><a href="#4517">4517</a></td></tr
><tr id="gr_svn141_4518"

><td id="4518"><a href="#4518">4518</a></td></tr
><tr id="gr_svn141_4519"

><td id="4519"><a href="#4519">4519</a></td></tr
><tr id="gr_svn141_4520"

><td id="4520"><a href="#4520">4520</a></td></tr
><tr id="gr_svn141_4521"

><td id="4521"><a href="#4521">4521</a></td></tr
><tr id="gr_svn141_4522"

><td id="4522"><a href="#4522">4522</a></td></tr
><tr id="gr_svn141_4523"

><td id="4523"><a href="#4523">4523</a></td></tr
><tr id="gr_svn141_4524"

><td id="4524"><a href="#4524">4524</a></td></tr
><tr id="gr_svn141_4525"

><td id="4525"><a href="#4525">4525</a></td></tr
><tr id="gr_svn141_4526"

><td id="4526"><a href="#4526">4526</a></td></tr
><tr id="gr_svn141_4527"

><td id="4527"><a href="#4527">4527</a></td></tr
><tr id="gr_svn141_4528"

><td id="4528"><a href="#4528">4528</a></td></tr
><tr id="gr_svn141_4529"

><td id="4529"><a href="#4529">4529</a></td></tr
><tr id="gr_svn141_4530"

><td id="4530"><a href="#4530">4530</a></td></tr
><tr id="gr_svn141_4531"

><td id="4531"><a href="#4531">4531</a></td></tr
><tr id="gr_svn141_4532"

><td id="4532"><a href="#4532">4532</a></td></tr
><tr id="gr_svn141_4533"

><td id="4533"><a href="#4533">4533</a></td></tr
><tr id="gr_svn141_4534"

><td id="4534"><a href="#4534">4534</a></td></tr
><tr id="gr_svn141_4535"

><td id="4535"><a href="#4535">4535</a></td></tr
><tr id="gr_svn141_4536"

><td id="4536"><a href="#4536">4536</a></td></tr
><tr id="gr_svn141_4537"

><td id="4537"><a href="#4537">4537</a></td></tr
><tr id="gr_svn141_4538"

><td id="4538"><a href="#4538">4538</a></td></tr
><tr id="gr_svn141_4539"

><td id="4539"><a href="#4539">4539</a></td></tr
><tr id="gr_svn141_4540"

><td id="4540"><a href="#4540">4540</a></td></tr
><tr id="gr_svn141_4541"

><td id="4541"><a href="#4541">4541</a></td></tr
><tr id="gr_svn141_4542"

><td id="4542"><a href="#4542">4542</a></td></tr
><tr id="gr_svn141_4543"

><td id="4543"><a href="#4543">4543</a></td></tr
><tr id="gr_svn141_4544"

><td id="4544"><a href="#4544">4544</a></td></tr
><tr id="gr_svn141_4545"

><td id="4545"><a href="#4545">4545</a></td></tr
><tr id="gr_svn141_4546"

><td id="4546"><a href="#4546">4546</a></td></tr
><tr id="gr_svn141_4547"

><td id="4547"><a href="#4547">4547</a></td></tr
><tr id="gr_svn141_4548"

><td id="4548"><a href="#4548">4548</a></td></tr
><tr id="gr_svn141_4549"

><td id="4549"><a href="#4549">4549</a></td></tr
><tr id="gr_svn141_4550"

><td id="4550"><a href="#4550">4550</a></td></tr
><tr id="gr_svn141_4551"

><td id="4551"><a href="#4551">4551</a></td></tr
><tr id="gr_svn141_4552"

><td id="4552"><a href="#4552">4552</a></td></tr
><tr id="gr_svn141_4553"

><td id="4553"><a href="#4553">4553</a></td></tr
><tr id="gr_svn141_4554"

><td id="4554"><a href="#4554">4554</a></td></tr
><tr id="gr_svn141_4555"

><td id="4555"><a href="#4555">4555</a></td></tr
><tr id="gr_svn141_4556"

><td id="4556"><a href="#4556">4556</a></td></tr
><tr id="gr_svn141_4557"

><td id="4557"><a href="#4557">4557</a></td></tr
><tr id="gr_svn141_4558"

><td id="4558"><a href="#4558">4558</a></td></tr
><tr id="gr_svn141_4559"

><td id="4559"><a href="#4559">4559</a></td></tr
><tr id="gr_svn141_4560"

><td id="4560"><a href="#4560">4560</a></td></tr
><tr id="gr_svn141_4561"

><td id="4561"><a href="#4561">4561</a></td></tr
><tr id="gr_svn141_4562"

><td id="4562"><a href="#4562">4562</a></td></tr
><tr id="gr_svn141_4563"

><td id="4563"><a href="#4563">4563</a></td></tr
><tr id="gr_svn141_4564"

><td id="4564"><a href="#4564">4564</a></td></tr
><tr id="gr_svn141_4565"

><td id="4565"><a href="#4565">4565</a></td></tr
><tr id="gr_svn141_4566"

><td id="4566"><a href="#4566">4566</a></td></tr
><tr id="gr_svn141_4567"

><td id="4567"><a href="#4567">4567</a></td></tr
><tr id="gr_svn141_4568"

><td id="4568"><a href="#4568">4568</a></td></tr
><tr id="gr_svn141_4569"

><td id="4569"><a href="#4569">4569</a></td></tr
><tr id="gr_svn141_4570"

><td id="4570"><a href="#4570">4570</a></td></tr
><tr id="gr_svn141_4571"

><td id="4571"><a href="#4571">4571</a></td></tr
><tr id="gr_svn141_4572"

><td id="4572"><a href="#4572">4572</a></td></tr
><tr id="gr_svn141_4573"

><td id="4573"><a href="#4573">4573</a></td></tr
><tr id="gr_svn141_4574"

><td id="4574"><a href="#4574">4574</a></td></tr
><tr id="gr_svn141_4575"

><td id="4575"><a href="#4575">4575</a></td></tr
><tr id="gr_svn141_4576"

><td id="4576"><a href="#4576">4576</a></td></tr
><tr id="gr_svn141_4577"

><td id="4577"><a href="#4577">4577</a></td></tr
><tr id="gr_svn141_4578"

><td id="4578"><a href="#4578">4578</a></td></tr
><tr id="gr_svn141_4579"

><td id="4579"><a href="#4579">4579</a></td></tr
><tr id="gr_svn141_4580"

><td id="4580"><a href="#4580">4580</a></td></tr
><tr id="gr_svn141_4581"

><td id="4581"><a href="#4581">4581</a></td></tr
><tr id="gr_svn141_4582"

><td id="4582"><a href="#4582">4582</a></td></tr
><tr id="gr_svn141_4583"

><td id="4583"><a href="#4583">4583</a></td></tr
><tr id="gr_svn141_4584"

><td id="4584"><a href="#4584">4584</a></td></tr
><tr id="gr_svn141_4585"

><td id="4585"><a href="#4585">4585</a></td></tr
><tr id="gr_svn141_4586"

><td id="4586"><a href="#4586">4586</a></td></tr
><tr id="gr_svn141_4587"

><td id="4587"><a href="#4587">4587</a></td></tr
><tr id="gr_svn141_4588"

><td id="4588"><a href="#4588">4588</a></td></tr
><tr id="gr_svn141_4589"

><td id="4589"><a href="#4589">4589</a></td></tr
><tr id="gr_svn141_4590"

><td id="4590"><a href="#4590">4590</a></td></tr
><tr id="gr_svn141_4591"

><td id="4591"><a href="#4591">4591</a></td></tr
><tr id="gr_svn141_4592"

><td id="4592"><a href="#4592">4592</a></td></tr
><tr id="gr_svn141_4593"

><td id="4593"><a href="#4593">4593</a></td></tr
><tr id="gr_svn141_4594"

><td id="4594"><a href="#4594">4594</a></td></tr
><tr id="gr_svn141_4595"

><td id="4595"><a href="#4595">4595</a></td></tr
><tr id="gr_svn141_4596"

><td id="4596"><a href="#4596">4596</a></td></tr
><tr id="gr_svn141_4597"

><td id="4597"><a href="#4597">4597</a></td></tr
><tr id="gr_svn141_4598"

><td id="4598"><a href="#4598">4598</a></td></tr
><tr id="gr_svn141_4599"

><td id="4599"><a href="#4599">4599</a></td></tr
><tr id="gr_svn141_4600"

><td id="4600"><a href="#4600">4600</a></td></tr
><tr id="gr_svn141_4601"

><td id="4601"><a href="#4601">4601</a></td></tr
><tr id="gr_svn141_4602"

><td id="4602"><a href="#4602">4602</a></td></tr
><tr id="gr_svn141_4603"

><td id="4603"><a href="#4603">4603</a></td></tr
><tr id="gr_svn141_4604"

><td id="4604"><a href="#4604">4604</a></td></tr
><tr id="gr_svn141_4605"

><td id="4605"><a href="#4605">4605</a></td></tr
><tr id="gr_svn141_4606"

><td id="4606"><a href="#4606">4606</a></td></tr
><tr id="gr_svn141_4607"

><td id="4607"><a href="#4607">4607</a></td></tr
><tr id="gr_svn141_4608"

><td id="4608"><a href="#4608">4608</a></td></tr
><tr id="gr_svn141_4609"

><td id="4609"><a href="#4609">4609</a></td></tr
><tr id="gr_svn141_4610"

><td id="4610"><a href="#4610">4610</a></td></tr
><tr id="gr_svn141_4611"

><td id="4611"><a href="#4611">4611</a></td></tr
><tr id="gr_svn141_4612"

><td id="4612"><a href="#4612">4612</a></td></tr
><tr id="gr_svn141_4613"

><td id="4613"><a href="#4613">4613</a></td></tr
><tr id="gr_svn141_4614"

><td id="4614"><a href="#4614">4614</a></td></tr
><tr id="gr_svn141_4615"

><td id="4615"><a href="#4615">4615</a></td></tr
><tr id="gr_svn141_4616"

><td id="4616"><a href="#4616">4616</a></td></tr
><tr id="gr_svn141_4617"

><td id="4617"><a href="#4617">4617</a></td></tr
><tr id="gr_svn141_4618"

><td id="4618"><a href="#4618">4618</a></td></tr
><tr id="gr_svn141_4619"

><td id="4619"><a href="#4619">4619</a></td></tr
><tr id="gr_svn141_4620"

><td id="4620"><a href="#4620">4620</a></td></tr
><tr id="gr_svn141_4621"

><td id="4621"><a href="#4621">4621</a></td></tr
><tr id="gr_svn141_4622"

><td id="4622"><a href="#4622">4622</a></td></tr
><tr id="gr_svn141_4623"

><td id="4623"><a href="#4623">4623</a></td></tr
><tr id="gr_svn141_4624"

><td id="4624"><a href="#4624">4624</a></td></tr
><tr id="gr_svn141_4625"

><td id="4625"><a href="#4625">4625</a></td></tr
><tr id="gr_svn141_4626"

><td id="4626"><a href="#4626">4626</a></td></tr
><tr id="gr_svn141_4627"

><td id="4627"><a href="#4627">4627</a></td></tr
><tr id="gr_svn141_4628"

><td id="4628"><a href="#4628">4628</a></td></tr
><tr id="gr_svn141_4629"

><td id="4629"><a href="#4629">4629</a></td></tr
><tr id="gr_svn141_4630"

><td id="4630"><a href="#4630">4630</a></td></tr
><tr id="gr_svn141_4631"

><td id="4631"><a href="#4631">4631</a></td></tr
><tr id="gr_svn141_4632"

><td id="4632"><a href="#4632">4632</a></td></tr
><tr id="gr_svn141_4633"

><td id="4633"><a href="#4633">4633</a></td></tr
><tr id="gr_svn141_4634"

><td id="4634"><a href="#4634">4634</a></td></tr
><tr id="gr_svn141_4635"

><td id="4635"><a href="#4635">4635</a></td></tr
><tr id="gr_svn141_4636"

><td id="4636"><a href="#4636">4636</a></td></tr
><tr id="gr_svn141_4637"

><td id="4637"><a href="#4637">4637</a></td></tr
><tr id="gr_svn141_4638"

><td id="4638"><a href="#4638">4638</a></td></tr
><tr id="gr_svn141_4639"

><td id="4639"><a href="#4639">4639</a></td></tr
><tr id="gr_svn141_4640"

><td id="4640"><a href="#4640">4640</a></td></tr
><tr id="gr_svn141_4641"

><td id="4641"><a href="#4641">4641</a></td></tr
><tr id="gr_svn141_4642"

><td id="4642"><a href="#4642">4642</a></td></tr
><tr id="gr_svn141_4643"

><td id="4643"><a href="#4643">4643</a></td></tr
><tr id="gr_svn141_4644"

><td id="4644"><a href="#4644">4644</a></td></tr
><tr id="gr_svn141_4645"

><td id="4645"><a href="#4645">4645</a></td></tr
><tr id="gr_svn141_4646"

><td id="4646"><a href="#4646">4646</a></td></tr
><tr id="gr_svn141_4647"

><td id="4647"><a href="#4647">4647</a></td></tr
><tr id="gr_svn141_4648"

><td id="4648"><a href="#4648">4648</a></td></tr
><tr id="gr_svn141_4649"

><td id="4649"><a href="#4649">4649</a></td></tr
><tr id="gr_svn141_4650"

><td id="4650"><a href="#4650">4650</a></td></tr
><tr id="gr_svn141_4651"

><td id="4651"><a href="#4651">4651</a></td></tr
><tr id="gr_svn141_4652"

><td id="4652"><a href="#4652">4652</a></td></tr
><tr id="gr_svn141_4653"

><td id="4653"><a href="#4653">4653</a></td></tr
><tr id="gr_svn141_4654"

><td id="4654"><a href="#4654">4654</a></td></tr
><tr id="gr_svn141_4655"

><td id="4655"><a href="#4655">4655</a></td></tr
><tr id="gr_svn141_4656"

><td id="4656"><a href="#4656">4656</a></td></tr
><tr id="gr_svn141_4657"

><td id="4657"><a href="#4657">4657</a></td></tr
><tr id="gr_svn141_4658"

><td id="4658"><a href="#4658">4658</a></td></tr
><tr id="gr_svn141_4659"

><td id="4659"><a href="#4659">4659</a></td></tr
><tr id="gr_svn141_4660"

><td id="4660"><a href="#4660">4660</a></td></tr
><tr id="gr_svn141_4661"

><td id="4661"><a href="#4661">4661</a></td></tr
><tr id="gr_svn141_4662"

><td id="4662"><a href="#4662">4662</a></td></tr
><tr id="gr_svn141_4663"

><td id="4663"><a href="#4663">4663</a></td></tr
><tr id="gr_svn141_4664"

><td id="4664"><a href="#4664">4664</a></td></tr
><tr id="gr_svn141_4665"

><td id="4665"><a href="#4665">4665</a></td></tr
><tr id="gr_svn141_4666"

><td id="4666"><a href="#4666">4666</a></td></tr
><tr id="gr_svn141_4667"

><td id="4667"><a href="#4667">4667</a></td></tr
><tr id="gr_svn141_4668"

><td id="4668"><a href="#4668">4668</a></td></tr
><tr id="gr_svn141_4669"

><td id="4669"><a href="#4669">4669</a></td></tr
><tr id="gr_svn141_4670"

><td id="4670"><a href="#4670">4670</a></td></tr
><tr id="gr_svn141_4671"

><td id="4671"><a href="#4671">4671</a></td></tr
><tr id="gr_svn141_4672"

><td id="4672"><a href="#4672">4672</a></td></tr
><tr id="gr_svn141_4673"

><td id="4673"><a href="#4673">4673</a></td></tr
><tr id="gr_svn141_4674"

><td id="4674"><a href="#4674">4674</a></td></tr
><tr id="gr_svn141_4675"

><td id="4675"><a href="#4675">4675</a></td></tr
><tr id="gr_svn141_4676"

><td id="4676"><a href="#4676">4676</a></td></tr
><tr id="gr_svn141_4677"

><td id="4677"><a href="#4677">4677</a></td></tr
><tr id="gr_svn141_4678"

><td id="4678"><a href="#4678">4678</a></td></tr
><tr id="gr_svn141_4679"

><td id="4679"><a href="#4679">4679</a></td></tr
><tr id="gr_svn141_4680"

><td id="4680"><a href="#4680">4680</a></td></tr
><tr id="gr_svn141_4681"

><td id="4681"><a href="#4681">4681</a></td></tr
><tr id="gr_svn141_4682"

><td id="4682"><a href="#4682">4682</a></td></tr
><tr id="gr_svn141_4683"

><td id="4683"><a href="#4683">4683</a></td></tr
><tr id="gr_svn141_4684"

><td id="4684"><a href="#4684">4684</a></td></tr
><tr id="gr_svn141_4685"

><td id="4685"><a href="#4685">4685</a></td></tr
><tr id="gr_svn141_4686"

><td id="4686"><a href="#4686">4686</a></td></tr
><tr id="gr_svn141_4687"

><td id="4687"><a href="#4687">4687</a></td></tr
><tr id="gr_svn141_4688"

><td id="4688"><a href="#4688">4688</a></td></tr
><tr id="gr_svn141_4689"

><td id="4689"><a href="#4689">4689</a></td></tr
><tr id="gr_svn141_4690"

><td id="4690"><a href="#4690">4690</a></td></tr
><tr id="gr_svn141_4691"

><td id="4691"><a href="#4691">4691</a></td></tr
><tr id="gr_svn141_4692"

><td id="4692"><a href="#4692">4692</a></td></tr
><tr id="gr_svn141_4693"

><td id="4693"><a href="#4693">4693</a></td></tr
><tr id="gr_svn141_4694"

><td id="4694"><a href="#4694">4694</a></td></tr
><tr id="gr_svn141_4695"

><td id="4695"><a href="#4695">4695</a></td></tr
><tr id="gr_svn141_4696"

><td id="4696"><a href="#4696">4696</a></td></tr
><tr id="gr_svn141_4697"

><td id="4697"><a href="#4697">4697</a></td></tr
><tr id="gr_svn141_4698"

><td id="4698"><a href="#4698">4698</a></td></tr
><tr id="gr_svn141_4699"

><td id="4699"><a href="#4699">4699</a></td></tr
><tr id="gr_svn141_4700"

><td id="4700"><a href="#4700">4700</a></td></tr
><tr id="gr_svn141_4701"

><td id="4701"><a href="#4701">4701</a></td></tr
><tr id="gr_svn141_4702"

><td id="4702"><a href="#4702">4702</a></td></tr
><tr id="gr_svn141_4703"

><td id="4703"><a href="#4703">4703</a></td></tr
><tr id="gr_svn141_4704"

><td id="4704"><a href="#4704">4704</a></td></tr
><tr id="gr_svn141_4705"

><td id="4705"><a href="#4705">4705</a></td></tr
><tr id="gr_svn141_4706"

><td id="4706"><a href="#4706">4706</a></td></tr
><tr id="gr_svn141_4707"

><td id="4707"><a href="#4707">4707</a></td></tr
><tr id="gr_svn141_4708"

><td id="4708"><a href="#4708">4708</a></td></tr
><tr id="gr_svn141_4709"

><td id="4709"><a href="#4709">4709</a></td></tr
><tr id="gr_svn141_4710"

><td id="4710"><a href="#4710">4710</a></td></tr
><tr id="gr_svn141_4711"

><td id="4711"><a href="#4711">4711</a></td></tr
><tr id="gr_svn141_4712"

><td id="4712"><a href="#4712">4712</a></td></tr
><tr id="gr_svn141_4713"

><td id="4713"><a href="#4713">4713</a></td></tr
><tr id="gr_svn141_4714"

><td id="4714"><a href="#4714">4714</a></td></tr
><tr id="gr_svn141_4715"

><td id="4715"><a href="#4715">4715</a></td></tr
><tr id="gr_svn141_4716"

><td id="4716"><a href="#4716">4716</a></td></tr
><tr id="gr_svn141_4717"

><td id="4717"><a href="#4717">4717</a></td></tr
><tr id="gr_svn141_4718"

><td id="4718"><a href="#4718">4718</a></td></tr
><tr id="gr_svn141_4719"

><td id="4719"><a href="#4719">4719</a></td></tr
><tr id="gr_svn141_4720"

><td id="4720"><a href="#4720">4720</a></td></tr
><tr id="gr_svn141_4721"

><td id="4721"><a href="#4721">4721</a></td></tr
><tr id="gr_svn141_4722"

><td id="4722"><a href="#4722">4722</a></td></tr
><tr id="gr_svn141_4723"

><td id="4723"><a href="#4723">4723</a></td></tr
><tr id="gr_svn141_4724"

><td id="4724"><a href="#4724">4724</a></td></tr
><tr id="gr_svn141_4725"

><td id="4725"><a href="#4725">4725</a></td></tr
><tr id="gr_svn141_4726"

><td id="4726"><a href="#4726">4726</a></td></tr
><tr id="gr_svn141_4727"

><td id="4727"><a href="#4727">4727</a></td></tr
><tr id="gr_svn141_4728"

><td id="4728"><a href="#4728">4728</a></td></tr
><tr id="gr_svn141_4729"

><td id="4729"><a href="#4729">4729</a></td></tr
><tr id="gr_svn141_4730"

><td id="4730"><a href="#4730">4730</a></td></tr
><tr id="gr_svn141_4731"

><td id="4731"><a href="#4731">4731</a></td></tr
><tr id="gr_svn141_4732"

><td id="4732"><a href="#4732">4732</a></td></tr
><tr id="gr_svn141_4733"

><td id="4733"><a href="#4733">4733</a></td></tr
><tr id="gr_svn141_4734"

><td id="4734"><a href="#4734">4734</a></td></tr
><tr id="gr_svn141_4735"

><td id="4735"><a href="#4735">4735</a></td></tr
><tr id="gr_svn141_4736"

><td id="4736"><a href="#4736">4736</a></td></tr
><tr id="gr_svn141_4737"

><td id="4737"><a href="#4737">4737</a></td></tr
><tr id="gr_svn141_4738"

><td id="4738"><a href="#4738">4738</a></td></tr
><tr id="gr_svn141_4739"

><td id="4739"><a href="#4739">4739</a></td></tr
><tr id="gr_svn141_4740"

><td id="4740"><a href="#4740">4740</a></td></tr
><tr id="gr_svn141_4741"

><td id="4741"><a href="#4741">4741</a></td></tr
><tr id="gr_svn141_4742"

><td id="4742"><a href="#4742">4742</a></td></tr
><tr id="gr_svn141_4743"

><td id="4743"><a href="#4743">4743</a></td></tr
><tr id="gr_svn141_4744"

><td id="4744"><a href="#4744">4744</a></td></tr
><tr id="gr_svn141_4745"

><td id="4745"><a href="#4745">4745</a></td></tr
><tr id="gr_svn141_4746"

><td id="4746"><a href="#4746">4746</a></td></tr
><tr id="gr_svn141_4747"

><td id="4747"><a href="#4747">4747</a></td></tr
><tr id="gr_svn141_4748"

><td id="4748"><a href="#4748">4748</a></td></tr
><tr id="gr_svn141_4749"

><td id="4749"><a href="#4749">4749</a></td></tr
><tr id="gr_svn141_4750"

><td id="4750"><a href="#4750">4750</a></td></tr
><tr id="gr_svn141_4751"

><td id="4751"><a href="#4751">4751</a></td></tr
><tr id="gr_svn141_4752"

><td id="4752"><a href="#4752">4752</a></td></tr
><tr id="gr_svn141_4753"

><td id="4753"><a href="#4753">4753</a></td></tr
><tr id="gr_svn141_4754"

><td id="4754"><a href="#4754">4754</a></td></tr
><tr id="gr_svn141_4755"

><td id="4755"><a href="#4755">4755</a></td></tr
><tr id="gr_svn141_4756"

><td id="4756"><a href="#4756">4756</a></td></tr
><tr id="gr_svn141_4757"

><td id="4757"><a href="#4757">4757</a></td></tr
><tr id="gr_svn141_4758"

><td id="4758"><a href="#4758">4758</a></td></tr
><tr id="gr_svn141_4759"

><td id="4759"><a href="#4759">4759</a></td></tr
><tr id="gr_svn141_4760"

><td id="4760"><a href="#4760">4760</a></td></tr
><tr id="gr_svn141_4761"

><td id="4761"><a href="#4761">4761</a></td></tr
><tr id="gr_svn141_4762"

><td id="4762"><a href="#4762">4762</a></td></tr
><tr id="gr_svn141_4763"

><td id="4763"><a href="#4763">4763</a></td></tr
><tr id="gr_svn141_4764"

><td id="4764"><a href="#4764">4764</a></td></tr
><tr id="gr_svn141_4765"

><td id="4765"><a href="#4765">4765</a></td></tr
><tr id="gr_svn141_4766"

><td id="4766"><a href="#4766">4766</a></td></tr
><tr id="gr_svn141_4767"

><td id="4767"><a href="#4767">4767</a></td></tr
><tr id="gr_svn141_4768"

><td id="4768"><a href="#4768">4768</a></td></tr
><tr id="gr_svn141_4769"

><td id="4769"><a href="#4769">4769</a></td></tr
><tr id="gr_svn141_4770"

><td id="4770"><a href="#4770">4770</a></td></tr
><tr id="gr_svn141_4771"

><td id="4771"><a href="#4771">4771</a></td></tr
><tr id="gr_svn141_4772"

><td id="4772"><a href="#4772">4772</a></td></tr
><tr id="gr_svn141_4773"

><td id="4773"><a href="#4773">4773</a></td></tr
><tr id="gr_svn141_4774"

><td id="4774"><a href="#4774">4774</a></td></tr
><tr id="gr_svn141_4775"

><td id="4775"><a href="#4775">4775</a></td></tr
><tr id="gr_svn141_4776"

><td id="4776"><a href="#4776">4776</a></td></tr
><tr id="gr_svn141_4777"

><td id="4777"><a href="#4777">4777</a></td></tr
><tr id="gr_svn141_4778"

><td id="4778"><a href="#4778">4778</a></td></tr
><tr id="gr_svn141_4779"

><td id="4779"><a href="#4779">4779</a></td></tr
><tr id="gr_svn141_4780"

><td id="4780"><a href="#4780">4780</a></td></tr
><tr id="gr_svn141_4781"

><td id="4781"><a href="#4781">4781</a></td></tr
><tr id="gr_svn141_4782"

><td id="4782"><a href="#4782">4782</a></td></tr
><tr id="gr_svn141_4783"

><td id="4783"><a href="#4783">4783</a></td></tr
><tr id="gr_svn141_4784"

><td id="4784"><a href="#4784">4784</a></td></tr
><tr id="gr_svn141_4785"

><td id="4785"><a href="#4785">4785</a></td></tr
><tr id="gr_svn141_4786"

><td id="4786"><a href="#4786">4786</a></td></tr
><tr id="gr_svn141_4787"

><td id="4787"><a href="#4787">4787</a></td></tr
><tr id="gr_svn141_4788"

><td id="4788"><a href="#4788">4788</a></td></tr
><tr id="gr_svn141_4789"

><td id="4789"><a href="#4789">4789</a></td></tr
><tr id="gr_svn141_4790"

><td id="4790"><a href="#4790">4790</a></td></tr
><tr id="gr_svn141_4791"

><td id="4791"><a href="#4791">4791</a></td></tr
><tr id="gr_svn141_4792"

><td id="4792"><a href="#4792">4792</a></td></tr
><tr id="gr_svn141_4793"

><td id="4793"><a href="#4793">4793</a></td></tr
><tr id="gr_svn141_4794"

><td id="4794"><a href="#4794">4794</a></td></tr
><tr id="gr_svn141_4795"

><td id="4795"><a href="#4795">4795</a></td></tr
><tr id="gr_svn141_4796"

><td id="4796"><a href="#4796">4796</a></td></tr
><tr id="gr_svn141_4797"

><td id="4797"><a href="#4797">4797</a></td></tr
><tr id="gr_svn141_4798"

><td id="4798"><a href="#4798">4798</a></td></tr
><tr id="gr_svn141_4799"

><td id="4799"><a href="#4799">4799</a></td></tr
><tr id="gr_svn141_4800"

><td id="4800"><a href="#4800">4800</a></td></tr
><tr id="gr_svn141_4801"

><td id="4801"><a href="#4801">4801</a></td></tr
><tr id="gr_svn141_4802"

><td id="4802"><a href="#4802">4802</a></td></tr
><tr id="gr_svn141_4803"

><td id="4803"><a href="#4803">4803</a></td></tr
><tr id="gr_svn141_4804"

><td id="4804"><a href="#4804">4804</a></td></tr
><tr id="gr_svn141_4805"

><td id="4805"><a href="#4805">4805</a></td></tr
><tr id="gr_svn141_4806"

><td id="4806"><a href="#4806">4806</a></td></tr
><tr id="gr_svn141_4807"

><td id="4807"><a href="#4807">4807</a></td></tr
><tr id="gr_svn141_4808"

><td id="4808"><a href="#4808">4808</a></td></tr
><tr id="gr_svn141_4809"

><td id="4809"><a href="#4809">4809</a></td></tr
><tr id="gr_svn141_4810"

><td id="4810"><a href="#4810">4810</a></td></tr
><tr id="gr_svn141_4811"

><td id="4811"><a href="#4811">4811</a></td></tr
><tr id="gr_svn141_4812"

><td id="4812"><a href="#4812">4812</a></td></tr
><tr id="gr_svn141_4813"

><td id="4813"><a href="#4813">4813</a></td></tr
><tr id="gr_svn141_4814"

><td id="4814"><a href="#4814">4814</a></td></tr
><tr id="gr_svn141_4815"

><td id="4815"><a href="#4815">4815</a></td></tr
><tr id="gr_svn141_4816"

><td id="4816"><a href="#4816">4816</a></td></tr
><tr id="gr_svn141_4817"

><td id="4817"><a href="#4817">4817</a></td></tr
><tr id="gr_svn141_4818"

><td id="4818"><a href="#4818">4818</a></td></tr
><tr id="gr_svn141_4819"

><td id="4819"><a href="#4819">4819</a></td></tr
><tr id="gr_svn141_4820"

><td id="4820"><a href="#4820">4820</a></td></tr
><tr id="gr_svn141_4821"

><td id="4821"><a href="#4821">4821</a></td></tr
><tr id="gr_svn141_4822"

><td id="4822"><a href="#4822">4822</a></td></tr
><tr id="gr_svn141_4823"

><td id="4823"><a href="#4823">4823</a></td></tr
><tr id="gr_svn141_4824"

><td id="4824"><a href="#4824">4824</a></td></tr
><tr id="gr_svn141_4825"

><td id="4825"><a href="#4825">4825</a></td></tr
><tr id="gr_svn141_4826"

><td id="4826"><a href="#4826">4826</a></td></tr
><tr id="gr_svn141_4827"

><td id="4827"><a href="#4827">4827</a></td></tr
><tr id="gr_svn141_4828"

><td id="4828"><a href="#4828">4828</a></td></tr
><tr id="gr_svn141_4829"

><td id="4829"><a href="#4829">4829</a></td></tr
><tr id="gr_svn141_4830"

><td id="4830"><a href="#4830">4830</a></td></tr
><tr id="gr_svn141_4831"

><td id="4831"><a href="#4831">4831</a></td></tr
><tr id="gr_svn141_4832"

><td id="4832"><a href="#4832">4832</a></td></tr
><tr id="gr_svn141_4833"

><td id="4833"><a href="#4833">4833</a></td></tr
><tr id="gr_svn141_4834"

><td id="4834"><a href="#4834">4834</a></td></tr
><tr id="gr_svn141_4835"

><td id="4835"><a href="#4835">4835</a></td></tr
><tr id="gr_svn141_4836"

><td id="4836"><a href="#4836">4836</a></td></tr
><tr id="gr_svn141_4837"

><td id="4837"><a href="#4837">4837</a></td></tr
><tr id="gr_svn141_4838"

><td id="4838"><a href="#4838">4838</a></td></tr
><tr id="gr_svn141_4839"

><td id="4839"><a href="#4839">4839</a></td></tr
><tr id="gr_svn141_4840"

><td id="4840"><a href="#4840">4840</a></td></tr
><tr id="gr_svn141_4841"

><td id="4841"><a href="#4841">4841</a></td></tr
><tr id="gr_svn141_4842"

><td id="4842"><a href="#4842">4842</a></td></tr
><tr id="gr_svn141_4843"

><td id="4843"><a href="#4843">4843</a></td></tr
><tr id="gr_svn141_4844"

><td id="4844"><a href="#4844">4844</a></td></tr
><tr id="gr_svn141_4845"

><td id="4845"><a href="#4845">4845</a></td></tr
><tr id="gr_svn141_4846"

><td id="4846"><a href="#4846">4846</a></td></tr
><tr id="gr_svn141_4847"

><td id="4847"><a href="#4847">4847</a></td></tr
><tr id="gr_svn141_4848"

><td id="4848"><a href="#4848">4848</a></td></tr
><tr id="gr_svn141_4849"

><td id="4849"><a href="#4849">4849</a></td></tr
><tr id="gr_svn141_4850"

><td id="4850"><a href="#4850">4850</a></td></tr
><tr id="gr_svn141_4851"

><td id="4851"><a href="#4851">4851</a></td></tr
><tr id="gr_svn141_4852"

><td id="4852"><a href="#4852">4852</a></td></tr
><tr id="gr_svn141_4853"

><td id="4853"><a href="#4853">4853</a></td></tr
><tr id="gr_svn141_4854"

><td id="4854"><a href="#4854">4854</a></td></tr
><tr id="gr_svn141_4855"

><td id="4855"><a href="#4855">4855</a></td></tr
><tr id="gr_svn141_4856"

><td id="4856"><a href="#4856">4856</a></td></tr
><tr id="gr_svn141_4857"

><td id="4857"><a href="#4857">4857</a></td></tr
><tr id="gr_svn141_4858"

><td id="4858"><a href="#4858">4858</a></td></tr
><tr id="gr_svn141_4859"

><td id="4859"><a href="#4859">4859</a></td></tr
><tr id="gr_svn141_4860"

><td id="4860"><a href="#4860">4860</a></td></tr
><tr id="gr_svn141_4861"

><td id="4861"><a href="#4861">4861</a></td></tr
><tr id="gr_svn141_4862"

><td id="4862"><a href="#4862">4862</a></td></tr
><tr id="gr_svn141_4863"

><td id="4863"><a href="#4863">4863</a></td></tr
><tr id="gr_svn141_4864"

><td id="4864"><a href="#4864">4864</a></td></tr
><tr id="gr_svn141_4865"

><td id="4865"><a href="#4865">4865</a></td></tr
><tr id="gr_svn141_4866"

><td id="4866"><a href="#4866">4866</a></td></tr
><tr id="gr_svn141_4867"

><td id="4867"><a href="#4867">4867</a></td></tr
><tr id="gr_svn141_4868"

><td id="4868"><a href="#4868">4868</a></td></tr
><tr id="gr_svn141_4869"

><td id="4869"><a href="#4869">4869</a></td></tr
><tr id="gr_svn141_4870"

><td id="4870"><a href="#4870">4870</a></td></tr
><tr id="gr_svn141_4871"

><td id="4871"><a href="#4871">4871</a></td></tr
><tr id="gr_svn141_4872"

><td id="4872"><a href="#4872">4872</a></td></tr
><tr id="gr_svn141_4873"

><td id="4873"><a href="#4873">4873</a></td></tr
><tr id="gr_svn141_4874"

><td id="4874"><a href="#4874">4874</a></td></tr
><tr id="gr_svn141_4875"

><td id="4875"><a href="#4875">4875</a></td></tr
><tr id="gr_svn141_4876"

><td id="4876"><a href="#4876">4876</a></td></tr
><tr id="gr_svn141_4877"

><td id="4877"><a href="#4877">4877</a></td></tr
><tr id="gr_svn141_4878"

><td id="4878"><a href="#4878">4878</a></td></tr
><tr id="gr_svn141_4879"

><td id="4879"><a href="#4879">4879</a></td></tr
><tr id="gr_svn141_4880"

><td id="4880"><a href="#4880">4880</a></td></tr
><tr id="gr_svn141_4881"

><td id="4881"><a href="#4881">4881</a></td></tr
><tr id="gr_svn141_4882"

><td id="4882"><a href="#4882">4882</a></td></tr
><tr id="gr_svn141_4883"

><td id="4883"><a href="#4883">4883</a></td></tr
><tr id="gr_svn141_4884"

><td id="4884"><a href="#4884">4884</a></td></tr
><tr id="gr_svn141_4885"

><td id="4885"><a href="#4885">4885</a></td></tr
><tr id="gr_svn141_4886"

><td id="4886"><a href="#4886">4886</a></td></tr
><tr id="gr_svn141_4887"

><td id="4887"><a href="#4887">4887</a></td></tr
><tr id="gr_svn141_4888"

><td id="4888"><a href="#4888">4888</a></td></tr
><tr id="gr_svn141_4889"

><td id="4889"><a href="#4889">4889</a></td></tr
><tr id="gr_svn141_4890"

><td id="4890"><a href="#4890">4890</a></td></tr
><tr id="gr_svn141_4891"

><td id="4891"><a href="#4891">4891</a></td></tr
><tr id="gr_svn141_4892"

><td id="4892"><a href="#4892">4892</a></td></tr
><tr id="gr_svn141_4893"

><td id="4893"><a href="#4893">4893</a></td></tr
><tr id="gr_svn141_4894"

><td id="4894"><a href="#4894">4894</a></td></tr
><tr id="gr_svn141_4895"

><td id="4895"><a href="#4895">4895</a></td></tr
><tr id="gr_svn141_4896"

><td id="4896"><a href="#4896">4896</a></td></tr
><tr id="gr_svn141_4897"

><td id="4897"><a href="#4897">4897</a></td></tr
><tr id="gr_svn141_4898"

><td id="4898"><a href="#4898">4898</a></td></tr
><tr id="gr_svn141_4899"

><td id="4899"><a href="#4899">4899</a></td></tr
><tr id="gr_svn141_4900"

><td id="4900"><a href="#4900">4900</a></td></tr
><tr id="gr_svn141_4901"

><td id="4901"><a href="#4901">4901</a></td></tr
><tr id="gr_svn141_4902"

><td id="4902"><a href="#4902">4902</a></td></tr
><tr id="gr_svn141_4903"

><td id="4903"><a href="#4903">4903</a></td></tr
><tr id="gr_svn141_4904"

><td id="4904"><a href="#4904">4904</a></td></tr
><tr id="gr_svn141_4905"

><td id="4905"><a href="#4905">4905</a></td></tr
><tr id="gr_svn141_4906"

><td id="4906"><a href="#4906">4906</a></td></tr
><tr id="gr_svn141_4907"

><td id="4907"><a href="#4907">4907</a></td></tr
><tr id="gr_svn141_4908"

><td id="4908"><a href="#4908">4908</a></td></tr
><tr id="gr_svn141_4909"

><td id="4909"><a href="#4909">4909</a></td></tr
><tr id="gr_svn141_4910"

><td id="4910"><a href="#4910">4910</a></td></tr
><tr id="gr_svn141_4911"

><td id="4911"><a href="#4911">4911</a></td></tr
><tr id="gr_svn141_4912"

><td id="4912"><a href="#4912">4912</a></td></tr
><tr id="gr_svn141_4913"

><td id="4913"><a href="#4913">4913</a></td></tr
><tr id="gr_svn141_4914"

><td id="4914"><a href="#4914">4914</a></td></tr
><tr id="gr_svn141_4915"

><td id="4915"><a href="#4915">4915</a></td></tr
><tr id="gr_svn141_4916"

><td id="4916"><a href="#4916">4916</a></td></tr
><tr id="gr_svn141_4917"

><td id="4917"><a href="#4917">4917</a></td></tr
><tr id="gr_svn141_4918"

><td id="4918"><a href="#4918">4918</a></td></tr
><tr id="gr_svn141_4919"

><td id="4919"><a href="#4919">4919</a></td></tr
><tr id="gr_svn141_4920"

><td id="4920"><a href="#4920">4920</a></td></tr
><tr id="gr_svn141_4921"

><td id="4921"><a href="#4921">4921</a></td></tr
><tr id="gr_svn141_4922"

><td id="4922"><a href="#4922">4922</a></td></tr
><tr id="gr_svn141_4923"

><td id="4923"><a href="#4923">4923</a></td></tr
><tr id="gr_svn141_4924"

><td id="4924"><a href="#4924">4924</a></td></tr
><tr id="gr_svn141_4925"

><td id="4925"><a href="#4925">4925</a></td></tr
><tr id="gr_svn141_4926"

><td id="4926"><a href="#4926">4926</a></td></tr
><tr id="gr_svn141_4927"

><td id="4927"><a href="#4927">4927</a></td></tr
><tr id="gr_svn141_4928"

><td id="4928"><a href="#4928">4928</a></td></tr
><tr id="gr_svn141_4929"

><td id="4929"><a href="#4929">4929</a></td></tr
><tr id="gr_svn141_4930"

><td id="4930"><a href="#4930">4930</a></td></tr
><tr id="gr_svn141_4931"

><td id="4931"><a href="#4931">4931</a></td></tr
><tr id="gr_svn141_4932"

><td id="4932"><a href="#4932">4932</a></td></tr
><tr id="gr_svn141_4933"

><td id="4933"><a href="#4933">4933</a></td></tr
><tr id="gr_svn141_4934"

><td id="4934"><a href="#4934">4934</a></td></tr
><tr id="gr_svn141_4935"

><td id="4935"><a href="#4935">4935</a></td></tr
><tr id="gr_svn141_4936"

><td id="4936"><a href="#4936">4936</a></td></tr
><tr id="gr_svn141_4937"

><td id="4937"><a href="#4937">4937</a></td></tr
><tr id="gr_svn141_4938"

><td id="4938"><a href="#4938">4938</a></td></tr
><tr id="gr_svn141_4939"

><td id="4939"><a href="#4939">4939</a></td></tr
><tr id="gr_svn141_4940"

><td id="4940"><a href="#4940">4940</a></td></tr
><tr id="gr_svn141_4941"

><td id="4941"><a href="#4941">4941</a></td></tr
><tr id="gr_svn141_4942"

><td id="4942"><a href="#4942">4942</a></td></tr
><tr id="gr_svn141_4943"

><td id="4943"><a href="#4943">4943</a></td></tr
><tr id="gr_svn141_4944"

><td id="4944"><a href="#4944">4944</a></td></tr
><tr id="gr_svn141_4945"

><td id="4945"><a href="#4945">4945</a></td></tr
><tr id="gr_svn141_4946"

><td id="4946"><a href="#4946">4946</a></td></tr
><tr id="gr_svn141_4947"

><td id="4947"><a href="#4947">4947</a></td></tr
><tr id="gr_svn141_4948"

><td id="4948"><a href="#4948">4948</a></td></tr
><tr id="gr_svn141_4949"

><td id="4949"><a href="#4949">4949</a></td></tr
><tr id="gr_svn141_4950"

><td id="4950"><a href="#4950">4950</a></td></tr
><tr id="gr_svn141_4951"

><td id="4951"><a href="#4951">4951</a></td></tr
><tr id="gr_svn141_4952"

><td id="4952"><a href="#4952">4952</a></td></tr
><tr id="gr_svn141_4953"

><td id="4953"><a href="#4953">4953</a></td></tr
><tr id="gr_svn141_4954"

><td id="4954"><a href="#4954">4954</a></td></tr
><tr id="gr_svn141_4955"

><td id="4955"><a href="#4955">4955</a></td></tr
><tr id="gr_svn141_4956"

><td id="4956"><a href="#4956">4956</a></td></tr
><tr id="gr_svn141_4957"

><td id="4957"><a href="#4957">4957</a></td></tr
><tr id="gr_svn141_4958"

><td id="4958"><a href="#4958">4958</a></td></tr
><tr id="gr_svn141_4959"

><td id="4959"><a href="#4959">4959</a></td></tr
><tr id="gr_svn141_4960"

><td id="4960"><a href="#4960">4960</a></td></tr
><tr id="gr_svn141_4961"

><td id="4961"><a href="#4961">4961</a></td></tr
><tr id="gr_svn141_4962"

><td id="4962"><a href="#4962">4962</a></td></tr
><tr id="gr_svn141_4963"

><td id="4963"><a href="#4963">4963</a></td></tr
><tr id="gr_svn141_4964"

><td id="4964"><a href="#4964">4964</a></td></tr
><tr id="gr_svn141_4965"

><td id="4965"><a href="#4965">4965</a></td></tr
><tr id="gr_svn141_4966"

><td id="4966"><a href="#4966">4966</a></td></tr
><tr id="gr_svn141_4967"

><td id="4967"><a href="#4967">4967</a></td></tr
><tr id="gr_svn141_4968"

><td id="4968"><a href="#4968">4968</a></td></tr
><tr id="gr_svn141_4969"

><td id="4969"><a href="#4969">4969</a></td></tr
><tr id="gr_svn141_4970"

><td id="4970"><a href="#4970">4970</a></td></tr
><tr id="gr_svn141_4971"

><td id="4971"><a href="#4971">4971</a></td></tr
><tr id="gr_svn141_4972"

><td id="4972"><a href="#4972">4972</a></td></tr
><tr id="gr_svn141_4973"

><td id="4973"><a href="#4973">4973</a></td></tr
><tr id="gr_svn141_4974"

><td id="4974"><a href="#4974">4974</a></td></tr
><tr id="gr_svn141_4975"

><td id="4975"><a href="#4975">4975</a></td></tr
><tr id="gr_svn141_4976"

><td id="4976"><a href="#4976">4976</a></td></tr
><tr id="gr_svn141_4977"

><td id="4977"><a href="#4977">4977</a></td></tr
><tr id="gr_svn141_4978"

><td id="4978"><a href="#4978">4978</a></td></tr
><tr id="gr_svn141_4979"

><td id="4979"><a href="#4979">4979</a></td></tr
><tr id="gr_svn141_4980"

><td id="4980"><a href="#4980">4980</a></td></tr
><tr id="gr_svn141_4981"

><td id="4981"><a href="#4981">4981</a></td></tr
><tr id="gr_svn141_4982"

><td id="4982"><a href="#4982">4982</a></td></tr
><tr id="gr_svn141_4983"

><td id="4983"><a href="#4983">4983</a></td></tr
><tr id="gr_svn141_4984"

><td id="4984"><a href="#4984">4984</a></td></tr
><tr id="gr_svn141_4985"

><td id="4985"><a href="#4985">4985</a></td></tr
><tr id="gr_svn141_4986"

><td id="4986"><a href="#4986">4986</a></td></tr
><tr id="gr_svn141_4987"

><td id="4987"><a href="#4987">4987</a></td></tr
><tr id="gr_svn141_4988"

><td id="4988"><a href="#4988">4988</a></td></tr
><tr id="gr_svn141_4989"

><td id="4989"><a href="#4989">4989</a></td></tr
><tr id="gr_svn141_4990"

><td id="4990"><a href="#4990">4990</a></td></tr
><tr id="gr_svn141_4991"

><td id="4991"><a href="#4991">4991</a></td></tr
><tr id="gr_svn141_4992"

><td id="4992"><a href="#4992">4992</a></td></tr
><tr id="gr_svn141_4993"

><td id="4993"><a href="#4993">4993</a></td></tr
><tr id="gr_svn141_4994"

><td id="4994"><a href="#4994">4994</a></td></tr
><tr id="gr_svn141_4995"

><td id="4995"><a href="#4995">4995</a></td></tr
><tr id="gr_svn141_4996"

><td id="4996"><a href="#4996">4996</a></td></tr
><tr id="gr_svn141_4997"

><td id="4997"><a href="#4997">4997</a></td></tr
><tr id="gr_svn141_4998"

><td id="4998"><a href="#4998">4998</a></td></tr
><tr id="gr_svn141_4999"

><td id="4999"><a href="#4999">4999</a></td></tr
><tr id="gr_svn141_5000"

><td id="5000"><a href="#5000">5000</a></td></tr
><tr id="gr_svn141_5001"

><td id="5001"><a href="#5001">5001</a></td></tr
><tr id="gr_svn141_5002"

><td id="5002"><a href="#5002">5002</a></td></tr
><tr id="gr_svn141_5003"

><td id="5003"><a href="#5003">5003</a></td></tr
><tr id="gr_svn141_5004"

><td id="5004"><a href="#5004">5004</a></td></tr
><tr id="gr_svn141_5005"

><td id="5005"><a href="#5005">5005</a></td></tr
><tr id="gr_svn141_5006"

><td id="5006"><a href="#5006">5006</a></td></tr
><tr id="gr_svn141_5007"

><td id="5007"><a href="#5007">5007</a></td></tr
><tr id="gr_svn141_5008"

><td id="5008"><a href="#5008">5008</a></td></tr
><tr id="gr_svn141_5009"

><td id="5009"><a href="#5009">5009</a></td></tr
><tr id="gr_svn141_5010"

><td id="5010"><a href="#5010">5010</a></td></tr
><tr id="gr_svn141_5011"

><td id="5011"><a href="#5011">5011</a></td></tr
><tr id="gr_svn141_5012"

><td id="5012"><a href="#5012">5012</a></td></tr
><tr id="gr_svn141_5013"

><td id="5013"><a href="#5013">5013</a></td></tr
><tr id="gr_svn141_5014"

><td id="5014"><a href="#5014">5014</a></td></tr
><tr id="gr_svn141_5015"

><td id="5015"><a href="#5015">5015</a></td></tr
><tr id="gr_svn141_5016"

><td id="5016"><a href="#5016">5016</a></td></tr
><tr id="gr_svn141_5017"

><td id="5017"><a href="#5017">5017</a></td></tr
><tr id="gr_svn141_5018"

><td id="5018"><a href="#5018">5018</a></td></tr
><tr id="gr_svn141_5019"

><td id="5019"><a href="#5019">5019</a></td></tr
><tr id="gr_svn141_5020"

><td id="5020"><a href="#5020">5020</a></td></tr
><tr id="gr_svn141_5021"

><td id="5021"><a href="#5021">5021</a></td></tr
><tr id="gr_svn141_5022"

><td id="5022"><a href="#5022">5022</a></td></tr
><tr id="gr_svn141_5023"

><td id="5023"><a href="#5023">5023</a></td></tr
><tr id="gr_svn141_5024"

><td id="5024"><a href="#5024">5024</a></td></tr
><tr id="gr_svn141_5025"

><td id="5025"><a href="#5025">5025</a></td></tr
><tr id="gr_svn141_5026"

><td id="5026"><a href="#5026">5026</a></td></tr
><tr id="gr_svn141_5027"

><td id="5027"><a href="#5027">5027</a></td></tr
><tr id="gr_svn141_5028"

><td id="5028"><a href="#5028">5028</a></td></tr
><tr id="gr_svn141_5029"

><td id="5029"><a href="#5029">5029</a></td></tr
><tr id="gr_svn141_5030"

><td id="5030"><a href="#5030">5030</a></td></tr
><tr id="gr_svn141_5031"

><td id="5031"><a href="#5031">5031</a></td></tr
><tr id="gr_svn141_5032"

><td id="5032"><a href="#5032">5032</a></td></tr
><tr id="gr_svn141_5033"

><td id="5033"><a href="#5033">5033</a></td></tr
><tr id="gr_svn141_5034"

><td id="5034"><a href="#5034">5034</a></td></tr
><tr id="gr_svn141_5035"

><td id="5035"><a href="#5035">5035</a></td></tr
><tr id="gr_svn141_5036"

><td id="5036"><a href="#5036">5036</a></td></tr
><tr id="gr_svn141_5037"

><td id="5037"><a href="#5037">5037</a></td></tr
><tr id="gr_svn141_5038"

><td id="5038"><a href="#5038">5038</a></td></tr
><tr id="gr_svn141_5039"

><td id="5039"><a href="#5039">5039</a></td></tr
><tr id="gr_svn141_5040"

><td id="5040"><a href="#5040">5040</a></td></tr
><tr id="gr_svn141_5041"

><td id="5041"><a href="#5041">5041</a></td></tr
><tr id="gr_svn141_5042"

><td id="5042"><a href="#5042">5042</a></td></tr
><tr id="gr_svn141_5043"

><td id="5043"><a href="#5043">5043</a></td></tr
><tr id="gr_svn141_5044"

><td id="5044"><a href="#5044">5044</a></td></tr
><tr id="gr_svn141_5045"

><td id="5045"><a href="#5045">5045</a></td></tr
><tr id="gr_svn141_5046"

><td id="5046"><a href="#5046">5046</a></td></tr
><tr id="gr_svn141_5047"

><td id="5047"><a href="#5047">5047</a></td></tr
><tr id="gr_svn141_5048"

><td id="5048"><a href="#5048">5048</a></td></tr
><tr id="gr_svn141_5049"

><td id="5049"><a href="#5049">5049</a></td></tr
><tr id="gr_svn141_5050"

><td id="5050"><a href="#5050">5050</a></td></tr
><tr id="gr_svn141_5051"

><td id="5051"><a href="#5051">5051</a></td></tr
><tr id="gr_svn141_5052"

><td id="5052"><a href="#5052">5052</a></td></tr
><tr id="gr_svn141_5053"

><td id="5053"><a href="#5053">5053</a></td></tr
><tr id="gr_svn141_5054"

><td id="5054"><a href="#5054">5054</a></td></tr
><tr id="gr_svn141_5055"

><td id="5055"><a href="#5055">5055</a></td></tr
><tr id="gr_svn141_5056"

><td id="5056"><a href="#5056">5056</a></td></tr
><tr id="gr_svn141_5057"

><td id="5057"><a href="#5057">5057</a></td></tr
><tr id="gr_svn141_5058"

><td id="5058"><a href="#5058">5058</a></td></tr
><tr id="gr_svn141_5059"

><td id="5059"><a href="#5059">5059</a></td></tr
><tr id="gr_svn141_5060"

><td id="5060"><a href="#5060">5060</a></td></tr
><tr id="gr_svn141_5061"

><td id="5061"><a href="#5061">5061</a></td></tr
><tr id="gr_svn141_5062"

><td id="5062"><a href="#5062">5062</a></td></tr
><tr id="gr_svn141_5063"

><td id="5063"><a href="#5063">5063</a></td></tr
><tr id="gr_svn141_5064"

><td id="5064"><a href="#5064">5064</a></td></tr
><tr id="gr_svn141_5065"

><td id="5065"><a href="#5065">5065</a></td></tr
><tr id="gr_svn141_5066"

><td id="5066"><a href="#5066">5066</a></td></tr
><tr id="gr_svn141_5067"

><td id="5067"><a href="#5067">5067</a></td></tr
><tr id="gr_svn141_5068"

><td id="5068"><a href="#5068">5068</a></td></tr
><tr id="gr_svn141_5069"

><td id="5069"><a href="#5069">5069</a></td></tr
><tr id="gr_svn141_5070"

><td id="5070"><a href="#5070">5070</a></td></tr
><tr id="gr_svn141_5071"

><td id="5071"><a href="#5071">5071</a></td></tr
><tr id="gr_svn141_5072"

><td id="5072"><a href="#5072">5072</a></td></tr
><tr id="gr_svn141_5073"

><td id="5073"><a href="#5073">5073</a></td></tr
><tr id="gr_svn141_5074"

><td id="5074"><a href="#5074">5074</a></td></tr
><tr id="gr_svn141_5075"

><td id="5075"><a href="#5075">5075</a></td></tr
><tr id="gr_svn141_5076"

><td id="5076"><a href="#5076">5076</a></td></tr
><tr id="gr_svn141_5077"

><td id="5077"><a href="#5077">5077</a></td></tr
><tr id="gr_svn141_5078"

><td id="5078"><a href="#5078">5078</a></td></tr
><tr id="gr_svn141_5079"

><td id="5079"><a href="#5079">5079</a></td></tr
><tr id="gr_svn141_5080"

><td id="5080"><a href="#5080">5080</a></td></tr
><tr id="gr_svn141_5081"

><td id="5081"><a href="#5081">5081</a></td></tr
><tr id="gr_svn141_5082"

><td id="5082"><a href="#5082">5082</a></td></tr
><tr id="gr_svn141_5083"

><td id="5083"><a href="#5083">5083</a></td></tr
><tr id="gr_svn141_5084"

><td id="5084"><a href="#5084">5084</a></td></tr
><tr id="gr_svn141_5085"

><td id="5085"><a href="#5085">5085</a></td></tr
><tr id="gr_svn141_5086"

><td id="5086"><a href="#5086">5086</a></td></tr
><tr id="gr_svn141_5087"

><td id="5087"><a href="#5087">5087</a></td></tr
><tr id="gr_svn141_5088"

><td id="5088"><a href="#5088">5088</a></td></tr
><tr id="gr_svn141_5089"

><td id="5089"><a href="#5089">5089</a></td></tr
><tr id="gr_svn141_5090"

><td id="5090"><a href="#5090">5090</a></td></tr
><tr id="gr_svn141_5091"

><td id="5091"><a href="#5091">5091</a></td></tr
><tr id="gr_svn141_5092"

><td id="5092"><a href="#5092">5092</a></td></tr
><tr id="gr_svn141_5093"

><td id="5093"><a href="#5093">5093</a></td></tr
><tr id="gr_svn141_5094"

><td id="5094"><a href="#5094">5094</a></td></tr
><tr id="gr_svn141_5095"

><td id="5095"><a href="#5095">5095</a></td></tr
><tr id="gr_svn141_5096"

><td id="5096"><a href="#5096">5096</a></td></tr
><tr id="gr_svn141_5097"

><td id="5097"><a href="#5097">5097</a></td></tr
><tr id="gr_svn141_5098"

><td id="5098"><a href="#5098">5098</a></td></tr
><tr id="gr_svn141_5099"

><td id="5099"><a href="#5099">5099</a></td></tr
><tr id="gr_svn141_5100"

><td id="5100"><a href="#5100">5100</a></td></tr
><tr id="gr_svn141_5101"

><td id="5101"><a href="#5101">5101</a></td></tr
><tr id="gr_svn141_5102"

><td id="5102"><a href="#5102">5102</a></td></tr
><tr id="gr_svn141_5103"

><td id="5103"><a href="#5103">5103</a></td></tr
><tr id="gr_svn141_5104"

><td id="5104"><a href="#5104">5104</a></td></tr
><tr id="gr_svn141_5105"

><td id="5105"><a href="#5105">5105</a></td></tr
><tr id="gr_svn141_5106"

><td id="5106"><a href="#5106">5106</a></td></tr
><tr id="gr_svn141_5107"

><td id="5107"><a href="#5107">5107</a></td></tr
><tr id="gr_svn141_5108"

><td id="5108"><a href="#5108">5108</a></td></tr
><tr id="gr_svn141_5109"

><td id="5109"><a href="#5109">5109</a></td></tr
><tr id="gr_svn141_5110"

><td id="5110"><a href="#5110">5110</a></td></tr
><tr id="gr_svn141_5111"

><td id="5111"><a href="#5111">5111</a></td></tr
><tr id="gr_svn141_5112"

><td id="5112"><a href="#5112">5112</a></td></tr
><tr id="gr_svn141_5113"

><td id="5113"><a href="#5113">5113</a></td></tr
><tr id="gr_svn141_5114"

><td id="5114"><a href="#5114">5114</a></td></tr
><tr id="gr_svn141_5115"

><td id="5115"><a href="#5115">5115</a></td></tr
><tr id="gr_svn141_5116"

><td id="5116"><a href="#5116">5116</a></td></tr
><tr id="gr_svn141_5117"

><td id="5117"><a href="#5117">5117</a></td></tr
><tr id="gr_svn141_5118"

><td id="5118"><a href="#5118">5118</a></td></tr
><tr id="gr_svn141_5119"

><td id="5119"><a href="#5119">5119</a></td></tr
><tr id="gr_svn141_5120"

><td id="5120"><a href="#5120">5120</a></td></tr
><tr id="gr_svn141_5121"

><td id="5121"><a href="#5121">5121</a></td></tr
><tr id="gr_svn141_5122"

><td id="5122"><a href="#5122">5122</a></td></tr
><tr id="gr_svn141_5123"

><td id="5123"><a href="#5123">5123</a></td></tr
><tr id="gr_svn141_5124"

><td id="5124"><a href="#5124">5124</a></td></tr
><tr id="gr_svn141_5125"

><td id="5125"><a href="#5125">5125</a></td></tr
><tr id="gr_svn141_5126"

><td id="5126"><a href="#5126">5126</a></td></tr
><tr id="gr_svn141_5127"

><td id="5127"><a href="#5127">5127</a></td></tr
><tr id="gr_svn141_5128"

><td id="5128"><a href="#5128">5128</a></td></tr
><tr id="gr_svn141_5129"

><td id="5129"><a href="#5129">5129</a></td></tr
><tr id="gr_svn141_5130"

><td id="5130"><a href="#5130">5130</a></td></tr
><tr id="gr_svn141_5131"

><td id="5131"><a href="#5131">5131</a></td></tr
><tr id="gr_svn141_5132"

><td id="5132"><a href="#5132">5132</a></td></tr
><tr id="gr_svn141_5133"

><td id="5133"><a href="#5133">5133</a></td></tr
><tr id="gr_svn141_5134"

><td id="5134"><a href="#5134">5134</a></td></tr
><tr id="gr_svn141_5135"

><td id="5135"><a href="#5135">5135</a></td></tr
><tr id="gr_svn141_5136"

><td id="5136"><a href="#5136">5136</a></td></tr
><tr id="gr_svn141_5137"

><td id="5137"><a href="#5137">5137</a></td></tr
><tr id="gr_svn141_5138"

><td id="5138"><a href="#5138">5138</a></td></tr
><tr id="gr_svn141_5139"

><td id="5139"><a href="#5139">5139</a></td></tr
><tr id="gr_svn141_5140"

><td id="5140"><a href="#5140">5140</a></td></tr
><tr id="gr_svn141_5141"

><td id="5141"><a href="#5141">5141</a></td></tr
><tr id="gr_svn141_5142"

><td id="5142"><a href="#5142">5142</a></td></tr
><tr id="gr_svn141_5143"

><td id="5143"><a href="#5143">5143</a></td></tr
><tr id="gr_svn141_5144"

><td id="5144"><a href="#5144">5144</a></td></tr
><tr id="gr_svn141_5145"

><td id="5145"><a href="#5145">5145</a></td></tr
><tr id="gr_svn141_5146"

><td id="5146"><a href="#5146">5146</a></td></tr
><tr id="gr_svn141_5147"

><td id="5147"><a href="#5147">5147</a></td></tr
><tr id="gr_svn141_5148"

><td id="5148"><a href="#5148">5148</a></td></tr
><tr id="gr_svn141_5149"

><td id="5149"><a href="#5149">5149</a></td></tr
><tr id="gr_svn141_5150"

><td id="5150"><a href="#5150">5150</a></td></tr
><tr id="gr_svn141_5151"

><td id="5151"><a href="#5151">5151</a></td></tr
><tr id="gr_svn141_5152"

><td id="5152"><a href="#5152">5152</a></td></tr
><tr id="gr_svn141_5153"

><td id="5153"><a href="#5153">5153</a></td></tr
><tr id="gr_svn141_5154"

><td id="5154"><a href="#5154">5154</a></td></tr
><tr id="gr_svn141_5155"

><td id="5155"><a href="#5155">5155</a></td></tr
><tr id="gr_svn141_5156"

><td id="5156"><a href="#5156">5156</a></td></tr
><tr id="gr_svn141_5157"

><td id="5157"><a href="#5157">5157</a></td></tr
><tr id="gr_svn141_5158"

><td id="5158"><a href="#5158">5158</a></td></tr
><tr id="gr_svn141_5159"

><td id="5159"><a href="#5159">5159</a></td></tr
><tr id="gr_svn141_5160"

><td id="5160"><a href="#5160">5160</a></td></tr
><tr id="gr_svn141_5161"

><td id="5161"><a href="#5161">5161</a></td></tr
><tr id="gr_svn141_5162"

><td id="5162"><a href="#5162">5162</a></td></tr
><tr id="gr_svn141_5163"

><td id="5163"><a href="#5163">5163</a></td></tr
><tr id="gr_svn141_5164"

><td id="5164"><a href="#5164">5164</a></td></tr
><tr id="gr_svn141_5165"

><td id="5165"><a href="#5165">5165</a></td></tr
><tr id="gr_svn141_5166"

><td id="5166"><a href="#5166">5166</a></td></tr
><tr id="gr_svn141_5167"

><td id="5167"><a href="#5167">5167</a></td></tr
><tr id="gr_svn141_5168"

><td id="5168"><a href="#5168">5168</a></td></tr
><tr id="gr_svn141_5169"

><td id="5169"><a href="#5169">5169</a></td></tr
><tr id="gr_svn141_5170"

><td id="5170"><a href="#5170">5170</a></td></tr
><tr id="gr_svn141_5171"

><td id="5171"><a href="#5171">5171</a></td></tr
><tr id="gr_svn141_5172"

><td id="5172"><a href="#5172">5172</a></td></tr
><tr id="gr_svn141_5173"

><td id="5173"><a href="#5173">5173</a></td></tr
><tr id="gr_svn141_5174"

><td id="5174"><a href="#5174">5174</a></td></tr
><tr id="gr_svn141_5175"

><td id="5175"><a href="#5175">5175</a></td></tr
><tr id="gr_svn141_5176"

><td id="5176"><a href="#5176">5176</a></td></tr
><tr id="gr_svn141_5177"

><td id="5177"><a href="#5177">5177</a></td></tr
><tr id="gr_svn141_5178"

><td id="5178"><a href="#5178">5178</a></td></tr
><tr id="gr_svn141_5179"

><td id="5179"><a href="#5179">5179</a></td></tr
><tr id="gr_svn141_5180"

><td id="5180"><a href="#5180">5180</a></td></tr
><tr id="gr_svn141_5181"

><td id="5181"><a href="#5181">5181</a></td></tr
><tr id="gr_svn141_5182"

><td id="5182"><a href="#5182">5182</a></td></tr
><tr id="gr_svn141_5183"

><td id="5183"><a href="#5183">5183</a></td></tr
><tr id="gr_svn141_5184"

><td id="5184"><a href="#5184">5184</a></td></tr
><tr id="gr_svn141_5185"

><td id="5185"><a href="#5185">5185</a></td></tr
><tr id="gr_svn141_5186"

><td id="5186"><a href="#5186">5186</a></td></tr
><tr id="gr_svn141_5187"

><td id="5187"><a href="#5187">5187</a></td></tr
><tr id="gr_svn141_5188"

><td id="5188"><a href="#5188">5188</a></td></tr
><tr id="gr_svn141_5189"

><td id="5189"><a href="#5189">5189</a></td></tr
><tr id="gr_svn141_5190"

><td id="5190"><a href="#5190">5190</a></td></tr
><tr id="gr_svn141_5191"

><td id="5191"><a href="#5191">5191</a></td></tr
><tr id="gr_svn141_5192"

><td id="5192"><a href="#5192">5192</a></td></tr
><tr id="gr_svn141_5193"

><td id="5193"><a href="#5193">5193</a></td></tr
><tr id="gr_svn141_5194"

><td id="5194"><a href="#5194">5194</a></td></tr
><tr id="gr_svn141_5195"

><td id="5195"><a href="#5195">5195</a></td></tr
><tr id="gr_svn141_5196"

><td id="5196"><a href="#5196">5196</a></td></tr
><tr id="gr_svn141_5197"

><td id="5197"><a href="#5197">5197</a></td></tr
><tr id="gr_svn141_5198"

><td id="5198"><a href="#5198">5198</a></td></tr
><tr id="gr_svn141_5199"

><td id="5199"><a href="#5199">5199</a></td></tr
><tr id="gr_svn141_5200"

><td id="5200"><a href="#5200">5200</a></td></tr
><tr id="gr_svn141_5201"

><td id="5201"><a href="#5201">5201</a></td></tr
><tr id="gr_svn141_5202"

><td id="5202"><a href="#5202">5202</a></td></tr
><tr id="gr_svn141_5203"

><td id="5203"><a href="#5203">5203</a></td></tr
><tr id="gr_svn141_5204"

><td id="5204"><a href="#5204">5204</a></td></tr
><tr id="gr_svn141_5205"

><td id="5205"><a href="#5205">5205</a></td></tr
><tr id="gr_svn141_5206"

><td id="5206"><a href="#5206">5206</a></td></tr
><tr id="gr_svn141_5207"

><td id="5207"><a href="#5207">5207</a></td></tr
><tr id="gr_svn141_5208"

><td id="5208"><a href="#5208">5208</a></td></tr
><tr id="gr_svn141_5209"

><td id="5209"><a href="#5209">5209</a></td></tr
><tr id="gr_svn141_5210"

><td id="5210"><a href="#5210">5210</a></td></tr
><tr id="gr_svn141_5211"

><td id="5211"><a href="#5211">5211</a></td></tr
><tr id="gr_svn141_5212"

><td id="5212"><a href="#5212">5212</a></td></tr
><tr id="gr_svn141_5213"

><td id="5213"><a href="#5213">5213</a></td></tr
><tr id="gr_svn141_5214"

><td id="5214"><a href="#5214">5214</a></td></tr
><tr id="gr_svn141_5215"

><td id="5215"><a href="#5215">5215</a></td></tr
><tr id="gr_svn141_5216"

><td id="5216"><a href="#5216">5216</a></td></tr
><tr id="gr_svn141_5217"

><td id="5217"><a href="#5217">5217</a></td></tr
><tr id="gr_svn141_5218"

><td id="5218"><a href="#5218">5218</a></td></tr
><tr id="gr_svn141_5219"

><td id="5219"><a href="#5219">5219</a></td></tr
><tr id="gr_svn141_5220"

><td id="5220"><a href="#5220">5220</a></td></tr
><tr id="gr_svn141_5221"

><td id="5221"><a href="#5221">5221</a></td></tr
><tr id="gr_svn141_5222"

><td id="5222"><a href="#5222">5222</a></td></tr
><tr id="gr_svn141_5223"

><td id="5223"><a href="#5223">5223</a></td></tr
><tr id="gr_svn141_5224"

><td id="5224"><a href="#5224">5224</a></td></tr
><tr id="gr_svn141_5225"

><td id="5225"><a href="#5225">5225</a></td></tr
><tr id="gr_svn141_5226"

><td id="5226"><a href="#5226">5226</a></td></tr
><tr id="gr_svn141_5227"

><td id="5227"><a href="#5227">5227</a></td></tr
><tr id="gr_svn141_5228"

><td id="5228"><a href="#5228">5228</a></td></tr
><tr id="gr_svn141_5229"

><td id="5229"><a href="#5229">5229</a></td></tr
><tr id="gr_svn141_5230"

><td id="5230"><a href="#5230">5230</a></td></tr
><tr id="gr_svn141_5231"

><td id="5231"><a href="#5231">5231</a></td></tr
><tr id="gr_svn141_5232"

><td id="5232"><a href="#5232">5232</a></td></tr
><tr id="gr_svn141_5233"

><td id="5233"><a href="#5233">5233</a></td></tr
><tr id="gr_svn141_5234"

><td id="5234"><a href="#5234">5234</a></td></tr
><tr id="gr_svn141_5235"

><td id="5235"><a href="#5235">5235</a></td></tr
><tr id="gr_svn141_5236"

><td id="5236"><a href="#5236">5236</a></td></tr
><tr id="gr_svn141_5237"

><td id="5237"><a href="#5237">5237</a></td></tr
><tr id="gr_svn141_5238"

><td id="5238"><a href="#5238">5238</a></td></tr
><tr id="gr_svn141_5239"

><td id="5239"><a href="#5239">5239</a></td></tr
><tr id="gr_svn141_5240"

><td id="5240"><a href="#5240">5240</a></td></tr
><tr id="gr_svn141_5241"

><td id="5241"><a href="#5241">5241</a></td></tr
><tr id="gr_svn141_5242"

><td id="5242"><a href="#5242">5242</a></td></tr
><tr id="gr_svn141_5243"

><td id="5243"><a href="#5243">5243</a></td></tr
><tr id="gr_svn141_5244"

><td id="5244"><a href="#5244">5244</a></td></tr
><tr id="gr_svn141_5245"

><td id="5245"><a href="#5245">5245</a></td></tr
><tr id="gr_svn141_5246"

><td id="5246"><a href="#5246">5246</a></td></tr
><tr id="gr_svn141_5247"

><td id="5247"><a href="#5247">5247</a></td></tr
><tr id="gr_svn141_5248"

><td id="5248"><a href="#5248">5248</a></td></tr
><tr id="gr_svn141_5249"

><td id="5249"><a href="#5249">5249</a></td></tr
><tr id="gr_svn141_5250"

><td id="5250"><a href="#5250">5250</a></td></tr
><tr id="gr_svn141_5251"

><td id="5251"><a href="#5251">5251</a></td></tr
><tr id="gr_svn141_5252"

><td id="5252"><a href="#5252">5252</a></td></tr
><tr id="gr_svn141_5253"

><td id="5253"><a href="#5253">5253</a></td></tr
><tr id="gr_svn141_5254"

><td id="5254"><a href="#5254">5254</a></td></tr
><tr id="gr_svn141_5255"

><td id="5255"><a href="#5255">5255</a></td></tr
><tr id="gr_svn141_5256"

><td id="5256"><a href="#5256">5256</a></td></tr
><tr id="gr_svn141_5257"

><td id="5257"><a href="#5257">5257</a></td></tr
><tr id="gr_svn141_5258"

><td id="5258"><a href="#5258">5258</a></td></tr
><tr id="gr_svn141_5259"

><td id="5259"><a href="#5259">5259</a></td></tr
><tr id="gr_svn141_5260"

><td id="5260"><a href="#5260">5260</a></td></tr
><tr id="gr_svn141_5261"

><td id="5261"><a href="#5261">5261</a></td></tr
><tr id="gr_svn141_5262"

><td id="5262"><a href="#5262">5262</a></td></tr
><tr id="gr_svn141_5263"

><td id="5263"><a href="#5263">5263</a></td></tr
><tr id="gr_svn141_5264"

><td id="5264"><a href="#5264">5264</a></td></tr
><tr id="gr_svn141_5265"

><td id="5265"><a href="#5265">5265</a></td></tr
><tr id="gr_svn141_5266"

><td id="5266"><a href="#5266">5266</a></td></tr
><tr id="gr_svn141_5267"

><td id="5267"><a href="#5267">5267</a></td></tr
><tr id="gr_svn141_5268"

><td id="5268"><a href="#5268">5268</a></td></tr
><tr id="gr_svn141_5269"

><td id="5269"><a href="#5269">5269</a></td></tr
><tr id="gr_svn141_5270"

><td id="5270"><a href="#5270">5270</a></td></tr
><tr id="gr_svn141_5271"

><td id="5271"><a href="#5271">5271</a></td></tr
><tr id="gr_svn141_5272"

><td id="5272"><a href="#5272">5272</a></td></tr
><tr id="gr_svn141_5273"

><td id="5273"><a href="#5273">5273</a></td></tr
><tr id="gr_svn141_5274"

><td id="5274"><a href="#5274">5274</a></td></tr
><tr id="gr_svn141_5275"

><td id="5275"><a href="#5275">5275</a></td></tr
><tr id="gr_svn141_5276"

><td id="5276"><a href="#5276">5276</a></td></tr
><tr id="gr_svn141_5277"

><td id="5277"><a href="#5277">5277</a></td></tr
><tr id="gr_svn141_5278"

><td id="5278"><a href="#5278">5278</a></td></tr
><tr id="gr_svn141_5279"

><td id="5279"><a href="#5279">5279</a></td></tr
><tr id="gr_svn141_5280"

><td id="5280"><a href="#5280">5280</a></td></tr
><tr id="gr_svn141_5281"

><td id="5281"><a href="#5281">5281</a></td></tr
><tr id="gr_svn141_5282"

><td id="5282"><a href="#5282">5282</a></td></tr
><tr id="gr_svn141_5283"

><td id="5283"><a href="#5283">5283</a></td></tr
><tr id="gr_svn141_5284"

><td id="5284"><a href="#5284">5284</a></td></tr
><tr id="gr_svn141_5285"

><td id="5285"><a href="#5285">5285</a></td></tr
><tr id="gr_svn141_5286"

><td id="5286"><a href="#5286">5286</a></td></tr
><tr id="gr_svn141_5287"

><td id="5287"><a href="#5287">5287</a></td></tr
><tr id="gr_svn141_5288"

><td id="5288"><a href="#5288">5288</a></td></tr
><tr id="gr_svn141_5289"

><td id="5289"><a href="#5289">5289</a></td></tr
><tr id="gr_svn141_5290"

><td id="5290"><a href="#5290">5290</a></td></tr
><tr id="gr_svn141_5291"

><td id="5291"><a href="#5291">5291</a></td></tr
><tr id="gr_svn141_5292"

><td id="5292"><a href="#5292">5292</a></td></tr
><tr id="gr_svn141_5293"

><td id="5293"><a href="#5293">5293</a></td></tr
><tr id="gr_svn141_5294"

><td id="5294"><a href="#5294">5294</a></td></tr
><tr id="gr_svn141_5295"

><td id="5295"><a href="#5295">5295</a></td></tr
><tr id="gr_svn141_5296"

><td id="5296"><a href="#5296">5296</a></td></tr
><tr id="gr_svn141_5297"

><td id="5297"><a href="#5297">5297</a></td></tr
><tr id="gr_svn141_5298"

><td id="5298"><a href="#5298">5298</a></td></tr
><tr id="gr_svn141_5299"

><td id="5299"><a href="#5299">5299</a></td></tr
><tr id="gr_svn141_5300"

><td id="5300"><a href="#5300">5300</a></td></tr
><tr id="gr_svn141_5301"

><td id="5301"><a href="#5301">5301</a></td></tr
><tr id="gr_svn141_5302"

><td id="5302"><a href="#5302">5302</a></td></tr
><tr id="gr_svn141_5303"

><td id="5303"><a href="#5303">5303</a></td></tr
><tr id="gr_svn141_5304"

><td id="5304"><a href="#5304">5304</a></td></tr
><tr id="gr_svn141_5305"

><td id="5305"><a href="#5305">5305</a></td></tr
><tr id="gr_svn141_5306"

><td id="5306"><a href="#5306">5306</a></td></tr
><tr id="gr_svn141_5307"

><td id="5307"><a href="#5307">5307</a></td></tr
><tr id="gr_svn141_5308"

><td id="5308"><a href="#5308">5308</a></td></tr
><tr id="gr_svn141_5309"

><td id="5309"><a href="#5309">5309</a></td></tr
><tr id="gr_svn141_5310"

><td id="5310"><a href="#5310">5310</a></td></tr
><tr id="gr_svn141_5311"

><td id="5311"><a href="#5311">5311</a></td></tr
><tr id="gr_svn141_5312"

><td id="5312"><a href="#5312">5312</a></td></tr
><tr id="gr_svn141_5313"

><td id="5313"><a href="#5313">5313</a></td></tr
><tr id="gr_svn141_5314"

><td id="5314"><a href="#5314">5314</a></td></tr
><tr id="gr_svn141_5315"

><td id="5315"><a href="#5315">5315</a></td></tr
><tr id="gr_svn141_5316"

><td id="5316"><a href="#5316">5316</a></td></tr
><tr id="gr_svn141_5317"

><td id="5317"><a href="#5317">5317</a></td></tr
><tr id="gr_svn141_5318"

><td id="5318"><a href="#5318">5318</a></td></tr
><tr id="gr_svn141_5319"

><td id="5319"><a href="#5319">5319</a></td></tr
><tr id="gr_svn141_5320"

><td id="5320"><a href="#5320">5320</a></td></tr
><tr id="gr_svn141_5321"

><td id="5321"><a href="#5321">5321</a></td></tr
><tr id="gr_svn141_5322"

><td id="5322"><a href="#5322">5322</a></td></tr
><tr id="gr_svn141_5323"

><td id="5323"><a href="#5323">5323</a></td></tr
><tr id="gr_svn141_5324"

><td id="5324"><a href="#5324">5324</a></td></tr
><tr id="gr_svn141_5325"

><td id="5325"><a href="#5325">5325</a></td></tr
><tr id="gr_svn141_5326"

><td id="5326"><a href="#5326">5326</a></td></tr
><tr id="gr_svn141_5327"

><td id="5327"><a href="#5327">5327</a></td></tr
><tr id="gr_svn141_5328"

><td id="5328"><a href="#5328">5328</a></td></tr
><tr id="gr_svn141_5329"

><td id="5329"><a href="#5329">5329</a></td></tr
><tr id="gr_svn141_5330"

><td id="5330"><a href="#5330">5330</a></td></tr
><tr id="gr_svn141_5331"

><td id="5331"><a href="#5331">5331</a></td></tr
><tr id="gr_svn141_5332"

><td id="5332"><a href="#5332">5332</a></td></tr
><tr id="gr_svn141_5333"

><td id="5333"><a href="#5333">5333</a></td></tr
><tr id="gr_svn141_5334"

><td id="5334"><a href="#5334">5334</a></td></tr
><tr id="gr_svn141_5335"

><td id="5335"><a href="#5335">5335</a></td></tr
><tr id="gr_svn141_5336"

><td id="5336"><a href="#5336">5336</a></td></tr
><tr id="gr_svn141_5337"

><td id="5337"><a href="#5337">5337</a></td></tr
><tr id="gr_svn141_5338"

><td id="5338"><a href="#5338">5338</a></td></tr
><tr id="gr_svn141_5339"

><td id="5339"><a href="#5339">5339</a></td></tr
><tr id="gr_svn141_5340"

><td id="5340"><a href="#5340">5340</a></td></tr
><tr id="gr_svn141_5341"

><td id="5341"><a href="#5341">5341</a></td></tr
><tr id="gr_svn141_5342"

><td id="5342"><a href="#5342">5342</a></td></tr
><tr id="gr_svn141_5343"

><td id="5343"><a href="#5343">5343</a></td></tr
><tr id="gr_svn141_5344"

><td id="5344"><a href="#5344">5344</a></td></tr
><tr id="gr_svn141_5345"

><td id="5345"><a href="#5345">5345</a></td></tr
><tr id="gr_svn141_5346"

><td id="5346"><a href="#5346">5346</a></td></tr
><tr id="gr_svn141_5347"

><td id="5347"><a href="#5347">5347</a></td></tr
><tr id="gr_svn141_5348"

><td id="5348"><a href="#5348">5348</a></td></tr
><tr id="gr_svn141_5349"

><td id="5349"><a href="#5349">5349</a></td></tr
><tr id="gr_svn141_5350"

><td id="5350"><a href="#5350">5350</a></td></tr
><tr id="gr_svn141_5351"

><td id="5351"><a href="#5351">5351</a></td></tr
><tr id="gr_svn141_5352"

><td id="5352"><a href="#5352">5352</a></td></tr
><tr id="gr_svn141_5353"

><td id="5353"><a href="#5353">5353</a></td></tr
><tr id="gr_svn141_5354"

><td id="5354"><a href="#5354">5354</a></td></tr
><tr id="gr_svn141_5355"

><td id="5355"><a href="#5355">5355</a></td></tr
><tr id="gr_svn141_5356"

><td id="5356"><a href="#5356">5356</a></td></tr
><tr id="gr_svn141_5357"

><td id="5357"><a href="#5357">5357</a></td></tr
><tr id="gr_svn141_5358"

><td id="5358"><a href="#5358">5358</a></td></tr
><tr id="gr_svn141_5359"

><td id="5359"><a href="#5359">5359</a></td></tr
><tr id="gr_svn141_5360"

><td id="5360"><a href="#5360">5360</a></td></tr
><tr id="gr_svn141_5361"

><td id="5361"><a href="#5361">5361</a></td></tr
><tr id="gr_svn141_5362"

><td id="5362"><a href="#5362">5362</a></td></tr
><tr id="gr_svn141_5363"

><td id="5363"><a href="#5363">5363</a></td></tr
><tr id="gr_svn141_5364"

><td id="5364"><a href="#5364">5364</a></td></tr
><tr id="gr_svn141_5365"

><td id="5365"><a href="#5365">5365</a></td></tr
><tr id="gr_svn141_5366"

><td id="5366"><a href="#5366">5366</a></td></tr
><tr id="gr_svn141_5367"

><td id="5367"><a href="#5367">5367</a></td></tr
><tr id="gr_svn141_5368"

><td id="5368"><a href="#5368">5368</a></td></tr
><tr id="gr_svn141_5369"

><td id="5369"><a href="#5369">5369</a></td></tr
><tr id="gr_svn141_5370"

><td id="5370"><a href="#5370">5370</a></td></tr
><tr id="gr_svn141_5371"

><td id="5371"><a href="#5371">5371</a></td></tr
><tr id="gr_svn141_5372"

><td id="5372"><a href="#5372">5372</a></td></tr
><tr id="gr_svn141_5373"

><td id="5373"><a href="#5373">5373</a></td></tr
><tr id="gr_svn141_5374"

><td id="5374"><a href="#5374">5374</a></td></tr
><tr id="gr_svn141_5375"

><td id="5375"><a href="#5375">5375</a></td></tr
><tr id="gr_svn141_5376"

><td id="5376"><a href="#5376">5376</a></td></tr
><tr id="gr_svn141_5377"

><td id="5377"><a href="#5377">5377</a></td></tr
><tr id="gr_svn141_5378"

><td id="5378"><a href="#5378">5378</a></td></tr
><tr id="gr_svn141_5379"

><td id="5379"><a href="#5379">5379</a></td></tr
><tr id="gr_svn141_5380"

><td id="5380"><a href="#5380">5380</a></td></tr
><tr id="gr_svn141_5381"

><td id="5381"><a href="#5381">5381</a></td></tr
><tr id="gr_svn141_5382"

><td id="5382"><a href="#5382">5382</a></td></tr
><tr id="gr_svn141_5383"

><td id="5383"><a href="#5383">5383</a></td></tr
><tr id="gr_svn141_5384"

><td id="5384"><a href="#5384">5384</a></td></tr
><tr id="gr_svn141_5385"

><td id="5385"><a href="#5385">5385</a></td></tr
><tr id="gr_svn141_5386"

><td id="5386"><a href="#5386">5386</a></td></tr
><tr id="gr_svn141_5387"

><td id="5387"><a href="#5387">5387</a></td></tr
><tr id="gr_svn141_5388"

><td id="5388"><a href="#5388">5388</a></td></tr
><tr id="gr_svn141_5389"

><td id="5389"><a href="#5389">5389</a></td></tr
><tr id="gr_svn141_5390"

><td id="5390"><a href="#5390">5390</a></td></tr
><tr id="gr_svn141_5391"

><td id="5391"><a href="#5391">5391</a></td></tr
><tr id="gr_svn141_5392"

><td id="5392"><a href="#5392">5392</a></td></tr
><tr id="gr_svn141_5393"

><td id="5393"><a href="#5393">5393</a></td></tr
><tr id="gr_svn141_5394"

><td id="5394"><a href="#5394">5394</a></td></tr
><tr id="gr_svn141_5395"

><td id="5395"><a href="#5395">5395</a></td></tr
><tr id="gr_svn141_5396"

><td id="5396"><a href="#5396">5396</a></td></tr
><tr id="gr_svn141_5397"

><td id="5397"><a href="#5397">5397</a></td></tr
><tr id="gr_svn141_5398"

><td id="5398"><a href="#5398">5398</a></td></tr
><tr id="gr_svn141_5399"

><td id="5399"><a href="#5399">5399</a></td></tr
><tr id="gr_svn141_5400"

><td id="5400"><a href="#5400">5400</a></td></tr
><tr id="gr_svn141_5401"

><td id="5401"><a href="#5401">5401</a></td></tr
><tr id="gr_svn141_5402"

><td id="5402"><a href="#5402">5402</a></td></tr
><tr id="gr_svn141_5403"

><td id="5403"><a href="#5403">5403</a></td></tr
><tr id="gr_svn141_5404"

><td id="5404"><a href="#5404">5404</a></td></tr
><tr id="gr_svn141_5405"

><td id="5405"><a href="#5405">5405</a></td></tr
><tr id="gr_svn141_5406"

><td id="5406"><a href="#5406">5406</a></td></tr
><tr id="gr_svn141_5407"

><td id="5407"><a href="#5407">5407</a></td></tr
><tr id="gr_svn141_5408"

><td id="5408"><a href="#5408">5408</a></td></tr
><tr id="gr_svn141_5409"

><td id="5409"><a href="#5409">5409</a></td></tr
><tr id="gr_svn141_5410"

><td id="5410"><a href="#5410">5410</a></td></tr
><tr id="gr_svn141_5411"

><td id="5411"><a href="#5411">5411</a></td></tr
><tr id="gr_svn141_5412"

><td id="5412"><a href="#5412">5412</a></td></tr
><tr id="gr_svn141_5413"

><td id="5413"><a href="#5413">5413</a></td></tr
><tr id="gr_svn141_5414"

><td id="5414"><a href="#5414">5414</a></td></tr
><tr id="gr_svn141_5415"

><td id="5415"><a href="#5415">5415</a></td></tr
><tr id="gr_svn141_5416"

><td id="5416"><a href="#5416">5416</a></td></tr
><tr id="gr_svn141_5417"

><td id="5417"><a href="#5417">5417</a></td></tr
><tr id="gr_svn141_5418"

><td id="5418"><a href="#5418">5418</a></td></tr
><tr id="gr_svn141_5419"

><td id="5419"><a href="#5419">5419</a></td></tr
><tr id="gr_svn141_5420"

><td id="5420"><a href="#5420">5420</a></td></tr
><tr id="gr_svn141_5421"

><td id="5421"><a href="#5421">5421</a></td></tr
><tr id="gr_svn141_5422"

><td id="5422"><a href="#5422">5422</a></td></tr
><tr id="gr_svn141_5423"

><td id="5423"><a href="#5423">5423</a></td></tr
><tr id="gr_svn141_5424"

><td id="5424"><a href="#5424">5424</a></td></tr
><tr id="gr_svn141_5425"

><td id="5425"><a href="#5425">5425</a></td></tr
><tr id="gr_svn141_5426"

><td id="5426"><a href="#5426">5426</a></td></tr
><tr id="gr_svn141_5427"

><td id="5427"><a href="#5427">5427</a></td></tr
><tr id="gr_svn141_5428"

><td id="5428"><a href="#5428">5428</a></td></tr
><tr id="gr_svn141_5429"

><td id="5429"><a href="#5429">5429</a></td></tr
><tr id="gr_svn141_5430"

><td id="5430"><a href="#5430">5430</a></td></tr
><tr id="gr_svn141_5431"

><td id="5431"><a href="#5431">5431</a></td></tr
><tr id="gr_svn141_5432"

><td id="5432"><a href="#5432">5432</a></td></tr
><tr id="gr_svn141_5433"

><td id="5433"><a href="#5433">5433</a></td></tr
><tr id="gr_svn141_5434"

><td id="5434"><a href="#5434">5434</a></td></tr
><tr id="gr_svn141_5435"

><td id="5435"><a href="#5435">5435</a></td></tr
><tr id="gr_svn141_5436"

><td id="5436"><a href="#5436">5436</a></td></tr
><tr id="gr_svn141_5437"

><td id="5437"><a href="#5437">5437</a></td></tr
><tr id="gr_svn141_5438"

><td id="5438"><a href="#5438">5438</a></td></tr
><tr id="gr_svn141_5439"

><td id="5439"><a href="#5439">5439</a></td></tr
><tr id="gr_svn141_5440"

><td id="5440"><a href="#5440">5440</a></td></tr
><tr id="gr_svn141_5441"

><td id="5441"><a href="#5441">5441</a></td></tr
><tr id="gr_svn141_5442"

><td id="5442"><a href="#5442">5442</a></td></tr
><tr id="gr_svn141_5443"

><td id="5443"><a href="#5443">5443</a></td></tr
><tr id="gr_svn141_5444"

><td id="5444"><a href="#5444">5444</a></td></tr
><tr id="gr_svn141_5445"

><td id="5445"><a href="#5445">5445</a></td></tr
><tr id="gr_svn141_5446"

><td id="5446"><a href="#5446">5446</a></td></tr
><tr id="gr_svn141_5447"

><td id="5447"><a href="#5447">5447</a></td></tr
><tr id="gr_svn141_5448"

><td id="5448"><a href="#5448">5448</a></td></tr
><tr id="gr_svn141_5449"

><td id="5449"><a href="#5449">5449</a></td></tr
><tr id="gr_svn141_5450"

><td id="5450"><a href="#5450">5450</a></td></tr
><tr id="gr_svn141_5451"

><td id="5451"><a href="#5451">5451</a></td></tr
><tr id="gr_svn141_5452"

><td id="5452"><a href="#5452">5452</a></td></tr
><tr id="gr_svn141_5453"

><td id="5453"><a href="#5453">5453</a></td></tr
><tr id="gr_svn141_5454"

><td id="5454"><a href="#5454">5454</a></td></tr
><tr id="gr_svn141_5455"

><td id="5455"><a href="#5455">5455</a></td></tr
><tr id="gr_svn141_5456"

><td id="5456"><a href="#5456">5456</a></td></tr
><tr id="gr_svn141_5457"

><td id="5457"><a href="#5457">5457</a></td></tr
><tr id="gr_svn141_5458"

><td id="5458"><a href="#5458">5458</a></td></tr
><tr id="gr_svn141_5459"

><td id="5459"><a href="#5459">5459</a></td></tr
><tr id="gr_svn141_5460"

><td id="5460"><a href="#5460">5460</a></td></tr
><tr id="gr_svn141_5461"

><td id="5461"><a href="#5461">5461</a></td></tr
><tr id="gr_svn141_5462"

><td id="5462"><a href="#5462">5462</a></td></tr
><tr id="gr_svn141_5463"

><td id="5463"><a href="#5463">5463</a></td></tr
><tr id="gr_svn141_5464"

><td id="5464"><a href="#5464">5464</a></td></tr
><tr id="gr_svn141_5465"

><td id="5465"><a href="#5465">5465</a></td></tr
><tr id="gr_svn141_5466"

><td id="5466"><a href="#5466">5466</a></td></tr
><tr id="gr_svn141_5467"

><td id="5467"><a href="#5467">5467</a></td></tr
><tr id="gr_svn141_5468"

><td id="5468"><a href="#5468">5468</a></td></tr
><tr id="gr_svn141_5469"

><td id="5469"><a href="#5469">5469</a></td></tr
><tr id="gr_svn141_5470"

><td id="5470"><a href="#5470">5470</a></td></tr
><tr id="gr_svn141_5471"

><td id="5471"><a href="#5471">5471</a></td></tr
><tr id="gr_svn141_5472"

><td id="5472"><a href="#5472">5472</a></td></tr
><tr id="gr_svn141_5473"

><td id="5473"><a href="#5473">5473</a></td></tr
><tr id="gr_svn141_5474"

><td id="5474"><a href="#5474">5474</a></td></tr
><tr id="gr_svn141_5475"

><td id="5475"><a href="#5475">5475</a></td></tr
><tr id="gr_svn141_5476"

><td id="5476"><a href="#5476">5476</a></td></tr
><tr id="gr_svn141_5477"

><td id="5477"><a href="#5477">5477</a></td></tr
><tr id="gr_svn141_5478"

><td id="5478"><a href="#5478">5478</a></td></tr
><tr id="gr_svn141_5479"

><td id="5479"><a href="#5479">5479</a></td></tr
><tr id="gr_svn141_5480"

><td id="5480"><a href="#5480">5480</a></td></tr
><tr id="gr_svn141_5481"

><td id="5481"><a href="#5481">5481</a></td></tr
><tr id="gr_svn141_5482"

><td id="5482"><a href="#5482">5482</a></td></tr
><tr id="gr_svn141_5483"

><td id="5483"><a href="#5483">5483</a></td></tr
><tr id="gr_svn141_5484"

><td id="5484"><a href="#5484">5484</a></td></tr
><tr id="gr_svn141_5485"

><td id="5485"><a href="#5485">5485</a></td></tr
><tr id="gr_svn141_5486"

><td id="5486"><a href="#5486">5486</a></td></tr
><tr id="gr_svn141_5487"

><td id="5487"><a href="#5487">5487</a></td></tr
><tr id="gr_svn141_5488"

><td id="5488"><a href="#5488">5488</a></td></tr
><tr id="gr_svn141_5489"

><td id="5489"><a href="#5489">5489</a></td></tr
><tr id="gr_svn141_5490"

><td id="5490"><a href="#5490">5490</a></td></tr
><tr id="gr_svn141_5491"

><td id="5491"><a href="#5491">5491</a></td></tr
><tr id="gr_svn141_5492"

><td id="5492"><a href="#5492">5492</a></td></tr
><tr id="gr_svn141_5493"

><td id="5493"><a href="#5493">5493</a></td></tr
><tr id="gr_svn141_5494"

><td id="5494"><a href="#5494">5494</a></td></tr
><tr id="gr_svn141_5495"

><td id="5495"><a href="#5495">5495</a></td></tr
><tr id="gr_svn141_5496"

><td id="5496"><a href="#5496">5496</a></td></tr
><tr id="gr_svn141_5497"

><td id="5497"><a href="#5497">5497</a></td></tr
><tr id="gr_svn141_5498"

><td id="5498"><a href="#5498">5498</a></td></tr
><tr id="gr_svn141_5499"

><td id="5499"><a href="#5499">5499</a></td></tr
><tr id="gr_svn141_5500"

><td id="5500"><a href="#5500">5500</a></td></tr
><tr id="gr_svn141_5501"

><td id="5501"><a href="#5501">5501</a></td></tr
><tr id="gr_svn141_5502"

><td id="5502"><a href="#5502">5502</a></td></tr
><tr id="gr_svn141_5503"

><td id="5503"><a href="#5503">5503</a></td></tr
><tr id="gr_svn141_5504"

><td id="5504"><a href="#5504">5504</a></td></tr
><tr id="gr_svn141_5505"

><td id="5505"><a href="#5505">5505</a></td></tr
><tr id="gr_svn141_5506"

><td id="5506"><a href="#5506">5506</a></td></tr
><tr id="gr_svn141_5507"

><td id="5507"><a href="#5507">5507</a></td></tr
><tr id="gr_svn141_5508"

><td id="5508"><a href="#5508">5508</a></td></tr
><tr id="gr_svn141_5509"

><td id="5509"><a href="#5509">5509</a></td></tr
><tr id="gr_svn141_5510"

><td id="5510"><a href="#5510">5510</a></td></tr
><tr id="gr_svn141_5511"

><td id="5511"><a href="#5511">5511</a></td></tr
><tr id="gr_svn141_5512"

><td id="5512"><a href="#5512">5512</a></td></tr
><tr id="gr_svn141_5513"

><td id="5513"><a href="#5513">5513</a></td></tr
><tr id="gr_svn141_5514"

><td id="5514"><a href="#5514">5514</a></td></tr
><tr id="gr_svn141_5515"

><td id="5515"><a href="#5515">5515</a></td></tr
><tr id="gr_svn141_5516"

><td id="5516"><a href="#5516">5516</a></td></tr
><tr id="gr_svn141_5517"

><td id="5517"><a href="#5517">5517</a></td></tr
><tr id="gr_svn141_5518"

><td id="5518"><a href="#5518">5518</a></td></tr
><tr id="gr_svn141_5519"

><td id="5519"><a href="#5519">5519</a></td></tr
><tr id="gr_svn141_5520"

><td id="5520"><a href="#5520">5520</a></td></tr
><tr id="gr_svn141_5521"

><td id="5521"><a href="#5521">5521</a></td></tr
><tr id="gr_svn141_5522"

><td id="5522"><a href="#5522">5522</a></td></tr
><tr id="gr_svn141_5523"

><td id="5523"><a href="#5523">5523</a></td></tr
><tr id="gr_svn141_5524"

><td id="5524"><a href="#5524">5524</a></td></tr
><tr id="gr_svn141_5525"

><td id="5525"><a href="#5525">5525</a></td></tr
><tr id="gr_svn141_5526"

><td id="5526"><a href="#5526">5526</a></td></tr
><tr id="gr_svn141_5527"

><td id="5527"><a href="#5527">5527</a></td></tr
><tr id="gr_svn141_5528"

><td id="5528"><a href="#5528">5528</a></td></tr
><tr id="gr_svn141_5529"

><td id="5529"><a href="#5529">5529</a></td></tr
><tr id="gr_svn141_5530"

><td id="5530"><a href="#5530">5530</a></td></tr
><tr id="gr_svn141_5531"

><td id="5531"><a href="#5531">5531</a></td></tr
><tr id="gr_svn141_5532"

><td id="5532"><a href="#5532">5532</a></td></tr
><tr id="gr_svn141_5533"

><td id="5533"><a href="#5533">5533</a></td></tr
><tr id="gr_svn141_5534"

><td id="5534"><a href="#5534">5534</a></td></tr
><tr id="gr_svn141_5535"

><td id="5535"><a href="#5535">5535</a></td></tr
><tr id="gr_svn141_5536"

><td id="5536"><a href="#5536">5536</a></td></tr
><tr id="gr_svn141_5537"

><td id="5537"><a href="#5537">5537</a></td></tr
><tr id="gr_svn141_5538"

><td id="5538"><a href="#5538">5538</a></td></tr
><tr id="gr_svn141_5539"

><td id="5539"><a href="#5539">5539</a></td></tr
><tr id="gr_svn141_5540"

><td id="5540"><a href="#5540">5540</a></td></tr
><tr id="gr_svn141_5541"

><td id="5541"><a href="#5541">5541</a></td></tr
><tr id="gr_svn141_5542"

><td id="5542"><a href="#5542">5542</a></td></tr
><tr id="gr_svn141_5543"

><td id="5543"><a href="#5543">5543</a></td></tr
><tr id="gr_svn141_5544"

><td id="5544"><a href="#5544">5544</a></td></tr
><tr id="gr_svn141_5545"

><td id="5545"><a href="#5545">5545</a></td></tr
><tr id="gr_svn141_5546"

><td id="5546"><a href="#5546">5546</a></td></tr
><tr id="gr_svn141_5547"

><td id="5547"><a href="#5547">5547</a></td></tr
><tr id="gr_svn141_5548"

><td id="5548"><a href="#5548">5548</a></td></tr
><tr id="gr_svn141_5549"

><td id="5549"><a href="#5549">5549</a></td></tr
><tr id="gr_svn141_5550"

><td id="5550"><a href="#5550">5550</a></td></tr
><tr id="gr_svn141_5551"

><td id="5551"><a href="#5551">5551</a></td></tr
><tr id="gr_svn141_5552"

><td id="5552"><a href="#5552">5552</a></td></tr
><tr id="gr_svn141_5553"

><td id="5553"><a href="#5553">5553</a></td></tr
><tr id="gr_svn141_5554"

><td id="5554"><a href="#5554">5554</a></td></tr
><tr id="gr_svn141_5555"

><td id="5555"><a href="#5555">5555</a></td></tr
><tr id="gr_svn141_5556"

><td id="5556"><a href="#5556">5556</a></td></tr
><tr id="gr_svn141_5557"

><td id="5557"><a href="#5557">5557</a></td></tr
><tr id="gr_svn141_5558"

><td id="5558"><a href="#5558">5558</a></td></tr
><tr id="gr_svn141_5559"

><td id="5559"><a href="#5559">5559</a></td></tr
><tr id="gr_svn141_5560"

><td id="5560"><a href="#5560">5560</a></td></tr
><tr id="gr_svn141_5561"

><td id="5561"><a href="#5561">5561</a></td></tr
><tr id="gr_svn141_5562"

><td id="5562"><a href="#5562">5562</a></td></tr
><tr id="gr_svn141_5563"

><td id="5563"><a href="#5563">5563</a></td></tr
><tr id="gr_svn141_5564"

><td id="5564"><a href="#5564">5564</a></td></tr
><tr id="gr_svn141_5565"

><td id="5565"><a href="#5565">5565</a></td></tr
><tr id="gr_svn141_5566"

><td id="5566"><a href="#5566">5566</a></td></tr
><tr id="gr_svn141_5567"

><td id="5567"><a href="#5567">5567</a></td></tr
><tr id="gr_svn141_5568"

><td id="5568"><a href="#5568">5568</a></td></tr
><tr id="gr_svn141_5569"

><td id="5569"><a href="#5569">5569</a></td></tr
><tr id="gr_svn141_5570"

><td id="5570"><a href="#5570">5570</a></td></tr
><tr id="gr_svn141_5571"

><td id="5571"><a href="#5571">5571</a></td></tr
><tr id="gr_svn141_5572"

><td id="5572"><a href="#5572">5572</a></td></tr
><tr id="gr_svn141_5573"

><td id="5573"><a href="#5573">5573</a></td></tr
><tr id="gr_svn141_5574"

><td id="5574"><a href="#5574">5574</a></td></tr
><tr id="gr_svn141_5575"

><td id="5575"><a href="#5575">5575</a></td></tr
><tr id="gr_svn141_5576"

><td id="5576"><a href="#5576">5576</a></td></tr
><tr id="gr_svn141_5577"

><td id="5577"><a href="#5577">5577</a></td></tr
><tr id="gr_svn141_5578"

><td id="5578"><a href="#5578">5578</a></td></tr
><tr id="gr_svn141_5579"

><td id="5579"><a href="#5579">5579</a></td></tr
><tr id="gr_svn141_5580"

><td id="5580"><a href="#5580">5580</a></td></tr
><tr id="gr_svn141_5581"

><td id="5581"><a href="#5581">5581</a></td></tr
><tr id="gr_svn141_5582"

><td id="5582"><a href="#5582">5582</a></td></tr
><tr id="gr_svn141_5583"

><td id="5583"><a href="#5583">5583</a></td></tr
><tr id="gr_svn141_5584"

><td id="5584"><a href="#5584">5584</a></td></tr
><tr id="gr_svn141_5585"

><td id="5585"><a href="#5585">5585</a></td></tr
><tr id="gr_svn141_5586"

><td id="5586"><a href="#5586">5586</a></td></tr
><tr id="gr_svn141_5587"

><td id="5587"><a href="#5587">5587</a></td></tr
><tr id="gr_svn141_5588"

><td id="5588"><a href="#5588">5588</a></td></tr
><tr id="gr_svn141_5589"

><td id="5589"><a href="#5589">5589</a></td></tr
><tr id="gr_svn141_5590"

><td id="5590"><a href="#5590">5590</a></td></tr
><tr id="gr_svn141_5591"

><td id="5591"><a href="#5591">5591</a></td></tr
><tr id="gr_svn141_5592"

><td id="5592"><a href="#5592">5592</a></td></tr
><tr id="gr_svn141_5593"

><td id="5593"><a href="#5593">5593</a></td></tr
><tr id="gr_svn141_5594"

><td id="5594"><a href="#5594">5594</a></td></tr
><tr id="gr_svn141_5595"

><td id="5595"><a href="#5595">5595</a></td></tr
><tr id="gr_svn141_5596"

><td id="5596"><a href="#5596">5596</a></td></tr
><tr id="gr_svn141_5597"

><td id="5597"><a href="#5597">5597</a></td></tr
><tr id="gr_svn141_5598"

><td id="5598"><a href="#5598">5598</a></td></tr
><tr id="gr_svn141_5599"

><td id="5599"><a href="#5599">5599</a></td></tr
><tr id="gr_svn141_5600"

><td id="5600"><a href="#5600">5600</a></td></tr
><tr id="gr_svn141_5601"

><td id="5601"><a href="#5601">5601</a></td></tr
><tr id="gr_svn141_5602"

><td id="5602"><a href="#5602">5602</a></td></tr
><tr id="gr_svn141_5603"

><td id="5603"><a href="#5603">5603</a></td></tr
><tr id="gr_svn141_5604"

><td id="5604"><a href="#5604">5604</a></td></tr
><tr id="gr_svn141_5605"

><td id="5605"><a href="#5605">5605</a></td></tr
><tr id="gr_svn141_5606"

><td id="5606"><a href="#5606">5606</a></td></tr
><tr id="gr_svn141_5607"

><td id="5607"><a href="#5607">5607</a></td></tr
><tr id="gr_svn141_5608"

><td id="5608"><a href="#5608">5608</a></td></tr
><tr id="gr_svn141_5609"

><td id="5609"><a href="#5609">5609</a></td></tr
><tr id="gr_svn141_5610"

><td id="5610"><a href="#5610">5610</a></td></tr
><tr id="gr_svn141_5611"

><td id="5611"><a href="#5611">5611</a></td></tr
><tr id="gr_svn141_5612"

><td id="5612"><a href="#5612">5612</a></td></tr
><tr id="gr_svn141_5613"

><td id="5613"><a href="#5613">5613</a></td></tr
><tr id="gr_svn141_5614"

><td id="5614"><a href="#5614">5614</a></td></tr
><tr id="gr_svn141_5615"

><td id="5615"><a href="#5615">5615</a></td></tr
><tr id="gr_svn141_5616"

><td id="5616"><a href="#5616">5616</a></td></tr
><tr id="gr_svn141_5617"

><td id="5617"><a href="#5617">5617</a></td></tr
><tr id="gr_svn141_5618"

><td id="5618"><a href="#5618">5618</a></td></tr
><tr id="gr_svn141_5619"

><td id="5619"><a href="#5619">5619</a></td></tr
><tr id="gr_svn141_5620"

><td id="5620"><a href="#5620">5620</a></td></tr
><tr id="gr_svn141_5621"

><td id="5621"><a href="#5621">5621</a></td></tr
><tr id="gr_svn141_5622"

><td id="5622"><a href="#5622">5622</a></td></tr
><tr id="gr_svn141_5623"

><td id="5623"><a href="#5623">5623</a></td></tr
><tr id="gr_svn141_5624"

><td id="5624"><a href="#5624">5624</a></td></tr
><tr id="gr_svn141_5625"

><td id="5625"><a href="#5625">5625</a></td></tr
><tr id="gr_svn141_5626"

><td id="5626"><a href="#5626">5626</a></td></tr
><tr id="gr_svn141_5627"

><td id="5627"><a href="#5627">5627</a></td></tr
><tr id="gr_svn141_5628"

><td id="5628"><a href="#5628">5628</a></td></tr
><tr id="gr_svn141_5629"

><td id="5629"><a href="#5629">5629</a></td></tr
><tr id="gr_svn141_5630"

><td id="5630"><a href="#5630">5630</a></td></tr
><tr id="gr_svn141_5631"

><td id="5631"><a href="#5631">5631</a></td></tr
><tr id="gr_svn141_5632"

><td id="5632"><a href="#5632">5632</a></td></tr
><tr id="gr_svn141_5633"

><td id="5633"><a href="#5633">5633</a></td></tr
><tr id="gr_svn141_5634"

><td id="5634"><a href="#5634">5634</a></td></tr
><tr id="gr_svn141_5635"

><td id="5635"><a href="#5635">5635</a></td></tr
><tr id="gr_svn141_5636"

><td id="5636"><a href="#5636">5636</a></td></tr
><tr id="gr_svn141_5637"

><td id="5637"><a href="#5637">5637</a></td></tr
><tr id="gr_svn141_5638"

><td id="5638"><a href="#5638">5638</a></td></tr
><tr id="gr_svn141_5639"

><td id="5639"><a href="#5639">5639</a></td></tr
><tr id="gr_svn141_5640"

><td id="5640"><a href="#5640">5640</a></td></tr
><tr id="gr_svn141_5641"

><td id="5641"><a href="#5641">5641</a></td></tr
><tr id="gr_svn141_5642"

><td id="5642"><a href="#5642">5642</a></td></tr
><tr id="gr_svn141_5643"

><td id="5643"><a href="#5643">5643</a></td></tr
><tr id="gr_svn141_5644"

><td id="5644"><a href="#5644">5644</a></td></tr
><tr id="gr_svn141_5645"

><td id="5645"><a href="#5645">5645</a></td></tr
><tr id="gr_svn141_5646"

><td id="5646"><a href="#5646">5646</a></td></tr
><tr id="gr_svn141_5647"

><td id="5647"><a href="#5647">5647</a></td></tr
><tr id="gr_svn141_5648"

><td id="5648"><a href="#5648">5648</a></td></tr
><tr id="gr_svn141_5649"

><td id="5649"><a href="#5649">5649</a></td></tr
><tr id="gr_svn141_5650"

><td id="5650"><a href="#5650">5650</a></td></tr
><tr id="gr_svn141_5651"

><td id="5651"><a href="#5651">5651</a></td></tr
><tr id="gr_svn141_5652"

><td id="5652"><a href="#5652">5652</a></td></tr
><tr id="gr_svn141_5653"

><td id="5653"><a href="#5653">5653</a></td></tr
><tr id="gr_svn141_5654"

><td id="5654"><a href="#5654">5654</a></td></tr
><tr id="gr_svn141_5655"

><td id="5655"><a href="#5655">5655</a></td></tr
><tr id="gr_svn141_5656"

><td id="5656"><a href="#5656">5656</a></td></tr
><tr id="gr_svn141_5657"

><td id="5657"><a href="#5657">5657</a></td></tr
><tr id="gr_svn141_5658"

><td id="5658"><a href="#5658">5658</a></td></tr
><tr id="gr_svn141_5659"

><td id="5659"><a href="#5659">5659</a></td></tr
><tr id="gr_svn141_5660"

><td id="5660"><a href="#5660">5660</a></td></tr
><tr id="gr_svn141_5661"

><td id="5661"><a href="#5661">5661</a></td></tr
><tr id="gr_svn141_5662"

><td id="5662"><a href="#5662">5662</a></td></tr
><tr id="gr_svn141_5663"

><td id="5663"><a href="#5663">5663</a></td></tr
><tr id="gr_svn141_5664"

><td id="5664"><a href="#5664">5664</a></td></tr
><tr id="gr_svn141_5665"

><td id="5665"><a href="#5665">5665</a></td></tr
><tr id="gr_svn141_5666"

><td id="5666"><a href="#5666">5666</a></td></tr
><tr id="gr_svn141_5667"

><td id="5667"><a href="#5667">5667</a></td></tr
><tr id="gr_svn141_5668"

><td id="5668"><a href="#5668">5668</a></td></tr
><tr id="gr_svn141_5669"

><td id="5669"><a href="#5669">5669</a></td></tr
><tr id="gr_svn141_5670"

><td id="5670"><a href="#5670">5670</a></td></tr
><tr id="gr_svn141_5671"

><td id="5671"><a href="#5671">5671</a></td></tr
><tr id="gr_svn141_5672"

><td id="5672"><a href="#5672">5672</a></td></tr
><tr id="gr_svn141_5673"

><td id="5673"><a href="#5673">5673</a></td></tr
><tr id="gr_svn141_5674"

><td id="5674"><a href="#5674">5674</a></td></tr
><tr id="gr_svn141_5675"

><td id="5675"><a href="#5675">5675</a></td></tr
><tr id="gr_svn141_5676"

><td id="5676"><a href="#5676">5676</a></td></tr
><tr id="gr_svn141_5677"

><td id="5677"><a href="#5677">5677</a></td></tr
><tr id="gr_svn141_5678"

><td id="5678"><a href="#5678">5678</a></td></tr
><tr id="gr_svn141_5679"

><td id="5679"><a href="#5679">5679</a></td></tr
><tr id="gr_svn141_5680"

><td id="5680"><a href="#5680">5680</a></td></tr
><tr id="gr_svn141_5681"

><td id="5681"><a href="#5681">5681</a></td></tr
><tr id="gr_svn141_5682"

><td id="5682"><a href="#5682">5682</a></td></tr
><tr id="gr_svn141_5683"

><td id="5683"><a href="#5683">5683</a></td></tr
><tr id="gr_svn141_5684"

><td id="5684"><a href="#5684">5684</a></td></tr
><tr id="gr_svn141_5685"

><td id="5685"><a href="#5685">5685</a></td></tr
><tr id="gr_svn141_5686"

><td id="5686"><a href="#5686">5686</a></td></tr
><tr id="gr_svn141_5687"

><td id="5687"><a href="#5687">5687</a></td></tr
><tr id="gr_svn141_5688"

><td id="5688"><a href="#5688">5688</a></td></tr
><tr id="gr_svn141_5689"

><td id="5689"><a href="#5689">5689</a></td></tr
><tr id="gr_svn141_5690"

><td id="5690"><a href="#5690">5690</a></td></tr
><tr id="gr_svn141_5691"

><td id="5691"><a href="#5691">5691</a></td></tr
><tr id="gr_svn141_5692"

><td id="5692"><a href="#5692">5692</a></td></tr
><tr id="gr_svn141_5693"

><td id="5693"><a href="#5693">5693</a></td></tr
><tr id="gr_svn141_5694"

><td id="5694"><a href="#5694">5694</a></td></tr
><tr id="gr_svn141_5695"

><td id="5695"><a href="#5695">5695</a></td></tr
><tr id="gr_svn141_5696"

><td id="5696"><a href="#5696">5696</a></td></tr
><tr id="gr_svn141_5697"

><td id="5697"><a href="#5697">5697</a></td></tr
><tr id="gr_svn141_5698"

><td id="5698"><a href="#5698">5698</a></td></tr
><tr id="gr_svn141_5699"

><td id="5699"><a href="#5699">5699</a></td></tr
><tr id="gr_svn141_5700"

><td id="5700"><a href="#5700">5700</a></td></tr
><tr id="gr_svn141_5701"

><td id="5701"><a href="#5701">5701</a></td></tr
><tr id="gr_svn141_5702"

><td id="5702"><a href="#5702">5702</a></td></tr
><tr id="gr_svn141_5703"

><td id="5703"><a href="#5703">5703</a></td></tr
><tr id="gr_svn141_5704"

><td id="5704"><a href="#5704">5704</a></td></tr
><tr id="gr_svn141_5705"

><td id="5705"><a href="#5705">5705</a></td></tr
><tr id="gr_svn141_5706"

><td id="5706"><a href="#5706">5706</a></td></tr
><tr id="gr_svn141_5707"

><td id="5707"><a href="#5707">5707</a></td></tr
><tr id="gr_svn141_5708"

><td id="5708"><a href="#5708">5708</a></td></tr
><tr id="gr_svn141_5709"

><td id="5709"><a href="#5709">5709</a></td></tr
><tr id="gr_svn141_5710"

><td id="5710"><a href="#5710">5710</a></td></tr
><tr id="gr_svn141_5711"

><td id="5711"><a href="#5711">5711</a></td></tr
><tr id="gr_svn141_5712"

><td id="5712"><a href="#5712">5712</a></td></tr
><tr id="gr_svn141_5713"

><td id="5713"><a href="#5713">5713</a></td></tr
><tr id="gr_svn141_5714"

><td id="5714"><a href="#5714">5714</a></td></tr
><tr id="gr_svn141_5715"

><td id="5715"><a href="#5715">5715</a></td></tr
><tr id="gr_svn141_5716"

><td id="5716"><a href="#5716">5716</a></td></tr
><tr id="gr_svn141_5717"

><td id="5717"><a href="#5717">5717</a></td></tr
><tr id="gr_svn141_5718"

><td id="5718"><a href="#5718">5718</a></td></tr
><tr id="gr_svn141_5719"

><td id="5719"><a href="#5719">5719</a></td></tr
><tr id="gr_svn141_5720"

><td id="5720"><a href="#5720">5720</a></td></tr
><tr id="gr_svn141_5721"

><td id="5721"><a href="#5721">5721</a></td></tr
><tr id="gr_svn141_5722"

><td id="5722"><a href="#5722">5722</a></td></tr
><tr id="gr_svn141_5723"

><td id="5723"><a href="#5723">5723</a></td></tr
><tr id="gr_svn141_5724"

><td id="5724"><a href="#5724">5724</a></td></tr
><tr id="gr_svn141_5725"

><td id="5725"><a href="#5725">5725</a></td></tr
><tr id="gr_svn141_5726"

><td id="5726"><a href="#5726">5726</a></td></tr
><tr id="gr_svn141_5727"

><td id="5727"><a href="#5727">5727</a></td></tr
><tr id="gr_svn141_5728"

><td id="5728"><a href="#5728">5728</a></td></tr
><tr id="gr_svn141_5729"

><td id="5729"><a href="#5729">5729</a></td></tr
><tr id="gr_svn141_5730"

><td id="5730"><a href="#5730">5730</a></td></tr
><tr id="gr_svn141_5731"

><td id="5731"><a href="#5731">5731</a></td></tr
><tr id="gr_svn141_5732"

><td id="5732"><a href="#5732">5732</a></td></tr
><tr id="gr_svn141_5733"

><td id="5733"><a href="#5733">5733</a></td></tr
><tr id="gr_svn141_5734"

><td id="5734"><a href="#5734">5734</a></td></tr
><tr id="gr_svn141_5735"

><td id="5735"><a href="#5735">5735</a></td></tr
><tr id="gr_svn141_5736"

><td id="5736"><a href="#5736">5736</a></td></tr
><tr id="gr_svn141_5737"

><td id="5737"><a href="#5737">5737</a></td></tr
><tr id="gr_svn141_5738"

><td id="5738"><a href="#5738">5738</a></td></tr
><tr id="gr_svn141_5739"

><td id="5739"><a href="#5739">5739</a></td></tr
><tr id="gr_svn141_5740"

><td id="5740"><a href="#5740">5740</a></td></tr
><tr id="gr_svn141_5741"

><td id="5741"><a href="#5741">5741</a></td></tr
><tr id="gr_svn141_5742"

><td id="5742"><a href="#5742">5742</a></td></tr
><tr id="gr_svn141_5743"

><td id="5743"><a href="#5743">5743</a></td></tr
><tr id="gr_svn141_5744"

><td id="5744"><a href="#5744">5744</a></td></tr
><tr id="gr_svn141_5745"

><td id="5745"><a href="#5745">5745</a></td></tr
><tr id="gr_svn141_5746"

><td id="5746"><a href="#5746">5746</a></td></tr
><tr id="gr_svn141_5747"

><td id="5747"><a href="#5747">5747</a></td></tr
><tr id="gr_svn141_5748"

><td id="5748"><a href="#5748">5748</a></td></tr
><tr id="gr_svn141_5749"

><td id="5749"><a href="#5749">5749</a></td></tr
><tr id="gr_svn141_5750"

><td id="5750"><a href="#5750">5750</a></td></tr
><tr id="gr_svn141_5751"

><td id="5751"><a href="#5751">5751</a></td></tr
><tr id="gr_svn141_5752"

><td id="5752"><a href="#5752">5752</a></td></tr
><tr id="gr_svn141_5753"

><td id="5753"><a href="#5753">5753</a></td></tr
><tr id="gr_svn141_5754"

><td id="5754"><a href="#5754">5754</a></td></tr
><tr id="gr_svn141_5755"

><td id="5755"><a href="#5755">5755</a></td></tr
><tr id="gr_svn141_5756"

><td id="5756"><a href="#5756">5756</a></td></tr
><tr id="gr_svn141_5757"

><td id="5757"><a href="#5757">5757</a></td></tr
><tr id="gr_svn141_5758"

><td id="5758"><a href="#5758">5758</a></td></tr
><tr id="gr_svn141_5759"

><td id="5759"><a href="#5759">5759</a></td></tr
><tr id="gr_svn141_5760"

><td id="5760"><a href="#5760">5760</a></td></tr
><tr id="gr_svn141_5761"

><td id="5761"><a href="#5761">5761</a></td></tr
><tr id="gr_svn141_5762"

><td id="5762"><a href="#5762">5762</a></td></tr
><tr id="gr_svn141_5763"

><td id="5763"><a href="#5763">5763</a></td></tr
><tr id="gr_svn141_5764"

><td id="5764"><a href="#5764">5764</a></td></tr
><tr id="gr_svn141_5765"

><td id="5765"><a href="#5765">5765</a></td></tr
><tr id="gr_svn141_5766"

><td id="5766"><a href="#5766">5766</a></td></tr
><tr id="gr_svn141_5767"

><td id="5767"><a href="#5767">5767</a></td></tr
><tr id="gr_svn141_5768"

><td id="5768"><a href="#5768">5768</a></td></tr
><tr id="gr_svn141_5769"

><td id="5769"><a href="#5769">5769</a></td></tr
><tr id="gr_svn141_5770"

><td id="5770"><a href="#5770">5770</a></td></tr
><tr id="gr_svn141_5771"

><td id="5771"><a href="#5771">5771</a></td></tr
><tr id="gr_svn141_5772"

><td id="5772"><a href="#5772">5772</a></td></tr
><tr id="gr_svn141_5773"

><td id="5773"><a href="#5773">5773</a></td></tr
><tr id="gr_svn141_5774"

><td id="5774"><a href="#5774">5774</a></td></tr
><tr id="gr_svn141_5775"

><td id="5775"><a href="#5775">5775</a></td></tr
><tr id="gr_svn141_5776"

><td id="5776"><a href="#5776">5776</a></td></tr
><tr id="gr_svn141_5777"

><td id="5777"><a href="#5777">5777</a></td></tr
><tr id="gr_svn141_5778"

><td id="5778"><a href="#5778">5778</a></td></tr
><tr id="gr_svn141_5779"

><td id="5779"><a href="#5779">5779</a></td></tr
><tr id="gr_svn141_5780"

><td id="5780"><a href="#5780">5780</a></td></tr
><tr id="gr_svn141_5781"

><td id="5781"><a href="#5781">5781</a></td></tr
><tr id="gr_svn141_5782"

><td id="5782"><a href="#5782">5782</a></td></tr
><tr id="gr_svn141_5783"

><td id="5783"><a href="#5783">5783</a></td></tr
><tr id="gr_svn141_5784"

><td id="5784"><a href="#5784">5784</a></td></tr
><tr id="gr_svn141_5785"

><td id="5785"><a href="#5785">5785</a></td></tr
><tr id="gr_svn141_5786"

><td id="5786"><a href="#5786">5786</a></td></tr
><tr id="gr_svn141_5787"

><td id="5787"><a href="#5787">5787</a></td></tr
><tr id="gr_svn141_5788"

><td id="5788"><a href="#5788">5788</a></td></tr
><tr id="gr_svn141_5789"

><td id="5789"><a href="#5789">5789</a></td></tr
><tr id="gr_svn141_5790"

><td id="5790"><a href="#5790">5790</a></td></tr
><tr id="gr_svn141_5791"

><td id="5791"><a href="#5791">5791</a></td></tr
><tr id="gr_svn141_5792"

><td id="5792"><a href="#5792">5792</a></td></tr
><tr id="gr_svn141_5793"

><td id="5793"><a href="#5793">5793</a></td></tr
><tr id="gr_svn141_5794"

><td id="5794"><a href="#5794">5794</a></td></tr
><tr id="gr_svn141_5795"

><td id="5795"><a href="#5795">5795</a></td></tr
><tr id="gr_svn141_5796"

><td id="5796"><a href="#5796">5796</a></td></tr
><tr id="gr_svn141_5797"

><td id="5797"><a href="#5797">5797</a></td></tr
><tr id="gr_svn141_5798"

><td id="5798"><a href="#5798">5798</a></td></tr
><tr id="gr_svn141_5799"

><td id="5799"><a href="#5799">5799</a></td></tr
><tr id="gr_svn141_5800"

><td id="5800"><a href="#5800">5800</a></td></tr
><tr id="gr_svn141_5801"

><td id="5801"><a href="#5801">5801</a></td></tr
><tr id="gr_svn141_5802"

><td id="5802"><a href="#5802">5802</a></td></tr
><tr id="gr_svn141_5803"

><td id="5803"><a href="#5803">5803</a></td></tr
><tr id="gr_svn141_5804"

><td id="5804"><a href="#5804">5804</a></td></tr
><tr id="gr_svn141_5805"

><td id="5805"><a href="#5805">5805</a></td></tr
><tr id="gr_svn141_5806"

><td id="5806"><a href="#5806">5806</a></td></tr
><tr id="gr_svn141_5807"

><td id="5807"><a href="#5807">5807</a></td></tr
><tr id="gr_svn141_5808"

><td id="5808"><a href="#5808">5808</a></td></tr
><tr id="gr_svn141_5809"

><td id="5809"><a href="#5809">5809</a></td></tr
><tr id="gr_svn141_5810"

><td id="5810"><a href="#5810">5810</a></td></tr
><tr id="gr_svn141_5811"

><td id="5811"><a href="#5811">5811</a></td></tr
><tr id="gr_svn141_5812"

><td id="5812"><a href="#5812">5812</a></td></tr
><tr id="gr_svn141_5813"

><td id="5813"><a href="#5813">5813</a></td></tr
><tr id="gr_svn141_5814"

><td id="5814"><a href="#5814">5814</a></td></tr
><tr id="gr_svn141_5815"

><td id="5815"><a href="#5815">5815</a></td></tr
><tr id="gr_svn141_5816"

><td id="5816"><a href="#5816">5816</a></td></tr
><tr id="gr_svn141_5817"

><td id="5817"><a href="#5817">5817</a></td></tr
><tr id="gr_svn141_5818"

><td id="5818"><a href="#5818">5818</a></td></tr
><tr id="gr_svn141_5819"

><td id="5819"><a href="#5819">5819</a></td></tr
><tr id="gr_svn141_5820"

><td id="5820"><a href="#5820">5820</a></td></tr
><tr id="gr_svn141_5821"

><td id="5821"><a href="#5821">5821</a></td></tr
><tr id="gr_svn141_5822"

><td id="5822"><a href="#5822">5822</a></td></tr
><tr id="gr_svn141_5823"

><td id="5823"><a href="#5823">5823</a></td></tr
><tr id="gr_svn141_5824"

><td id="5824"><a href="#5824">5824</a></td></tr
><tr id="gr_svn141_5825"

><td id="5825"><a href="#5825">5825</a></td></tr
><tr id="gr_svn141_5826"

><td id="5826"><a href="#5826">5826</a></td></tr
><tr id="gr_svn141_5827"

><td id="5827"><a href="#5827">5827</a></td></tr
><tr id="gr_svn141_5828"

><td id="5828"><a href="#5828">5828</a></td></tr
><tr id="gr_svn141_5829"

><td id="5829"><a href="#5829">5829</a></td></tr
><tr id="gr_svn141_5830"

><td id="5830"><a href="#5830">5830</a></td></tr
><tr id="gr_svn141_5831"

><td id="5831"><a href="#5831">5831</a></td></tr
><tr id="gr_svn141_5832"

><td id="5832"><a href="#5832">5832</a></td></tr
><tr id="gr_svn141_5833"

><td id="5833"><a href="#5833">5833</a></td></tr
><tr id="gr_svn141_5834"

><td id="5834"><a href="#5834">5834</a></td></tr
><tr id="gr_svn141_5835"

><td id="5835"><a href="#5835">5835</a></td></tr
><tr id="gr_svn141_5836"

><td id="5836"><a href="#5836">5836</a></td></tr
><tr id="gr_svn141_5837"

><td id="5837"><a href="#5837">5837</a></td></tr
><tr id="gr_svn141_5838"

><td id="5838"><a href="#5838">5838</a></td></tr
><tr id="gr_svn141_5839"

><td id="5839"><a href="#5839">5839</a></td></tr
><tr id="gr_svn141_5840"

><td id="5840"><a href="#5840">5840</a></td></tr
><tr id="gr_svn141_5841"

><td id="5841"><a href="#5841">5841</a></td></tr
><tr id="gr_svn141_5842"

><td id="5842"><a href="#5842">5842</a></td></tr
><tr id="gr_svn141_5843"

><td id="5843"><a href="#5843">5843</a></td></tr
><tr id="gr_svn141_5844"

><td id="5844"><a href="#5844">5844</a></td></tr
><tr id="gr_svn141_5845"

><td id="5845"><a href="#5845">5845</a></td></tr
><tr id="gr_svn141_5846"

><td id="5846"><a href="#5846">5846</a></td></tr
><tr id="gr_svn141_5847"

><td id="5847"><a href="#5847">5847</a></td></tr
><tr id="gr_svn141_5848"

><td id="5848"><a href="#5848">5848</a></td></tr
><tr id="gr_svn141_5849"

><td id="5849"><a href="#5849">5849</a></td></tr
><tr id="gr_svn141_5850"

><td id="5850"><a href="#5850">5850</a></td></tr
><tr id="gr_svn141_5851"

><td id="5851"><a href="#5851">5851</a></td></tr
><tr id="gr_svn141_5852"

><td id="5852"><a href="#5852">5852</a></td></tr
><tr id="gr_svn141_5853"

><td id="5853"><a href="#5853">5853</a></td></tr
><tr id="gr_svn141_5854"

><td id="5854"><a href="#5854">5854</a></td></tr
><tr id="gr_svn141_5855"

><td id="5855"><a href="#5855">5855</a></td></tr
><tr id="gr_svn141_5856"

><td id="5856"><a href="#5856">5856</a></td></tr
><tr id="gr_svn141_5857"

><td id="5857"><a href="#5857">5857</a></td></tr
><tr id="gr_svn141_5858"

><td id="5858"><a href="#5858">5858</a></td></tr
><tr id="gr_svn141_5859"

><td id="5859"><a href="#5859">5859</a></td></tr
><tr id="gr_svn141_5860"

><td id="5860"><a href="#5860">5860</a></td></tr
><tr id="gr_svn141_5861"

><td id="5861"><a href="#5861">5861</a></td></tr
><tr id="gr_svn141_5862"

><td id="5862"><a href="#5862">5862</a></td></tr
><tr id="gr_svn141_5863"

><td id="5863"><a href="#5863">5863</a></td></tr
><tr id="gr_svn141_5864"

><td id="5864"><a href="#5864">5864</a></td></tr
><tr id="gr_svn141_5865"

><td id="5865"><a href="#5865">5865</a></td></tr
><tr id="gr_svn141_5866"

><td id="5866"><a href="#5866">5866</a></td></tr
><tr id="gr_svn141_5867"

><td id="5867"><a href="#5867">5867</a></td></tr
><tr id="gr_svn141_5868"

><td id="5868"><a href="#5868">5868</a></td></tr
><tr id="gr_svn141_5869"

><td id="5869"><a href="#5869">5869</a></td></tr
><tr id="gr_svn141_5870"

><td id="5870"><a href="#5870">5870</a></td></tr
><tr id="gr_svn141_5871"

><td id="5871"><a href="#5871">5871</a></td></tr
><tr id="gr_svn141_5872"

><td id="5872"><a href="#5872">5872</a></td></tr
><tr id="gr_svn141_5873"

><td id="5873"><a href="#5873">5873</a></td></tr
><tr id="gr_svn141_5874"

><td id="5874"><a href="#5874">5874</a></td></tr
><tr id="gr_svn141_5875"

><td id="5875"><a href="#5875">5875</a></td></tr
><tr id="gr_svn141_5876"

><td id="5876"><a href="#5876">5876</a></td></tr
><tr id="gr_svn141_5877"

><td id="5877"><a href="#5877">5877</a></td></tr
><tr id="gr_svn141_5878"

><td id="5878"><a href="#5878">5878</a></td></tr
><tr id="gr_svn141_5879"

><td id="5879"><a href="#5879">5879</a></td></tr
><tr id="gr_svn141_5880"

><td id="5880"><a href="#5880">5880</a></td></tr
><tr id="gr_svn141_5881"

><td id="5881"><a href="#5881">5881</a></td></tr
><tr id="gr_svn141_5882"

><td id="5882"><a href="#5882">5882</a></td></tr
><tr id="gr_svn141_5883"

><td id="5883"><a href="#5883">5883</a></td></tr
><tr id="gr_svn141_5884"

><td id="5884"><a href="#5884">5884</a></td></tr
><tr id="gr_svn141_5885"

><td id="5885"><a href="#5885">5885</a></td></tr
><tr id="gr_svn141_5886"

><td id="5886"><a href="#5886">5886</a></td></tr
><tr id="gr_svn141_5887"

><td id="5887"><a href="#5887">5887</a></td></tr
><tr id="gr_svn141_5888"

><td id="5888"><a href="#5888">5888</a></td></tr
><tr id="gr_svn141_5889"

><td id="5889"><a href="#5889">5889</a></td></tr
><tr id="gr_svn141_5890"

><td id="5890"><a href="#5890">5890</a></td></tr
><tr id="gr_svn141_5891"

><td id="5891"><a href="#5891">5891</a></td></tr
><tr id="gr_svn141_5892"

><td id="5892"><a href="#5892">5892</a></td></tr
><tr id="gr_svn141_5893"

><td id="5893"><a href="#5893">5893</a></td></tr
><tr id="gr_svn141_5894"

><td id="5894"><a href="#5894">5894</a></td></tr
><tr id="gr_svn141_5895"

><td id="5895"><a href="#5895">5895</a></td></tr
><tr id="gr_svn141_5896"

><td id="5896"><a href="#5896">5896</a></td></tr
><tr id="gr_svn141_5897"

><td id="5897"><a href="#5897">5897</a></td></tr
><tr id="gr_svn141_5898"

><td id="5898"><a href="#5898">5898</a></td></tr
><tr id="gr_svn141_5899"

><td id="5899"><a href="#5899">5899</a></td></tr
><tr id="gr_svn141_5900"

><td id="5900"><a href="#5900">5900</a></td></tr
><tr id="gr_svn141_5901"

><td id="5901"><a href="#5901">5901</a></td></tr
><tr id="gr_svn141_5902"

><td id="5902"><a href="#5902">5902</a></td></tr
><tr id="gr_svn141_5903"

><td id="5903"><a href="#5903">5903</a></td></tr
><tr id="gr_svn141_5904"

><td id="5904"><a href="#5904">5904</a></td></tr
><tr id="gr_svn141_5905"

><td id="5905"><a href="#5905">5905</a></td></tr
><tr id="gr_svn141_5906"

><td id="5906"><a href="#5906">5906</a></td></tr
><tr id="gr_svn141_5907"

><td id="5907"><a href="#5907">5907</a></td></tr
><tr id="gr_svn141_5908"

><td id="5908"><a href="#5908">5908</a></td></tr
><tr id="gr_svn141_5909"

><td id="5909"><a href="#5909">5909</a></td></tr
><tr id="gr_svn141_5910"

><td id="5910"><a href="#5910">5910</a></td></tr
><tr id="gr_svn141_5911"

><td id="5911"><a href="#5911">5911</a></td></tr
><tr id="gr_svn141_5912"

><td id="5912"><a href="#5912">5912</a></td></tr
><tr id="gr_svn141_5913"

><td id="5913"><a href="#5913">5913</a></td></tr
><tr id="gr_svn141_5914"

><td id="5914"><a href="#5914">5914</a></td></tr
><tr id="gr_svn141_5915"

><td id="5915"><a href="#5915">5915</a></td></tr
><tr id="gr_svn141_5916"

><td id="5916"><a href="#5916">5916</a></td></tr
><tr id="gr_svn141_5917"

><td id="5917"><a href="#5917">5917</a></td></tr
><tr id="gr_svn141_5918"

><td id="5918"><a href="#5918">5918</a></td></tr
><tr id="gr_svn141_5919"

><td id="5919"><a href="#5919">5919</a></td></tr
><tr id="gr_svn141_5920"

><td id="5920"><a href="#5920">5920</a></td></tr
><tr id="gr_svn141_5921"

><td id="5921"><a href="#5921">5921</a></td></tr
><tr id="gr_svn141_5922"

><td id="5922"><a href="#5922">5922</a></td></tr
><tr id="gr_svn141_5923"

><td id="5923"><a href="#5923">5923</a></td></tr
><tr id="gr_svn141_5924"

><td id="5924"><a href="#5924">5924</a></td></tr
><tr id="gr_svn141_5925"

><td id="5925"><a href="#5925">5925</a></td></tr
><tr id="gr_svn141_5926"

><td id="5926"><a href="#5926">5926</a></td></tr
><tr id="gr_svn141_5927"

><td id="5927"><a href="#5927">5927</a></td></tr
><tr id="gr_svn141_5928"

><td id="5928"><a href="#5928">5928</a></td></tr
><tr id="gr_svn141_5929"

><td id="5929"><a href="#5929">5929</a></td></tr
><tr id="gr_svn141_5930"

><td id="5930"><a href="#5930">5930</a></td></tr
><tr id="gr_svn141_5931"

><td id="5931"><a href="#5931">5931</a></td></tr
><tr id="gr_svn141_5932"

><td id="5932"><a href="#5932">5932</a></td></tr
><tr id="gr_svn141_5933"

><td id="5933"><a href="#5933">5933</a></td></tr
><tr id="gr_svn141_5934"

><td id="5934"><a href="#5934">5934</a></td></tr
><tr id="gr_svn141_5935"

><td id="5935"><a href="#5935">5935</a></td></tr
><tr id="gr_svn141_5936"

><td id="5936"><a href="#5936">5936</a></td></tr
><tr id="gr_svn141_5937"

><td id="5937"><a href="#5937">5937</a></td></tr
><tr id="gr_svn141_5938"

><td id="5938"><a href="#5938">5938</a></td></tr
><tr id="gr_svn141_5939"

><td id="5939"><a href="#5939">5939</a></td></tr
><tr id="gr_svn141_5940"

><td id="5940"><a href="#5940">5940</a></td></tr
><tr id="gr_svn141_5941"

><td id="5941"><a href="#5941">5941</a></td></tr
><tr id="gr_svn141_5942"

><td id="5942"><a href="#5942">5942</a></td></tr
><tr id="gr_svn141_5943"

><td id="5943"><a href="#5943">5943</a></td></tr
><tr id="gr_svn141_5944"

><td id="5944"><a href="#5944">5944</a></td></tr
><tr id="gr_svn141_5945"

><td id="5945"><a href="#5945">5945</a></td></tr
><tr id="gr_svn141_5946"

><td id="5946"><a href="#5946">5946</a></td></tr
><tr id="gr_svn141_5947"

><td id="5947"><a href="#5947">5947</a></td></tr
><tr id="gr_svn141_5948"

><td id="5948"><a href="#5948">5948</a></td></tr
><tr id="gr_svn141_5949"

><td id="5949"><a href="#5949">5949</a></td></tr
><tr id="gr_svn141_5950"

><td id="5950"><a href="#5950">5950</a></td></tr
><tr id="gr_svn141_5951"

><td id="5951"><a href="#5951">5951</a></td></tr
><tr id="gr_svn141_5952"

><td id="5952"><a href="#5952">5952</a></td></tr
><tr id="gr_svn141_5953"

><td id="5953"><a href="#5953">5953</a></td></tr
><tr id="gr_svn141_5954"

><td id="5954"><a href="#5954">5954</a></td></tr
><tr id="gr_svn141_5955"

><td id="5955"><a href="#5955">5955</a></td></tr
><tr id="gr_svn141_5956"

><td id="5956"><a href="#5956">5956</a></td></tr
><tr id="gr_svn141_5957"

><td id="5957"><a href="#5957">5957</a></td></tr
><tr id="gr_svn141_5958"

><td id="5958"><a href="#5958">5958</a></td></tr
><tr id="gr_svn141_5959"

><td id="5959"><a href="#5959">5959</a></td></tr
><tr id="gr_svn141_5960"

><td id="5960"><a href="#5960">5960</a></td></tr
><tr id="gr_svn141_5961"

><td id="5961"><a href="#5961">5961</a></td></tr
><tr id="gr_svn141_5962"

><td id="5962"><a href="#5962">5962</a></td></tr
><tr id="gr_svn141_5963"

><td id="5963"><a href="#5963">5963</a></td></tr
><tr id="gr_svn141_5964"

><td id="5964"><a href="#5964">5964</a></td></tr
><tr id="gr_svn141_5965"

><td id="5965"><a href="#5965">5965</a></td></tr
><tr id="gr_svn141_5966"

><td id="5966"><a href="#5966">5966</a></td></tr
><tr id="gr_svn141_5967"

><td id="5967"><a href="#5967">5967</a></td></tr
><tr id="gr_svn141_5968"

><td id="5968"><a href="#5968">5968</a></td></tr
><tr id="gr_svn141_5969"

><td id="5969"><a href="#5969">5969</a></td></tr
><tr id="gr_svn141_5970"

><td id="5970"><a href="#5970">5970</a></td></tr
><tr id="gr_svn141_5971"

><td id="5971"><a href="#5971">5971</a></td></tr
><tr id="gr_svn141_5972"

><td id="5972"><a href="#5972">5972</a></td></tr
><tr id="gr_svn141_5973"

><td id="5973"><a href="#5973">5973</a></td></tr
><tr id="gr_svn141_5974"

><td id="5974"><a href="#5974">5974</a></td></tr
><tr id="gr_svn141_5975"

><td id="5975"><a href="#5975">5975</a></td></tr
><tr id="gr_svn141_5976"

><td id="5976"><a href="#5976">5976</a></td></tr
><tr id="gr_svn141_5977"

><td id="5977"><a href="#5977">5977</a></td></tr
><tr id="gr_svn141_5978"

><td id="5978"><a href="#5978">5978</a></td></tr
><tr id="gr_svn141_5979"

><td id="5979"><a href="#5979">5979</a></td></tr
><tr id="gr_svn141_5980"

><td id="5980"><a href="#5980">5980</a></td></tr
><tr id="gr_svn141_5981"

><td id="5981"><a href="#5981">5981</a></td></tr
><tr id="gr_svn141_5982"

><td id="5982"><a href="#5982">5982</a></td></tr
><tr id="gr_svn141_5983"

><td id="5983"><a href="#5983">5983</a></td></tr
><tr id="gr_svn141_5984"

><td id="5984"><a href="#5984">5984</a></td></tr
><tr id="gr_svn141_5985"

><td id="5985"><a href="#5985">5985</a></td></tr
><tr id="gr_svn141_5986"

><td id="5986"><a href="#5986">5986</a></td></tr
><tr id="gr_svn141_5987"

><td id="5987"><a href="#5987">5987</a></td></tr
><tr id="gr_svn141_5988"

><td id="5988"><a href="#5988">5988</a></td></tr
><tr id="gr_svn141_5989"

><td id="5989"><a href="#5989">5989</a></td></tr
><tr id="gr_svn141_5990"

><td id="5990"><a href="#5990">5990</a></td></tr
><tr id="gr_svn141_5991"

><td id="5991"><a href="#5991">5991</a></td></tr
><tr id="gr_svn141_5992"

><td id="5992"><a href="#5992">5992</a></td></tr
><tr id="gr_svn141_5993"

><td id="5993"><a href="#5993">5993</a></td></tr
><tr id="gr_svn141_5994"

><td id="5994"><a href="#5994">5994</a></td></tr
><tr id="gr_svn141_5995"

><td id="5995"><a href="#5995">5995</a></td></tr
><tr id="gr_svn141_5996"

><td id="5996"><a href="#5996">5996</a></td></tr
><tr id="gr_svn141_5997"

><td id="5997"><a href="#5997">5997</a></td></tr
><tr id="gr_svn141_5998"

><td id="5998"><a href="#5998">5998</a></td></tr
><tr id="gr_svn141_5999"

><td id="5999"><a href="#5999">5999</a></td></tr
><tr id="gr_svn141_6000"

><td id="6000"><a href="#6000">6000</a></td></tr
><tr id="gr_svn141_6001"

><td id="6001"><a href="#6001">6001</a></td></tr
><tr id="gr_svn141_6002"

><td id="6002"><a href="#6002">6002</a></td></tr
><tr id="gr_svn141_6003"

><td id="6003"><a href="#6003">6003</a></td></tr
><tr id="gr_svn141_6004"

><td id="6004"><a href="#6004">6004</a></td></tr
><tr id="gr_svn141_6005"

><td id="6005"><a href="#6005">6005</a></td></tr
><tr id="gr_svn141_6006"

><td id="6006"><a href="#6006">6006</a></td></tr
><tr id="gr_svn141_6007"

><td id="6007"><a href="#6007">6007</a></td></tr
><tr id="gr_svn141_6008"

><td id="6008"><a href="#6008">6008</a></td></tr
><tr id="gr_svn141_6009"

><td id="6009"><a href="#6009">6009</a></td></tr
><tr id="gr_svn141_6010"

><td id="6010"><a href="#6010">6010</a></td></tr
><tr id="gr_svn141_6011"

><td id="6011"><a href="#6011">6011</a></td></tr
><tr id="gr_svn141_6012"

><td id="6012"><a href="#6012">6012</a></td></tr
><tr id="gr_svn141_6013"

><td id="6013"><a href="#6013">6013</a></td></tr
><tr id="gr_svn141_6014"

><td id="6014"><a href="#6014">6014</a></td></tr
><tr id="gr_svn141_6015"

><td id="6015"><a href="#6015">6015</a></td></tr
><tr id="gr_svn141_6016"

><td id="6016"><a href="#6016">6016</a></td></tr
><tr id="gr_svn141_6017"

><td id="6017"><a href="#6017">6017</a></td></tr
><tr id="gr_svn141_6018"

><td id="6018"><a href="#6018">6018</a></td></tr
><tr id="gr_svn141_6019"

><td id="6019"><a href="#6019">6019</a></td></tr
><tr id="gr_svn141_6020"

><td id="6020"><a href="#6020">6020</a></td></tr
><tr id="gr_svn141_6021"

><td id="6021"><a href="#6021">6021</a></td></tr
><tr id="gr_svn141_6022"

><td id="6022"><a href="#6022">6022</a></td></tr
><tr id="gr_svn141_6023"

><td id="6023"><a href="#6023">6023</a></td></tr
><tr id="gr_svn141_6024"

><td id="6024"><a href="#6024">6024</a></td></tr
><tr id="gr_svn141_6025"

><td id="6025"><a href="#6025">6025</a></td></tr
><tr id="gr_svn141_6026"

><td id="6026"><a href="#6026">6026</a></td></tr
><tr id="gr_svn141_6027"

><td id="6027"><a href="#6027">6027</a></td></tr
><tr id="gr_svn141_6028"

><td id="6028"><a href="#6028">6028</a></td></tr
><tr id="gr_svn141_6029"

><td id="6029"><a href="#6029">6029</a></td></tr
><tr id="gr_svn141_6030"

><td id="6030"><a href="#6030">6030</a></td></tr
><tr id="gr_svn141_6031"

><td id="6031"><a href="#6031">6031</a></td></tr
><tr id="gr_svn141_6032"

><td id="6032"><a href="#6032">6032</a></td></tr
><tr id="gr_svn141_6033"

><td id="6033"><a href="#6033">6033</a></td></tr
><tr id="gr_svn141_6034"

><td id="6034"><a href="#6034">6034</a></td></tr
><tr id="gr_svn141_6035"

><td id="6035"><a href="#6035">6035</a></td></tr
><tr id="gr_svn141_6036"

><td id="6036"><a href="#6036">6036</a></td></tr
><tr id="gr_svn141_6037"

><td id="6037"><a href="#6037">6037</a></td></tr
><tr id="gr_svn141_6038"

><td id="6038"><a href="#6038">6038</a></td></tr
><tr id="gr_svn141_6039"

><td id="6039"><a href="#6039">6039</a></td></tr
><tr id="gr_svn141_6040"

><td id="6040"><a href="#6040">6040</a></td></tr
><tr id="gr_svn141_6041"

><td id="6041"><a href="#6041">6041</a></td></tr
><tr id="gr_svn141_6042"

><td id="6042"><a href="#6042">6042</a></td></tr
><tr id="gr_svn141_6043"

><td id="6043"><a href="#6043">6043</a></td></tr
><tr id="gr_svn141_6044"

><td id="6044"><a href="#6044">6044</a></td></tr
><tr id="gr_svn141_6045"

><td id="6045"><a href="#6045">6045</a></td></tr
><tr id="gr_svn141_6046"

><td id="6046"><a href="#6046">6046</a></td></tr
><tr id="gr_svn141_6047"

><td id="6047"><a href="#6047">6047</a></td></tr
><tr id="gr_svn141_6048"

><td id="6048"><a href="#6048">6048</a></td></tr
><tr id="gr_svn141_6049"

><td id="6049"><a href="#6049">6049</a></td></tr
><tr id="gr_svn141_6050"

><td id="6050"><a href="#6050">6050</a></td></tr
><tr id="gr_svn141_6051"

><td id="6051"><a href="#6051">6051</a></td></tr
><tr id="gr_svn141_6052"

><td id="6052"><a href="#6052">6052</a></td></tr
><tr id="gr_svn141_6053"

><td id="6053"><a href="#6053">6053</a></td></tr
><tr id="gr_svn141_6054"

><td id="6054"><a href="#6054">6054</a></td></tr
><tr id="gr_svn141_6055"

><td id="6055"><a href="#6055">6055</a></td></tr
><tr id="gr_svn141_6056"

><td id="6056"><a href="#6056">6056</a></td></tr
><tr id="gr_svn141_6057"

><td id="6057"><a href="#6057">6057</a></td></tr
><tr id="gr_svn141_6058"

><td id="6058"><a href="#6058">6058</a></td></tr
><tr id="gr_svn141_6059"

><td id="6059"><a href="#6059">6059</a></td></tr
><tr id="gr_svn141_6060"

><td id="6060"><a href="#6060">6060</a></td></tr
><tr id="gr_svn141_6061"

><td id="6061"><a href="#6061">6061</a></td></tr
><tr id="gr_svn141_6062"

><td id="6062"><a href="#6062">6062</a></td></tr
><tr id="gr_svn141_6063"

><td id="6063"><a href="#6063">6063</a></td></tr
><tr id="gr_svn141_6064"

><td id="6064"><a href="#6064">6064</a></td></tr
><tr id="gr_svn141_6065"

><td id="6065"><a href="#6065">6065</a></td></tr
><tr id="gr_svn141_6066"

><td id="6066"><a href="#6066">6066</a></td></tr
><tr id="gr_svn141_6067"

><td id="6067"><a href="#6067">6067</a></td></tr
><tr id="gr_svn141_6068"

><td id="6068"><a href="#6068">6068</a></td></tr
><tr id="gr_svn141_6069"

><td id="6069"><a href="#6069">6069</a></td></tr
><tr id="gr_svn141_6070"

><td id="6070"><a href="#6070">6070</a></td></tr
><tr id="gr_svn141_6071"

><td id="6071"><a href="#6071">6071</a></td></tr
><tr id="gr_svn141_6072"

><td id="6072"><a href="#6072">6072</a></td></tr
><tr id="gr_svn141_6073"

><td id="6073"><a href="#6073">6073</a></td></tr
><tr id="gr_svn141_6074"

><td id="6074"><a href="#6074">6074</a></td></tr
><tr id="gr_svn141_6075"

><td id="6075"><a href="#6075">6075</a></td></tr
><tr id="gr_svn141_6076"

><td id="6076"><a href="#6076">6076</a></td></tr
><tr id="gr_svn141_6077"

><td id="6077"><a href="#6077">6077</a></td></tr
><tr id="gr_svn141_6078"

><td id="6078"><a href="#6078">6078</a></td></tr
><tr id="gr_svn141_6079"

><td id="6079"><a href="#6079">6079</a></td></tr
><tr id="gr_svn141_6080"

><td id="6080"><a href="#6080">6080</a></td></tr
><tr id="gr_svn141_6081"

><td id="6081"><a href="#6081">6081</a></td></tr
><tr id="gr_svn141_6082"

><td id="6082"><a href="#6082">6082</a></td></tr
><tr id="gr_svn141_6083"

><td id="6083"><a href="#6083">6083</a></td></tr
><tr id="gr_svn141_6084"

><td id="6084"><a href="#6084">6084</a></td></tr
><tr id="gr_svn141_6085"

><td id="6085"><a href="#6085">6085</a></td></tr
><tr id="gr_svn141_6086"

><td id="6086"><a href="#6086">6086</a></td></tr
><tr id="gr_svn141_6087"

><td id="6087"><a href="#6087">6087</a></td></tr
><tr id="gr_svn141_6088"

><td id="6088"><a href="#6088">6088</a></td></tr
><tr id="gr_svn141_6089"

><td id="6089"><a href="#6089">6089</a></td></tr
><tr id="gr_svn141_6090"

><td id="6090"><a href="#6090">6090</a></td></tr
><tr id="gr_svn141_6091"

><td id="6091"><a href="#6091">6091</a></td></tr
><tr id="gr_svn141_6092"

><td id="6092"><a href="#6092">6092</a></td></tr
><tr id="gr_svn141_6093"

><td id="6093"><a href="#6093">6093</a></td></tr
><tr id="gr_svn141_6094"

><td id="6094"><a href="#6094">6094</a></td></tr
><tr id="gr_svn141_6095"

><td id="6095"><a href="#6095">6095</a></td></tr
><tr id="gr_svn141_6096"

><td id="6096"><a href="#6096">6096</a></td></tr
><tr id="gr_svn141_6097"

><td id="6097"><a href="#6097">6097</a></td></tr
><tr id="gr_svn141_6098"

><td id="6098"><a href="#6098">6098</a></td></tr
><tr id="gr_svn141_6099"

><td id="6099"><a href="#6099">6099</a></td></tr
><tr id="gr_svn141_6100"

><td id="6100"><a href="#6100">6100</a></td></tr
><tr id="gr_svn141_6101"

><td id="6101"><a href="#6101">6101</a></td></tr
><tr id="gr_svn141_6102"

><td id="6102"><a href="#6102">6102</a></td></tr
><tr id="gr_svn141_6103"

><td id="6103"><a href="#6103">6103</a></td></tr
><tr id="gr_svn141_6104"

><td id="6104"><a href="#6104">6104</a></td></tr
><tr id="gr_svn141_6105"

><td id="6105"><a href="#6105">6105</a></td></tr
><tr id="gr_svn141_6106"

><td id="6106"><a href="#6106">6106</a></td></tr
><tr id="gr_svn141_6107"

><td id="6107"><a href="#6107">6107</a></td></tr
><tr id="gr_svn141_6108"

><td id="6108"><a href="#6108">6108</a></td></tr
><tr id="gr_svn141_6109"

><td id="6109"><a href="#6109">6109</a></td></tr
><tr id="gr_svn141_6110"

><td id="6110"><a href="#6110">6110</a></td></tr
><tr id="gr_svn141_6111"

><td id="6111"><a href="#6111">6111</a></td></tr
><tr id="gr_svn141_6112"

><td id="6112"><a href="#6112">6112</a></td></tr
><tr id="gr_svn141_6113"

><td id="6113"><a href="#6113">6113</a></td></tr
><tr id="gr_svn141_6114"

><td id="6114"><a href="#6114">6114</a></td></tr
><tr id="gr_svn141_6115"

><td id="6115"><a href="#6115">6115</a></td></tr
><tr id="gr_svn141_6116"

><td id="6116"><a href="#6116">6116</a></td></tr
><tr id="gr_svn141_6117"

><td id="6117"><a href="#6117">6117</a></td></tr
><tr id="gr_svn141_6118"

><td id="6118"><a href="#6118">6118</a></td></tr
><tr id="gr_svn141_6119"

><td id="6119"><a href="#6119">6119</a></td></tr
><tr id="gr_svn141_6120"

><td id="6120"><a href="#6120">6120</a></td></tr
><tr id="gr_svn141_6121"

><td id="6121"><a href="#6121">6121</a></td></tr
><tr id="gr_svn141_6122"

><td id="6122"><a href="#6122">6122</a></td></tr
><tr id="gr_svn141_6123"

><td id="6123"><a href="#6123">6123</a></td></tr
><tr id="gr_svn141_6124"

><td id="6124"><a href="#6124">6124</a></td></tr
><tr id="gr_svn141_6125"

><td id="6125"><a href="#6125">6125</a></td></tr
><tr id="gr_svn141_6126"

><td id="6126"><a href="#6126">6126</a></td></tr
><tr id="gr_svn141_6127"

><td id="6127"><a href="#6127">6127</a></td></tr
><tr id="gr_svn141_6128"

><td id="6128"><a href="#6128">6128</a></td></tr
><tr id="gr_svn141_6129"

><td id="6129"><a href="#6129">6129</a></td></tr
><tr id="gr_svn141_6130"

><td id="6130"><a href="#6130">6130</a></td></tr
><tr id="gr_svn141_6131"

><td id="6131"><a href="#6131">6131</a></td></tr
><tr id="gr_svn141_6132"

><td id="6132"><a href="#6132">6132</a></td></tr
><tr id="gr_svn141_6133"

><td id="6133"><a href="#6133">6133</a></td></tr
><tr id="gr_svn141_6134"

><td id="6134"><a href="#6134">6134</a></td></tr
><tr id="gr_svn141_6135"

><td id="6135"><a href="#6135">6135</a></td></tr
><tr id="gr_svn141_6136"

><td id="6136"><a href="#6136">6136</a></td></tr
><tr id="gr_svn141_6137"

><td id="6137"><a href="#6137">6137</a></td></tr
><tr id="gr_svn141_6138"

><td id="6138"><a href="#6138">6138</a></td></tr
><tr id="gr_svn141_6139"

><td id="6139"><a href="#6139">6139</a></td></tr
><tr id="gr_svn141_6140"

><td id="6140"><a href="#6140">6140</a></td></tr
><tr id="gr_svn141_6141"

><td id="6141"><a href="#6141">6141</a></td></tr
><tr id="gr_svn141_6142"

><td id="6142"><a href="#6142">6142</a></td></tr
><tr id="gr_svn141_6143"

><td id="6143"><a href="#6143">6143</a></td></tr
><tr id="gr_svn141_6144"

><td id="6144"><a href="#6144">6144</a></td></tr
><tr id="gr_svn141_6145"

><td id="6145"><a href="#6145">6145</a></td></tr
><tr id="gr_svn141_6146"

><td id="6146"><a href="#6146">6146</a></td></tr
><tr id="gr_svn141_6147"

><td id="6147"><a href="#6147">6147</a></td></tr
><tr id="gr_svn141_6148"

><td id="6148"><a href="#6148">6148</a></td></tr
><tr id="gr_svn141_6149"

><td id="6149"><a href="#6149">6149</a></td></tr
><tr id="gr_svn141_6150"

><td id="6150"><a href="#6150">6150</a></td></tr
><tr id="gr_svn141_6151"

><td id="6151"><a href="#6151">6151</a></td></tr
><tr id="gr_svn141_6152"

><td id="6152"><a href="#6152">6152</a></td></tr
><tr id="gr_svn141_6153"

><td id="6153"><a href="#6153">6153</a></td></tr
><tr id="gr_svn141_6154"

><td id="6154"><a href="#6154">6154</a></td></tr
><tr id="gr_svn141_6155"

><td id="6155"><a href="#6155">6155</a></td></tr
><tr id="gr_svn141_6156"

><td id="6156"><a href="#6156">6156</a></td></tr
><tr id="gr_svn141_6157"

><td id="6157"><a href="#6157">6157</a></td></tr
><tr id="gr_svn141_6158"

><td id="6158"><a href="#6158">6158</a></td></tr
><tr id="gr_svn141_6159"

><td id="6159"><a href="#6159">6159</a></td></tr
><tr id="gr_svn141_6160"

><td id="6160"><a href="#6160">6160</a></td></tr
><tr id="gr_svn141_6161"

><td id="6161"><a href="#6161">6161</a></td></tr
><tr id="gr_svn141_6162"

><td id="6162"><a href="#6162">6162</a></td></tr
><tr id="gr_svn141_6163"

><td id="6163"><a href="#6163">6163</a></td></tr
><tr id="gr_svn141_6164"

><td id="6164"><a href="#6164">6164</a></td></tr
><tr id="gr_svn141_6165"

><td id="6165"><a href="#6165">6165</a></td></tr
><tr id="gr_svn141_6166"

><td id="6166"><a href="#6166">6166</a></td></tr
><tr id="gr_svn141_6167"

><td id="6167"><a href="#6167">6167</a></td></tr
><tr id="gr_svn141_6168"

><td id="6168"><a href="#6168">6168</a></td></tr
><tr id="gr_svn141_6169"

><td id="6169"><a href="#6169">6169</a></td></tr
><tr id="gr_svn141_6170"

><td id="6170"><a href="#6170">6170</a></td></tr
><tr id="gr_svn141_6171"

><td id="6171"><a href="#6171">6171</a></td></tr
><tr id="gr_svn141_6172"

><td id="6172"><a href="#6172">6172</a></td></tr
><tr id="gr_svn141_6173"

><td id="6173"><a href="#6173">6173</a></td></tr
><tr id="gr_svn141_6174"

><td id="6174"><a href="#6174">6174</a></td></tr
><tr id="gr_svn141_6175"

><td id="6175"><a href="#6175">6175</a></td></tr
><tr id="gr_svn141_6176"

><td id="6176"><a href="#6176">6176</a></td></tr
><tr id="gr_svn141_6177"

><td id="6177"><a href="#6177">6177</a></td></tr
><tr id="gr_svn141_6178"

><td id="6178"><a href="#6178">6178</a></td></tr
><tr id="gr_svn141_6179"

><td id="6179"><a href="#6179">6179</a></td></tr
><tr id="gr_svn141_6180"

><td id="6180"><a href="#6180">6180</a></td></tr
><tr id="gr_svn141_6181"

><td id="6181"><a href="#6181">6181</a></td></tr
><tr id="gr_svn141_6182"

><td id="6182"><a href="#6182">6182</a></td></tr
><tr id="gr_svn141_6183"

><td id="6183"><a href="#6183">6183</a></td></tr
><tr id="gr_svn141_6184"

><td id="6184"><a href="#6184">6184</a></td></tr
><tr id="gr_svn141_6185"

><td id="6185"><a href="#6185">6185</a></td></tr
><tr id="gr_svn141_6186"

><td id="6186"><a href="#6186">6186</a></td></tr
><tr id="gr_svn141_6187"

><td id="6187"><a href="#6187">6187</a></td></tr
><tr id="gr_svn141_6188"

><td id="6188"><a href="#6188">6188</a></td></tr
><tr id="gr_svn141_6189"

><td id="6189"><a href="#6189">6189</a></td></tr
><tr id="gr_svn141_6190"

><td id="6190"><a href="#6190">6190</a></td></tr
><tr id="gr_svn141_6191"

><td id="6191"><a href="#6191">6191</a></td></tr
><tr id="gr_svn141_6192"

><td id="6192"><a href="#6192">6192</a></td></tr
><tr id="gr_svn141_6193"

><td id="6193"><a href="#6193">6193</a></td></tr
><tr id="gr_svn141_6194"

><td id="6194"><a href="#6194">6194</a></td></tr
><tr id="gr_svn141_6195"

><td id="6195"><a href="#6195">6195</a></td></tr
><tr id="gr_svn141_6196"

><td id="6196"><a href="#6196">6196</a></td></tr
><tr id="gr_svn141_6197"

><td id="6197"><a href="#6197">6197</a></td></tr
><tr id="gr_svn141_6198"

><td id="6198"><a href="#6198">6198</a></td></tr
><tr id="gr_svn141_6199"

><td id="6199"><a href="#6199">6199</a></td></tr
><tr id="gr_svn141_6200"

><td id="6200"><a href="#6200">6200</a></td></tr
><tr id="gr_svn141_6201"

><td id="6201"><a href="#6201">6201</a></td></tr
><tr id="gr_svn141_6202"

><td id="6202"><a href="#6202">6202</a></td></tr
><tr id="gr_svn141_6203"

><td id="6203"><a href="#6203">6203</a></td></tr
><tr id="gr_svn141_6204"

><td id="6204"><a href="#6204">6204</a></td></tr
><tr id="gr_svn141_6205"

><td id="6205"><a href="#6205">6205</a></td></tr
><tr id="gr_svn141_6206"

><td id="6206"><a href="#6206">6206</a></td></tr
><tr id="gr_svn141_6207"

><td id="6207"><a href="#6207">6207</a></td></tr
><tr id="gr_svn141_6208"

><td id="6208"><a href="#6208">6208</a></td></tr
><tr id="gr_svn141_6209"

><td id="6209"><a href="#6209">6209</a></td></tr
><tr id="gr_svn141_6210"

><td id="6210"><a href="#6210">6210</a></td></tr
><tr id="gr_svn141_6211"

><td id="6211"><a href="#6211">6211</a></td></tr
><tr id="gr_svn141_6212"

><td id="6212"><a href="#6212">6212</a></td></tr
><tr id="gr_svn141_6213"

><td id="6213"><a href="#6213">6213</a></td></tr
><tr id="gr_svn141_6214"

><td id="6214"><a href="#6214">6214</a></td></tr
><tr id="gr_svn141_6215"

><td id="6215"><a href="#6215">6215</a></td></tr
><tr id="gr_svn141_6216"

><td id="6216"><a href="#6216">6216</a></td></tr
><tr id="gr_svn141_6217"

><td id="6217"><a href="#6217">6217</a></td></tr
><tr id="gr_svn141_6218"

><td id="6218"><a href="#6218">6218</a></td></tr
><tr id="gr_svn141_6219"

><td id="6219"><a href="#6219">6219</a></td></tr
><tr id="gr_svn141_6220"

><td id="6220"><a href="#6220">6220</a></td></tr
><tr id="gr_svn141_6221"

><td id="6221"><a href="#6221">6221</a></td></tr
><tr id="gr_svn141_6222"

><td id="6222"><a href="#6222">6222</a></td></tr
><tr id="gr_svn141_6223"

><td id="6223"><a href="#6223">6223</a></td></tr
><tr id="gr_svn141_6224"

><td id="6224"><a href="#6224">6224</a></td></tr
><tr id="gr_svn141_6225"

><td id="6225"><a href="#6225">6225</a></td></tr
><tr id="gr_svn141_6226"

><td id="6226"><a href="#6226">6226</a></td></tr
><tr id="gr_svn141_6227"

><td id="6227"><a href="#6227">6227</a></td></tr
><tr id="gr_svn141_6228"

><td id="6228"><a href="#6228">6228</a></td></tr
><tr id="gr_svn141_6229"

><td id="6229"><a href="#6229">6229</a></td></tr
><tr id="gr_svn141_6230"

><td id="6230"><a href="#6230">6230</a></td></tr
><tr id="gr_svn141_6231"

><td id="6231"><a href="#6231">6231</a></td></tr
><tr id="gr_svn141_6232"

><td id="6232"><a href="#6232">6232</a></td></tr
><tr id="gr_svn141_6233"

><td id="6233"><a href="#6233">6233</a></td></tr
><tr id="gr_svn141_6234"

><td id="6234"><a href="#6234">6234</a></td></tr
><tr id="gr_svn141_6235"

><td id="6235"><a href="#6235">6235</a></td></tr
><tr id="gr_svn141_6236"

><td id="6236"><a href="#6236">6236</a></td></tr
><tr id="gr_svn141_6237"

><td id="6237"><a href="#6237">6237</a></td></tr
><tr id="gr_svn141_6238"

><td id="6238"><a href="#6238">6238</a></td></tr
><tr id="gr_svn141_6239"

><td id="6239"><a href="#6239">6239</a></td></tr
><tr id="gr_svn141_6240"

><td id="6240"><a href="#6240">6240</a></td></tr
><tr id="gr_svn141_6241"

><td id="6241"><a href="#6241">6241</a></td></tr
><tr id="gr_svn141_6242"

><td id="6242"><a href="#6242">6242</a></td></tr
><tr id="gr_svn141_6243"

><td id="6243"><a href="#6243">6243</a></td></tr
><tr id="gr_svn141_6244"

><td id="6244"><a href="#6244">6244</a></td></tr
><tr id="gr_svn141_6245"

><td id="6245"><a href="#6245">6245</a></td></tr
><tr id="gr_svn141_6246"

><td id="6246"><a href="#6246">6246</a></td></tr
><tr id="gr_svn141_6247"

><td id="6247"><a href="#6247">6247</a></td></tr
><tr id="gr_svn141_6248"

><td id="6248"><a href="#6248">6248</a></td></tr
><tr id="gr_svn141_6249"

><td id="6249"><a href="#6249">6249</a></td></tr
><tr id="gr_svn141_6250"

><td id="6250"><a href="#6250">6250</a></td></tr
><tr id="gr_svn141_6251"

><td id="6251"><a href="#6251">6251</a></td></tr
><tr id="gr_svn141_6252"

><td id="6252"><a href="#6252">6252</a></td></tr
><tr id="gr_svn141_6253"

><td id="6253"><a href="#6253">6253</a></td></tr
><tr id="gr_svn141_6254"

><td id="6254"><a href="#6254">6254</a></td></tr
><tr id="gr_svn141_6255"

><td id="6255"><a href="#6255">6255</a></td></tr
><tr id="gr_svn141_6256"

><td id="6256"><a href="#6256">6256</a></td></tr
><tr id="gr_svn141_6257"

><td id="6257"><a href="#6257">6257</a></td></tr
><tr id="gr_svn141_6258"

><td id="6258"><a href="#6258">6258</a></td></tr
><tr id="gr_svn141_6259"

><td id="6259"><a href="#6259">6259</a></td></tr
><tr id="gr_svn141_6260"

><td id="6260"><a href="#6260">6260</a></td></tr
><tr id="gr_svn141_6261"

><td id="6261"><a href="#6261">6261</a></td></tr
><tr id="gr_svn141_6262"

><td id="6262"><a href="#6262">6262</a></td></tr
><tr id="gr_svn141_6263"

><td id="6263"><a href="#6263">6263</a></td></tr
><tr id="gr_svn141_6264"

><td id="6264"><a href="#6264">6264</a></td></tr
><tr id="gr_svn141_6265"

><td id="6265"><a href="#6265">6265</a></td></tr
><tr id="gr_svn141_6266"

><td id="6266"><a href="#6266">6266</a></td></tr
><tr id="gr_svn141_6267"

><td id="6267"><a href="#6267">6267</a></td></tr
><tr id="gr_svn141_6268"

><td id="6268"><a href="#6268">6268</a></td></tr
><tr id="gr_svn141_6269"

><td id="6269"><a href="#6269">6269</a></td></tr
><tr id="gr_svn141_6270"

><td id="6270"><a href="#6270">6270</a></td></tr
><tr id="gr_svn141_6271"

><td id="6271"><a href="#6271">6271</a></td></tr
><tr id="gr_svn141_6272"

><td id="6272"><a href="#6272">6272</a></td></tr
><tr id="gr_svn141_6273"

><td id="6273"><a href="#6273">6273</a></td></tr
><tr id="gr_svn141_6274"

><td id="6274"><a href="#6274">6274</a></td></tr
><tr id="gr_svn141_6275"

><td id="6275"><a href="#6275">6275</a></td></tr
><tr id="gr_svn141_6276"

><td id="6276"><a href="#6276">6276</a></td></tr
><tr id="gr_svn141_6277"

><td id="6277"><a href="#6277">6277</a></td></tr
><tr id="gr_svn141_6278"

><td id="6278"><a href="#6278">6278</a></td></tr
><tr id="gr_svn141_6279"

><td id="6279"><a href="#6279">6279</a></td></tr
><tr id="gr_svn141_6280"

><td id="6280"><a href="#6280">6280</a></td></tr
><tr id="gr_svn141_6281"

><td id="6281"><a href="#6281">6281</a></td></tr
><tr id="gr_svn141_6282"

><td id="6282"><a href="#6282">6282</a></td></tr
><tr id="gr_svn141_6283"

><td id="6283"><a href="#6283">6283</a></td></tr
><tr id="gr_svn141_6284"

><td id="6284"><a href="#6284">6284</a></td></tr
><tr id="gr_svn141_6285"

><td id="6285"><a href="#6285">6285</a></td></tr
><tr id="gr_svn141_6286"

><td id="6286"><a href="#6286">6286</a></td></tr
><tr id="gr_svn141_6287"

><td id="6287"><a href="#6287">6287</a></td></tr
><tr id="gr_svn141_6288"

><td id="6288"><a href="#6288">6288</a></td></tr
><tr id="gr_svn141_6289"

><td id="6289"><a href="#6289">6289</a></td></tr
><tr id="gr_svn141_6290"

><td id="6290"><a href="#6290">6290</a></td></tr
><tr id="gr_svn141_6291"

><td id="6291"><a href="#6291">6291</a></td></tr
><tr id="gr_svn141_6292"

><td id="6292"><a href="#6292">6292</a></td></tr
><tr id="gr_svn141_6293"

><td id="6293"><a href="#6293">6293</a></td></tr
><tr id="gr_svn141_6294"

><td id="6294"><a href="#6294">6294</a></td></tr
><tr id="gr_svn141_6295"

><td id="6295"><a href="#6295">6295</a></td></tr
><tr id="gr_svn141_6296"

><td id="6296"><a href="#6296">6296</a></td></tr
><tr id="gr_svn141_6297"

><td id="6297"><a href="#6297">6297</a></td></tr
><tr id="gr_svn141_6298"

><td id="6298"><a href="#6298">6298</a></td></tr
><tr id="gr_svn141_6299"

><td id="6299"><a href="#6299">6299</a></td></tr
><tr id="gr_svn141_6300"

><td id="6300"><a href="#6300">6300</a></td></tr
><tr id="gr_svn141_6301"

><td id="6301"><a href="#6301">6301</a></td></tr
><tr id="gr_svn141_6302"

><td id="6302"><a href="#6302">6302</a></td></tr
><tr id="gr_svn141_6303"

><td id="6303"><a href="#6303">6303</a></td></tr
><tr id="gr_svn141_6304"

><td id="6304"><a href="#6304">6304</a></td></tr
><tr id="gr_svn141_6305"

><td id="6305"><a href="#6305">6305</a></td></tr
><tr id="gr_svn141_6306"

><td id="6306"><a href="#6306">6306</a></td></tr
><tr id="gr_svn141_6307"

><td id="6307"><a href="#6307">6307</a></td></tr
><tr id="gr_svn141_6308"

><td id="6308"><a href="#6308">6308</a></td></tr
><tr id="gr_svn141_6309"

><td id="6309"><a href="#6309">6309</a></td></tr
><tr id="gr_svn141_6310"

><td id="6310"><a href="#6310">6310</a></td></tr
><tr id="gr_svn141_6311"

><td id="6311"><a href="#6311">6311</a></td></tr
><tr id="gr_svn141_6312"

><td id="6312"><a href="#6312">6312</a></td></tr
><tr id="gr_svn141_6313"

><td id="6313"><a href="#6313">6313</a></td></tr
><tr id="gr_svn141_6314"

><td id="6314"><a href="#6314">6314</a></td></tr
><tr id="gr_svn141_6315"

><td id="6315"><a href="#6315">6315</a></td></tr
><tr id="gr_svn141_6316"

><td id="6316"><a href="#6316">6316</a></td></tr
><tr id="gr_svn141_6317"

><td id="6317"><a href="#6317">6317</a></td></tr
><tr id="gr_svn141_6318"

><td id="6318"><a href="#6318">6318</a></td></tr
><tr id="gr_svn141_6319"

><td id="6319"><a href="#6319">6319</a></td></tr
><tr id="gr_svn141_6320"

><td id="6320"><a href="#6320">6320</a></td></tr
><tr id="gr_svn141_6321"

><td id="6321"><a href="#6321">6321</a></td></tr
><tr id="gr_svn141_6322"

><td id="6322"><a href="#6322">6322</a></td></tr
><tr id="gr_svn141_6323"

><td id="6323"><a href="#6323">6323</a></td></tr
></table></pre>
<pre><table width="100%"><tr class="nocursor"><td></td></tr></table></pre>
</td>
<td id="lines">
<pre><table width="100%"><tr class="cursor_stop cursor_hidden"><td></td></tr></table></pre>
<pre ><table id="src_table_0"><tr
id=sl_svn141_1

><td class="source">#!/usr/bin/env python<br></td></tr
><tr
id=sl_svn141_2

><td class="source">#<br></td></tr
><tr
id=sl_svn141_3

><td class="source"># Copyright (c) 2009 Google Inc. All rights reserved.<br></td></tr
><tr
id=sl_svn141_4

><td class="source">#<br></td></tr
><tr
id=sl_svn141_5

><td class="source"># Redistribution and use in source and binary forms, with or without<br></td></tr
><tr
id=sl_svn141_6

><td class="source"># modification, are permitted provided that the following conditions are<br></td></tr
><tr
id=sl_svn141_7

><td class="source"># met:<br></td></tr
><tr
id=sl_svn141_8

><td class="source">#<br></td></tr
><tr
id=sl_svn141_9

><td class="source">#    * Redistributions of source code must retain the above copyright<br></td></tr
><tr
id=sl_svn141_10

><td class="source"># notice, this list of conditions and the following disclaimer.<br></td></tr
><tr
id=sl_svn141_11

><td class="source">#    * Redistributions in binary form must reproduce the above<br></td></tr
><tr
id=sl_svn141_12

><td class="source"># copyright notice, this list of conditions and the following disclaimer<br></td></tr
><tr
id=sl_svn141_13

><td class="source"># in the documentation and/or other materials provided with the<br></td></tr
><tr
id=sl_svn141_14

><td class="source"># distribution.<br></td></tr
><tr
id=sl_svn141_15

><td class="source">#    * Neither the name of Google Inc. nor the names of its<br></td></tr
><tr
id=sl_svn141_16

><td class="source"># contributors may be used to endorse or promote products derived from<br></td></tr
><tr
id=sl_svn141_17

><td class="source"># this software without specific prior written permission.<br></td></tr
><tr
id=sl_svn141_18

><td class="source">#<br></td></tr
><tr
id=sl_svn141_19

><td class="source"># THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<br></td></tr
><tr
id=sl_svn141_20

><td class="source"># &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<br></td></tr
><tr
id=sl_svn141_21

><td class="source"># LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR<br></td></tr
><tr
id=sl_svn141_22

><td class="source"># A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT<br></td></tr
><tr
id=sl_svn141_23

><td class="source"># OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,<br></td></tr
><tr
id=sl_svn141_24

><td class="source"># SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT<br></td></tr
><tr
id=sl_svn141_25

><td class="source"># LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<br></td></tr
><tr
id=sl_svn141_26

><td class="source"># DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<br></td></tr
><tr
id=sl_svn141_27

><td class="source"># THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<br></td></tr
><tr
id=sl_svn141_28

><td class="source"># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<br></td></tr
><tr
id=sl_svn141_29

><td class="source"># OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br></td></tr
><tr
id=sl_svn141_30

><td class="source"><br></td></tr
><tr
id=sl_svn141_31

><td class="source">&quot;&quot;&quot;Does google-lint on c++ files.<br></td></tr
><tr
id=sl_svn141_32

><td class="source"><br></td></tr
><tr
id=sl_svn141_33

><td class="source">The goal of this script is to identify places in the code that *may*<br></td></tr
><tr
id=sl_svn141_34

><td class="source">be in non-compliance with google style.  It does not attempt to fix<br></td></tr
><tr
id=sl_svn141_35

><td class="source">up these problems -- the point is to educate.  It does also not<br></td></tr
><tr
id=sl_svn141_36

><td class="source">attempt to find all problems, or to ensure that everything it does<br></td></tr
><tr
id=sl_svn141_37

><td class="source">find is legitimately a problem.<br></td></tr
><tr
id=sl_svn141_38

><td class="source"><br></td></tr
><tr
id=sl_svn141_39

><td class="source">In particular, we can get very confused by /* and // inside strings!<br></td></tr
><tr
id=sl_svn141_40

><td class="source">We do a small hack, which is to ignore //&#39;s with &quot;&#39;s after them on the<br></td></tr
><tr
id=sl_svn141_41

><td class="source">same line, but it is far from perfect (in either direction).<br></td></tr
><tr
id=sl_svn141_42

><td class="source">&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_43

><td class="source"><br></td></tr
><tr
id=sl_svn141_44

><td class="source">import codecs<br></td></tr
><tr
id=sl_svn141_45

><td class="source">import copy<br></td></tr
><tr
id=sl_svn141_46

><td class="source">import getopt<br></td></tr
><tr
id=sl_svn141_47

><td class="source">import math  # for log<br></td></tr
><tr
id=sl_svn141_48

><td class="source">import os<br></td></tr
><tr
id=sl_svn141_49

><td class="source">import re<br></td></tr
><tr
id=sl_svn141_50

><td class="source">import sre_compile<br></td></tr
><tr
id=sl_svn141_51

><td class="source">import string<br></td></tr
><tr
id=sl_svn141_52

><td class="source">import sys<br></td></tr
><tr
id=sl_svn141_53

><td class="source">import unicodedata<br></td></tr
><tr
id=sl_svn141_54

><td class="source"><br></td></tr
><tr
id=sl_svn141_55

><td class="source"><br></td></tr
><tr
id=sl_svn141_56

><td class="source">_USAGE = &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_57

><td class="source">Syntax: cpplint.py [--verbose=#] [--output=vs7] [--filter=-x,+y,...]<br></td></tr
><tr
id=sl_svn141_58

><td class="source">                   [--counting=total|toplevel|detailed] [--root=subdir]<br></td></tr
><tr
id=sl_svn141_59

><td class="source">                   [--linelength=digits]<br></td></tr
><tr
id=sl_svn141_60

><td class="source">        &lt;file&gt; [file] ...<br></td></tr
><tr
id=sl_svn141_61

><td class="source"><br></td></tr
><tr
id=sl_svn141_62

><td class="source">  The style guidelines this tries to follow are those in<br></td></tr
><tr
id=sl_svn141_63

><td class="source">    http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml<br></td></tr
><tr
id=sl_svn141_64

><td class="source"><br></td></tr
><tr
id=sl_svn141_65

><td class="source">  Every problem is given a confidence score from 1-5, with 5 meaning we are<br></td></tr
><tr
id=sl_svn141_66

><td class="source">  certain of the problem, and 1 meaning it could be a legitimate construct.<br></td></tr
><tr
id=sl_svn141_67

><td class="source">  This will miss some errors, and is not a substitute for a code review.<br></td></tr
><tr
id=sl_svn141_68

><td class="source"><br></td></tr
><tr
id=sl_svn141_69

><td class="source">  To suppress false-positive errors of a certain category, add a<br></td></tr
><tr
id=sl_svn141_70

><td class="source">  &#39;NOLINT(category)&#39; comment to the line.  NOLINT or NOLINT(*)<br></td></tr
><tr
id=sl_svn141_71

><td class="source">  suppresses errors of all categories on that line.<br></td></tr
><tr
id=sl_svn141_72

><td class="source"><br></td></tr
><tr
id=sl_svn141_73

><td class="source">  The files passed in will be linted; at least one file must be provided.<br></td></tr
><tr
id=sl_svn141_74

><td class="source">  Default linted extensions are .cc, .cpp, .cu, .cuh and .h.  Change the<br></td></tr
><tr
id=sl_svn141_75

><td class="source">  extensions with the --extensions flag.<br></td></tr
><tr
id=sl_svn141_76

><td class="source"><br></td></tr
><tr
id=sl_svn141_77

><td class="source">  Flags:<br></td></tr
><tr
id=sl_svn141_78

><td class="source"><br></td></tr
><tr
id=sl_svn141_79

><td class="source">    output=vs7<br></td></tr
><tr
id=sl_svn141_80

><td class="source">      By default, the output is formatted to ease emacs parsing.  Visual Studio<br></td></tr
><tr
id=sl_svn141_81

><td class="source">      compatible output (vs7) may also be used.  Other formats are unsupported.<br></td></tr
><tr
id=sl_svn141_82

><td class="source"><br></td></tr
><tr
id=sl_svn141_83

><td class="source">    verbose=#<br></td></tr
><tr
id=sl_svn141_84

><td class="source">      Specify a number 0-5 to restrict errors to certain verbosity levels.<br></td></tr
><tr
id=sl_svn141_85

><td class="source"><br></td></tr
><tr
id=sl_svn141_86

><td class="source">    filter=-x,+y,...<br></td></tr
><tr
id=sl_svn141_87

><td class="source">      Specify a comma-separated list of category-filters to apply: only<br></td></tr
><tr
id=sl_svn141_88

><td class="source">      error messages whose category names pass the filters will be printed.<br></td></tr
><tr
id=sl_svn141_89

><td class="source">      (Category names are printed with the message and look like<br></td></tr
><tr
id=sl_svn141_90

><td class="source">      &quot;[whitespace/indent]&quot;.)  Filters are evaluated left to right.<br></td></tr
><tr
id=sl_svn141_91

><td class="source">      &quot;-FOO&quot; and &quot;FOO&quot; means &quot;do not print categories that start with FOO&quot;.<br></td></tr
><tr
id=sl_svn141_92

><td class="source">      &quot;+FOO&quot; means &quot;do print categories that start with FOO&quot;.<br></td></tr
><tr
id=sl_svn141_93

><td class="source"><br></td></tr
><tr
id=sl_svn141_94

><td class="source">      Examples: --filter=-whitespace,+whitespace/braces<br></td></tr
><tr
id=sl_svn141_95

><td class="source">                --filter=whitespace,runtime/printf,+runtime/printf_format<br></td></tr
><tr
id=sl_svn141_96

><td class="source">                --filter=-,+build/include_what_you_use<br></td></tr
><tr
id=sl_svn141_97

><td class="source"><br></td></tr
><tr
id=sl_svn141_98

><td class="source">      To see a list of all the categories used in cpplint, pass no arg:<br></td></tr
><tr
id=sl_svn141_99

><td class="source">         --filter=<br></td></tr
><tr
id=sl_svn141_100

><td class="source"><br></td></tr
><tr
id=sl_svn141_101

><td class="source">    counting=total|toplevel|detailed<br></td></tr
><tr
id=sl_svn141_102

><td class="source">      The total number of errors found is always printed. If<br></td></tr
><tr
id=sl_svn141_103

><td class="source">      &#39;toplevel&#39; is provided, then the count of errors in each of<br></td></tr
><tr
id=sl_svn141_104

><td class="source">      the top-level categories like &#39;build&#39; and &#39;whitespace&#39; will<br></td></tr
><tr
id=sl_svn141_105

><td class="source">      also be printed. If &#39;detailed&#39; is provided, then a count<br></td></tr
><tr
id=sl_svn141_106

><td class="source">      is provided for each category like &#39;build/class&#39;.<br></td></tr
><tr
id=sl_svn141_107

><td class="source"><br></td></tr
><tr
id=sl_svn141_108

><td class="source">    root=subdir<br></td></tr
><tr
id=sl_svn141_109

><td class="source">      The root directory used for deriving header guard CPP variable.<br></td></tr
><tr
id=sl_svn141_110

><td class="source">      By default, the header guard CPP variable is calculated as the relative<br></td></tr
><tr
id=sl_svn141_111

><td class="source">      path to the directory that contains .git, .hg, or .svn.  When this flag<br></td></tr
><tr
id=sl_svn141_112

><td class="source">      is specified, the relative path is calculated from the specified<br></td></tr
><tr
id=sl_svn141_113

><td class="source">      directory. If the specified directory does not exist, this flag is<br></td></tr
><tr
id=sl_svn141_114

><td class="source">      ignored.<br></td></tr
><tr
id=sl_svn141_115

><td class="source"><br></td></tr
><tr
id=sl_svn141_116

><td class="source">      Examples:<br></td></tr
><tr
id=sl_svn141_117

><td class="source">        Assuming that src/.git exists, the header guard CPP variables for<br></td></tr
><tr
id=sl_svn141_118

><td class="source">        src/chrome/browser/ui/browser.h are:<br></td></tr
><tr
id=sl_svn141_119

><td class="source"><br></td></tr
><tr
id=sl_svn141_120

><td class="source">        No flag =&gt; CHROME_BROWSER_UI_BROWSER_H_<br></td></tr
><tr
id=sl_svn141_121

><td class="source">        --root=chrome =&gt; BROWSER_UI_BROWSER_H_<br></td></tr
><tr
id=sl_svn141_122

><td class="source">        --root=chrome/browser =&gt; UI_BROWSER_H_<br></td></tr
><tr
id=sl_svn141_123

><td class="source"><br></td></tr
><tr
id=sl_svn141_124

><td class="source">    linelength=digits<br></td></tr
><tr
id=sl_svn141_125

><td class="source">      This is the allowed line length for the project. The default value is<br></td></tr
><tr
id=sl_svn141_126

><td class="source">      80 characters.<br></td></tr
><tr
id=sl_svn141_127

><td class="source"><br></td></tr
><tr
id=sl_svn141_128

><td class="source">      Examples:<br></td></tr
><tr
id=sl_svn141_129

><td class="source">        --linelength=120<br></td></tr
><tr
id=sl_svn141_130

><td class="source"><br></td></tr
><tr
id=sl_svn141_131

><td class="source">    extensions=extension,extension,...<br></td></tr
><tr
id=sl_svn141_132

><td class="source">      The allowed file extensions that cpplint will check<br></td></tr
><tr
id=sl_svn141_133

><td class="source"><br></td></tr
><tr
id=sl_svn141_134

><td class="source">      Examples:<br></td></tr
><tr
id=sl_svn141_135

><td class="source">        --extensions=hpp,cpp<br></td></tr
><tr
id=sl_svn141_136

><td class="source"><br></td></tr
><tr
id=sl_svn141_137

><td class="source">    cpplint.py supports per-directory configurations specified in CPPLINT.cfg<br></td></tr
><tr
id=sl_svn141_138

><td class="source">    files. CPPLINT.cfg file can contain a number of key=value pairs.<br></td></tr
><tr
id=sl_svn141_139

><td class="source">    Currently the following options are supported:<br></td></tr
><tr
id=sl_svn141_140

><td class="source"><br></td></tr
><tr
id=sl_svn141_141

><td class="source">      set noparent<br></td></tr
><tr
id=sl_svn141_142

><td class="source">      filter=+filter1,-filter2,...<br></td></tr
><tr
id=sl_svn141_143

><td class="source">      exclude_files=regex<br></td></tr
><tr
id=sl_svn141_144

><td class="source">      linelength=80<br></td></tr
><tr
id=sl_svn141_145

><td class="source"><br></td></tr
><tr
id=sl_svn141_146

><td class="source">    &quot;set noparent&quot; option prevents cpplint from traversing directory tree<br></td></tr
><tr
id=sl_svn141_147

><td class="source">    upwards looking for more .cfg files in parent directories. This option<br></td></tr
><tr
id=sl_svn141_148

><td class="source">    is usually placed in the top-level project directory.<br></td></tr
><tr
id=sl_svn141_149

><td class="source"><br></td></tr
><tr
id=sl_svn141_150

><td class="source">    The &quot;filter&quot; option is similar in function to --filter flag. It specifies<br></td></tr
><tr
id=sl_svn141_151

><td class="source">    message filters in addition to the |_DEFAULT_FILTERS| and those specified<br></td></tr
><tr
id=sl_svn141_152

><td class="source">    through --filter command-line flag.<br></td></tr
><tr
id=sl_svn141_153

><td class="source"><br></td></tr
><tr
id=sl_svn141_154

><td class="source">    &quot;exclude_files&quot; allows to specify a regular expression to be matched against<br></td></tr
><tr
id=sl_svn141_155

><td class="source">    a file name. If the expression matches, the file is skipped and not run<br></td></tr
><tr
id=sl_svn141_156

><td class="source">    through liner.<br></td></tr
><tr
id=sl_svn141_157

><td class="source"><br></td></tr
><tr
id=sl_svn141_158

><td class="source">    &quot;linelength&quot; allows to specify the allowed line length for the project.<br></td></tr
><tr
id=sl_svn141_159

><td class="source"><br></td></tr
><tr
id=sl_svn141_160

><td class="source">    CPPLINT.cfg has an effect on files in the same directory and all<br></td></tr
><tr
id=sl_svn141_161

><td class="source">    sub-directories, unless overridden by a nested configuration file.<br></td></tr
><tr
id=sl_svn141_162

><td class="source"><br></td></tr
><tr
id=sl_svn141_163

><td class="source">      Example file:<br></td></tr
><tr
id=sl_svn141_164

><td class="source">        filter=-build/include_order,+build/include_alpha<br></td></tr
><tr
id=sl_svn141_165

><td class="source">        exclude_files=.*\.cc<br></td></tr
><tr
id=sl_svn141_166

><td class="source"><br></td></tr
><tr
id=sl_svn141_167

><td class="source">    The above example disables build/include_order warning and enables<br></td></tr
><tr
id=sl_svn141_168

><td class="source">    build/include_alpha as well as excludes all .cc from being<br></td></tr
><tr
id=sl_svn141_169

><td class="source">    processed by linter, in the current directory (where the .cfg<br></td></tr
><tr
id=sl_svn141_170

><td class="source">    file is located) and all sub-directories.<br></td></tr
><tr
id=sl_svn141_171

><td class="source">&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_172

><td class="source"><br></td></tr
><tr
id=sl_svn141_173

><td class="source"># We categorize each error message we print.  Here are the categories.<br></td></tr
><tr
id=sl_svn141_174

><td class="source"># We want an explicit list so we can list them all in cpplint --filter=.<br></td></tr
><tr
id=sl_svn141_175

><td class="source"># If you add a new error message with a new category, add it to the list<br></td></tr
><tr
id=sl_svn141_176

><td class="source"># here!  cpplint_unittest.py should tell you if you forget to do this.<br></td></tr
><tr
id=sl_svn141_177

><td class="source">_ERROR_CATEGORIES = [<br></td></tr
><tr
id=sl_svn141_178

><td class="source">    &#39;build/class&#39;,<br></td></tr
><tr
id=sl_svn141_179

><td class="source">    &#39;build/c++11&#39;,<br></td></tr
><tr
id=sl_svn141_180

><td class="source">    &#39;build/deprecated&#39;,<br></td></tr
><tr
id=sl_svn141_181

><td class="source">    &#39;build/endif_comment&#39;,<br></td></tr
><tr
id=sl_svn141_182

><td class="source">    &#39;build/explicit_make_pair&#39;,<br></td></tr
><tr
id=sl_svn141_183

><td class="source">    &#39;build/forward_decl&#39;,<br></td></tr
><tr
id=sl_svn141_184

><td class="source">    &#39;build/header_guard&#39;,<br></td></tr
><tr
id=sl_svn141_185

><td class="source">    &#39;build/include&#39;,<br></td></tr
><tr
id=sl_svn141_186

><td class="source">    &#39;build/include_alpha&#39;,<br></td></tr
><tr
id=sl_svn141_187

><td class="source">    &#39;build/include_order&#39;,<br></td></tr
><tr
id=sl_svn141_188

><td class="source">    &#39;build/include_what_you_use&#39;,<br></td></tr
><tr
id=sl_svn141_189

><td class="source">    &#39;build/namespaces&#39;,<br></td></tr
><tr
id=sl_svn141_190

><td class="source">    &#39;build/printf_format&#39;,<br></td></tr
><tr
id=sl_svn141_191

><td class="source">    &#39;build/storage_class&#39;,<br></td></tr
><tr
id=sl_svn141_192

><td class="source">    &#39;legal/copyright&#39;,<br></td></tr
><tr
id=sl_svn141_193

><td class="source">    &#39;readability/alt_tokens&#39;,<br></td></tr
><tr
id=sl_svn141_194

><td class="source">    &#39;readability/braces&#39;,<br></td></tr
><tr
id=sl_svn141_195

><td class="source">    &#39;readability/casting&#39;,<br></td></tr
><tr
id=sl_svn141_196

><td class="source">    &#39;readability/check&#39;,<br></td></tr
><tr
id=sl_svn141_197

><td class="source">    &#39;readability/constructors&#39;,<br></td></tr
><tr
id=sl_svn141_198

><td class="source">    &#39;readability/fn_size&#39;,<br></td></tr
><tr
id=sl_svn141_199

><td class="source">    &#39;readability/function&#39;,<br></td></tr
><tr
id=sl_svn141_200

><td class="source">    &#39;readability/inheritance&#39;,<br></td></tr
><tr
id=sl_svn141_201

><td class="source">    &#39;readability/multiline_comment&#39;,<br></td></tr
><tr
id=sl_svn141_202

><td class="source">    &#39;readability/multiline_string&#39;,<br></td></tr
><tr
id=sl_svn141_203

><td class="source">    &#39;readability/namespace&#39;,<br></td></tr
><tr
id=sl_svn141_204

><td class="source">    &#39;readability/nolint&#39;,<br></td></tr
><tr
id=sl_svn141_205

><td class="source">    &#39;readability/nul&#39;,<br></td></tr
><tr
id=sl_svn141_206

><td class="source">    &#39;readability/strings&#39;,<br></td></tr
><tr
id=sl_svn141_207

><td class="source">    &#39;readability/todo&#39;,<br></td></tr
><tr
id=sl_svn141_208

><td class="source">    &#39;readability/utf8&#39;,<br></td></tr
><tr
id=sl_svn141_209

><td class="source">    &#39;runtime/arrays&#39;,<br></td></tr
><tr
id=sl_svn141_210

><td class="source">    &#39;runtime/casting&#39;,<br></td></tr
><tr
id=sl_svn141_211

><td class="source">    &#39;runtime/explicit&#39;,<br></td></tr
><tr
id=sl_svn141_212

><td class="source">    &#39;runtime/int&#39;,<br></td></tr
><tr
id=sl_svn141_213

><td class="source">    &#39;runtime/init&#39;,<br></td></tr
><tr
id=sl_svn141_214

><td class="source">    &#39;runtime/invalid_increment&#39;,<br></td></tr
><tr
id=sl_svn141_215

><td class="source">    &#39;runtime/member_string_references&#39;,<br></td></tr
><tr
id=sl_svn141_216

><td class="source">    &#39;runtime/memset&#39;,<br></td></tr
><tr
id=sl_svn141_217

><td class="source">    &#39;runtime/indentation_namespace&#39;,<br></td></tr
><tr
id=sl_svn141_218

><td class="source">    &#39;runtime/operator&#39;,<br></td></tr
><tr
id=sl_svn141_219

><td class="source">    &#39;runtime/printf&#39;,<br></td></tr
><tr
id=sl_svn141_220

><td class="source">    &#39;runtime/printf_format&#39;,<br></td></tr
><tr
id=sl_svn141_221

><td class="source">    &#39;runtime/references&#39;,<br></td></tr
><tr
id=sl_svn141_222

><td class="source">    &#39;runtime/string&#39;,<br></td></tr
><tr
id=sl_svn141_223

><td class="source">    &#39;runtime/threadsafe_fn&#39;,<br></td></tr
><tr
id=sl_svn141_224

><td class="source">    &#39;runtime/vlog&#39;,<br></td></tr
><tr
id=sl_svn141_225

><td class="source">    &#39;whitespace/blank_line&#39;,<br></td></tr
><tr
id=sl_svn141_226

><td class="source">    &#39;whitespace/braces&#39;,<br></td></tr
><tr
id=sl_svn141_227

><td class="source">    &#39;whitespace/comma&#39;,<br></td></tr
><tr
id=sl_svn141_228

><td class="source">    &#39;whitespace/comments&#39;,<br></td></tr
><tr
id=sl_svn141_229

><td class="source">    &#39;whitespace/empty_conditional_body&#39;,<br></td></tr
><tr
id=sl_svn141_230

><td class="source">    &#39;whitespace/empty_loop_body&#39;,<br></td></tr
><tr
id=sl_svn141_231

><td class="source">    &#39;whitespace/end_of_line&#39;,<br></td></tr
><tr
id=sl_svn141_232

><td class="source">    &#39;whitespace/ending_newline&#39;,<br></td></tr
><tr
id=sl_svn141_233

><td class="source">    &#39;whitespace/forcolon&#39;,<br></td></tr
><tr
id=sl_svn141_234

><td class="source">    &#39;whitespace/indent&#39;,<br></td></tr
><tr
id=sl_svn141_235

><td class="source">    &#39;whitespace/line_length&#39;,<br></td></tr
><tr
id=sl_svn141_236

><td class="source">    &#39;whitespace/newline&#39;,<br></td></tr
><tr
id=sl_svn141_237

><td class="source">    &#39;whitespace/operators&#39;,<br></td></tr
><tr
id=sl_svn141_238

><td class="source">    &#39;whitespace/parens&#39;,<br></td></tr
><tr
id=sl_svn141_239

><td class="source">    &#39;whitespace/semicolon&#39;,<br></td></tr
><tr
id=sl_svn141_240

><td class="source">    &#39;whitespace/tab&#39;,<br></td></tr
><tr
id=sl_svn141_241

><td class="source">    &#39;whitespace/todo&#39;,<br></td></tr
><tr
id=sl_svn141_242

><td class="source">    ]<br></td></tr
><tr
id=sl_svn141_243

><td class="source"><br></td></tr
><tr
id=sl_svn141_244

><td class="source"># These error categories are no longer enforced by cpplint, but for backwards-<br></td></tr
><tr
id=sl_svn141_245

><td class="source"># compatibility they may still appear in NOLINT comments.<br></td></tr
><tr
id=sl_svn141_246

><td class="source">_LEGACY_ERROR_CATEGORIES = [<br></td></tr
><tr
id=sl_svn141_247

><td class="source">    &#39;readability/streams&#39;,<br></td></tr
><tr
id=sl_svn141_248

><td class="source">    ]<br></td></tr
><tr
id=sl_svn141_249

><td class="source"><br></td></tr
><tr
id=sl_svn141_250

><td class="source"># The default state of the category filter. This is overridden by the --filter=<br></td></tr
><tr
id=sl_svn141_251

><td class="source"># flag. By default all errors are on, so only add here categories that should be<br></td></tr
><tr
id=sl_svn141_252

><td class="source"># off by default (i.e., categories that must be enabled by the --filter= flags).<br></td></tr
><tr
id=sl_svn141_253

><td class="source"># All entries here should start with a &#39;-&#39; or &#39;+&#39;, as in the --filter= flag.<br></td></tr
><tr
id=sl_svn141_254

><td class="source">_DEFAULT_FILTERS = [&#39;-build/include_alpha&#39;]<br></td></tr
><tr
id=sl_svn141_255

><td class="source"><br></td></tr
><tr
id=sl_svn141_256

><td class="source"># We used to check for high-bit characters, but after much discussion we<br></td></tr
><tr
id=sl_svn141_257

><td class="source"># decided those were OK, as long as they were in UTF-8 and didn&#39;t represent<br></td></tr
><tr
id=sl_svn141_258

><td class="source"># hard-coded international strings, which belong in a separate i18n file.<br></td></tr
><tr
id=sl_svn141_259

><td class="source"><br></td></tr
><tr
id=sl_svn141_260

><td class="source"># C++ headers<br></td></tr
><tr
id=sl_svn141_261

><td class="source">_CPP_HEADERS = frozenset([<br></td></tr
><tr
id=sl_svn141_262

><td class="source">    # Legacy<br></td></tr
><tr
id=sl_svn141_263

><td class="source">    &#39;algobase.h&#39;,<br></td></tr
><tr
id=sl_svn141_264

><td class="source">    &#39;algo.h&#39;,<br></td></tr
><tr
id=sl_svn141_265

><td class="source">    &#39;alloc.h&#39;,<br></td></tr
><tr
id=sl_svn141_266

><td class="source">    &#39;builtinbuf.h&#39;,<br></td></tr
><tr
id=sl_svn141_267

><td class="source">    &#39;bvector.h&#39;,<br></td></tr
><tr
id=sl_svn141_268

><td class="source">    &#39;complex.h&#39;,<br></td></tr
><tr
id=sl_svn141_269

><td class="source">    &#39;defalloc.h&#39;,<br></td></tr
><tr
id=sl_svn141_270

><td class="source">    &#39;deque.h&#39;,<br></td></tr
><tr
id=sl_svn141_271

><td class="source">    &#39;editbuf.h&#39;,<br></td></tr
><tr
id=sl_svn141_272

><td class="source">    &#39;fstream.h&#39;,<br></td></tr
><tr
id=sl_svn141_273

><td class="source">    &#39;function.h&#39;,<br></td></tr
><tr
id=sl_svn141_274

><td class="source">    &#39;hash_map&#39;,<br></td></tr
><tr
id=sl_svn141_275

><td class="source">    &#39;hash_map.h&#39;,<br></td></tr
><tr
id=sl_svn141_276

><td class="source">    &#39;hash_set&#39;,<br></td></tr
><tr
id=sl_svn141_277

><td class="source">    &#39;hash_set.h&#39;,<br></td></tr
><tr
id=sl_svn141_278

><td class="source">    &#39;hashtable.h&#39;,<br></td></tr
><tr
id=sl_svn141_279

><td class="source">    &#39;heap.h&#39;,<br></td></tr
><tr
id=sl_svn141_280

><td class="source">    &#39;indstream.h&#39;,<br></td></tr
><tr
id=sl_svn141_281

><td class="source">    &#39;iomanip.h&#39;,<br></td></tr
><tr
id=sl_svn141_282

><td class="source">    &#39;iostream.h&#39;,<br></td></tr
><tr
id=sl_svn141_283

><td class="source">    &#39;istream.h&#39;,<br></td></tr
><tr
id=sl_svn141_284

><td class="source">    &#39;iterator.h&#39;,<br></td></tr
><tr
id=sl_svn141_285

><td class="source">    &#39;list.h&#39;,<br></td></tr
><tr
id=sl_svn141_286

><td class="source">    &#39;map.h&#39;,<br></td></tr
><tr
id=sl_svn141_287

><td class="source">    &#39;multimap.h&#39;,<br></td></tr
><tr
id=sl_svn141_288

><td class="source">    &#39;multiset.h&#39;,<br></td></tr
><tr
id=sl_svn141_289

><td class="source">    &#39;ostream.h&#39;,<br></td></tr
><tr
id=sl_svn141_290

><td class="source">    &#39;pair.h&#39;,<br></td></tr
><tr
id=sl_svn141_291

><td class="source">    &#39;parsestream.h&#39;,<br></td></tr
><tr
id=sl_svn141_292

><td class="source">    &#39;pfstream.h&#39;,<br></td></tr
><tr
id=sl_svn141_293

><td class="source">    &#39;procbuf.h&#39;,<br></td></tr
><tr
id=sl_svn141_294

><td class="source">    &#39;pthread_alloc&#39;,<br></td></tr
><tr
id=sl_svn141_295

><td class="source">    &#39;pthread_alloc.h&#39;,<br></td></tr
><tr
id=sl_svn141_296

><td class="source">    &#39;rope&#39;,<br></td></tr
><tr
id=sl_svn141_297

><td class="source">    &#39;rope.h&#39;,<br></td></tr
><tr
id=sl_svn141_298

><td class="source">    &#39;ropeimpl.h&#39;,<br></td></tr
><tr
id=sl_svn141_299

><td class="source">    &#39;set.h&#39;,<br></td></tr
><tr
id=sl_svn141_300

><td class="source">    &#39;slist&#39;,<br></td></tr
><tr
id=sl_svn141_301

><td class="source">    &#39;slist.h&#39;,<br></td></tr
><tr
id=sl_svn141_302

><td class="source">    &#39;stack.h&#39;,<br></td></tr
><tr
id=sl_svn141_303

><td class="source">    &#39;stdiostream.h&#39;,<br></td></tr
><tr
id=sl_svn141_304

><td class="source">    &#39;stl_alloc.h&#39;,<br></td></tr
><tr
id=sl_svn141_305

><td class="source">    &#39;stl_relops.h&#39;,<br></td></tr
><tr
id=sl_svn141_306

><td class="source">    &#39;streambuf.h&#39;,<br></td></tr
><tr
id=sl_svn141_307

><td class="source">    &#39;stream.h&#39;,<br></td></tr
><tr
id=sl_svn141_308

><td class="source">    &#39;strfile.h&#39;,<br></td></tr
><tr
id=sl_svn141_309

><td class="source">    &#39;strstream.h&#39;,<br></td></tr
><tr
id=sl_svn141_310

><td class="source">    &#39;tempbuf.h&#39;,<br></td></tr
><tr
id=sl_svn141_311

><td class="source">    &#39;tree.h&#39;,<br></td></tr
><tr
id=sl_svn141_312

><td class="source">    &#39;type_traits.h&#39;,<br></td></tr
><tr
id=sl_svn141_313

><td class="source">    &#39;vector.h&#39;,<br></td></tr
><tr
id=sl_svn141_314

><td class="source">    # 17.6.1.2 C++ library headers<br></td></tr
><tr
id=sl_svn141_315

><td class="source">    &#39;algorithm&#39;,<br></td></tr
><tr
id=sl_svn141_316

><td class="source">    &#39;array&#39;,<br></td></tr
><tr
id=sl_svn141_317

><td class="source">    &#39;atomic&#39;,<br></td></tr
><tr
id=sl_svn141_318

><td class="source">    &#39;bitset&#39;,<br></td></tr
><tr
id=sl_svn141_319

><td class="source">    &#39;chrono&#39;,<br></td></tr
><tr
id=sl_svn141_320

><td class="source">    &#39;codecvt&#39;,<br></td></tr
><tr
id=sl_svn141_321

><td class="source">    &#39;complex&#39;,<br></td></tr
><tr
id=sl_svn141_322

><td class="source">    &#39;condition_variable&#39;,<br></td></tr
><tr
id=sl_svn141_323

><td class="source">    &#39;deque&#39;,<br></td></tr
><tr
id=sl_svn141_324

><td class="source">    &#39;exception&#39;,<br></td></tr
><tr
id=sl_svn141_325

><td class="source">    &#39;forward_list&#39;,<br></td></tr
><tr
id=sl_svn141_326

><td class="source">    &#39;fstream&#39;,<br></td></tr
><tr
id=sl_svn141_327

><td class="source">    &#39;functional&#39;,<br></td></tr
><tr
id=sl_svn141_328

><td class="source">    &#39;future&#39;,<br></td></tr
><tr
id=sl_svn141_329

><td class="source">    &#39;initializer_list&#39;,<br></td></tr
><tr
id=sl_svn141_330

><td class="source">    &#39;iomanip&#39;,<br></td></tr
><tr
id=sl_svn141_331

><td class="source">    &#39;ios&#39;,<br></td></tr
><tr
id=sl_svn141_332

><td class="source">    &#39;iosfwd&#39;,<br></td></tr
><tr
id=sl_svn141_333

><td class="source">    &#39;iostream&#39;,<br></td></tr
><tr
id=sl_svn141_334

><td class="source">    &#39;istream&#39;,<br></td></tr
><tr
id=sl_svn141_335

><td class="source">    &#39;iterator&#39;,<br></td></tr
><tr
id=sl_svn141_336

><td class="source">    &#39;limits&#39;,<br></td></tr
><tr
id=sl_svn141_337

><td class="source">    &#39;list&#39;,<br></td></tr
><tr
id=sl_svn141_338

><td class="source">    &#39;locale&#39;,<br></td></tr
><tr
id=sl_svn141_339

><td class="source">    &#39;map&#39;,<br></td></tr
><tr
id=sl_svn141_340

><td class="source">    &#39;memory&#39;,<br></td></tr
><tr
id=sl_svn141_341

><td class="source">    &#39;mutex&#39;,<br></td></tr
><tr
id=sl_svn141_342

><td class="source">    &#39;new&#39;,<br></td></tr
><tr
id=sl_svn141_343

><td class="source">    &#39;numeric&#39;,<br></td></tr
><tr
id=sl_svn141_344

><td class="source">    &#39;ostream&#39;,<br></td></tr
><tr
id=sl_svn141_345

><td class="source">    &#39;queue&#39;,<br></td></tr
><tr
id=sl_svn141_346

><td class="source">    &#39;random&#39;,<br></td></tr
><tr
id=sl_svn141_347

><td class="source">    &#39;ratio&#39;,<br></td></tr
><tr
id=sl_svn141_348

><td class="source">    &#39;regex&#39;,<br></td></tr
><tr
id=sl_svn141_349

><td class="source">    &#39;set&#39;,<br></td></tr
><tr
id=sl_svn141_350

><td class="source">    &#39;sstream&#39;,<br></td></tr
><tr
id=sl_svn141_351

><td class="source">    &#39;stack&#39;,<br></td></tr
><tr
id=sl_svn141_352

><td class="source">    &#39;stdexcept&#39;,<br></td></tr
><tr
id=sl_svn141_353

><td class="source">    &#39;streambuf&#39;,<br></td></tr
><tr
id=sl_svn141_354

><td class="source">    &#39;string&#39;,<br></td></tr
><tr
id=sl_svn141_355

><td class="source">    &#39;strstream&#39;,<br></td></tr
><tr
id=sl_svn141_356

><td class="source">    &#39;system_error&#39;,<br></td></tr
><tr
id=sl_svn141_357

><td class="source">    &#39;thread&#39;,<br></td></tr
><tr
id=sl_svn141_358

><td class="source">    &#39;tuple&#39;,<br></td></tr
><tr
id=sl_svn141_359

><td class="source">    &#39;typeindex&#39;,<br></td></tr
><tr
id=sl_svn141_360

><td class="source">    &#39;typeinfo&#39;,<br></td></tr
><tr
id=sl_svn141_361

><td class="source">    &#39;type_traits&#39;,<br></td></tr
><tr
id=sl_svn141_362

><td class="source">    &#39;unordered_map&#39;,<br></td></tr
><tr
id=sl_svn141_363

><td class="source">    &#39;unordered_set&#39;,<br></td></tr
><tr
id=sl_svn141_364

><td class="source">    &#39;utility&#39;,<br></td></tr
><tr
id=sl_svn141_365

><td class="source">    &#39;valarray&#39;,<br></td></tr
><tr
id=sl_svn141_366

><td class="source">    &#39;vector&#39;,<br></td></tr
><tr
id=sl_svn141_367

><td class="source">    # 17.6.1.2 C++ headers for C library facilities<br></td></tr
><tr
id=sl_svn141_368

><td class="source">    &#39;cassert&#39;,<br></td></tr
><tr
id=sl_svn141_369

><td class="source">    &#39;ccomplex&#39;,<br></td></tr
><tr
id=sl_svn141_370

><td class="source">    &#39;cctype&#39;,<br></td></tr
><tr
id=sl_svn141_371

><td class="source">    &#39;cerrno&#39;,<br></td></tr
><tr
id=sl_svn141_372

><td class="source">    &#39;cfenv&#39;,<br></td></tr
><tr
id=sl_svn141_373

><td class="source">    &#39;cfloat&#39;,<br></td></tr
><tr
id=sl_svn141_374

><td class="source">    &#39;cinttypes&#39;,<br></td></tr
><tr
id=sl_svn141_375

><td class="source">    &#39;ciso646&#39;,<br></td></tr
><tr
id=sl_svn141_376

><td class="source">    &#39;climits&#39;,<br></td></tr
><tr
id=sl_svn141_377

><td class="source">    &#39;clocale&#39;,<br></td></tr
><tr
id=sl_svn141_378

><td class="source">    &#39;cmath&#39;,<br></td></tr
><tr
id=sl_svn141_379

><td class="source">    &#39;csetjmp&#39;,<br></td></tr
><tr
id=sl_svn141_380

><td class="source">    &#39;csignal&#39;,<br></td></tr
><tr
id=sl_svn141_381

><td class="source">    &#39;cstdalign&#39;,<br></td></tr
><tr
id=sl_svn141_382

><td class="source">    &#39;cstdarg&#39;,<br></td></tr
><tr
id=sl_svn141_383

><td class="source">    &#39;cstdbool&#39;,<br></td></tr
><tr
id=sl_svn141_384

><td class="source">    &#39;cstddef&#39;,<br></td></tr
><tr
id=sl_svn141_385

><td class="source">    &#39;cstdint&#39;,<br></td></tr
><tr
id=sl_svn141_386

><td class="source">    &#39;cstdio&#39;,<br></td></tr
><tr
id=sl_svn141_387

><td class="source">    &#39;cstdlib&#39;,<br></td></tr
><tr
id=sl_svn141_388

><td class="source">    &#39;cstring&#39;,<br></td></tr
><tr
id=sl_svn141_389

><td class="source">    &#39;ctgmath&#39;,<br></td></tr
><tr
id=sl_svn141_390

><td class="source">    &#39;ctime&#39;,<br></td></tr
><tr
id=sl_svn141_391

><td class="source">    &#39;cuchar&#39;,<br></td></tr
><tr
id=sl_svn141_392

><td class="source">    &#39;cwchar&#39;,<br></td></tr
><tr
id=sl_svn141_393

><td class="source">    &#39;cwctype&#39;,<br></td></tr
><tr
id=sl_svn141_394

><td class="source">    ])<br></td></tr
><tr
id=sl_svn141_395

><td class="source"><br></td></tr
><tr
id=sl_svn141_396

><td class="source"><br></td></tr
><tr
id=sl_svn141_397

><td class="source"># These headers are excluded from [build/include] and [build/include_order]<br></td></tr
><tr
id=sl_svn141_398

><td class="source"># checks:<br></td></tr
><tr
id=sl_svn141_399

><td class="source"># - Anything not following google file name conventions (containing an<br></td></tr
><tr
id=sl_svn141_400

><td class="source">#   uppercase character, such as Python.h or nsStringAPI.h, for example).<br></td></tr
><tr
id=sl_svn141_401

><td class="source"># - Lua headers.<br></td></tr
><tr
id=sl_svn141_402

><td class="source">_THIRD_PARTY_HEADERS_PATTERN = re.compile(<br></td></tr
><tr
id=sl_svn141_403

><td class="source">    r&#39;^(?:[^/]*[A-Z][^/]*\.h|lua\.h|lauxlib\.h|lualib\.h)$&#39;)<br></td></tr
><tr
id=sl_svn141_404

><td class="source"><br></td></tr
><tr
id=sl_svn141_405

><td class="source"><br></td></tr
><tr
id=sl_svn141_406

><td class="source"># Assertion macros.  These are defined in base/logging.h and<br></td></tr
><tr
id=sl_svn141_407

><td class="source"># testing/base/gunit.h.  Note that the _M versions need to come first<br></td></tr
><tr
id=sl_svn141_408

><td class="source"># for substring matching to work.<br></td></tr
><tr
id=sl_svn141_409

><td class="source">_CHECK_MACROS = [<br></td></tr
><tr
id=sl_svn141_410

><td class="source">    &#39;DCHECK&#39;, &#39;CHECK&#39;,<br></td></tr
><tr
id=sl_svn141_411

><td class="source">    &#39;EXPECT_TRUE_M&#39;, &#39;EXPECT_TRUE&#39;,<br></td></tr
><tr
id=sl_svn141_412

><td class="source">    &#39;ASSERT_TRUE_M&#39;, &#39;ASSERT_TRUE&#39;,<br></td></tr
><tr
id=sl_svn141_413

><td class="source">    &#39;EXPECT_FALSE_M&#39;, &#39;EXPECT_FALSE&#39;,<br></td></tr
><tr
id=sl_svn141_414

><td class="source">    &#39;ASSERT_FALSE_M&#39;, &#39;ASSERT_FALSE&#39;,<br></td></tr
><tr
id=sl_svn141_415

><td class="source">    ]<br></td></tr
><tr
id=sl_svn141_416

><td class="source"><br></td></tr
><tr
id=sl_svn141_417

><td class="source"># Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE<br></td></tr
><tr
id=sl_svn141_418

><td class="source">_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])<br></td></tr
><tr
id=sl_svn141_419

><td class="source"><br></td></tr
><tr
id=sl_svn141_420

><td class="source">for op, replacement in [(&#39;==&#39;, &#39;EQ&#39;), (&#39;!=&#39;, &#39;NE&#39;),<br></td></tr
><tr
id=sl_svn141_421

><td class="source">                        (&#39;&gt;=&#39;, &#39;GE&#39;), (&#39;&gt;&#39;, &#39;GT&#39;),<br></td></tr
><tr
id=sl_svn141_422

><td class="source">                        (&#39;&lt;=&#39;, &#39;LE&#39;), (&#39;&lt;&#39;, &#39;LT&#39;)]:<br></td></tr
><tr
id=sl_svn141_423

><td class="source">  _CHECK_REPLACEMENT[&#39;DCHECK&#39;][op] = &#39;DCHECK_%s&#39; % replacement<br></td></tr
><tr
id=sl_svn141_424

><td class="source">  _CHECK_REPLACEMENT[&#39;CHECK&#39;][op] = &#39;CHECK_%s&#39; % replacement<br></td></tr
><tr
id=sl_svn141_425

><td class="source">  _CHECK_REPLACEMENT[&#39;EXPECT_TRUE&#39;][op] = &#39;EXPECT_%s&#39; % replacement<br></td></tr
><tr
id=sl_svn141_426

><td class="source">  _CHECK_REPLACEMENT[&#39;ASSERT_TRUE&#39;][op] = &#39;ASSERT_%s&#39; % replacement<br></td></tr
><tr
id=sl_svn141_427

><td class="source">  _CHECK_REPLACEMENT[&#39;EXPECT_TRUE_M&#39;][op] = &#39;EXPECT_%s_M&#39; % replacement<br></td></tr
><tr
id=sl_svn141_428

><td class="source">  _CHECK_REPLACEMENT[&#39;ASSERT_TRUE_M&#39;][op] = &#39;ASSERT_%s_M&#39; % replacement<br></td></tr
><tr
id=sl_svn141_429

><td class="source"><br></td></tr
><tr
id=sl_svn141_430

><td class="source">for op, inv_replacement in [(&#39;==&#39;, &#39;NE&#39;), (&#39;!=&#39;, &#39;EQ&#39;),<br></td></tr
><tr
id=sl_svn141_431

><td class="source">                            (&#39;&gt;=&#39;, &#39;LT&#39;), (&#39;&gt;&#39;, &#39;LE&#39;),<br></td></tr
><tr
id=sl_svn141_432

><td class="source">                            (&#39;&lt;=&#39;, &#39;GT&#39;), (&#39;&lt;&#39;, &#39;GE&#39;)]:<br></td></tr
><tr
id=sl_svn141_433

><td class="source">  _CHECK_REPLACEMENT[&#39;EXPECT_FALSE&#39;][op] = &#39;EXPECT_%s&#39; % inv_replacement<br></td></tr
><tr
id=sl_svn141_434

><td class="source">  _CHECK_REPLACEMENT[&#39;ASSERT_FALSE&#39;][op] = &#39;ASSERT_%s&#39; % inv_replacement<br></td></tr
><tr
id=sl_svn141_435

><td class="source">  _CHECK_REPLACEMENT[&#39;EXPECT_FALSE_M&#39;][op] = &#39;EXPECT_%s_M&#39; % inv_replacement<br></td></tr
><tr
id=sl_svn141_436

><td class="source">  _CHECK_REPLACEMENT[&#39;ASSERT_FALSE_M&#39;][op] = &#39;ASSERT_%s_M&#39; % inv_replacement<br></td></tr
><tr
id=sl_svn141_437

><td class="source"><br></td></tr
><tr
id=sl_svn141_438

><td class="source"># Alternative tokens and their replacements.  For full list, see section 2.5<br></td></tr
><tr
id=sl_svn141_439

><td class="source"># Alternative tokens [lex.digraph] in the C++ standard.<br></td></tr
><tr
id=sl_svn141_440

><td class="source">#<br></td></tr
><tr
id=sl_svn141_441

><td class="source"># Digraphs (such as &#39;%:&#39;) are not included here since it&#39;s a mess to<br></td></tr
><tr
id=sl_svn141_442

><td class="source"># match those on a word boundary.<br></td></tr
><tr
id=sl_svn141_443

><td class="source">_ALT_TOKEN_REPLACEMENT = {<br></td></tr
><tr
id=sl_svn141_444

><td class="source">    &#39;and&#39;: &#39;&amp;&amp;&#39;,<br></td></tr
><tr
id=sl_svn141_445

><td class="source">    &#39;bitor&#39;: &#39;|&#39;,<br></td></tr
><tr
id=sl_svn141_446

><td class="source">    &#39;or&#39;: &#39;||&#39;,<br></td></tr
><tr
id=sl_svn141_447

><td class="source">    &#39;xor&#39;: &#39;^&#39;,<br></td></tr
><tr
id=sl_svn141_448

><td class="source">    &#39;compl&#39;: &#39;~&#39;,<br></td></tr
><tr
id=sl_svn141_449

><td class="source">    &#39;bitand&#39;: &#39;&amp;&#39;,<br></td></tr
><tr
id=sl_svn141_450

><td class="source">    &#39;and_eq&#39;: &#39;&amp;=&#39;,<br></td></tr
><tr
id=sl_svn141_451

><td class="source">    &#39;or_eq&#39;: &#39;|=&#39;,<br></td></tr
><tr
id=sl_svn141_452

><td class="source">    &#39;xor_eq&#39;: &#39;^=&#39;,<br></td></tr
><tr
id=sl_svn141_453

><td class="source">    &#39;not&#39;: &#39;!&#39;,<br></td></tr
><tr
id=sl_svn141_454

><td class="source">    &#39;not_eq&#39;: &#39;!=&#39;<br></td></tr
><tr
id=sl_svn141_455

><td class="source">    }<br></td></tr
><tr
id=sl_svn141_456

><td class="source"><br></td></tr
><tr
id=sl_svn141_457

><td class="source"># Compile regular expression that matches all the above keywords.  The &quot;[ =()]&quot;<br></td></tr
><tr
id=sl_svn141_458

><td class="source"># bit is meant to avoid matching these keywords outside of boolean expressions.<br></td></tr
><tr
id=sl_svn141_459

><td class="source">#<br></td></tr
><tr
id=sl_svn141_460

><td class="source"># False positives include C-style multi-line comments and multi-line strings<br></td></tr
><tr
id=sl_svn141_461

><td class="source"># but those have always been troublesome for cpplint.<br></td></tr
><tr
id=sl_svn141_462

><td class="source">_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile(<br></td></tr
><tr
id=sl_svn141_463

><td class="source">    r&#39;[ =()](&#39; + (&#39;|&#39;.join(_ALT_TOKEN_REPLACEMENT.keys())) + r&#39;)(?=[ (]|$)&#39;)<br></td></tr
><tr
id=sl_svn141_464

><td class="source"><br></td></tr
><tr
id=sl_svn141_465

><td class="source"><br></td></tr
><tr
id=sl_svn141_466

><td class="source"># These constants define types of headers for use with<br></td></tr
><tr
id=sl_svn141_467

><td class="source"># _IncludeState.CheckNextIncludeOrder().<br></td></tr
><tr
id=sl_svn141_468

><td class="source">_C_SYS_HEADER = 1<br></td></tr
><tr
id=sl_svn141_469

><td class="source">_CPP_SYS_HEADER = 2<br></td></tr
><tr
id=sl_svn141_470

><td class="source">_LIKELY_MY_HEADER = 3<br></td></tr
><tr
id=sl_svn141_471

><td class="source">_POSSIBLE_MY_HEADER = 4<br></td></tr
><tr
id=sl_svn141_472

><td class="source">_OTHER_HEADER = 5<br></td></tr
><tr
id=sl_svn141_473

><td class="source"><br></td></tr
><tr
id=sl_svn141_474

><td class="source"># These constants define the current inline assembly state<br></td></tr
><tr
id=sl_svn141_475

><td class="source">_NO_ASM = 0       # Outside of inline assembly block<br></td></tr
><tr
id=sl_svn141_476

><td class="source">_INSIDE_ASM = 1   # Inside inline assembly block<br></td></tr
><tr
id=sl_svn141_477

><td class="source">_END_ASM = 2      # Last line of inline assembly block<br></td></tr
><tr
id=sl_svn141_478

><td class="source">_BLOCK_ASM = 3    # The whole block is an inline assembly block<br></td></tr
><tr
id=sl_svn141_479

><td class="source"><br></td></tr
><tr
id=sl_svn141_480

><td class="source"># Match start of assembly blocks<br></td></tr
><tr
id=sl_svn141_481

><td class="source">_MATCH_ASM = re.compile(r&#39;^\s*(?:asm|_asm|__asm|__asm__)&#39;<br></td></tr
><tr
id=sl_svn141_482

><td class="source">                        r&#39;(?:\s+(volatile|__volatile__))?&#39;<br></td></tr
><tr
id=sl_svn141_483

><td class="source">                        r&#39;\s*[{(]&#39;)<br></td></tr
><tr
id=sl_svn141_484

><td class="source"><br></td></tr
><tr
id=sl_svn141_485

><td class="source"><br></td></tr
><tr
id=sl_svn141_486

><td class="source">_regexp_compile_cache = {}<br></td></tr
><tr
id=sl_svn141_487

><td class="source"><br></td></tr
><tr
id=sl_svn141_488

><td class="source"># {str, set(int)}: a map from error categories to sets of linenumbers<br></td></tr
><tr
id=sl_svn141_489

><td class="source"># on which those errors are expected and should be suppressed.<br></td></tr
><tr
id=sl_svn141_490

><td class="source">_error_suppressions = {}<br></td></tr
><tr
id=sl_svn141_491

><td class="source"><br></td></tr
><tr
id=sl_svn141_492

><td class="source"># The root directory used for deriving header guard CPP variable.<br></td></tr
><tr
id=sl_svn141_493

><td class="source"># This is set by --root flag.<br></td></tr
><tr
id=sl_svn141_494

><td class="source">_root = None<br></td></tr
><tr
id=sl_svn141_495

><td class="source"><br></td></tr
><tr
id=sl_svn141_496

><td class="source"># The allowed line length of files.<br></td></tr
><tr
id=sl_svn141_497

><td class="source"># This is set by --linelength flag.<br></td></tr
><tr
id=sl_svn141_498

><td class="source">_line_length = 80<br></td></tr
><tr
id=sl_svn141_499

><td class="source"><br></td></tr
><tr
id=sl_svn141_500

><td class="source"># The allowed extensions for file names<br></td></tr
><tr
id=sl_svn141_501

><td class="source"># This is set by --extensions flag.<br></td></tr
><tr
id=sl_svn141_502

><td class="source">_valid_extensions = set([&#39;cc&#39;, &#39;h&#39;, &#39;cpp&#39;, &#39;cu&#39;, &#39;cuh&#39;])<br></td></tr
><tr
id=sl_svn141_503

><td class="source"><br></td></tr
><tr
id=sl_svn141_504

><td class="source">def ParseNolintSuppressions(filename, raw_line, linenum, error):<br></td></tr
><tr
id=sl_svn141_505

><td class="source">  &quot;&quot;&quot;Updates the global list of error-suppressions.<br></td></tr
><tr
id=sl_svn141_506

><td class="source"><br></td></tr
><tr
id=sl_svn141_507

><td class="source">  Parses any NOLINT comments on the current line, updating the global<br></td></tr
><tr
id=sl_svn141_508

><td class="source">  error_suppressions store.  Reports an error if the NOLINT comment<br></td></tr
><tr
id=sl_svn141_509

><td class="source">  was malformed.<br></td></tr
><tr
id=sl_svn141_510

><td class="source"><br></td></tr
><tr
id=sl_svn141_511

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_512

><td class="source">    filename: str, the name of the input file.<br></td></tr
><tr
id=sl_svn141_513

><td class="source">    raw_line: str, the line of input text, with comments.<br></td></tr
><tr
id=sl_svn141_514

><td class="source">    linenum: int, the number of the current line.<br></td></tr
><tr
id=sl_svn141_515

><td class="source">    error: function, an error handler.<br></td></tr
><tr
id=sl_svn141_516

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_517

><td class="source">  matched = Search(r&#39;\bNOLINT(NEXTLINE)?\b(\([^)]+\))?&#39;, raw_line)<br></td></tr
><tr
id=sl_svn141_518

><td class="source">  if matched:<br></td></tr
><tr
id=sl_svn141_519

><td class="source">    if matched.group(1):<br></td></tr
><tr
id=sl_svn141_520

><td class="source">      suppressed_line = linenum + 1<br></td></tr
><tr
id=sl_svn141_521

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_522

><td class="source">      suppressed_line = linenum<br></td></tr
><tr
id=sl_svn141_523

><td class="source">    category = matched.group(2)<br></td></tr
><tr
id=sl_svn141_524

><td class="source">    if category in (None, &#39;(*)&#39;):  # =&gt; &quot;suppress all&quot;<br></td></tr
><tr
id=sl_svn141_525

><td class="source">      _error_suppressions.setdefault(None, set()).add(suppressed_line)<br></td></tr
><tr
id=sl_svn141_526

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_527

><td class="source">      if category.startswith(&#39;(&#39;) and category.endswith(&#39;)&#39;):<br></td></tr
><tr
id=sl_svn141_528

><td class="source">        category = category[1:-1]<br></td></tr
><tr
id=sl_svn141_529

><td class="source">        if category in _ERROR_CATEGORIES:<br></td></tr
><tr
id=sl_svn141_530

><td class="source">          _error_suppressions.setdefault(category, set()).add(suppressed_line)<br></td></tr
><tr
id=sl_svn141_531

><td class="source">        elif category not in _LEGACY_ERROR_CATEGORIES:<br></td></tr
><tr
id=sl_svn141_532

><td class="source">          error(filename, linenum, &#39;readability/nolint&#39;, 5,<br></td></tr
><tr
id=sl_svn141_533

><td class="source">                &#39;Unknown NOLINT error category: %s&#39; % category)<br></td></tr
><tr
id=sl_svn141_534

><td class="source"><br></td></tr
><tr
id=sl_svn141_535

><td class="source"><br></td></tr
><tr
id=sl_svn141_536

><td class="source">def ResetNolintSuppressions():<br></td></tr
><tr
id=sl_svn141_537

><td class="source">  &quot;&quot;&quot;Resets the set of NOLINT suppressions to empty.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_538

><td class="source">  _error_suppressions.clear()<br></td></tr
><tr
id=sl_svn141_539

><td class="source"><br></td></tr
><tr
id=sl_svn141_540

><td class="source"><br></td></tr
><tr
id=sl_svn141_541

><td class="source">def IsErrorSuppressedByNolint(category, linenum):<br></td></tr
><tr
id=sl_svn141_542

><td class="source">  &quot;&quot;&quot;Returns true if the specified error category is suppressed on this line.<br></td></tr
><tr
id=sl_svn141_543

><td class="source"><br></td></tr
><tr
id=sl_svn141_544

><td class="source">  Consults the global error_suppressions map populated by<br></td></tr
><tr
id=sl_svn141_545

><td class="source">  ParseNolintSuppressions/ResetNolintSuppressions.<br></td></tr
><tr
id=sl_svn141_546

><td class="source"><br></td></tr
><tr
id=sl_svn141_547

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_548

><td class="source">    category: str, the category of the error.<br></td></tr
><tr
id=sl_svn141_549

><td class="source">    linenum: int, the current line number.<br></td></tr
><tr
id=sl_svn141_550

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_551

><td class="source">    bool, True iff the error should be suppressed due to a NOLINT comment.<br></td></tr
><tr
id=sl_svn141_552

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_553

><td class="source">  return (linenum in _error_suppressions.get(category, set()) or<br></td></tr
><tr
id=sl_svn141_554

><td class="source">          linenum in _error_suppressions.get(None, set()))<br></td></tr
><tr
id=sl_svn141_555

><td class="source"><br></td></tr
><tr
id=sl_svn141_556

><td class="source"><br></td></tr
><tr
id=sl_svn141_557

><td class="source">def Match(pattern, s):<br></td></tr
><tr
id=sl_svn141_558

><td class="source">  &quot;&quot;&quot;Matches the string with the pattern, caching the compiled regexp.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_559

><td class="source">  # The regexp compilation caching is inlined in both Match and Search for<br></td></tr
><tr
id=sl_svn141_560

><td class="source">  # performance reasons; factoring it out into a separate function turns out<br></td></tr
><tr
id=sl_svn141_561

><td class="source">  # to be noticeably expensive.<br></td></tr
><tr
id=sl_svn141_562

><td class="source">  if pattern not in _regexp_compile_cache:<br></td></tr
><tr
id=sl_svn141_563

><td class="source">    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)<br></td></tr
><tr
id=sl_svn141_564

><td class="source">  return _regexp_compile_cache[pattern].match(s)<br></td></tr
><tr
id=sl_svn141_565

><td class="source"><br></td></tr
><tr
id=sl_svn141_566

><td class="source"><br></td></tr
><tr
id=sl_svn141_567

><td class="source">def ReplaceAll(pattern, rep, s):<br></td></tr
><tr
id=sl_svn141_568

><td class="source">  &quot;&quot;&quot;Replaces instances of pattern in a string with a replacement.<br></td></tr
><tr
id=sl_svn141_569

><td class="source"><br></td></tr
><tr
id=sl_svn141_570

><td class="source">  The compiled regex is kept in a cache shared by Match and Search.<br></td></tr
><tr
id=sl_svn141_571

><td class="source"><br></td></tr
><tr
id=sl_svn141_572

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_573

><td class="source">    pattern: regex pattern<br></td></tr
><tr
id=sl_svn141_574

><td class="source">    rep: replacement text<br></td></tr
><tr
id=sl_svn141_575

><td class="source">    s: search string<br></td></tr
><tr
id=sl_svn141_576

><td class="source"><br></td></tr
><tr
id=sl_svn141_577

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_578

><td class="source">    string with replacements made (or original string if no replacements)<br></td></tr
><tr
id=sl_svn141_579

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_580

><td class="source">  if pattern not in _regexp_compile_cache:<br></td></tr
><tr
id=sl_svn141_581

><td class="source">    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)<br></td></tr
><tr
id=sl_svn141_582

><td class="source">  return _regexp_compile_cache[pattern].sub(rep, s)<br></td></tr
><tr
id=sl_svn141_583

><td class="source"><br></td></tr
><tr
id=sl_svn141_584

><td class="source"><br></td></tr
><tr
id=sl_svn141_585

><td class="source">def Search(pattern, s):<br></td></tr
><tr
id=sl_svn141_586

><td class="source">  &quot;&quot;&quot;Searches the string for the pattern, caching the compiled regexp.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_587

><td class="source">  if pattern not in _regexp_compile_cache:<br></td></tr
><tr
id=sl_svn141_588

><td class="source">    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)<br></td></tr
><tr
id=sl_svn141_589

><td class="source">  return _regexp_compile_cache[pattern].search(s)<br></td></tr
><tr
id=sl_svn141_590

><td class="source"><br></td></tr
><tr
id=sl_svn141_591

><td class="source"><br></td></tr
><tr
id=sl_svn141_592

><td class="source">class _IncludeState(object):<br></td></tr
><tr
id=sl_svn141_593

><td class="source">  &quot;&quot;&quot;Tracks line numbers for includes, and the order in which includes appear.<br></td></tr
><tr
id=sl_svn141_594

><td class="source"><br></td></tr
><tr
id=sl_svn141_595

><td class="source">  include_list contains list of lists of (header, line number) pairs.<br></td></tr
><tr
id=sl_svn141_596

><td class="source">  It&#39;s a lists of lists rather than just one flat list to make it<br></td></tr
><tr
id=sl_svn141_597

><td class="source">  easier to update across preprocessor boundaries.<br></td></tr
><tr
id=sl_svn141_598

><td class="source"><br></td></tr
><tr
id=sl_svn141_599

><td class="source">  Call CheckNextIncludeOrder() once for each header in the file, passing<br></td></tr
><tr
id=sl_svn141_600

><td class="source">  in the type constants defined above. Calls in an illegal order will<br></td></tr
><tr
id=sl_svn141_601

><td class="source">  raise an _IncludeError with an appropriate error message.<br></td></tr
><tr
id=sl_svn141_602

><td class="source"><br></td></tr
><tr
id=sl_svn141_603

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_604

><td class="source">  # self._section will move monotonically through this set. If it ever<br></td></tr
><tr
id=sl_svn141_605

><td class="source">  # needs to move backwards, CheckNextIncludeOrder will raise an error.<br></td></tr
><tr
id=sl_svn141_606

><td class="source">  _INITIAL_SECTION = 0<br></td></tr
><tr
id=sl_svn141_607

><td class="source">  _MY_H_SECTION = 1<br></td></tr
><tr
id=sl_svn141_608

><td class="source">  _C_SECTION = 2<br></td></tr
><tr
id=sl_svn141_609

><td class="source">  _CPP_SECTION = 3<br></td></tr
><tr
id=sl_svn141_610

><td class="source">  _OTHER_H_SECTION = 4<br></td></tr
><tr
id=sl_svn141_611

><td class="source"><br></td></tr
><tr
id=sl_svn141_612

><td class="source">  _TYPE_NAMES = {<br></td></tr
><tr
id=sl_svn141_613

><td class="source">      _C_SYS_HEADER: &#39;C system header&#39;,<br></td></tr
><tr
id=sl_svn141_614

><td class="source">      _CPP_SYS_HEADER: &#39;C++ system header&#39;,<br></td></tr
><tr
id=sl_svn141_615

><td class="source">      _LIKELY_MY_HEADER: &#39;header this file implements&#39;,<br></td></tr
><tr
id=sl_svn141_616

><td class="source">      _POSSIBLE_MY_HEADER: &#39;header this file may implement&#39;,<br></td></tr
><tr
id=sl_svn141_617

><td class="source">      _OTHER_HEADER: &#39;other header&#39;,<br></td></tr
><tr
id=sl_svn141_618

><td class="source">      }<br></td></tr
><tr
id=sl_svn141_619

><td class="source">  _SECTION_NAMES = {<br></td></tr
><tr
id=sl_svn141_620

><td class="source">      _INITIAL_SECTION: &quot;... nothing. (This can&#39;t be an error.)&quot;,<br></td></tr
><tr
id=sl_svn141_621

><td class="source">      _MY_H_SECTION: &#39;a header this file implements&#39;,<br></td></tr
><tr
id=sl_svn141_622

><td class="source">      _C_SECTION: &#39;C system header&#39;,<br></td></tr
><tr
id=sl_svn141_623

><td class="source">      _CPP_SECTION: &#39;C++ system header&#39;,<br></td></tr
><tr
id=sl_svn141_624

><td class="source">      _OTHER_H_SECTION: &#39;other header&#39;,<br></td></tr
><tr
id=sl_svn141_625

><td class="source">      }<br></td></tr
><tr
id=sl_svn141_626

><td class="source"><br></td></tr
><tr
id=sl_svn141_627

><td class="source">  def __init__(self):<br></td></tr
><tr
id=sl_svn141_628

><td class="source">    self.include_list = [[]]<br></td></tr
><tr
id=sl_svn141_629

><td class="source">    self.ResetSection(&#39;&#39;)<br></td></tr
><tr
id=sl_svn141_630

><td class="source"><br></td></tr
><tr
id=sl_svn141_631

><td class="source">  def FindHeader(self, header):<br></td></tr
><tr
id=sl_svn141_632

><td class="source">    &quot;&quot;&quot;Check if a header has already been included.<br></td></tr
><tr
id=sl_svn141_633

><td class="source"><br></td></tr
><tr
id=sl_svn141_634

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_635

><td class="source">      header: header to check.<br></td></tr
><tr
id=sl_svn141_636

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_637

><td class="source">      Line number of previous occurrence, or -1 if the header has not<br></td></tr
><tr
id=sl_svn141_638

><td class="source">      been seen before.<br></td></tr
><tr
id=sl_svn141_639

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_640

><td class="source">    for section_list in self.include_list:<br></td></tr
><tr
id=sl_svn141_641

><td class="source">      for f in section_list:<br></td></tr
><tr
id=sl_svn141_642

><td class="source">        if f[0] == header:<br></td></tr
><tr
id=sl_svn141_643

><td class="source">          return f[1]<br></td></tr
><tr
id=sl_svn141_644

><td class="source">    return -1<br></td></tr
><tr
id=sl_svn141_645

><td class="source"><br></td></tr
><tr
id=sl_svn141_646

><td class="source">  def ResetSection(self, directive):<br></td></tr
><tr
id=sl_svn141_647

><td class="source">    &quot;&quot;&quot;Reset section checking for preprocessor directive.<br></td></tr
><tr
id=sl_svn141_648

><td class="source"><br></td></tr
><tr
id=sl_svn141_649

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_650

><td class="source">      directive: preprocessor directive (e.g. &quot;if&quot;, &quot;else&quot;).<br></td></tr
><tr
id=sl_svn141_651

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_652

><td class="source">    # The name of the current section.<br></td></tr
><tr
id=sl_svn141_653

><td class="source">    self._section = self._INITIAL_SECTION<br></td></tr
><tr
id=sl_svn141_654

><td class="source">    # The path of last found header.<br></td></tr
><tr
id=sl_svn141_655

><td class="source">    self._last_header = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_656

><td class="source"><br></td></tr
><tr
id=sl_svn141_657

><td class="source">    # Update list of includes.  Note that we never pop from the<br></td></tr
><tr
id=sl_svn141_658

><td class="source">    # include list.<br></td></tr
><tr
id=sl_svn141_659

><td class="source">    if directive in (&#39;if&#39;, &#39;ifdef&#39;, &#39;ifndef&#39;):<br></td></tr
><tr
id=sl_svn141_660

><td class="source">      self.include_list.append([])<br></td></tr
><tr
id=sl_svn141_661

><td class="source">    elif directive in (&#39;else&#39;, &#39;elif&#39;):<br></td></tr
><tr
id=sl_svn141_662

><td class="source">      self.include_list[-1] = []<br></td></tr
><tr
id=sl_svn141_663

><td class="source"><br></td></tr
><tr
id=sl_svn141_664

><td class="source">  def SetLastHeader(self, header_path):<br></td></tr
><tr
id=sl_svn141_665

><td class="source">    self._last_header = header_path<br></td></tr
><tr
id=sl_svn141_666

><td class="source"><br></td></tr
><tr
id=sl_svn141_667

><td class="source">  def CanonicalizeAlphabeticalOrder(self, header_path):<br></td></tr
><tr
id=sl_svn141_668

><td class="source">    &quot;&quot;&quot;Returns a path canonicalized for alphabetical comparison.<br></td></tr
><tr
id=sl_svn141_669

><td class="source"><br></td></tr
><tr
id=sl_svn141_670

><td class="source">    - replaces &quot;-&quot; with &quot;_&quot; so they both cmp the same.<br></td></tr
><tr
id=sl_svn141_671

><td class="source">    - removes &#39;-inl&#39; since we don&#39;t require them to be after the main header.<br></td></tr
><tr
id=sl_svn141_672

><td class="source">    - lowercase everything, just in case.<br></td></tr
><tr
id=sl_svn141_673

><td class="source"><br></td></tr
><tr
id=sl_svn141_674

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_675

><td class="source">      header_path: Path to be canonicalized.<br></td></tr
><tr
id=sl_svn141_676

><td class="source"><br></td></tr
><tr
id=sl_svn141_677

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_678

><td class="source">      Canonicalized path.<br></td></tr
><tr
id=sl_svn141_679

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_680

><td class="source">    return header_path.replace(&#39;-inl.h&#39;, &#39;.h&#39;).replace(&#39;-&#39;, &#39;_&#39;).lower()<br></td></tr
><tr
id=sl_svn141_681

><td class="source"><br></td></tr
><tr
id=sl_svn141_682

><td class="source">  def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path):<br></td></tr
><tr
id=sl_svn141_683

><td class="source">    &quot;&quot;&quot;Check if a header is in alphabetical order with the previous header.<br></td></tr
><tr
id=sl_svn141_684

><td class="source"><br></td></tr
><tr
id=sl_svn141_685

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_686

><td class="source">      clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_687

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_688

><td class="source">      header_path: Canonicalized header to be checked.<br></td></tr
><tr
id=sl_svn141_689

><td class="source"><br></td></tr
><tr
id=sl_svn141_690

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_691

><td class="source">      Returns true if the header is in alphabetical order.<br></td></tr
><tr
id=sl_svn141_692

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_693

><td class="source">    # If previous section is different from current section, _last_header will<br></td></tr
><tr
id=sl_svn141_694

><td class="source">    # be reset to empty string, so it&#39;s always less than current header.<br></td></tr
><tr
id=sl_svn141_695

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_696

><td class="source">    # If previous line was a blank line, assume that the headers are<br></td></tr
><tr
id=sl_svn141_697

><td class="source">    # intentionally sorted the way they are.<br></td></tr
><tr
id=sl_svn141_698

><td class="source">    if (self._last_header &gt; header_path and<br></td></tr
><tr
id=sl_svn141_699

><td class="source">        Match(r&#39;^\s*#\s*include\b&#39;, clean_lines.elided[linenum - 1])):<br></td></tr
><tr
id=sl_svn141_700

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_701

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_702

><td class="source"><br></td></tr
><tr
id=sl_svn141_703

><td class="source">  def CheckNextIncludeOrder(self, header_type):<br></td></tr
><tr
id=sl_svn141_704

><td class="source">    &quot;&quot;&quot;Returns a non-empty error message if the next header is out of order.<br></td></tr
><tr
id=sl_svn141_705

><td class="source"><br></td></tr
><tr
id=sl_svn141_706

><td class="source">    This function also updates the internal state to be ready to check<br></td></tr
><tr
id=sl_svn141_707

><td class="source">    the next include.<br></td></tr
><tr
id=sl_svn141_708

><td class="source"><br></td></tr
><tr
id=sl_svn141_709

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_710

><td class="source">      header_type: One of the _XXX_HEADER constants defined above.<br></td></tr
><tr
id=sl_svn141_711

><td class="source"><br></td></tr
><tr
id=sl_svn141_712

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_713

><td class="source">      The empty string if the header is in the right order, or an<br></td></tr
><tr
id=sl_svn141_714

><td class="source">      error message describing what&#39;s wrong.<br></td></tr
><tr
id=sl_svn141_715

><td class="source"><br></td></tr
><tr
id=sl_svn141_716

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_717

><td class="source">    error_message = (&#39;Found %s after %s&#39; %<br></td></tr
><tr
id=sl_svn141_718

><td class="source">                     (self._TYPE_NAMES[header_type],<br></td></tr
><tr
id=sl_svn141_719

><td class="source">                      self._SECTION_NAMES[self._section]))<br></td></tr
><tr
id=sl_svn141_720

><td class="source"><br></td></tr
><tr
id=sl_svn141_721

><td class="source">    last_section = self._section<br></td></tr
><tr
id=sl_svn141_722

><td class="source"><br></td></tr
><tr
id=sl_svn141_723

><td class="source">    if header_type == _C_SYS_HEADER:<br></td></tr
><tr
id=sl_svn141_724

><td class="source">      if self._section &lt;= self._C_SECTION:<br></td></tr
><tr
id=sl_svn141_725

><td class="source">        self._section = self._C_SECTION<br></td></tr
><tr
id=sl_svn141_726

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_727

><td class="source">        self._last_header = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_728

><td class="source">        return error_message<br></td></tr
><tr
id=sl_svn141_729

><td class="source">    elif header_type == _CPP_SYS_HEADER:<br></td></tr
><tr
id=sl_svn141_730

><td class="source">      if self._section &lt;= self._CPP_SECTION:<br></td></tr
><tr
id=sl_svn141_731

><td class="source">        self._section = self._CPP_SECTION<br></td></tr
><tr
id=sl_svn141_732

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_733

><td class="source">        self._last_header = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_734

><td class="source">        return error_message<br></td></tr
><tr
id=sl_svn141_735

><td class="source">    elif header_type == _LIKELY_MY_HEADER:<br></td></tr
><tr
id=sl_svn141_736

><td class="source">      if self._section &lt;= self._MY_H_SECTION:<br></td></tr
><tr
id=sl_svn141_737

><td class="source">        self._section = self._MY_H_SECTION<br></td></tr
><tr
id=sl_svn141_738

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_739

><td class="source">        self._section = self._OTHER_H_SECTION<br></td></tr
><tr
id=sl_svn141_740

><td class="source">    elif header_type == _POSSIBLE_MY_HEADER:<br></td></tr
><tr
id=sl_svn141_741

><td class="source">      if self._section &lt;= self._MY_H_SECTION:<br></td></tr
><tr
id=sl_svn141_742

><td class="source">        self._section = self._MY_H_SECTION<br></td></tr
><tr
id=sl_svn141_743

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_744

><td class="source">        # This will always be the fallback because we&#39;re not sure<br></td></tr
><tr
id=sl_svn141_745

><td class="source">        # enough that the header is associated with this file.<br></td></tr
><tr
id=sl_svn141_746

><td class="source">        self._section = self._OTHER_H_SECTION<br></td></tr
><tr
id=sl_svn141_747

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_748

><td class="source">      assert header_type == _OTHER_HEADER<br></td></tr
><tr
id=sl_svn141_749

><td class="source">      self._section = self._OTHER_H_SECTION<br></td></tr
><tr
id=sl_svn141_750

><td class="source"><br></td></tr
><tr
id=sl_svn141_751

><td class="source">    if last_section != self._section:<br></td></tr
><tr
id=sl_svn141_752

><td class="source">      self._last_header = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_753

><td class="source"><br></td></tr
><tr
id=sl_svn141_754

><td class="source">    return &#39;&#39;<br></td></tr
><tr
id=sl_svn141_755

><td class="source"><br></td></tr
><tr
id=sl_svn141_756

><td class="source"><br></td></tr
><tr
id=sl_svn141_757

><td class="source">class _CppLintState(object):<br></td></tr
><tr
id=sl_svn141_758

><td class="source">  &quot;&quot;&quot;Maintains module-wide state..&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_759

><td class="source"><br></td></tr
><tr
id=sl_svn141_760

><td class="source">  def __init__(self):<br></td></tr
><tr
id=sl_svn141_761

><td class="source">    self.verbose_level = 1  # global setting.<br></td></tr
><tr
id=sl_svn141_762

><td class="source">    self.error_count = 0    # global count of reported errors<br></td></tr
><tr
id=sl_svn141_763

><td class="source">    # filters to apply when emitting error messages<br></td></tr
><tr
id=sl_svn141_764

><td class="source">    self.filters = _DEFAULT_FILTERS[:]<br></td></tr
><tr
id=sl_svn141_765

><td class="source">    # backup of filter list. Used to restore the state after each file.<br></td></tr
><tr
id=sl_svn141_766

><td class="source">    self._filters_backup = self.filters[:]<br></td></tr
><tr
id=sl_svn141_767

><td class="source">    self.counting = &#39;total&#39;  # In what way are we counting errors?<br></td></tr
><tr
id=sl_svn141_768

><td class="source">    self.errors_by_category = {}  # string to int dict storing error counts<br></td></tr
><tr
id=sl_svn141_769

><td class="source"><br></td></tr
><tr
id=sl_svn141_770

><td class="source">    # output format:<br></td></tr
><tr
id=sl_svn141_771

><td class="source">    # &quot;emacs&quot; - format that emacs can parse (default)<br></td></tr
><tr
id=sl_svn141_772

><td class="source">    # &quot;vs7&quot; - format that Microsoft Visual Studio 7 can parse<br></td></tr
><tr
id=sl_svn141_773

><td class="source">    self.output_format = &#39;emacs&#39;<br></td></tr
><tr
id=sl_svn141_774

><td class="source"><br></td></tr
><tr
id=sl_svn141_775

><td class="source">  def SetOutputFormat(self, output_format):<br></td></tr
><tr
id=sl_svn141_776

><td class="source">    &quot;&quot;&quot;Sets the output format for errors.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_777

><td class="source">    self.output_format = output_format<br></td></tr
><tr
id=sl_svn141_778

><td class="source"><br></td></tr
><tr
id=sl_svn141_779

><td class="source">  def SetVerboseLevel(self, level):<br></td></tr
><tr
id=sl_svn141_780

><td class="source">    &quot;&quot;&quot;Sets the module&#39;s verbosity, and returns the previous setting.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_781

><td class="source">    last_verbose_level = self.verbose_level<br></td></tr
><tr
id=sl_svn141_782

><td class="source">    self.verbose_level = level<br></td></tr
><tr
id=sl_svn141_783

><td class="source">    return last_verbose_level<br></td></tr
><tr
id=sl_svn141_784

><td class="source"><br></td></tr
><tr
id=sl_svn141_785

><td class="source">  def SetCountingStyle(self, counting_style):<br></td></tr
><tr
id=sl_svn141_786

><td class="source">    &quot;&quot;&quot;Sets the module&#39;s counting options.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_787

><td class="source">    self.counting = counting_style<br></td></tr
><tr
id=sl_svn141_788

><td class="source"><br></td></tr
><tr
id=sl_svn141_789

><td class="source">  def SetFilters(self, filters):<br></td></tr
><tr
id=sl_svn141_790

><td class="source">    &quot;&quot;&quot;Sets the error-message filters.<br></td></tr
><tr
id=sl_svn141_791

><td class="source"><br></td></tr
><tr
id=sl_svn141_792

><td class="source">    These filters are applied when deciding whether to emit a given<br></td></tr
><tr
id=sl_svn141_793

><td class="source">    error message.<br></td></tr
><tr
id=sl_svn141_794

><td class="source"><br></td></tr
><tr
id=sl_svn141_795

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_796

><td class="source">      filters: A string of comma-separated filters (eg &quot;+whitespace/indent&quot;).<br></td></tr
><tr
id=sl_svn141_797

><td class="source">               Each filter should start with + or -; else we die.<br></td></tr
><tr
id=sl_svn141_798

><td class="source"><br></td></tr
><tr
id=sl_svn141_799

><td class="source">    Raises:<br></td></tr
><tr
id=sl_svn141_800

><td class="source">      ValueError: The comma-separated filters did not all start with &#39;+&#39; or &#39;-&#39;.<br></td></tr
><tr
id=sl_svn141_801

><td class="source">                  E.g. &quot;-,+whitespace,-whitespace/indent,whitespace/badfilter&quot;<br></td></tr
><tr
id=sl_svn141_802

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_803

><td class="source">    # Default filters always have less priority than the flag ones.<br></td></tr
><tr
id=sl_svn141_804

><td class="source">    self.filters = _DEFAULT_FILTERS[:]<br></td></tr
><tr
id=sl_svn141_805

><td class="source">    self.AddFilters(filters)<br></td></tr
><tr
id=sl_svn141_806

><td class="source"><br></td></tr
><tr
id=sl_svn141_807

><td class="source">  def AddFilters(self, filters):<br></td></tr
><tr
id=sl_svn141_808

><td class="source">    &quot;&quot;&quot; Adds more filters to the existing list of error-message filters. &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_809

><td class="source">    for filt in filters.split(&#39;,&#39;):<br></td></tr
><tr
id=sl_svn141_810

><td class="source">      clean_filt = filt.strip()<br></td></tr
><tr
id=sl_svn141_811

><td class="source">      if clean_filt:<br></td></tr
><tr
id=sl_svn141_812

><td class="source">        self.filters.append(clean_filt)<br></td></tr
><tr
id=sl_svn141_813

><td class="source">    for filt in self.filters:<br></td></tr
><tr
id=sl_svn141_814

><td class="source">      if not (filt.startswith(&#39;+&#39;) or filt.startswith(&#39;-&#39;)):<br></td></tr
><tr
id=sl_svn141_815

><td class="source">        raise ValueError(&#39;Every filter in --filters must start with + or -&#39;<br></td></tr
><tr
id=sl_svn141_816

><td class="source">                         &#39; (%s does not)&#39; % filt)<br></td></tr
><tr
id=sl_svn141_817

><td class="source"><br></td></tr
><tr
id=sl_svn141_818

><td class="source">  def BackupFilters(self):<br></td></tr
><tr
id=sl_svn141_819

><td class="source">    &quot;&quot;&quot; Saves the current filter list to backup storage.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_820

><td class="source">    self._filters_backup = self.filters[:]<br></td></tr
><tr
id=sl_svn141_821

><td class="source"><br></td></tr
><tr
id=sl_svn141_822

><td class="source">  def RestoreFilters(self):<br></td></tr
><tr
id=sl_svn141_823

><td class="source">    &quot;&quot;&quot; Restores filters previously backed up.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_824

><td class="source">    self.filters = self._filters_backup[:]<br></td></tr
><tr
id=sl_svn141_825

><td class="source"><br></td></tr
><tr
id=sl_svn141_826

><td class="source">  def ResetErrorCounts(self):<br></td></tr
><tr
id=sl_svn141_827

><td class="source">    &quot;&quot;&quot;Sets the module&#39;s error statistic back to zero.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_828

><td class="source">    self.error_count = 0<br></td></tr
><tr
id=sl_svn141_829

><td class="source">    self.errors_by_category = {}<br></td></tr
><tr
id=sl_svn141_830

><td class="source"><br></td></tr
><tr
id=sl_svn141_831

><td class="source">  def IncrementErrorCount(self, category):<br></td></tr
><tr
id=sl_svn141_832

><td class="source">    &quot;&quot;&quot;Bumps the module&#39;s error statistic.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_833

><td class="source">    self.error_count += 1<br></td></tr
><tr
id=sl_svn141_834

><td class="source">    if self.counting in (&#39;toplevel&#39;, &#39;detailed&#39;):<br></td></tr
><tr
id=sl_svn141_835

><td class="source">      if self.counting != &#39;detailed&#39;:<br></td></tr
><tr
id=sl_svn141_836

><td class="source">        category = category.split(&#39;/&#39;)[0]<br></td></tr
><tr
id=sl_svn141_837

><td class="source">      if category not in self.errors_by_category:<br></td></tr
><tr
id=sl_svn141_838

><td class="source">        self.errors_by_category[category] = 0<br></td></tr
><tr
id=sl_svn141_839

><td class="source">      self.errors_by_category[category] += 1<br></td></tr
><tr
id=sl_svn141_840

><td class="source"><br></td></tr
><tr
id=sl_svn141_841

><td class="source">  def PrintErrorCounts(self):<br></td></tr
><tr
id=sl_svn141_842

><td class="source">    &quot;&quot;&quot;Print a summary of errors by category, and the total.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_843

><td class="source">    for category, count in self.errors_by_category.iteritems():<br></td></tr
><tr
id=sl_svn141_844

><td class="source">      sys.stderr.write(&#39;Category \&#39;%s\&#39; errors found: %d\n&#39; %<br></td></tr
><tr
id=sl_svn141_845

><td class="source">                       (category, count))<br></td></tr
><tr
id=sl_svn141_846

><td class="source">    sys.stderr.write(&#39;Total errors found: %d\n&#39; % self.error_count)<br></td></tr
><tr
id=sl_svn141_847

><td class="source"><br></td></tr
><tr
id=sl_svn141_848

><td class="source">_cpplint_state = _CppLintState()<br></td></tr
><tr
id=sl_svn141_849

><td class="source"><br></td></tr
><tr
id=sl_svn141_850

><td class="source"><br></td></tr
><tr
id=sl_svn141_851

><td class="source">def _OutputFormat():<br></td></tr
><tr
id=sl_svn141_852

><td class="source">  &quot;&quot;&quot;Gets the module&#39;s output format.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_853

><td class="source">  return _cpplint_state.output_format<br></td></tr
><tr
id=sl_svn141_854

><td class="source"><br></td></tr
><tr
id=sl_svn141_855

><td class="source"><br></td></tr
><tr
id=sl_svn141_856

><td class="source">def _SetOutputFormat(output_format):<br></td></tr
><tr
id=sl_svn141_857

><td class="source">  &quot;&quot;&quot;Sets the module&#39;s output format.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_858

><td class="source">  _cpplint_state.SetOutputFormat(output_format)<br></td></tr
><tr
id=sl_svn141_859

><td class="source"><br></td></tr
><tr
id=sl_svn141_860

><td class="source"><br></td></tr
><tr
id=sl_svn141_861

><td class="source">def _VerboseLevel():<br></td></tr
><tr
id=sl_svn141_862

><td class="source">  &quot;&quot;&quot;Returns the module&#39;s verbosity setting.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_863

><td class="source">  return _cpplint_state.verbose_level<br></td></tr
><tr
id=sl_svn141_864

><td class="source"><br></td></tr
><tr
id=sl_svn141_865

><td class="source"><br></td></tr
><tr
id=sl_svn141_866

><td class="source">def _SetVerboseLevel(level):<br></td></tr
><tr
id=sl_svn141_867

><td class="source">  &quot;&quot;&quot;Sets the module&#39;s verbosity, and returns the previous setting.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_868

><td class="source">  return _cpplint_state.SetVerboseLevel(level)<br></td></tr
><tr
id=sl_svn141_869

><td class="source"><br></td></tr
><tr
id=sl_svn141_870

><td class="source"><br></td></tr
><tr
id=sl_svn141_871

><td class="source">def _SetCountingStyle(level):<br></td></tr
><tr
id=sl_svn141_872

><td class="source">  &quot;&quot;&quot;Sets the module&#39;s counting options.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_873

><td class="source">  _cpplint_state.SetCountingStyle(level)<br></td></tr
><tr
id=sl_svn141_874

><td class="source"><br></td></tr
><tr
id=sl_svn141_875

><td class="source"><br></td></tr
><tr
id=sl_svn141_876

><td class="source">def _Filters():<br></td></tr
><tr
id=sl_svn141_877

><td class="source">  &quot;&quot;&quot;Returns the module&#39;s list of output filters, as a list.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_878

><td class="source">  return _cpplint_state.filters<br></td></tr
><tr
id=sl_svn141_879

><td class="source"><br></td></tr
><tr
id=sl_svn141_880

><td class="source"><br></td></tr
><tr
id=sl_svn141_881

><td class="source">def _SetFilters(filters):<br></td></tr
><tr
id=sl_svn141_882

><td class="source">  &quot;&quot;&quot;Sets the module&#39;s error-message filters.<br></td></tr
><tr
id=sl_svn141_883

><td class="source"><br></td></tr
><tr
id=sl_svn141_884

><td class="source">  These filters are applied when deciding whether to emit a given<br></td></tr
><tr
id=sl_svn141_885

><td class="source">  error message.<br></td></tr
><tr
id=sl_svn141_886

><td class="source"><br></td></tr
><tr
id=sl_svn141_887

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_888

><td class="source">    filters: A string of comma-separated filters (eg &quot;whitespace/indent&quot;).<br></td></tr
><tr
id=sl_svn141_889

><td class="source">             Each filter should start with + or -; else we die.<br></td></tr
><tr
id=sl_svn141_890

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_891

><td class="source">  _cpplint_state.SetFilters(filters)<br></td></tr
><tr
id=sl_svn141_892

><td class="source"><br></td></tr
><tr
id=sl_svn141_893

><td class="source">def _AddFilters(filters):<br></td></tr
><tr
id=sl_svn141_894

><td class="source">  &quot;&quot;&quot;Adds more filter overrides.<br></td></tr
><tr
id=sl_svn141_895

><td class="source"><br></td></tr
><tr
id=sl_svn141_896

><td class="source">  Unlike _SetFilters, this function does not reset the current list of filters<br></td></tr
><tr
id=sl_svn141_897

><td class="source">  available.<br></td></tr
><tr
id=sl_svn141_898

><td class="source"><br></td></tr
><tr
id=sl_svn141_899

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_900

><td class="source">    filters: A string of comma-separated filters (eg &quot;whitespace/indent&quot;).<br></td></tr
><tr
id=sl_svn141_901

><td class="source">             Each filter should start with + or -; else we die.<br></td></tr
><tr
id=sl_svn141_902

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_903

><td class="source">  _cpplint_state.AddFilters(filters)<br></td></tr
><tr
id=sl_svn141_904

><td class="source"><br></td></tr
><tr
id=sl_svn141_905

><td class="source">def _BackupFilters():<br></td></tr
><tr
id=sl_svn141_906

><td class="source">  &quot;&quot;&quot; Saves the current filter list to backup storage.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_907

><td class="source">  _cpplint_state.BackupFilters()<br></td></tr
><tr
id=sl_svn141_908

><td class="source"><br></td></tr
><tr
id=sl_svn141_909

><td class="source">def _RestoreFilters():<br></td></tr
><tr
id=sl_svn141_910

><td class="source">  &quot;&quot;&quot; Restores filters previously backed up.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_911

><td class="source">  _cpplint_state.RestoreFilters()<br></td></tr
><tr
id=sl_svn141_912

><td class="source"><br></td></tr
><tr
id=sl_svn141_913

><td class="source">class _FunctionState(object):<br></td></tr
><tr
id=sl_svn141_914

><td class="source">  &quot;&quot;&quot;Tracks current function name and the number of lines in its body.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_915

><td class="source"><br></td></tr
><tr
id=sl_svn141_916

><td class="source">  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.<br></td></tr
><tr
id=sl_svn141_917

><td class="source">  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.<br></td></tr
><tr
id=sl_svn141_918

><td class="source"><br></td></tr
><tr
id=sl_svn141_919

><td class="source">  def __init__(self):<br></td></tr
><tr
id=sl_svn141_920

><td class="source">    self.in_a_function = False<br></td></tr
><tr
id=sl_svn141_921

><td class="source">    self.lines_in_function = 0<br></td></tr
><tr
id=sl_svn141_922

><td class="source">    self.current_function = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_923

><td class="source"><br></td></tr
><tr
id=sl_svn141_924

><td class="source">  def Begin(self, function_name):<br></td></tr
><tr
id=sl_svn141_925

><td class="source">    &quot;&quot;&quot;Start analyzing function body.<br></td></tr
><tr
id=sl_svn141_926

><td class="source"><br></td></tr
><tr
id=sl_svn141_927

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_928

><td class="source">      function_name: The name of the function being tracked.<br></td></tr
><tr
id=sl_svn141_929

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_930

><td class="source">    self.in_a_function = True<br></td></tr
><tr
id=sl_svn141_931

><td class="source">    self.lines_in_function = 0<br></td></tr
><tr
id=sl_svn141_932

><td class="source">    self.current_function = function_name<br></td></tr
><tr
id=sl_svn141_933

><td class="source"><br></td></tr
><tr
id=sl_svn141_934

><td class="source">  def Count(self):<br></td></tr
><tr
id=sl_svn141_935

><td class="source">    &quot;&quot;&quot;Count line in current function body.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_936

><td class="source">    if self.in_a_function:<br></td></tr
><tr
id=sl_svn141_937

><td class="source">      self.lines_in_function += 1<br></td></tr
><tr
id=sl_svn141_938

><td class="source"><br></td></tr
><tr
id=sl_svn141_939

><td class="source">  def Check(self, error, filename, linenum):<br></td></tr
><tr
id=sl_svn141_940

><td class="source">    &quot;&quot;&quot;Report if too many lines in function body.<br></td></tr
><tr
id=sl_svn141_941

><td class="source"><br></td></tr
><tr
id=sl_svn141_942

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_943

><td class="source">      error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_944

><td class="source">      filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_945

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_946

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_947

><td class="source">    if Match(r&#39;T(EST|est)&#39;, self.current_function):<br></td></tr
><tr
id=sl_svn141_948

><td class="source">      base_trigger = self._TEST_TRIGGER<br></td></tr
><tr
id=sl_svn141_949

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_950

><td class="source">      base_trigger = self._NORMAL_TRIGGER<br></td></tr
><tr
id=sl_svn141_951

><td class="source">    trigger = base_trigger * 2**_VerboseLevel()<br></td></tr
><tr
id=sl_svn141_952

><td class="source"><br></td></tr
><tr
id=sl_svn141_953

><td class="source">    if self.lines_in_function &gt; trigger:<br></td></tr
><tr
id=sl_svn141_954

><td class="source">      error_level = int(math.log(self.lines_in_function / base_trigger, 2))<br></td></tr
><tr
id=sl_svn141_955

><td class="source">      # 50 =&gt; 0, 100 =&gt; 1, 200 =&gt; 2, 400 =&gt; 3, 800 =&gt; 4, 1600 =&gt; 5, ...<br></td></tr
><tr
id=sl_svn141_956

><td class="source">      if error_level &gt; 5:<br></td></tr
><tr
id=sl_svn141_957

><td class="source">        error_level = 5<br></td></tr
><tr
id=sl_svn141_958

><td class="source">      error(filename, linenum, &#39;readability/fn_size&#39;, error_level,<br></td></tr
><tr
id=sl_svn141_959

><td class="source">            &#39;Small and focused functions are preferred:&#39;<br></td></tr
><tr
id=sl_svn141_960

><td class="source">            &#39; %s has %d non-comment lines&#39;<br></td></tr
><tr
id=sl_svn141_961

><td class="source">            &#39; (error triggered by exceeding %d lines).&#39;  % (<br></td></tr
><tr
id=sl_svn141_962

><td class="source">                self.current_function, self.lines_in_function, trigger))<br></td></tr
><tr
id=sl_svn141_963

><td class="source"><br></td></tr
><tr
id=sl_svn141_964

><td class="source">  def End(self):<br></td></tr
><tr
id=sl_svn141_965

><td class="source">    &quot;&quot;&quot;Stop analyzing function body.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_966

><td class="source">    self.in_a_function = False<br></td></tr
><tr
id=sl_svn141_967

><td class="source"><br></td></tr
><tr
id=sl_svn141_968

><td class="source"><br></td></tr
><tr
id=sl_svn141_969

><td class="source">class _IncludeError(Exception):<br></td></tr
><tr
id=sl_svn141_970

><td class="source">  &quot;&quot;&quot;Indicates a problem with the include order in a file.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_971

><td class="source">  pass<br></td></tr
><tr
id=sl_svn141_972

><td class="source"><br></td></tr
><tr
id=sl_svn141_973

><td class="source"><br></td></tr
><tr
id=sl_svn141_974

><td class="source">class FileInfo(object):<br></td></tr
><tr
id=sl_svn141_975

><td class="source">  &quot;&quot;&quot;Provides utility functions for filenames.<br></td></tr
><tr
id=sl_svn141_976

><td class="source"><br></td></tr
><tr
id=sl_svn141_977

><td class="source">  FileInfo provides easy access to the components of a file&#39;s path<br></td></tr
><tr
id=sl_svn141_978

><td class="source">  relative to the project root.<br></td></tr
><tr
id=sl_svn141_979

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_980

><td class="source"><br></td></tr
><tr
id=sl_svn141_981

><td class="source">  def __init__(self, filename):<br></td></tr
><tr
id=sl_svn141_982

><td class="source">    self._filename = filename<br></td></tr
><tr
id=sl_svn141_983

><td class="source"><br></td></tr
><tr
id=sl_svn141_984

><td class="source">  def FullName(self):<br></td></tr
><tr
id=sl_svn141_985

><td class="source">    &quot;&quot;&quot;Make Windows paths like Unix.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_986

><td class="source">    return os.path.abspath(self._filename).replace(&#39;\\&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_987

><td class="source"><br></td></tr
><tr
id=sl_svn141_988

><td class="source">  def RepositoryName(self):<br></td></tr
><tr
id=sl_svn141_989

><td class="source">    &quot;&quot;&quot;FullName after removing the local path to the repository.<br></td></tr
><tr
id=sl_svn141_990

><td class="source"><br></td></tr
><tr
id=sl_svn141_991

><td class="source">    If we have a real absolute path name here we can try to do something smart:<br></td></tr
><tr
id=sl_svn141_992

><td class="source">    detecting the root of the checkout and truncating /path/to/checkout from<br></td></tr
><tr
id=sl_svn141_993

><td class="source">    the name so that we get header guards that don&#39;t include things like<br></td></tr
><tr
id=sl_svn141_994

><td class="source">    &quot;C:\Documents and Settings\...&quot; or &quot;/home/username/...&quot; in them and thus<br></td></tr
><tr
id=sl_svn141_995

><td class="source">    people on different computers who have checked the source out to different<br></td></tr
><tr
id=sl_svn141_996

><td class="source">    locations won&#39;t see bogus errors.<br></td></tr
><tr
id=sl_svn141_997

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_998

><td class="source">    fullname = self.FullName()<br></td></tr
><tr
id=sl_svn141_999

><td class="source"><br></td></tr
><tr
id=sl_svn141_1000

><td class="source">    if os.path.exists(fullname):<br></td></tr
><tr
id=sl_svn141_1001

><td class="source">      project_dir = os.path.dirname(fullname)<br></td></tr
><tr
id=sl_svn141_1002

><td class="source"><br></td></tr
><tr
id=sl_svn141_1003

><td class="source">      if os.path.exists(os.path.join(project_dir, &quot;.svn&quot;)):<br></td></tr
><tr
id=sl_svn141_1004

><td class="source">        # If there&#39;s a .svn file in the current directory, we recursively look<br></td></tr
><tr
id=sl_svn141_1005

><td class="source">        # up the directory tree for the top of the SVN checkout<br></td></tr
><tr
id=sl_svn141_1006

><td class="source">        root_dir = project_dir<br></td></tr
><tr
id=sl_svn141_1007

><td class="source">        one_up_dir = os.path.dirname(root_dir)<br></td></tr
><tr
id=sl_svn141_1008

><td class="source">        while os.path.exists(os.path.join(one_up_dir, &quot;.svn&quot;)):<br></td></tr
><tr
id=sl_svn141_1009

><td class="source">          root_dir = os.path.dirname(root_dir)<br></td></tr
><tr
id=sl_svn141_1010

><td class="source">          one_up_dir = os.path.dirname(one_up_dir)<br></td></tr
><tr
id=sl_svn141_1011

><td class="source"><br></td></tr
><tr
id=sl_svn141_1012

><td class="source">        prefix = os.path.commonprefix([root_dir, project_dir])<br></td></tr
><tr
id=sl_svn141_1013

><td class="source">        return fullname[len(prefix) + 1:]<br></td></tr
><tr
id=sl_svn141_1014

><td class="source"><br></td></tr
><tr
id=sl_svn141_1015

><td class="source">      # Not SVN &lt;= 1.6? Try to find a git, hg, or svn top level directory by<br></td></tr
><tr
id=sl_svn141_1016

><td class="source">      # searching up from the current path.<br></td></tr
><tr
id=sl_svn141_1017

><td class="source">      root_dir = os.path.dirname(fullname)<br></td></tr
><tr
id=sl_svn141_1018

><td class="source">      while (root_dir != os.path.dirname(root_dir) and<br></td></tr
><tr
id=sl_svn141_1019

><td class="source">             not os.path.exists(os.path.join(root_dir, &quot;.git&quot;)) and<br></td></tr
><tr
id=sl_svn141_1020

><td class="source">             not os.path.exists(os.path.join(root_dir, &quot;.hg&quot;)) and<br></td></tr
><tr
id=sl_svn141_1021

><td class="source">             not os.path.exists(os.path.join(root_dir, &quot;.svn&quot;))):<br></td></tr
><tr
id=sl_svn141_1022

><td class="source">        root_dir = os.path.dirname(root_dir)<br></td></tr
><tr
id=sl_svn141_1023

><td class="source"><br></td></tr
><tr
id=sl_svn141_1024

><td class="source">      if (os.path.exists(os.path.join(root_dir, &quot;.git&quot;)) or<br></td></tr
><tr
id=sl_svn141_1025

><td class="source">          os.path.exists(os.path.join(root_dir, &quot;.hg&quot;)) or<br></td></tr
><tr
id=sl_svn141_1026

><td class="source">          os.path.exists(os.path.join(root_dir, &quot;.svn&quot;))):<br></td></tr
><tr
id=sl_svn141_1027

><td class="source">        prefix = os.path.commonprefix([root_dir, project_dir])<br></td></tr
><tr
id=sl_svn141_1028

><td class="source">        return fullname[len(prefix) + 1:]<br></td></tr
><tr
id=sl_svn141_1029

><td class="source"><br></td></tr
><tr
id=sl_svn141_1030

><td class="source">    # Don&#39;t know what to do; header guard warnings may be wrong...<br></td></tr
><tr
id=sl_svn141_1031

><td class="source">    return fullname<br></td></tr
><tr
id=sl_svn141_1032

><td class="source"><br></td></tr
><tr
id=sl_svn141_1033

><td class="source">  def Split(self):<br></td></tr
><tr
id=sl_svn141_1034

><td class="source">    &quot;&quot;&quot;Splits the file into the directory, basename, and extension.<br></td></tr
><tr
id=sl_svn141_1035

><td class="source"><br></td></tr
><tr
id=sl_svn141_1036

><td class="source">    For &#39;chrome/browser/browser.cc&#39;, Split() would<br></td></tr
><tr
id=sl_svn141_1037

><td class="source">    return (&#39;chrome/browser&#39;, &#39;browser&#39;, &#39;.cc&#39;)<br></td></tr
><tr
id=sl_svn141_1038

><td class="source"><br></td></tr
><tr
id=sl_svn141_1039

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_1040

><td class="source">      A tuple of (directory, basename, extension).<br></td></tr
><tr
id=sl_svn141_1041

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1042

><td class="source"><br></td></tr
><tr
id=sl_svn141_1043

><td class="source">    googlename = self.RepositoryName()<br></td></tr
><tr
id=sl_svn141_1044

><td class="source">    project, rest = os.path.split(googlename)<br></td></tr
><tr
id=sl_svn141_1045

><td class="source">    return (project,) + os.path.splitext(rest)<br></td></tr
><tr
id=sl_svn141_1046

><td class="source"><br></td></tr
><tr
id=sl_svn141_1047

><td class="source">  def BaseName(self):<br></td></tr
><tr
id=sl_svn141_1048

><td class="source">    &quot;&quot;&quot;File base name - text after the final slash, before the final period.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1049

><td class="source">    return self.Split()[1]<br></td></tr
><tr
id=sl_svn141_1050

><td class="source"><br></td></tr
><tr
id=sl_svn141_1051

><td class="source">  def Extension(self):<br></td></tr
><tr
id=sl_svn141_1052

><td class="source">    &quot;&quot;&quot;File extension - text following the final period.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1053

><td class="source">    return self.Split()[2]<br></td></tr
><tr
id=sl_svn141_1054

><td class="source"><br></td></tr
><tr
id=sl_svn141_1055

><td class="source">  def NoExtension(self):<br></td></tr
><tr
id=sl_svn141_1056

><td class="source">    &quot;&quot;&quot;File has no source file extension.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1057

><td class="source">    return &#39;/&#39;.join(self.Split()[0:2])<br></td></tr
><tr
id=sl_svn141_1058

><td class="source"><br></td></tr
><tr
id=sl_svn141_1059

><td class="source">  def IsSource(self):<br></td></tr
><tr
id=sl_svn141_1060

><td class="source">    &quot;&quot;&quot;File has a source file extension.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1061

><td class="source">    return self.Extension()[1:] in (&#39;c&#39;, &#39;cc&#39;, &#39;cpp&#39;, &#39;cxx&#39;)<br></td></tr
><tr
id=sl_svn141_1062

><td class="source"><br></td></tr
><tr
id=sl_svn141_1063

><td class="source"><br></td></tr
><tr
id=sl_svn141_1064

><td class="source">def _ShouldPrintError(category, confidence, linenum):<br></td></tr
><tr
id=sl_svn141_1065

><td class="source">  &quot;&quot;&quot;If confidence &gt;= verbose, category passes filter and is not suppressed.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1066

><td class="source"><br></td></tr
><tr
id=sl_svn141_1067

><td class="source">  # There are three ways we might decide not to print an error message:<br></td></tr
><tr
id=sl_svn141_1068

><td class="source">  # a &quot;NOLINT(category)&quot; comment appears in the source,<br></td></tr
><tr
id=sl_svn141_1069

><td class="source">  # the verbosity level isn&#39;t high enough, or the filters filter it out.<br></td></tr
><tr
id=sl_svn141_1070

><td class="source">  if IsErrorSuppressedByNolint(category, linenum):<br></td></tr
><tr
id=sl_svn141_1071

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_1072

><td class="source"><br></td></tr
><tr
id=sl_svn141_1073

><td class="source">  if confidence &lt; _cpplint_state.verbose_level:<br></td></tr
><tr
id=sl_svn141_1074

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_1075

><td class="source"><br></td></tr
><tr
id=sl_svn141_1076

><td class="source">  is_filtered = False<br></td></tr
><tr
id=sl_svn141_1077

><td class="source">  for one_filter in _Filters():<br></td></tr
><tr
id=sl_svn141_1078

><td class="source">    if one_filter.startswith(&#39;-&#39;):<br></td></tr
><tr
id=sl_svn141_1079

><td class="source">      if category.startswith(one_filter[1:]):<br></td></tr
><tr
id=sl_svn141_1080

><td class="source">        is_filtered = True<br></td></tr
><tr
id=sl_svn141_1081

><td class="source">    elif one_filter.startswith(&#39;+&#39;):<br></td></tr
><tr
id=sl_svn141_1082

><td class="source">      if category.startswith(one_filter[1:]):<br></td></tr
><tr
id=sl_svn141_1083

><td class="source">        is_filtered = False<br></td></tr
><tr
id=sl_svn141_1084

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_1085

><td class="source">      assert False  # should have been checked for in SetFilter.<br></td></tr
><tr
id=sl_svn141_1086

><td class="source">  if is_filtered:<br></td></tr
><tr
id=sl_svn141_1087

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_1088

><td class="source"><br></td></tr
><tr
id=sl_svn141_1089

><td class="source">  return True<br></td></tr
><tr
id=sl_svn141_1090

><td class="source"><br></td></tr
><tr
id=sl_svn141_1091

><td class="source"><br></td></tr
><tr
id=sl_svn141_1092

><td class="source">def Error(filename, linenum, category, confidence, message):<br></td></tr
><tr
id=sl_svn141_1093

><td class="source">  &quot;&quot;&quot;Logs the fact we&#39;ve found a lint error.<br></td></tr
><tr
id=sl_svn141_1094

><td class="source"><br></td></tr
><tr
id=sl_svn141_1095

><td class="source">  We log where the error was found, and also our confidence in the error,<br></td></tr
><tr
id=sl_svn141_1096

><td class="source">  that is, how certain we are this is a legitimate style regression, and<br></td></tr
><tr
id=sl_svn141_1097

><td class="source">  not a misidentification or a use that&#39;s sometimes justified.<br></td></tr
><tr
id=sl_svn141_1098

><td class="source"><br></td></tr
><tr
id=sl_svn141_1099

><td class="source">  False positives can be suppressed by the use of<br></td></tr
><tr
id=sl_svn141_1100

><td class="source">  &quot;cpplint(category)&quot;  comments on the offending line.  These are<br></td></tr
><tr
id=sl_svn141_1101

><td class="source">  parsed into _error_suppressions.<br></td></tr
><tr
id=sl_svn141_1102

><td class="source"><br></td></tr
><tr
id=sl_svn141_1103

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1104

><td class="source">    filename: The name of the file containing the error.<br></td></tr
><tr
id=sl_svn141_1105

><td class="source">    linenum: The number of the line containing the error.<br></td></tr
><tr
id=sl_svn141_1106

><td class="source">    category: A string used to describe the &quot;category&quot; this bug<br></td></tr
><tr
id=sl_svn141_1107

><td class="source">      falls under: &quot;whitespace&quot;, say, or &quot;runtime&quot;.  Categories<br></td></tr
><tr
id=sl_svn141_1108

><td class="source">      may have a hierarchy separated by slashes: &quot;whitespace/indent&quot;.<br></td></tr
><tr
id=sl_svn141_1109

><td class="source">    confidence: A number from 1-5 representing a confidence score for<br></td></tr
><tr
id=sl_svn141_1110

><td class="source">      the error, with 5 meaning that we are certain of the problem,<br></td></tr
><tr
id=sl_svn141_1111

><td class="source">      and 1 meaning that it could be a legitimate construct.<br></td></tr
><tr
id=sl_svn141_1112

><td class="source">    message: The error message.<br></td></tr
><tr
id=sl_svn141_1113

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1114

><td class="source">  if _ShouldPrintError(category, confidence, linenum):<br></td></tr
><tr
id=sl_svn141_1115

><td class="source">    _cpplint_state.IncrementErrorCount(category)<br></td></tr
><tr
id=sl_svn141_1116

><td class="source">    if _cpplint_state.output_format == &#39;vs7&#39;:<br></td></tr
><tr
id=sl_svn141_1117

><td class="source">      sys.stderr.write(&#39;%s(%s):  %s  [%s] [%d]\n&#39; % (<br></td></tr
><tr
id=sl_svn141_1118

><td class="source">          filename, linenum, message, category, confidence))<br></td></tr
><tr
id=sl_svn141_1119

><td class="source">    elif _cpplint_state.output_format == &#39;eclipse&#39;:<br></td></tr
><tr
id=sl_svn141_1120

><td class="source">      sys.stderr.write(&#39;%s:%s: warning: %s  [%s] [%d]\n&#39; % (<br></td></tr
><tr
id=sl_svn141_1121

><td class="source">          filename, linenum, message, category, confidence))<br></td></tr
><tr
id=sl_svn141_1122

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_1123

><td class="source">      sys.stderr.write(&#39;%s:%s:  %s  [%s] [%d]\n&#39; % (<br></td></tr
><tr
id=sl_svn141_1124

><td class="source">          filename, linenum, message, category, confidence))<br></td></tr
><tr
id=sl_svn141_1125

><td class="source"><br></td></tr
><tr
id=sl_svn141_1126

><td class="source"><br></td></tr
><tr
id=sl_svn141_1127

><td class="source"># Matches standard C++ escape sequences per 2.13.2.3 of the C++ standard.<br></td></tr
><tr
id=sl_svn141_1128

><td class="source">_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile(<br></td></tr
><tr
id=sl_svn141_1129

><td class="source">    r&#39;\\([abfnrtv?&quot;\\\&#39;]|\d+|x[0-9a-fA-F]+)&#39;)<br></td></tr
><tr
id=sl_svn141_1130

><td class="source"># Match a single C style comment on the same line.<br></td></tr
><tr
id=sl_svn141_1131

><td class="source">_RE_PATTERN_C_COMMENTS = r&#39;/\*(?:[^*]|\*(?!/))*\*/&#39;<br></td></tr
><tr
id=sl_svn141_1132

><td class="source"># Matches multi-line C style comments.<br></td></tr
><tr
id=sl_svn141_1133

><td class="source"># This RE is a little bit more complicated than one might expect, because we<br></td></tr
><tr
id=sl_svn141_1134

><td class="source"># have to take care of space removals tools so we can handle comments inside<br></td></tr
><tr
id=sl_svn141_1135

><td class="source"># statements better.<br></td></tr
><tr
id=sl_svn141_1136

><td class="source"># The current rule is: We only clear spaces from both sides when we&#39;re at the<br></td></tr
><tr
id=sl_svn141_1137

><td class="source"># end of the line. Otherwise, we try to remove spaces from the right side,<br></td></tr
><tr
id=sl_svn141_1138

><td class="source"># if this doesn&#39;t work we try on left side but only if there&#39;s a non-character<br></td></tr
><tr
id=sl_svn141_1139

><td class="source"># on the right.<br></td></tr
><tr
id=sl_svn141_1140

><td class="source">_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile(<br></td></tr
><tr
id=sl_svn141_1141

><td class="source">    r&#39;(\s*&#39; + _RE_PATTERN_C_COMMENTS + r&#39;\s*$|&#39; +<br></td></tr
><tr
id=sl_svn141_1142

><td class="source">    _RE_PATTERN_C_COMMENTS + r&#39;\s+|&#39; +<br></td></tr
><tr
id=sl_svn141_1143

><td class="source">    r&#39;\s+&#39; + _RE_PATTERN_C_COMMENTS + r&#39;(?=\W)|&#39; +<br></td></tr
><tr
id=sl_svn141_1144

><td class="source">    _RE_PATTERN_C_COMMENTS + r&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_1145

><td class="source"><br></td></tr
><tr
id=sl_svn141_1146

><td class="source"><br></td></tr
><tr
id=sl_svn141_1147

><td class="source">def IsCppString(line):<br></td></tr
><tr
id=sl_svn141_1148

><td class="source">  &quot;&quot;&quot;Does line terminate so, that the next symbol is in string constant.<br></td></tr
><tr
id=sl_svn141_1149

><td class="source"><br></td></tr
><tr
id=sl_svn141_1150

><td class="source">  This function does not consider single-line nor multi-line comments.<br></td></tr
><tr
id=sl_svn141_1151

><td class="source"><br></td></tr
><tr
id=sl_svn141_1152

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1153

><td class="source">    line: is a partial line of code starting from the 0..n.<br></td></tr
><tr
id=sl_svn141_1154

><td class="source"><br></td></tr
><tr
id=sl_svn141_1155

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1156

><td class="source">    True, if next character appended to &#39;line&#39; is inside a<br></td></tr
><tr
id=sl_svn141_1157

><td class="source">    string constant.<br></td></tr
><tr
id=sl_svn141_1158

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1159

><td class="source"><br></td></tr
><tr
id=sl_svn141_1160

><td class="source">  line = line.replace(r&#39;\\&#39;, &#39;XX&#39;)  # after this, \\&quot; does not match to \&quot;<br></td></tr
><tr
id=sl_svn141_1161

><td class="source">  return ((line.count(&#39;&quot;&#39;) - line.count(r&#39;\&quot;&#39;) - line.count(&quot;&#39;\&quot;&#39;&quot;)) &amp; 1) == 1<br></td></tr
><tr
id=sl_svn141_1162

><td class="source"><br></td></tr
><tr
id=sl_svn141_1163

><td class="source"><br></td></tr
><tr
id=sl_svn141_1164

><td class="source">def CleanseRawStrings(raw_lines):<br></td></tr
><tr
id=sl_svn141_1165

><td class="source">  &quot;&quot;&quot;Removes C++11 raw strings from lines.<br></td></tr
><tr
id=sl_svn141_1166

><td class="source"><br></td></tr
><tr
id=sl_svn141_1167

><td class="source">    Before:<br></td></tr
><tr
id=sl_svn141_1168

><td class="source">      static const char kData[] = R&quot;(<br></td></tr
><tr
id=sl_svn141_1169

><td class="source">          multi-line string<br></td></tr
><tr
id=sl_svn141_1170

><td class="source">          )&quot;;<br></td></tr
><tr
id=sl_svn141_1171

><td class="source"><br></td></tr
><tr
id=sl_svn141_1172

><td class="source">    After:<br></td></tr
><tr
id=sl_svn141_1173

><td class="source">      static const char kData[] = &quot;&quot;<br></td></tr
><tr
id=sl_svn141_1174

><td class="source">          (replaced by blank line)<br></td></tr
><tr
id=sl_svn141_1175

><td class="source">          &quot;&quot;;<br></td></tr
><tr
id=sl_svn141_1176

><td class="source"><br></td></tr
><tr
id=sl_svn141_1177

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1178

><td class="source">    raw_lines: list of raw lines.<br></td></tr
><tr
id=sl_svn141_1179

><td class="source"><br></td></tr
><tr
id=sl_svn141_1180

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1181

><td class="source">    list of lines with C++11 raw strings replaced by empty strings.<br></td></tr
><tr
id=sl_svn141_1182

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1183

><td class="source"><br></td></tr
><tr
id=sl_svn141_1184

><td class="source">  delimiter = None<br></td></tr
><tr
id=sl_svn141_1185

><td class="source">  lines_without_raw_strings = []<br></td></tr
><tr
id=sl_svn141_1186

><td class="source">  for line in raw_lines:<br></td></tr
><tr
id=sl_svn141_1187

><td class="source">    if delimiter:<br></td></tr
><tr
id=sl_svn141_1188

><td class="source">      # Inside a raw string, look for the end<br></td></tr
><tr
id=sl_svn141_1189

><td class="source">      end = line.find(delimiter)<br></td></tr
><tr
id=sl_svn141_1190

><td class="source">      if end &gt;= 0:<br></td></tr
><tr
id=sl_svn141_1191

><td class="source">        # Found the end of the string, match leading space for this<br></td></tr
><tr
id=sl_svn141_1192

><td class="source">        # line and resume copying the original lines, and also insert<br></td></tr
><tr
id=sl_svn141_1193

><td class="source">        # a &quot;&quot; on the last line.<br></td></tr
><tr
id=sl_svn141_1194

><td class="source">        leading_space = Match(r&#39;^(\s*)\S&#39;, line)<br></td></tr
><tr
id=sl_svn141_1195

><td class="source">        line = leading_space.group(1) + &#39;&quot;&quot;&#39; + line[end + len(delimiter):]<br></td></tr
><tr
id=sl_svn141_1196

><td class="source">        delimiter = None<br></td></tr
><tr
id=sl_svn141_1197

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1198

><td class="source">        # Haven&#39;t found the end yet, append a blank line.<br></td></tr
><tr
id=sl_svn141_1199

><td class="source">        line = &#39;&quot;&quot;&#39;<br></td></tr
><tr
id=sl_svn141_1200

><td class="source"><br></td></tr
><tr
id=sl_svn141_1201

><td class="source">    # Look for beginning of a raw string, and replace them with<br></td></tr
><tr
id=sl_svn141_1202

><td class="source">    # empty strings.  This is done in a loop to handle multiple raw<br></td></tr
><tr
id=sl_svn141_1203

><td class="source">    # strings on the same line.<br></td></tr
><tr
id=sl_svn141_1204

><td class="source">    while delimiter is None:<br></td></tr
><tr
id=sl_svn141_1205

><td class="source">      # Look for beginning of a raw string.<br></td></tr
><tr
id=sl_svn141_1206

><td class="source">      # See 2.14.15 [lex.string] for syntax.<br></td></tr
><tr
id=sl_svn141_1207

><td class="source">      matched = Match(r&#39;^(.*)\b(?:R|u8R|uR|UR|LR)&quot;([^\s\\()]*)\((.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_1208

><td class="source">      if matched:<br></td></tr
><tr
id=sl_svn141_1209

><td class="source">        delimiter = &#39;)&#39; + matched.group(2) + &#39;&quot;&#39;<br></td></tr
><tr
id=sl_svn141_1210

><td class="source"><br></td></tr
><tr
id=sl_svn141_1211

><td class="source">        end = matched.group(3).find(delimiter)<br></td></tr
><tr
id=sl_svn141_1212

><td class="source">        if end &gt;= 0:<br></td></tr
><tr
id=sl_svn141_1213

><td class="source">          # Raw string ended on same line<br></td></tr
><tr
id=sl_svn141_1214

><td class="source">          line = (matched.group(1) + &#39;&quot;&quot;&#39; +<br></td></tr
><tr
id=sl_svn141_1215

><td class="source">                  matched.group(3)[end + len(delimiter):])<br></td></tr
><tr
id=sl_svn141_1216

><td class="source">          delimiter = None<br></td></tr
><tr
id=sl_svn141_1217

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_1218

><td class="source">          # Start of a multi-line raw string<br></td></tr
><tr
id=sl_svn141_1219

><td class="source">          line = matched.group(1) + &#39;&quot;&quot;&#39;<br></td></tr
><tr
id=sl_svn141_1220

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1221

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_1222

><td class="source"><br></td></tr
><tr
id=sl_svn141_1223

><td class="source">    lines_without_raw_strings.append(line)<br></td></tr
><tr
id=sl_svn141_1224

><td class="source"><br></td></tr
><tr
id=sl_svn141_1225

><td class="source">  # TODO(unknown): if delimiter is not None here, we might want to<br></td></tr
><tr
id=sl_svn141_1226

><td class="source">  # emit a warning for unterminated string.<br></td></tr
><tr
id=sl_svn141_1227

><td class="source">  return lines_without_raw_strings<br></td></tr
><tr
id=sl_svn141_1228

><td class="source"><br></td></tr
><tr
id=sl_svn141_1229

><td class="source"><br></td></tr
><tr
id=sl_svn141_1230

><td class="source">def FindNextMultiLineCommentStart(lines, lineix):<br></td></tr
><tr
id=sl_svn141_1231

><td class="source">  &quot;&quot;&quot;Find the beginning marker for a multiline comment.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1232

><td class="source">  while lineix &lt; len(lines):<br></td></tr
><tr
id=sl_svn141_1233

><td class="source">    if lines[lineix].strip().startswith(&#39;/*&#39;):<br></td></tr
><tr
id=sl_svn141_1234

><td class="source">      # Only return this marker if the comment goes beyond this line<br></td></tr
><tr
id=sl_svn141_1235

><td class="source">      if lines[lineix].strip().find(&#39;*/&#39;, 2) &lt; 0:<br></td></tr
><tr
id=sl_svn141_1236

><td class="source">        return lineix<br></td></tr
><tr
id=sl_svn141_1237

><td class="source">    lineix += 1<br></td></tr
><tr
id=sl_svn141_1238

><td class="source">  return len(lines)<br></td></tr
><tr
id=sl_svn141_1239

><td class="source"><br></td></tr
><tr
id=sl_svn141_1240

><td class="source"><br></td></tr
><tr
id=sl_svn141_1241

><td class="source">def FindNextMultiLineCommentEnd(lines, lineix):<br></td></tr
><tr
id=sl_svn141_1242

><td class="source">  &quot;&quot;&quot;We are inside a comment, find the end marker.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1243

><td class="source">  while lineix &lt; len(lines):<br></td></tr
><tr
id=sl_svn141_1244

><td class="source">    if lines[lineix].strip().endswith(&#39;*/&#39;):<br></td></tr
><tr
id=sl_svn141_1245

><td class="source">      return lineix<br></td></tr
><tr
id=sl_svn141_1246

><td class="source">    lineix += 1<br></td></tr
><tr
id=sl_svn141_1247

><td class="source">  return len(lines)<br></td></tr
><tr
id=sl_svn141_1248

><td class="source"><br></td></tr
><tr
id=sl_svn141_1249

><td class="source"><br></td></tr
><tr
id=sl_svn141_1250

><td class="source">def RemoveMultiLineCommentsFromRange(lines, begin, end):<br></td></tr
><tr
id=sl_svn141_1251

><td class="source">  &quot;&quot;&quot;Clears a range of lines for multi-line comments.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1252

><td class="source">  # Having // dummy comments makes the lines non-empty, so we will not get<br></td></tr
><tr
id=sl_svn141_1253

><td class="source">  # unnecessary blank line warnings later in the code.<br></td></tr
><tr
id=sl_svn141_1254

><td class="source">  for i in range(begin, end):<br></td></tr
><tr
id=sl_svn141_1255

><td class="source">    lines[i] = &#39;/**/&#39;<br></td></tr
><tr
id=sl_svn141_1256

><td class="source"><br></td></tr
><tr
id=sl_svn141_1257

><td class="source"><br></td></tr
><tr
id=sl_svn141_1258

><td class="source">def RemoveMultiLineComments(filename, lines, error):<br></td></tr
><tr
id=sl_svn141_1259

><td class="source">  &quot;&quot;&quot;Removes multiline (c-style) comments from lines.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1260

><td class="source">  lineix = 0<br></td></tr
><tr
id=sl_svn141_1261

><td class="source">  while lineix &lt; len(lines):<br></td></tr
><tr
id=sl_svn141_1262

><td class="source">    lineix_begin = FindNextMultiLineCommentStart(lines, lineix)<br></td></tr
><tr
id=sl_svn141_1263

><td class="source">    if lineix_begin &gt;= len(lines):<br></td></tr
><tr
id=sl_svn141_1264

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_1265

><td class="source">    lineix_end = FindNextMultiLineCommentEnd(lines, lineix_begin)<br></td></tr
><tr
id=sl_svn141_1266

><td class="source">    if lineix_end &gt;= len(lines):<br></td></tr
><tr
id=sl_svn141_1267

><td class="source">      error(filename, lineix_begin + 1, &#39;readability/multiline_comment&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1268

><td class="source">            &#39;Could not find end of multi-line comment&#39;)<br></td></tr
><tr
id=sl_svn141_1269

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_1270

><td class="source">    RemoveMultiLineCommentsFromRange(lines, lineix_begin, lineix_end + 1)<br></td></tr
><tr
id=sl_svn141_1271

><td class="source">    lineix = lineix_end + 1<br></td></tr
><tr
id=sl_svn141_1272

><td class="source"><br></td></tr
><tr
id=sl_svn141_1273

><td class="source"><br></td></tr
><tr
id=sl_svn141_1274

><td class="source">def CleanseComments(line):<br></td></tr
><tr
id=sl_svn141_1275

><td class="source">  &quot;&quot;&quot;Removes //-comments and single-line C-style /* */ comments.<br></td></tr
><tr
id=sl_svn141_1276

><td class="source"><br></td></tr
><tr
id=sl_svn141_1277

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1278

><td class="source">    line: A line of C++ source.<br></td></tr
><tr
id=sl_svn141_1279

><td class="source"><br></td></tr
><tr
id=sl_svn141_1280

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1281

><td class="source">    The line with single-line comments removed.<br></td></tr
><tr
id=sl_svn141_1282

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1283

><td class="source">  commentpos = line.find(&#39;//&#39;)<br></td></tr
><tr
id=sl_svn141_1284

><td class="source">  if commentpos != -1 and not IsCppString(line[:commentpos]):<br></td></tr
><tr
id=sl_svn141_1285

><td class="source">    line = line[:commentpos].rstrip()<br></td></tr
><tr
id=sl_svn141_1286

><td class="source">  # get rid of /* ... */<br></td></tr
><tr
id=sl_svn141_1287

><td class="source">  return _RE_PATTERN_CLEANSE_LINE_C_COMMENTS.sub(&#39;&#39;, line)<br></td></tr
><tr
id=sl_svn141_1288

><td class="source"><br></td></tr
><tr
id=sl_svn141_1289

><td class="source"><br></td></tr
><tr
id=sl_svn141_1290

><td class="source">class CleansedLines(object):<br></td></tr
><tr
id=sl_svn141_1291

><td class="source">  &quot;&quot;&quot;Holds 4 copies of all lines with different preprocessing applied to them.<br></td></tr
><tr
id=sl_svn141_1292

><td class="source"><br></td></tr
><tr
id=sl_svn141_1293

><td class="source">  1) elided member contains lines without strings and comments.<br></td></tr
><tr
id=sl_svn141_1294

><td class="source">  2) lines member contains lines without comments.<br></td></tr
><tr
id=sl_svn141_1295

><td class="source">  3) raw_lines member contains all the lines without processing.<br></td></tr
><tr
id=sl_svn141_1296

><td class="source">  4) lines_without_raw_strings member is same as raw_lines, but with C++11 raw<br></td></tr
><tr
id=sl_svn141_1297

><td class="source">     strings removed.<br></td></tr
><tr
id=sl_svn141_1298

><td class="source">  All these members are of &lt;type &#39;list&#39;&gt;, and of the same length.<br></td></tr
><tr
id=sl_svn141_1299

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1300

><td class="source"><br></td></tr
><tr
id=sl_svn141_1301

><td class="source">  def __init__(self, lines):<br></td></tr
><tr
id=sl_svn141_1302

><td class="source">    self.elided = []<br></td></tr
><tr
id=sl_svn141_1303

><td class="source">    self.lines = []<br></td></tr
><tr
id=sl_svn141_1304

><td class="source">    self.raw_lines = lines<br></td></tr
><tr
id=sl_svn141_1305

><td class="source">    self.num_lines = len(lines)<br></td></tr
><tr
id=sl_svn141_1306

><td class="source">    self.lines_without_raw_strings = CleanseRawStrings(lines)<br></td></tr
><tr
id=sl_svn141_1307

><td class="source">    for linenum in range(len(self.lines_without_raw_strings)):<br></td></tr
><tr
id=sl_svn141_1308

><td class="source">      self.lines.append(CleanseComments(<br></td></tr
><tr
id=sl_svn141_1309

><td class="source">          self.lines_without_raw_strings[linenum]))<br></td></tr
><tr
id=sl_svn141_1310

><td class="source">      elided = self._CollapseStrings(self.lines_without_raw_strings[linenum])<br></td></tr
><tr
id=sl_svn141_1311

><td class="source">      self.elided.append(CleanseComments(elided))<br></td></tr
><tr
id=sl_svn141_1312

><td class="source"><br></td></tr
><tr
id=sl_svn141_1313

><td class="source">  def NumLines(self):<br></td></tr
><tr
id=sl_svn141_1314

><td class="source">    &quot;&quot;&quot;Returns the number of lines represented.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1315

><td class="source">    return self.num_lines<br></td></tr
><tr
id=sl_svn141_1316

><td class="source"><br></td></tr
><tr
id=sl_svn141_1317

><td class="source">  @staticmethod<br></td></tr
><tr
id=sl_svn141_1318

><td class="source">  def _CollapseStrings(elided):<br></td></tr
><tr
id=sl_svn141_1319

><td class="source">    &quot;&quot;&quot;Collapses strings and chars on a line to simple &quot;&quot; or &#39;&#39; blocks.<br></td></tr
><tr
id=sl_svn141_1320

><td class="source"><br></td></tr
><tr
id=sl_svn141_1321

><td class="source">    We nix strings first so we&#39;re not fooled by text like &#39;&quot;http://&quot;&#39;<br></td></tr
><tr
id=sl_svn141_1322

><td class="source"><br></td></tr
><tr
id=sl_svn141_1323

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_1324

><td class="source">      elided: The line being processed.<br></td></tr
><tr
id=sl_svn141_1325

><td class="source"><br></td></tr
><tr
id=sl_svn141_1326

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_1327

><td class="source">      The line with collapsed strings.<br></td></tr
><tr
id=sl_svn141_1328

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1329

><td class="source">    if _RE_PATTERN_INCLUDE.match(elided):<br></td></tr
><tr
id=sl_svn141_1330

><td class="source">      return elided<br></td></tr
><tr
id=sl_svn141_1331

><td class="source"><br></td></tr
><tr
id=sl_svn141_1332

><td class="source">    # Remove escaped characters first to make quote/single quote collapsing<br></td></tr
><tr
id=sl_svn141_1333

><td class="source">    # basic.  Things that look like escaped characters shouldn&#39;t occur<br></td></tr
><tr
id=sl_svn141_1334

><td class="source">    # outside of strings and chars.<br></td></tr
><tr
id=sl_svn141_1335

><td class="source">    elided = _RE_PATTERN_CLEANSE_LINE_ESCAPES.sub(&#39;&#39;, elided)<br></td></tr
><tr
id=sl_svn141_1336

><td class="source"><br></td></tr
><tr
id=sl_svn141_1337

><td class="source">    # Replace quoted strings and digit separators.  Both single quotes<br></td></tr
><tr
id=sl_svn141_1338

><td class="source">    # and double quotes are processed in the same loop, otherwise<br></td></tr
><tr
id=sl_svn141_1339

><td class="source">    # nested quotes wouldn&#39;t work.<br></td></tr
><tr
id=sl_svn141_1340

><td class="source">    collapsed = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_1341

><td class="source">    while True:<br></td></tr
><tr
id=sl_svn141_1342

><td class="source">      # Find the first quote character<br></td></tr
><tr
id=sl_svn141_1343

><td class="source">      match = Match(r&#39;^([^\&#39;&quot;]*)([\&#39;&quot;])(.*)$&#39;, elided)<br></td></tr
><tr
id=sl_svn141_1344

><td class="source">      if not match:<br></td></tr
><tr
id=sl_svn141_1345

><td class="source">        collapsed += elided<br></td></tr
><tr
id=sl_svn141_1346

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_1347

><td class="source">      head, quote, tail = match.groups()<br></td></tr
><tr
id=sl_svn141_1348

><td class="source"><br></td></tr
><tr
id=sl_svn141_1349

><td class="source">      if quote == &#39;&quot;&#39;:<br></td></tr
><tr
id=sl_svn141_1350

><td class="source">        # Collapse double quoted strings<br></td></tr
><tr
id=sl_svn141_1351

><td class="source">        second_quote = tail.find(&#39;&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_1352

><td class="source">        if second_quote &gt;= 0:<br></td></tr
><tr
id=sl_svn141_1353

><td class="source">          collapsed += head + &#39;&quot;&quot;&#39;<br></td></tr
><tr
id=sl_svn141_1354

><td class="source">          elided = tail[second_quote + 1:]<br></td></tr
><tr
id=sl_svn141_1355

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_1356

><td class="source">          # Unmatched double quote, don&#39;t bother processing the rest<br></td></tr
><tr
id=sl_svn141_1357

><td class="source">          # of the line since this is probably a multiline string.<br></td></tr
><tr
id=sl_svn141_1358

><td class="source">          collapsed += elided<br></td></tr
><tr
id=sl_svn141_1359

><td class="source">          break<br></td></tr
><tr
id=sl_svn141_1360

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1361

><td class="source">        # Found single quote, check nearby text to eliminate digit separators.<br></td></tr
><tr
id=sl_svn141_1362

><td class="source">        #<br></td></tr
><tr
id=sl_svn141_1363

><td class="source">        # There is no special handling for floating point here, because<br></td></tr
><tr
id=sl_svn141_1364

><td class="source">        # the integer/fractional/exponent parts would all be parsed<br></td></tr
><tr
id=sl_svn141_1365

><td class="source">        # correctly as long as there are digits on both sides of the<br></td></tr
><tr
id=sl_svn141_1366

><td class="source">        # separator.  So we are fine as long as we don&#39;t see something<br></td></tr
><tr
id=sl_svn141_1367

><td class="source">        # like &quot;0.&#39;3&quot; (gcc 4.9.0 will not allow this literal).<br></td></tr
><tr
id=sl_svn141_1368

><td class="source">        if Search(r&#39;\b(?:0[bBxX]?|[1-9])[0-9a-fA-F]*$&#39;, head):<br></td></tr
><tr
id=sl_svn141_1369

><td class="source">          match_literal = Match(r&#39;^((?:\&#39;?[0-9a-zA-Z_])*)(.*)$&#39;, &quot;&#39;&quot; + tail)<br></td></tr
><tr
id=sl_svn141_1370

><td class="source">          collapsed += head + match_literal.group(1).replace(&quot;&#39;&quot;, &#39;&#39;)<br></td></tr
><tr
id=sl_svn141_1371

><td class="source">          elided = match_literal.group(2)<br></td></tr
><tr
id=sl_svn141_1372

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_1373

><td class="source">          second_quote = tail.find(&#39;\&#39;&#39;)<br></td></tr
><tr
id=sl_svn141_1374

><td class="source">          if second_quote &gt;= 0:<br></td></tr
><tr
id=sl_svn141_1375

><td class="source">            collapsed += head + &quot;&#39;&#39;&quot;<br></td></tr
><tr
id=sl_svn141_1376

><td class="source">            elided = tail[second_quote + 1:]<br></td></tr
><tr
id=sl_svn141_1377

><td class="source">          else:<br></td></tr
><tr
id=sl_svn141_1378

><td class="source">            # Unmatched single quote<br></td></tr
><tr
id=sl_svn141_1379

><td class="source">            collapsed += elided<br></td></tr
><tr
id=sl_svn141_1380

><td class="source">            break<br></td></tr
><tr
id=sl_svn141_1381

><td class="source"><br></td></tr
><tr
id=sl_svn141_1382

><td class="source">    return collapsed<br></td></tr
><tr
id=sl_svn141_1383

><td class="source"><br></td></tr
><tr
id=sl_svn141_1384

><td class="source"><br></td></tr
><tr
id=sl_svn141_1385

><td class="source">def FindEndOfExpressionInLine(line, startpos, stack):<br></td></tr
><tr
id=sl_svn141_1386

><td class="source">  &quot;&quot;&quot;Find the position just after the end of current parenthesized expression.<br></td></tr
><tr
id=sl_svn141_1387

><td class="source"><br></td></tr
><tr
id=sl_svn141_1388

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1389

><td class="source">    line: a CleansedLines line.<br></td></tr
><tr
id=sl_svn141_1390

><td class="source">    startpos: start searching at this position.<br></td></tr
><tr
id=sl_svn141_1391

><td class="source">    stack: nesting stack at startpos.<br></td></tr
><tr
id=sl_svn141_1392

><td class="source"><br></td></tr
><tr
id=sl_svn141_1393

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1394

><td class="source">    On finding matching end: (index just after matching end, None)<br></td></tr
><tr
id=sl_svn141_1395

><td class="source">    On finding an unclosed expression: (-1, None)<br></td></tr
><tr
id=sl_svn141_1396

><td class="source">    Otherwise: (-1, new stack at end of this line)<br></td></tr
><tr
id=sl_svn141_1397

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1398

><td class="source">  for i in xrange(startpos, len(line)):<br></td></tr
><tr
id=sl_svn141_1399

><td class="source">    char = line[i]<br></td></tr
><tr
id=sl_svn141_1400

><td class="source">    if char in &#39;([{&#39;:<br></td></tr
><tr
id=sl_svn141_1401

><td class="source">      # Found start of parenthesized expression, push to expression stack<br></td></tr
><tr
id=sl_svn141_1402

><td class="source">      stack.append(char)<br></td></tr
><tr
id=sl_svn141_1403

><td class="source">    elif char == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1404

><td class="source">      # Found potential start of template argument list<br></td></tr
><tr
id=sl_svn141_1405

><td class="source">      if i &gt; 0 and line[i - 1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1406

><td class="source">        # Left shift operator<br></td></tr
><tr
id=sl_svn141_1407

><td class="source">        if stack and stack[-1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1408

><td class="source">          stack.pop()<br></td></tr
><tr
id=sl_svn141_1409

><td class="source">          if not stack:<br></td></tr
><tr
id=sl_svn141_1410

><td class="source">            return (-1, None)<br></td></tr
><tr
id=sl_svn141_1411

><td class="source">      elif i &gt; 0 and Search(r&#39;\boperator\s*$&#39;, line[0:i]):<br></td></tr
><tr
id=sl_svn141_1412

><td class="source">        # operator&lt;, don&#39;t add to stack<br></td></tr
><tr
id=sl_svn141_1413

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_1414

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1415

><td class="source">        # Tentative start of template argument list<br></td></tr
><tr
id=sl_svn141_1416

><td class="source">        stack.append(&#39;&lt;&#39;)<br></td></tr
><tr
id=sl_svn141_1417

><td class="source">    elif char in &#39;)]}&#39;:<br></td></tr
><tr
id=sl_svn141_1418

><td class="source">      # Found end of parenthesized expression.<br></td></tr
><tr
id=sl_svn141_1419

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_1420

><td class="source">      # If we are currently expecting a matching &#39;&gt;&#39;, the pending &#39;&lt;&#39;<br></td></tr
><tr
id=sl_svn141_1421

><td class="source">      # must have been an operator.  Remove them from expression stack.<br></td></tr
><tr
id=sl_svn141_1422

><td class="source">      while stack and stack[-1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1423

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1424

><td class="source">      if not stack:<br></td></tr
><tr
id=sl_svn141_1425

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1426

><td class="source">      if ((stack[-1] == &#39;(&#39; and char == &#39;)&#39;) or<br></td></tr
><tr
id=sl_svn141_1427

><td class="source">          (stack[-1] == &#39;[&#39; and char == &#39;]&#39;) or<br></td></tr
><tr
id=sl_svn141_1428

><td class="source">          (stack[-1] == &#39;{&#39; and char == &#39;}&#39;)):<br></td></tr
><tr
id=sl_svn141_1429

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1430

><td class="source">        if not stack:<br></td></tr
><tr
id=sl_svn141_1431

><td class="source">          return (i + 1, None)<br></td></tr
><tr
id=sl_svn141_1432

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1433

><td class="source">        # Mismatched parentheses<br></td></tr
><tr
id=sl_svn141_1434

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1435

><td class="source">    elif char == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1436

><td class="source">      # Found potential end of template argument list.<br></td></tr
><tr
id=sl_svn141_1437

><td class="source"><br></td></tr
><tr
id=sl_svn141_1438

><td class="source">      # Ignore &quot;-&gt;&quot; and operator functions<br></td></tr
><tr
id=sl_svn141_1439

><td class="source">      if (i &gt; 0 and<br></td></tr
><tr
id=sl_svn141_1440

><td class="source">          (line[i - 1] == &#39;-&#39; or Search(r&#39;\boperator\s*$&#39;, line[0:i - 1]))):<br></td></tr
><tr
id=sl_svn141_1441

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_1442

><td class="source"><br></td></tr
><tr
id=sl_svn141_1443

><td class="source">      # Pop the stack if there is a matching &#39;&lt;&#39;.  Otherwise, ignore<br></td></tr
><tr
id=sl_svn141_1444

><td class="source">      # this &#39;&gt;&#39; since it must be an operator.<br></td></tr
><tr
id=sl_svn141_1445

><td class="source">      if stack:<br></td></tr
><tr
id=sl_svn141_1446

><td class="source">        if stack[-1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1447

><td class="source">          stack.pop()<br></td></tr
><tr
id=sl_svn141_1448

><td class="source">          if not stack:<br></td></tr
><tr
id=sl_svn141_1449

><td class="source">            return (i + 1, None)<br></td></tr
><tr
id=sl_svn141_1450

><td class="source">    elif char == &#39;;&#39;:<br></td></tr
><tr
id=sl_svn141_1451

><td class="source">      # Found something that look like end of statements.  If we are currently<br></td></tr
><tr
id=sl_svn141_1452

><td class="source">      # expecting a &#39;&gt;&#39;, the matching &#39;&lt;&#39; must have been an operator, since<br></td></tr
><tr
id=sl_svn141_1453

><td class="source">      # template argument list should not contain statements.<br></td></tr
><tr
id=sl_svn141_1454

><td class="source">      while stack and stack[-1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1455

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1456

><td class="source">      if not stack:<br></td></tr
><tr
id=sl_svn141_1457

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1458

><td class="source"><br></td></tr
><tr
id=sl_svn141_1459

><td class="source">  # Did not find end of expression or unbalanced parentheses on this line<br></td></tr
><tr
id=sl_svn141_1460

><td class="source">  return (-1, stack)<br></td></tr
><tr
id=sl_svn141_1461

><td class="source"><br></td></tr
><tr
id=sl_svn141_1462

><td class="source"><br></td></tr
><tr
id=sl_svn141_1463

><td class="source">def CloseExpression(clean_lines, linenum, pos):<br></td></tr
><tr
id=sl_svn141_1464

><td class="source">  &quot;&quot;&quot;If input points to ( or { or [ or &lt;, finds the position that closes it.<br></td></tr
><tr
id=sl_svn141_1465

><td class="source"><br></td></tr
><tr
id=sl_svn141_1466

><td class="source">  If lines[linenum][pos] points to a &#39;(&#39; or &#39;{&#39; or &#39;[&#39; or &#39;&lt;&#39;, finds the<br></td></tr
><tr
id=sl_svn141_1467

><td class="source">  linenum/pos that correspond to the closing of the expression.<br></td></tr
><tr
id=sl_svn141_1468

><td class="source"><br></td></tr
><tr
id=sl_svn141_1469

><td class="source">  TODO(unknown): cpplint spends a fair bit of time matching parentheses.<br></td></tr
><tr
id=sl_svn141_1470

><td class="source">  Ideally we would want to index all opening and closing parentheses once<br></td></tr
><tr
id=sl_svn141_1471

><td class="source">  and have CloseExpression be just a simple lookup, but due to preprocessor<br></td></tr
><tr
id=sl_svn141_1472

><td class="source">  tricks, this is not so easy.<br></td></tr
><tr
id=sl_svn141_1473

><td class="source"><br></td></tr
><tr
id=sl_svn141_1474

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1475

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1476

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1477

><td class="source">    pos: A position on the line.<br></td></tr
><tr
id=sl_svn141_1478

><td class="source"><br></td></tr
><tr
id=sl_svn141_1479

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1480

><td class="source">    A tuple (line, linenum, pos) pointer *past* the closing brace, or<br></td></tr
><tr
id=sl_svn141_1481

><td class="source">    (line, len(lines), -1) if we never find a close.  Note we ignore<br></td></tr
><tr
id=sl_svn141_1482

><td class="source">    strings and comments when matching; and the line we return is the<br></td></tr
><tr
id=sl_svn141_1483

><td class="source">    &#39;cleansed&#39; line at linenum.<br></td></tr
><tr
id=sl_svn141_1484

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1485

><td class="source"><br></td></tr
><tr
id=sl_svn141_1486

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1487

><td class="source">  if (line[pos] not in &#39;({[&lt;&#39;) or Match(r&#39;&lt;[&lt;=]&#39;, line[pos:]):<br></td></tr
><tr
id=sl_svn141_1488

><td class="source">    return (line, clean_lines.NumLines(), -1)<br></td></tr
><tr
id=sl_svn141_1489

><td class="source"><br></td></tr
><tr
id=sl_svn141_1490

><td class="source">  # Check first line<br></td></tr
><tr
id=sl_svn141_1491

><td class="source">  (end_pos, stack) = FindEndOfExpressionInLine(line, pos, [])<br></td></tr
><tr
id=sl_svn141_1492

><td class="source">  if end_pos &gt; -1:<br></td></tr
><tr
id=sl_svn141_1493

><td class="source">    return (line, linenum, end_pos)<br></td></tr
><tr
id=sl_svn141_1494

><td class="source"><br></td></tr
><tr
id=sl_svn141_1495

><td class="source">  # Continue scanning forward<br></td></tr
><tr
id=sl_svn141_1496

><td class="source">  while stack and linenum &lt; clean_lines.NumLines() - 1:<br></td></tr
><tr
id=sl_svn141_1497

><td class="source">    linenum += 1<br></td></tr
><tr
id=sl_svn141_1498

><td class="source">    line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1499

><td class="source">    (end_pos, stack) = FindEndOfExpressionInLine(line, 0, stack)<br></td></tr
><tr
id=sl_svn141_1500

><td class="source">    if end_pos &gt; -1:<br></td></tr
><tr
id=sl_svn141_1501

><td class="source">      return (line, linenum, end_pos)<br></td></tr
><tr
id=sl_svn141_1502

><td class="source"><br></td></tr
><tr
id=sl_svn141_1503

><td class="source">  # Did not find end of expression before end of file, give up<br></td></tr
><tr
id=sl_svn141_1504

><td class="source">  return (line, clean_lines.NumLines(), -1)<br></td></tr
><tr
id=sl_svn141_1505

><td class="source"><br></td></tr
><tr
id=sl_svn141_1506

><td class="source"><br></td></tr
><tr
id=sl_svn141_1507

><td class="source">def FindStartOfExpressionInLine(line, endpos, stack):<br></td></tr
><tr
id=sl_svn141_1508

><td class="source">  &quot;&quot;&quot;Find position at the matching start of current expression.<br></td></tr
><tr
id=sl_svn141_1509

><td class="source"><br></td></tr
><tr
id=sl_svn141_1510

><td class="source">  This is almost the reverse of FindEndOfExpressionInLine, but note<br></td></tr
><tr
id=sl_svn141_1511

><td class="source">  that the input position and returned position differs by 1.<br></td></tr
><tr
id=sl_svn141_1512

><td class="source"><br></td></tr
><tr
id=sl_svn141_1513

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1514

><td class="source">    line: a CleansedLines line.<br></td></tr
><tr
id=sl_svn141_1515

><td class="source">    endpos: start searching at this position.<br></td></tr
><tr
id=sl_svn141_1516

><td class="source">    stack: nesting stack at endpos.<br></td></tr
><tr
id=sl_svn141_1517

><td class="source"><br></td></tr
><tr
id=sl_svn141_1518

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1519

><td class="source">    On finding matching start: (index at matching start, None)<br></td></tr
><tr
id=sl_svn141_1520

><td class="source">    On finding an unclosed expression: (-1, None)<br></td></tr
><tr
id=sl_svn141_1521

><td class="source">    Otherwise: (-1, new stack at beginning of this line)<br></td></tr
><tr
id=sl_svn141_1522

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1523

><td class="source">  i = endpos<br></td></tr
><tr
id=sl_svn141_1524

><td class="source">  while i &gt;= 0:<br></td></tr
><tr
id=sl_svn141_1525

><td class="source">    char = line[i]<br></td></tr
><tr
id=sl_svn141_1526

><td class="source">    if char in &#39;)]}&#39;:<br></td></tr
><tr
id=sl_svn141_1527

><td class="source">      # Found end of expression, push to expression stack<br></td></tr
><tr
id=sl_svn141_1528

><td class="source">      stack.append(char)<br></td></tr
><tr
id=sl_svn141_1529

><td class="source">    elif char == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1530

><td class="source">      # Found potential end of template argument list.<br></td></tr
><tr
id=sl_svn141_1531

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_1532

><td class="source">      # Ignore it if it&#39;s a &quot;-&gt;&quot; or &quot;&gt;=&quot; or &quot;operator&gt;&quot;<br></td></tr
><tr
id=sl_svn141_1533

><td class="source">      if (i &gt; 0 and<br></td></tr
><tr
id=sl_svn141_1534

><td class="source">          (line[i - 1] == &#39;-&#39; or<br></td></tr
><tr
id=sl_svn141_1535

><td class="source">           Match(r&#39;\s&gt;=\s&#39;, line[i - 1:]) or<br></td></tr
><tr
id=sl_svn141_1536

><td class="source">           Search(r&#39;\boperator\s*$&#39;, line[0:i]))):<br></td></tr
><tr
id=sl_svn141_1537

><td class="source">        i -= 1<br></td></tr
><tr
id=sl_svn141_1538

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1539

><td class="source">        stack.append(&#39;&gt;&#39;)<br></td></tr
><tr
id=sl_svn141_1540

><td class="source">    elif char == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1541

><td class="source">      # Found potential start of template argument list<br></td></tr
><tr
id=sl_svn141_1542

><td class="source">      if i &gt; 0 and line[i - 1] == &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_1543

><td class="source">        # Left shift operator<br></td></tr
><tr
id=sl_svn141_1544

><td class="source">        i -= 1<br></td></tr
><tr
id=sl_svn141_1545

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1546

><td class="source">        # If there is a matching &#39;&gt;&#39;, we can pop the expression stack.<br></td></tr
><tr
id=sl_svn141_1547

><td class="source">        # Otherwise, ignore this &#39;&lt;&#39; since it must be an operator.<br></td></tr
><tr
id=sl_svn141_1548

><td class="source">        if stack and stack[-1] == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1549

><td class="source">          stack.pop()<br></td></tr
><tr
id=sl_svn141_1550

><td class="source">          if not stack:<br></td></tr
><tr
id=sl_svn141_1551

><td class="source">            return (i, None)<br></td></tr
><tr
id=sl_svn141_1552

><td class="source">    elif char in &#39;([{&#39;:<br></td></tr
><tr
id=sl_svn141_1553

><td class="source">      # Found start of expression.<br></td></tr
><tr
id=sl_svn141_1554

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_1555

><td class="source">      # If there are any unmatched &#39;&gt;&#39; on the stack, they must be<br></td></tr
><tr
id=sl_svn141_1556

><td class="source">      # operators.  Remove those.<br></td></tr
><tr
id=sl_svn141_1557

><td class="source">      while stack and stack[-1] == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1558

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1559

><td class="source">      if not stack:<br></td></tr
><tr
id=sl_svn141_1560

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1561

><td class="source">      if ((char == &#39;(&#39; and stack[-1] == &#39;)&#39;) or<br></td></tr
><tr
id=sl_svn141_1562

><td class="source">          (char == &#39;[&#39; and stack[-1] == &#39;]&#39;) or<br></td></tr
><tr
id=sl_svn141_1563

><td class="source">          (char == &#39;{&#39; and stack[-1] == &#39;}&#39;)):<br></td></tr
><tr
id=sl_svn141_1564

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1565

><td class="source">        if not stack:<br></td></tr
><tr
id=sl_svn141_1566

><td class="source">          return (i, None)<br></td></tr
><tr
id=sl_svn141_1567

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_1568

><td class="source">        # Mismatched parentheses<br></td></tr
><tr
id=sl_svn141_1569

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1570

><td class="source">    elif char == &#39;;&#39;:<br></td></tr
><tr
id=sl_svn141_1571

><td class="source">      # Found something that look like end of statements.  If we are currently<br></td></tr
><tr
id=sl_svn141_1572

><td class="source">      # expecting a &#39;&lt;&#39;, the matching &#39;&gt;&#39; must have been an operator, since<br></td></tr
><tr
id=sl_svn141_1573

><td class="source">      # template argument list should not contain statements.<br></td></tr
><tr
id=sl_svn141_1574

><td class="source">      while stack and stack[-1] == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1575

><td class="source">        stack.pop()<br></td></tr
><tr
id=sl_svn141_1576

><td class="source">      if not stack:<br></td></tr
><tr
id=sl_svn141_1577

><td class="source">        return (-1, None)<br></td></tr
><tr
id=sl_svn141_1578

><td class="source"><br></td></tr
><tr
id=sl_svn141_1579

><td class="source">    i -= 1<br></td></tr
><tr
id=sl_svn141_1580

><td class="source"><br></td></tr
><tr
id=sl_svn141_1581

><td class="source">  return (-1, stack)<br></td></tr
><tr
id=sl_svn141_1582

><td class="source"><br></td></tr
><tr
id=sl_svn141_1583

><td class="source"><br></td></tr
><tr
id=sl_svn141_1584

><td class="source">def ReverseCloseExpression(clean_lines, linenum, pos):<br></td></tr
><tr
id=sl_svn141_1585

><td class="source">  &quot;&quot;&quot;If input points to ) or } or ] or &gt;, finds the position that opens it.<br></td></tr
><tr
id=sl_svn141_1586

><td class="source"><br></td></tr
><tr
id=sl_svn141_1587

><td class="source">  If lines[linenum][pos] points to a &#39;)&#39; or &#39;}&#39; or &#39;]&#39; or &#39;&gt;&#39;, finds the<br></td></tr
><tr
id=sl_svn141_1588

><td class="source">  linenum/pos that correspond to the opening of the expression.<br></td></tr
><tr
id=sl_svn141_1589

><td class="source"><br></td></tr
><tr
id=sl_svn141_1590

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1591

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1592

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1593

><td class="source">    pos: A position on the line.<br></td></tr
><tr
id=sl_svn141_1594

><td class="source"><br></td></tr
><tr
id=sl_svn141_1595

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1596

><td class="source">    A tuple (line, linenum, pos) pointer *at* the opening brace, or<br></td></tr
><tr
id=sl_svn141_1597

><td class="source">    (line, 0, -1) if we never find the matching opening brace.  Note<br></td></tr
><tr
id=sl_svn141_1598

><td class="source">    we ignore strings and comments when matching; and the line we<br></td></tr
><tr
id=sl_svn141_1599

><td class="source">    return is the &#39;cleansed&#39; line at linenum.<br></td></tr
><tr
id=sl_svn141_1600

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1601

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1602

><td class="source">  if line[pos] not in &#39;)}]&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_1603

><td class="source">    return (line, 0, -1)<br></td></tr
><tr
id=sl_svn141_1604

><td class="source"><br></td></tr
><tr
id=sl_svn141_1605

><td class="source">  # Check last line<br></td></tr
><tr
id=sl_svn141_1606

><td class="source">  (start_pos, stack) = FindStartOfExpressionInLine(line, pos, [])<br></td></tr
><tr
id=sl_svn141_1607

><td class="source">  if start_pos &gt; -1:<br></td></tr
><tr
id=sl_svn141_1608

><td class="source">    return (line, linenum, start_pos)<br></td></tr
><tr
id=sl_svn141_1609

><td class="source"><br></td></tr
><tr
id=sl_svn141_1610

><td class="source">  # Continue scanning backward<br></td></tr
><tr
id=sl_svn141_1611

><td class="source">  while stack and linenum &gt; 0:<br></td></tr
><tr
id=sl_svn141_1612

><td class="source">    linenum -= 1<br></td></tr
><tr
id=sl_svn141_1613

><td class="source">    line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1614

><td class="source">    (start_pos, stack) = FindStartOfExpressionInLine(line, len(line) - 1, stack)<br></td></tr
><tr
id=sl_svn141_1615

><td class="source">    if start_pos &gt; -1:<br></td></tr
><tr
id=sl_svn141_1616

><td class="source">      return (line, linenum, start_pos)<br></td></tr
><tr
id=sl_svn141_1617

><td class="source"><br></td></tr
><tr
id=sl_svn141_1618

><td class="source">  # Did not find start of expression before beginning of file, give up<br></td></tr
><tr
id=sl_svn141_1619

><td class="source">  return (line, 0, -1)<br></td></tr
><tr
id=sl_svn141_1620

><td class="source"><br></td></tr
><tr
id=sl_svn141_1621

><td class="source"><br></td></tr
><tr
id=sl_svn141_1622

><td class="source">def CheckForCopyright(filename, lines, error):<br></td></tr
><tr
id=sl_svn141_1623

><td class="source">  &quot;&quot;&quot;Logs an error if no Copyright message appears at the top of the file.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1624

><td class="source"><br></td></tr
><tr
id=sl_svn141_1625

><td class="source">  # We&#39;ll say it should occur by line 10. Don&#39;t forget there&#39;s a<br></td></tr
><tr
id=sl_svn141_1626

><td class="source">  # dummy line at the front.<br></td></tr
><tr
id=sl_svn141_1627

><td class="source">  for line in xrange(1, min(len(lines), 11)):<br></td></tr
><tr
id=sl_svn141_1628

><td class="source">    if re.search(r&#39;Copyright&#39;, lines[line], re.I): break<br></td></tr
><tr
id=sl_svn141_1629

><td class="source">  else:                       # means no copyright line was found<br></td></tr
><tr
id=sl_svn141_1630

><td class="source">    error(filename, 0, &#39;legal/copyright&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1631

><td class="source">          &#39;No copyright message found.  &#39;<br></td></tr
><tr
id=sl_svn141_1632

><td class="source">          &#39;You should have a line: &quot;Copyright [year] &lt;Copyright Owner&gt;&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_1633

><td class="source"><br></td></tr
><tr
id=sl_svn141_1634

><td class="source"><br></td></tr
><tr
id=sl_svn141_1635

><td class="source">def GetIndentLevel(line):<br></td></tr
><tr
id=sl_svn141_1636

><td class="source">  &quot;&quot;&quot;Return the number of leading spaces in line.<br></td></tr
><tr
id=sl_svn141_1637

><td class="source"><br></td></tr
><tr
id=sl_svn141_1638

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1639

><td class="source">    line: A string to check.<br></td></tr
><tr
id=sl_svn141_1640

><td class="source"><br></td></tr
><tr
id=sl_svn141_1641

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1642

><td class="source">    An integer count of leading spaces, possibly zero.<br></td></tr
><tr
id=sl_svn141_1643

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1644

><td class="source">  indent = Match(r&#39;^( *)\S&#39;, line)<br></td></tr
><tr
id=sl_svn141_1645

><td class="source">  if indent:<br></td></tr
><tr
id=sl_svn141_1646

><td class="source">    return len(indent.group(1))<br></td></tr
><tr
id=sl_svn141_1647

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_1648

><td class="source">    return 0<br></td></tr
><tr
id=sl_svn141_1649

><td class="source"><br></td></tr
><tr
id=sl_svn141_1650

><td class="source"><br></td></tr
><tr
id=sl_svn141_1651

><td class="source">def GetHeaderGuardCPPVariable(filename):<br></td></tr
><tr
id=sl_svn141_1652

><td class="source">  &quot;&quot;&quot;Returns the CPP variable that should be used as a header guard.<br></td></tr
><tr
id=sl_svn141_1653

><td class="source"><br></td></tr
><tr
id=sl_svn141_1654

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1655

><td class="source">    filename: The name of a C++ header file.<br></td></tr
><tr
id=sl_svn141_1656

><td class="source"><br></td></tr
><tr
id=sl_svn141_1657

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_1658

><td class="source">    The CPP variable that should be used as a header guard in the<br></td></tr
><tr
id=sl_svn141_1659

><td class="source">    named file.<br></td></tr
><tr
id=sl_svn141_1660

><td class="source"><br></td></tr
><tr
id=sl_svn141_1661

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1662

><td class="source"><br></td></tr
><tr
id=sl_svn141_1663

><td class="source">  # Restores original filename in case that cpplint is invoked from Emacs&#39;s<br></td></tr
><tr
id=sl_svn141_1664

><td class="source">  # flymake.<br></td></tr
><tr
id=sl_svn141_1665

><td class="source">  filename = re.sub(r&#39;_flymake\.h$&#39;, &#39;.h&#39;, filename)<br></td></tr
><tr
id=sl_svn141_1666

><td class="source">  filename = re.sub(r&#39;/\.flymake/([^/]*)$&#39;, r&#39;/\1&#39;, filename)<br></td></tr
><tr
id=sl_svn141_1667

><td class="source">  # Replace &#39;c++&#39; with &#39;cpp&#39;.<br></td></tr
><tr
id=sl_svn141_1668

><td class="source">  filename = filename.replace(&#39;C++&#39;, &#39;cpp&#39;).replace(&#39;c++&#39;, &#39;cpp&#39;)<br></td></tr
><tr
id=sl_svn141_1669

><td class="source">  <br></td></tr
><tr
id=sl_svn141_1670

><td class="source">  fileinfo = FileInfo(filename)<br></td></tr
><tr
id=sl_svn141_1671

><td class="source">  file_path_from_root = fileinfo.RepositoryName()<br></td></tr
><tr
id=sl_svn141_1672

><td class="source">  if _root:<br></td></tr
><tr
id=sl_svn141_1673

><td class="source">    file_path_from_root = re.sub(&#39;^&#39; + _root + os.sep, &#39;&#39;, file_path_from_root)<br></td></tr
><tr
id=sl_svn141_1674

><td class="source">  return re.sub(r&#39;[^a-zA-Z0-9]&#39;, &#39;_&#39;, file_path_from_root).upper() + &#39;_&#39;<br></td></tr
><tr
id=sl_svn141_1675

><td class="source"><br></td></tr
><tr
id=sl_svn141_1676

><td class="source"><br></td></tr
><tr
id=sl_svn141_1677

><td class="source">def CheckForHeaderGuard(filename, clean_lines, error):<br></td></tr
><tr
id=sl_svn141_1678

><td class="source">  &quot;&quot;&quot;Checks that the file contains a header guard.<br></td></tr
><tr
id=sl_svn141_1679

><td class="source"><br></td></tr
><tr
id=sl_svn141_1680

><td class="source">  Logs an error if no #ifndef header guard is present.  For other<br></td></tr
><tr
id=sl_svn141_1681

><td class="source">  headers, checks that the full pathname is used.<br></td></tr
><tr
id=sl_svn141_1682

><td class="source"><br></td></tr
><tr
id=sl_svn141_1683

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1684

><td class="source">    filename: The name of the C++ header file.<br></td></tr
><tr
id=sl_svn141_1685

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1686

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1687

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1688

><td class="source"><br></td></tr
><tr
id=sl_svn141_1689

><td class="source">  # Don&#39;t check for header guards if there are error suppression<br></td></tr
><tr
id=sl_svn141_1690

><td class="source">  # comments somewhere in this file.<br></td></tr
><tr
id=sl_svn141_1691

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_1692

><td class="source">  # Because this is silencing a warning for a nonexistent line, we<br></td></tr
><tr
id=sl_svn141_1693

><td class="source">  # only support the very specific NOLINT(build/header_guard) syntax,<br></td></tr
><tr
id=sl_svn141_1694

><td class="source">  # and not the general NOLINT or NOLINT(*) syntax.<br></td></tr
><tr
id=sl_svn141_1695

><td class="source">  raw_lines = clean_lines.lines_without_raw_strings<br></td></tr
><tr
id=sl_svn141_1696

><td class="source">  for i in raw_lines:<br></td></tr
><tr
id=sl_svn141_1697

><td class="source">    if Search(r&#39;//\s*NOLINT\(build/header_guard\)&#39;, i):<br></td></tr
><tr
id=sl_svn141_1698

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_1699

><td class="source"><br></td></tr
><tr
id=sl_svn141_1700

><td class="source">  cppvar = GetHeaderGuardCPPVariable(filename)<br></td></tr
><tr
id=sl_svn141_1701

><td class="source"><br></td></tr
><tr
id=sl_svn141_1702

><td class="source">  ifndef = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_1703

><td class="source">  ifndef_linenum = 0<br></td></tr
><tr
id=sl_svn141_1704

><td class="source">  define = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_1705

><td class="source">  endif = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_1706

><td class="source">  endif_linenum = 0<br></td></tr
><tr
id=sl_svn141_1707

><td class="source">  for linenum, line in enumerate(raw_lines):<br></td></tr
><tr
id=sl_svn141_1708

><td class="source">    linesplit = line.split()<br></td></tr
><tr
id=sl_svn141_1709

><td class="source">    if len(linesplit) &gt;= 2:<br></td></tr
><tr
id=sl_svn141_1710

><td class="source">      # find the first occurrence of #ifndef and #define, save arg<br></td></tr
><tr
id=sl_svn141_1711

><td class="source">      if not ifndef and linesplit[0] == &#39;#ifndef&#39;:<br></td></tr
><tr
id=sl_svn141_1712

><td class="source">        # set ifndef to the header guard presented on the #ifndef line.<br></td></tr
><tr
id=sl_svn141_1713

><td class="source">        ifndef = linesplit[1]<br></td></tr
><tr
id=sl_svn141_1714

><td class="source">        ifndef_linenum = linenum<br></td></tr
><tr
id=sl_svn141_1715

><td class="source">      if not define and linesplit[0] == &#39;#define&#39;:<br></td></tr
><tr
id=sl_svn141_1716

><td class="source">        define = linesplit[1]<br></td></tr
><tr
id=sl_svn141_1717

><td class="source">    # find the last occurrence of #endif, save entire line<br></td></tr
><tr
id=sl_svn141_1718

><td class="source">    if line.startswith(&#39;#endif&#39;):<br></td></tr
><tr
id=sl_svn141_1719

><td class="source">      endif = line<br></td></tr
><tr
id=sl_svn141_1720

><td class="source">      endif_linenum = linenum<br></td></tr
><tr
id=sl_svn141_1721

><td class="source"><br></td></tr
><tr
id=sl_svn141_1722

><td class="source">  if not ifndef or not define or ifndef != define:<br></td></tr
><tr
id=sl_svn141_1723

><td class="source">    error(filename, 0, &#39;build/header_guard&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1724

><td class="source">          &#39;No #ifndef header guard found, suggested CPP variable is: %s&#39; %<br></td></tr
><tr
id=sl_svn141_1725

><td class="source">          cppvar)<br></td></tr
><tr
id=sl_svn141_1726

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_1727

><td class="source"><br></td></tr
><tr
id=sl_svn141_1728

><td class="source">  # The guard should be PATH_FILE_H_, but we also allow PATH_FILE_H__<br></td></tr
><tr
id=sl_svn141_1729

><td class="source">  # for backward compatibility.<br></td></tr
><tr
id=sl_svn141_1730

><td class="source">  if ifndef != cppvar:<br></td></tr
><tr
id=sl_svn141_1731

><td class="source">    error_level = 0<br></td></tr
><tr
id=sl_svn141_1732

><td class="source">    if ifndef != cppvar + &#39;_&#39;:<br></td></tr
><tr
id=sl_svn141_1733

><td class="source">      error_level = 5<br></td></tr
><tr
id=sl_svn141_1734

><td class="source"><br></td></tr
><tr
id=sl_svn141_1735

><td class="source">    ParseNolintSuppressions(filename, raw_lines[ifndef_linenum], ifndef_linenum,<br></td></tr
><tr
id=sl_svn141_1736

><td class="source">                            error)<br></td></tr
><tr
id=sl_svn141_1737

><td class="source">    error(filename, ifndef_linenum, &#39;build/header_guard&#39;, error_level,<br></td></tr
><tr
id=sl_svn141_1738

><td class="source">          &#39;#ifndef header guard has wrong style, please use: %s&#39; % cppvar)<br></td></tr
><tr
id=sl_svn141_1739

><td class="source"><br></td></tr
><tr
id=sl_svn141_1740

><td class="source">  # Check for &quot;//&quot; comments on endif line.<br></td></tr
><tr
id=sl_svn141_1741

><td class="source">  ParseNolintSuppressions(filename, raw_lines[endif_linenum], endif_linenum,<br></td></tr
><tr
id=sl_svn141_1742

><td class="source">                          error)<br></td></tr
><tr
id=sl_svn141_1743

><td class="source">  match = Match(r&#39;#endif\s*//\s*&#39; + cppvar + r&#39;(_)?\b&#39;, endif)<br></td></tr
><tr
id=sl_svn141_1744

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_1745

><td class="source">    if match.group(1) == &#39;_&#39;:<br></td></tr
><tr
id=sl_svn141_1746

><td class="source">      # Issue low severity warning for deprecated double trailing underscore<br></td></tr
><tr
id=sl_svn141_1747

><td class="source">      error(filename, endif_linenum, &#39;build/header_guard&#39;, 0,<br></td></tr
><tr
id=sl_svn141_1748

><td class="source">            &#39;#endif line should be &quot;#endif  // %s&quot;&#39; % cppvar)<br></td></tr
><tr
id=sl_svn141_1749

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_1750

><td class="source"><br></td></tr
><tr
id=sl_svn141_1751

><td class="source">  # Didn&#39;t find the corresponding &quot;//&quot; comment.  If this file does not<br></td></tr
><tr
id=sl_svn141_1752

><td class="source">  # contain any &quot;//&quot; comments at all, it could be that the compiler<br></td></tr
><tr
id=sl_svn141_1753

><td class="source">  # only wants &quot;/**/&quot; comments, look for those instead.<br></td></tr
><tr
id=sl_svn141_1754

><td class="source">  no_single_line_comments = True<br></td></tr
><tr
id=sl_svn141_1755

><td class="source">  for i in xrange(1, len(raw_lines) - 1):<br></td></tr
><tr
id=sl_svn141_1756

><td class="source">    line = raw_lines[i]<br></td></tr
><tr
id=sl_svn141_1757

><td class="source">    if Match(r&#39;^(?:(?:\&#39;(?:\.|[^\&#39;])*\&#39;)|(?:&quot;(?:\.|[^&quot;])*&quot;)|[^\&#39;&quot;])*//&#39;, line):<br></td></tr
><tr
id=sl_svn141_1758

><td class="source">      no_single_line_comments = False<br></td></tr
><tr
id=sl_svn141_1759

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_1760

><td class="source"><br></td></tr
><tr
id=sl_svn141_1761

><td class="source">  if no_single_line_comments:<br></td></tr
><tr
id=sl_svn141_1762

><td class="source">    match = Match(r&#39;#endif\s*/\*\s*&#39; + cppvar + r&#39;(_)?\s*\*/&#39;, endif)<br></td></tr
><tr
id=sl_svn141_1763

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_1764

><td class="source">      if match.group(1) == &#39;_&#39;:<br></td></tr
><tr
id=sl_svn141_1765

><td class="source">        # Low severity warning for double trailing underscore<br></td></tr
><tr
id=sl_svn141_1766

><td class="source">        error(filename, endif_linenum, &#39;build/header_guard&#39;, 0,<br></td></tr
><tr
id=sl_svn141_1767

><td class="source">              &#39;#endif line should be &quot;#endif  /* %s */&quot;&#39; % cppvar)<br></td></tr
><tr
id=sl_svn141_1768

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_1769

><td class="source"><br></td></tr
><tr
id=sl_svn141_1770

><td class="source">  # Didn&#39;t find anything<br></td></tr
><tr
id=sl_svn141_1771

><td class="source">  error(filename, endif_linenum, &#39;build/header_guard&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1772

><td class="source">        &#39;#endif line should be &quot;#endif  // %s&quot;&#39; % cppvar)<br></td></tr
><tr
id=sl_svn141_1773

><td class="source"><br></td></tr
><tr
id=sl_svn141_1774

><td class="source"><br></td></tr
><tr
id=sl_svn141_1775

><td class="source">def CheckHeaderFileIncluded(filename, include_state, error):<br></td></tr
><tr
id=sl_svn141_1776

><td class="source">  &quot;&quot;&quot;Logs an error if a .cc file does not include its header.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1777

><td class="source"><br></td></tr
><tr
id=sl_svn141_1778

><td class="source">  # Do not check test files<br></td></tr
><tr
id=sl_svn141_1779

><td class="source">  if filename.endswith(&#39;_test.cc&#39;) or filename.endswith(&#39;_unittest.cc&#39;):<br></td></tr
><tr
id=sl_svn141_1780

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_1781

><td class="source"><br></td></tr
><tr
id=sl_svn141_1782

><td class="source">  fileinfo = FileInfo(filename)<br></td></tr
><tr
id=sl_svn141_1783

><td class="source">  headerfile = filename[0:len(filename) - 2] + &#39;h&#39;<br></td></tr
><tr
id=sl_svn141_1784

><td class="source">  if not os.path.exists(headerfile):<br></td></tr
><tr
id=sl_svn141_1785

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_1786

><td class="source">  headername = FileInfo(headerfile).RepositoryName()<br></td></tr
><tr
id=sl_svn141_1787

><td class="source">  first_include = 0<br></td></tr
><tr
id=sl_svn141_1788

><td class="source">  for section_list in include_state.include_list:<br></td></tr
><tr
id=sl_svn141_1789

><td class="source">    for f in section_list:<br></td></tr
><tr
id=sl_svn141_1790

><td class="source">      if headername in f[0] or f[0] in headername:<br></td></tr
><tr
id=sl_svn141_1791

><td class="source">        return<br></td></tr
><tr
id=sl_svn141_1792

><td class="source">      if not first_include:<br></td></tr
><tr
id=sl_svn141_1793

><td class="source">        first_include = f[1]<br></td></tr
><tr
id=sl_svn141_1794

><td class="source"><br></td></tr
><tr
id=sl_svn141_1795

><td class="source">  error(filename, first_include, &#39;build/include&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1796

><td class="source">        &#39;%s should include its header file %s&#39; % (fileinfo.RepositoryName(),<br></td></tr
><tr
id=sl_svn141_1797

><td class="source">                                                  headername))<br></td></tr
><tr
id=sl_svn141_1798

><td class="source"><br></td></tr
><tr
id=sl_svn141_1799

><td class="source"><br></td></tr
><tr
id=sl_svn141_1800

><td class="source">def CheckForBadCharacters(filename, lines, error):<br></td></tr
><tr
id=sl_svn141_1801

><td class="source">  &quot;&quot;&quot;Logs an error for each line containing bad characters.<br></td></tr
><tr
id=sl_svn141_1802

><td class="source"><br></td></tr
><tr
id=sl_svn141_1803

><td class="source">  Two kinds of bad characters:<br></td></tr
><tr
id=sl_svn141_1804

><td class="source"><br></td></tr
><tr
id=sl_svn141_1805

><td class="source">  1. Unicode replacement characters: These indicate that either the file<br></td></tr
><tr
id=sl_svn141_1806

><td class="source">  contained invalid UTF-8 (likely) or Unicode replacement characters (which<br></td></tr
><tr
id=sl_svn141_1807

><td class="source">  it shouldn&#39;t).  Note that it&#39;s possible for this to throw off line<br></td></tr
><tr
id=sl_svn141_1808

><td class="source">  numbering if the invalid UTF-8 occurred adjacent to a newline.<br></td></tr
><tr
id=sl_svn141_1809

><td class="source"><br></td></tr
><tr
id=sl_svn141_1810

><td class="source">  2. NUL bytes.  These are problematic for some tools.<br></td></tr
><tr
id=sl_svn141_1811

><td class="source"><br></td></tr
><tr
id=sl_svn141_1812

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1813

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1814

><td class="source">    lines: An array of strings, each representing a line of the file.<br></td></tr
><tr
id=sl_svn141_1815

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1816

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1817

><td class="source">  for linenum, line in enumerate(lines):<br></td></tr
><tr
id=sl_svn141_1818

><td class="source">    if u&#39;\ufffd&#39; in line:<br></td></tr
><tr
id=sl_svn141_1819

><td class="source">      error(filename, linenum, &#39;readability/utf8&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1820

><td class="source">            &#39;Line contains invalid UTF-8 (or Unicode replacement character).&#39;)<br></td></tr
><tr
id=sl_svn141_1821

><td class="source">    if &#39;\0&#39; in line:<br></td></tr
><tr
id=sl_svn141_1822

><td class="source">      error(filename, linenum, &#39;readability/nul&#39;, 5, &#39;Line contains NUL byte.&#39;)<br></td></tr
><tr
id=sl_svn141_1823

><td class="source"><br></td></tr
><tr
id=sl_svn141_1824

><td class="source"><br></td></tr
><tr
id=sl_svn141_1825

><td class="source">def CheckForNewlineAtEOF(filename, lines, error):<br></td></tr
><tr
id=sl_svn141_1826

><td class="source">  &quot;&quot;&quot;Logs an error if there is no newline char at the end of the file.<br></td></tr
><tr
id=sl_svn141_1827

><td class="source"><br></td></tr
><tr
id=sl_svn141_1828

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1829

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1830

><td class="source">    lines: An array of strings, each representing a line of the file.<br></td></tr
><tr
id=sl_svn141_1831

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1832

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1833

><td class="source"><br></td></tr
><tr
id=sl_svn141_1834

><td class="source">  # The array lines() was created by adding two newlines to the<br></td></tr
><tr
id=sl_svn141_1835

><td class="source">  # original file (go figure), then splitting on \n.<br></td></tr
><tr
id=sl_svn141_1836

><td class="source">  # To verify that the file ends in \n, we just have to make sure the<br></td></tr
><tr
id=sl_svn141_1837

><td class="source">  # last-but-two element of lines() exists and is empty.<br></td></tr
><tr
id=sl_svn141_1838

><td class="source">  if len(lines) &lt; 3 or lines[-2]:<br></td></tr
><tr
id=sl_svn141_1839

><td class="source">    error(filename, len(lines) - 2, &#39;whitespace/ending_newline&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1840

><td class="source">          &#39;Could not find a newline character at the end of the file.&#39;)<br></td></tr
><tr
id=sl_svn141_1841

><td class="source"><br></td></tr
><tr
id=sl_svn141_1842

><td class="source"><br></td></tr
><tr
id=sl_svn141_1843

><td class="source">def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_1844

><td class="source">  &quot;&quot;&quot;Logs an error if we see /* ... */ or &quot;...&quot; that extend past one line.<br></td></tr
><tr
id=sl_svn141_1845

><td class="source"><br></td></tr
><tr
id=sl_svn141_1846

><td class="source">  /* ... */ comments are legit inside macros, for one line.<br></td></tr
><tr
id=sl_svn141_1847

><td class="source">  Otherwise, we prefer // comments, so it&#39;s ok to warn about the<br></td></tr
><tr
id=sl_svn141_1848

><td class="source">  other.  Likewise, it&#39;s ok for strings to extend across multiple<br></td></tr
><tr
id=sl_svn141_1849

><td class="source">  lines, as long as a line continuation character (backslash)<br></td></tr
><tr
id=sl_svn141_1850

><td class="source">  terminates each line. Although not currently prohibited by the C++<br></td></tr
><tr
id=sl_svn141_1851

><td class="source">  style guide, it&#39;s ugly and unnecessary. We don&#39;t do well with either<br></td></tr
><tr
id=sl_svn141_1852

><td class="source">  in this lint program, so we warn about both.<br></td></tr
><tr
id=sl_svn141_1853

><td class="source"><br></td></tr
><tr
id=sl_svn141_1854

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1855

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1856

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1857

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1858

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1859

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1860

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1861

><td class="source"><br></td></tr
><tr
id=sl_svn141_1862

><td class="source">  # Remove all \\ (escaped backslashes) from the line. They are OK, and the<br></td></tr
><tr
id=sl_svn141_1863

><td class="source">  # second (escaped) slash may trigger later \&quot; detection erroneously.<br></td></tr
><tr
id=sl_svn141_1864

><td class="source">  line = line.replace(&#39;\\\\&#39;, &#39;&#39;)<br></td></tr
><tr
id=sl_svn141_1865

><td class="source"><br></td></tr
><tr
id=sl_svn141_1866

><td class="source">  if line.count(&#39;/*&#39;) &gt; line.count(&#39;*/&#39;):<br></td></tr
><tr
id=sl_svn141_1867

><td class="source">    error(filename, linenum, &#39;readability/multiline_comment&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1868

><td class="source">          &#39;Complex multi-line /*...*/-style comment found. &#39;<br></td></tr
><tr
id=sl_svn141_1869

><td class="source">          &#39;Lint may give bogus warnings.  &#39;<br></td></tr
><tr
id=sl_svn141_1870

><td class="source">          &#39;Consider replacing these with //-style comments, &#39;<br></td></tr
><tr
id=sl_svn141_1871

><td class="source">          &#39;with #if 0...#endif, &#39;<br></td></tr
><tr
id=sl_svn141_1872

><td class="source">          &#39;or with more clearly structured multi-line comments.&#39;)<br></td></tr
><tr
id=sl_svn141_1873

><td class="source"><br></td></tr
><tr
id=sl_svn141_1874

><td class="source">  if (line.count(&#39;&quot;&#39;) - line.count(&#39;\\&quot;&#39;)) % 2:<br></td></tr
><tr
id=sl_svn141_1875

><td class="source">    error(filename, linenum, &#39;readability/multiline_string&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1876

><td class="source">          &#39;Multi-line string (&quot;...&quot;) found.  This lint script doesn\&#39;t &#39;<br></td></tr
><tr
id=sl_svn141_1877

><td class="source">          &#39;do well with such strings, and may give bogus warnings.  &#39;<br></td></tr
><tr
id=sl_svn141_1878

><td class="source">          &#39;Use C++11 raw strings or concatenation instead.&#39;)<br></td></tr
><tr
id=sl_svn141_1879

><td class="source"><br></td></tr
><tr
id=sl_svn141_1880

><td class="source"><br></td></tr
><tr
id=sl_svn141_1881

><td class="source"># (non-threadsafe name, thread-safe alternative, validation pattern)<br></td></tr
><tr
id=sl_svn141_1882

><td class="source">#<br></td></tr
><tr
id=sl_svn141_1883

><td class="source"># The validation pattern is used to eliminate false positives such as:<br></td></tr
><tr
id=sl_svn141_1884

><td class="source">#  _rand();               // false positive due to substring match.<br></td></tr
><tr
id=sl_svn141_1885

><td class="source">#  -&gt;rand();              // some member function rand().<br></td></tr
><tr
id=sl_svn141_1886

><td class="source">#  ACMRandom rand(seed);  // some variable named rand.<br></td></tr
><tr
id=sl_svn141_1887

><td class="source">#  ISAACRandom rand();    // another variable named rand.<br></td></tr
><tr
id=sl_svn141_1888

><td class="source">#<br></td></tr
><tr
id=sl_svn141_1889

><td class="source"># Basically we require the return value of these functions to be used<br></td></tr
><tr
id=sl_svn141_1890

><td class="source"># in some expression context on the same line by matching on some<br></td></tr
><tr
id=sl_svn141_1891

><td class="source"># operator before the function name.  This eliminates constructors and<br></td></tr
><tr
id=sl_svn141_1892

><td class="source"># member function calls.<br></td></tr
><tr
id=sl_svn141_1893

><td class="source">_UNSAFE_FUNC_PREFIX = r&#39;(?:[-+*/=%^&amp;|(&lt;]\s*|&gt;\s+)&#39;<br></td></tr
><tr
id=sl_svn141_1894

><td class="source">_THREADING_LIST = (<br></td></tr
><tr
id=sl_svn141_1895

><td class="source">    (&#39;asctime(&#39;, &#39;asctime_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;asctime\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1896

><td class="source">    (&#39;ctime(&#39;, &#39;ctime_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;ctime\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1897

><td class="source">    (&#39;getgrgid(&#39;, &#39;getgrgid_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;getgrgid\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1898

><td class="source">    (&#39;getgrnam(&#39;, &#39;getgrnam_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;getgrnam\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1899

><td class="source">    (&#39;getlogin(&#39;, &#39;getlogin_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;getlogin\(\)&#39;),<br></td></tr
><tr
id=sl_svn141_1900

><td class="source">    (&#39;getpwnam(&#39;, &#39;getpwnam_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;getpwnam\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1901

><td class="source">    (&#39;getpwuid(&#39;, &#39;getpwuid_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;getpwuid\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1902

><td class="source">    (&#39;gmtime(&#39;, &#39;gmtime_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;gmtime\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1903

><td class="source">    (&#39;localtime(&#39;, &#39;localtime_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;localtime\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1904

><td class="source">    (&#39;rand(&#39;, &#39;rand_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;rand\(\)&#39;),<br></td></tr
><tr
id=sl_svn141_1905

><td class="source">    (&#39;strtok(&#39;, &#39;strtok_r(&#39;,<br></td></tr
><tr
id=sl_svn141_1906

><td class="source">     _UNSAFE_FUNC_PREFIX + r&#39;strtok\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1907

><td class="source">    (&#39;ttyname(&#39;, &#39;ttyname_r(&#39;, _UNSAFE_FUNC_PREFIX + r&#39;ttyname\([^)]+\)&#39;),<br></td></tr
><tr
id=sl_svn141_1908

><td class="source">    )<br></td></tr
><tr
id=sl_svn141_1909

><td class="source"><br></td></tr
><tr
id=sl_svn141_1910

><td class="source"><br></td></tr
><tr
id=sl_svn141_1911

><td class="source">def CheckPosixThreading(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_1912

><td class="source">  &quot;&quot;&quot;Checks for calls to thread-unsafe functions.<br></td></tr
><tr
id=sl_svn141_1913

><td class="source"><br></td></tr
><tr
id=sl_svn141_1914

><td class="source">  Much code has been originally written without consideration of<br></td></tr
><tr
id=sl_svn141_1915

><td class="source">  multi-threading. Also, engineers are relying on their old experience;<br></td></tr
><tr
id=sl_svn141_1916

><td class="source">  they have learned posix before threading extensions were added. These<br></td></tr
><tr
id=sl_svn141_1917

><td class="source">  tests guide the engineers to use thread-safe functions (when using<br></td></tr
><tr
id=sl_svn141_1918

><td class="source">  posix directly).<br></td></tr
><tr
id=sl_svn141_1919

><td class="source"><br></td></tr
><tr
id=sl_svn141_1920

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1921

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1922

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1923

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1924

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1925

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1926

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1927

><td class="source">  for single_thread_func, multithread_safe_func, pattern in _THREADING_LIST:<br></td></tr
><tr
id=sl_svn141_1928

><td class="source">    # Additional pattern matching check to confirm that this is the<br></td></tr
><tr
id=sl_svn141_1929

><td class="source">    # function we are looking for<br></td></tr
><tr
id=sl_svn141_1930

><td class="source">    if Search(pattern, line):<br></td></tr
><tr
id=sl_svn141_1931

><td class="source">      error(filename, linenum, &#39;runtime/threadsafe_fn&#39;, 2,<br></td></tr
><tr
id=sl_svn141_1932

><td class="source">            &#39;Consider using &#39; + multithread_safe_func +<br></td></tr
><tr
id=sl_svn141_1933

><td class="source">            &#39;...) instead of &#39; + single_thread_func +<br></td></tr
><tr
id=sl_svn141_1934

><td class="source">            &#39;...) for improved thread safety.&#39;)<br></td></tr
><tr
id=sl_svn141_1935

><td class="source"><br></td></tr
><tr
id=sl_svn141_1936

><td class="source"><br></td></tr
><tr
id=sl_svn141_1937

><td class="source">def CheckVlogArguments(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_1938

><td class="source">  &quot;&quot;&quot;Checks that VLOG() is only used for defining a logging level.<br></td></tr
><tr
id=sl_svn141_1939

><td class="source"><br></td></tr
><tr
id=sl_svn141_1940

><td class="source">  For example, VLOG(2) is correct. VLOG(INFO), VLOG(WARNING), VLOG(ERROR), and<br></td></tr
><tr
id=sl_svn141_1941

><td class="source">  VLOG(FATAL) are not.<br></td></tr
><tr
id=sl_svn141_1942

><td class="source"><br></td></tr
><tr
id=sl_svn141_1943

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1944

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1945

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1946

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1947

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1948

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1949

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1950

><td class="source">  if Search(r&#39;\bVLOG\((INFO|ERROR|WARNING|DFATAL|FATAL)\)&#39;, line):<br></td></tr
><tr
id=sl_svn141_1951

><td class="source">    error(filename, linenum, &#39;runtime/vlog&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1952

><td class="source">          &#39;VLOG() should be used with numeric verbosity level.  &#39;<br></td></tr
><tr
id=sl_svn141_1953

><td class="source">          &#39;Use LOG() if you want symbolic severity levels.&#39;)<br></td></tr
><tr
id=sl_svn141_1954

><td class="source"><br></td></tr
><tr
id=sl_svn141_1955

><td class="source"># Matches invalid increment: *count++, which moves pointer instead of<br></td></tr
><tr
id=sl_svn141_1956

><td class="source"># incrementing a value.<br></td></tr
><tr
id=sl_svn141_1957

><td class="source">_RE_PATTERN_INVALID_INCREMENT = re.compile(<br></td></tr
><tr
id=sl_svn141_1958

><td class="source">    r&#39;^\s*\*\w+(\+\+|--);&#39;)<br></td></tr
><tr
id=sl_svn141_1959

><td class="source"><br></td></tr
><tr
id=sl_svn141_1960

><td class="source"><br></td></tr
><tr
id=sl_svn141_1961

><td class="source">def CheckInvalidIncrement(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_1962

><td class="source">  &quot;&quot;&quot;Checks for invalid increment *count++.<br></td></tr
><tr
id=sl_svn141_1963

><td class="source"><br></td></tr
><tr
id=sl_svn141_1964

><td class="source">  For example following function:<br></td></tr
><tr
id=sl_svn141_1965

><td class="source">  void increment_counter(int* count) {<br></td></tr
><tr
id=sl_svn141_1966

><td class="source">    *count++;<br></td></tr
><tr
id=sl_svn141_1967

><td class="source">  }<br></td></tr
><tr
id=sl_svn141_1968

><td class="source">  is invalid, because it effectively does count++, moving pointer, and should<br></td></tr
><tr
id=sl_svn141_1969

><td class="source">  be replaced with ++*count, (*count)++ or *count += 1.<br></td></tr
><tr
id=sl_svn141_1970

><td class="source"><br></td></tr
><tr
id=sl_svn141_1971

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_1972

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_1973

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_1974

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_1975

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_1976

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1977

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_1978

><td class="source">  if _RE_PATTERN_INVALID_INCREMENT.match(line):<br></td></tr
><tr
id=sl_svn141_1979

><td class="source">    error(filename, linenum, &#39;runtime/invalid_increment&#39;, 5,<br></td></tr
><tr
id=sl_svn141_1980

><td class="source">          &#39;Changing pointer instead of value (or unused value of operator*).&#39;)<br></td></tr
><tr
id=sl_svn141_1981

><td class="source"><br></td></tr
><tr
id=sl_svn141_1982

><td class="source"><br></td></tr
><tr
id=sl_svn141_1983

><td class="source">def IsMacroDefinition(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_1984

><td class="source">  if Search(r&#39;^#define&#39;, clean_lines[linenum]):<br></td></tr
><tr
id=sl_svn141_1985

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_1986

><td class="source"><br></td></tr
><tr
id=sl_svn141_1987

><td class="source">  if linenum &gt; 0 and Search(r&#39;\\$&#39;, clean_lines[linenum - 1]):<br></td></tr
><tr
id=sl_svn141_1988

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_1989

><td class="source"><br></td></tr
><tr
id=sl_svn141_1990

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_1991

><td class="source"><br></td></tr
><tr
id=sl_svn141_1992

><td class="source"><br></td></tr
><tr
id=sl_svn141_1993

><td class="source">def IsForwardClassDeclaration(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_1994

><td class="source">  return Match(r&#39;^\s*(\btemplate\b)*.*class\s+\w+;\s*$&#39;, clean_lines[linenum])<br></td></tr
><tr
id=sl_svn141_1995

><td class="source"><br></td></tr
><tr
id=sl_svn141_1996

><td class="source"><br></td></tr
><tr
id=sl_svn141_1997

><td class="source">class _BlockInfo(object):<br></td></tr
><tr
id=sl_svn141_1998

><td class="source">  &quot;&quot;&quot;Stores information about a generic block of code.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_1999

><td class="source"><br></td></tr
><tr
id=sl_svn141_2000

><td class="source">  def __init__(self, seen_open_brace):<br></td></tr
><tr
id=sl_svn141_2001

><td class="source">    self.seen_open_brace = seen_open_brace<br></td></tr
><tr
id=sl_svn141_2002

><td class="source">    self.open_parentheses = 0<br></td></tr
><tr
id=sl_svn141_2003

><td class="source">    self.inline_asm = _NO_ASM<br></td></tr
><tr
id=sl_svn141_2004

><td class="source">    self.check_namespace_indentation = False<br></td></tr
><tr
id=sl_svn141_2005

><td class="source"><br></td></tr
><tr
id=sl_svn141_2006

><td class="source">  def CheckBegin(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2007

><td class="source">    &quot;&quot;&quot;Run checks that applies to text up to the opening brace.<br></td></tr
><tr
id=sl_svn141_2008

><td class="source"><br></td></tr
><tr
id=sl_svn141_2009

><td class="source">    This is mostly for checking the text after the class identifier<br></td></tr
><tr
id=sl_svn141_2010

><td class="source">    and the &quot;{&quot;, usually where the base class is specified.  For other<br></td></tr
><tr
id=sl_svn141_2011

><td class="source">    blocks, there isn&#39;t much to check, so we always pass.<br></td></tr
><tr
id=sl_svn141_2012

><td class="source"><br></td></tr
><tr
id=sl_svn141_2013

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2014

><td class="source">      filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2015

><td class="source">      clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2016

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2017

><td class="source">      error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2018

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2019

><td class="source">    pass<br></td></tr
><tr
id=sl_svn141_2020

><td class="source"><br></td></tr
><tr
id=sl_svn141_2021

><td class="source">  def CheckEnd(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2022

><td class="source">    &quot;&quot;&quot;Run checks that applies to text after the closing brace.<br></td></tr
><tr
id=sl_svn141_2023

><td class="source"><br></td></tr
><tr
id=sl_svn141_2024

><td class="source">    This is mostly used for checking end of namespace comments.<br></td></tr
><tr
id=sl_svn141_2025

><td class="source"><br></td></tr
><tr
id=sl_svn141_2026

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2027

><td class="source">      filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2028

><td class="source">      clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2029

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2030

><td class="source">      error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2031

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2032

><td class="source">    pass<br></td></tr
><tr
id=sl_svn141_2033

><td class="source"><br></td></tr
><tr
id=sl_svn141_2034

><td class="source">  def IsBlockInfo(self):<br></td></tr
><tr
id=sl_svn141_2035

><td class="source">    &quot;&quot;&quot;Returns true if this block is a _BlockInfo.<br></td></tr
><tr
id=sl_svn141_2036

><td class="source"><br></td></tr
><tr
id=sl_svn141_2037

><td class="source">    This is convenient for verifying that an object is an instance of<br></td></tr
><tr
id=sl_svn141_2038

><td class="source">    a _BlockInfo, but not an instance of any of the derived classes.<br></td></tr
><tr
id=sl_svn141_2039

><td class="source"><br></td></tr
><tr
id=sl_svn141_2040

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2041

><td class="source">      True for this class, False for derived classes.<br></td></tr
><tr
id=sl_svn141_2042

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2043

><td class="source">    return self.__class__ == _BlockInfo<br></td></tr
><tr
id=sl_svn141_2044

><td class="source"><br></td></tr
><tr
id=sl_svn141_2045

><td class="source"><br></td></tr
><tr
id=sl_svn141_2046

><td class="source">class _ExternCInfo(_BlockInfo):<br></td></tr
><tr
id=sl_svn141_2047

><td class="source">  &quot;&quot;&quot;Stores information about an &#39;extern &quot;C&quot;&#39; block.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2048

><td class="source"><br></td></tr
><tr
id=sl_svn141_2049

><td class="source">  def __init__(self):<br></td></tr
><tr
id=sl_svn141_2050

><td class="source">    _BlockInfo.__init__(self, True)<br></td></tr
><tr
id=sl_svn141_2051

><td class="source"><br></td></tr
><tr
id=sl_svn141_2052

><td class="source"><br></td></tr
><tr
id=sl_svn141_2053

><td class="source">class _ClassInfo(_BlockInfo):<br></td></tr
><tr
id=sl_svn141_2054

><td class="source">  &quot;&quot;&quot;Stores information about a class.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2055

><td class="source"><br></td></tr
><tr
id=sl_svn141_2056

><td class="source">  def __init__(self, name, class_or_struct, clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_2057

><td class="source">    _BlockInfo.__init__(self, False)<br></td></tr
><tr
id=sl_svn141_2058

><td class="source">    self.name = name<br></td></tr
><tr
id=sl_svn141_2059

><td class="source">    self.starting_linenum = linenum<br></td></tr
><tr
id=sl_svn141_2060

><td class="source">    self.is_derived = False<br></td></tr
><tr
id=sl_svn141_2061

><td class="source">    self.check_namespace_indentation = True<br></td></tr
><tr
id=sl_svn141_2062

><td class="source">    if class_or_struct == &#39;struct&#39;:<br></td></tr
><tr
id=sl_svn141_2063

><td class="source">      self.access = &#39;public&#39;<br></td></tr
><tr
id=sl_svn141_2064

><td class="source">      self.is_struct = True<br></td></tr
><tr
id=sl_svn141_2065

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_2066

><td class="source">      self.access = &#39;private&#39;<br></td></tr
><tr
id=sl_svn141_2067

><td class="source">      self.is_struct = False<br></td></tr
><tr
id=sl_svn141_2068

><td class="source"><br></td></tr
><tr
id=sl_svn141_2069

><td class="source">    # Remember initial indentation level for this class.  Using raw_lines here<br></td></tr
><tr
id=sl_svn141_2070

><td class="source">    # instead of elided to account for leading comments.<br></td></tr
><tr
id=sl_svn141_2071

><td class="source">    self.class_indent = GetIndentLevel(clean_lines.raw_lines[linenum])<br></td></tr
><tr
id=sl_svn141_2072

><td class="source"><br></td></tr
><tr
id=sl_svn141_2073

><td class="source">    # Try to find the end of the class.  This will be confused by things like:<br></td></tr
><tr
id=sl_svn141_2074

><td class="source">    #   class A {<br></td></tr
><tr
id=sl_svn141_2075

><td class="source">    #   } *x = { ...<br></td></tr
><tr
id=sl_svn141_2076

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2077

><td class="source">    # But it&#39;s still good enough for CheckSectionSpacing.<br></td></tr
><tr
id=sl_svn141_2078

><td class="source">    self.last_line = 0<br></td></tr
><tr
id=sl_svn141_2079

><td class="source">    depth = 0<br></td></tr
><tr
id=sl_svn141_2080

><td class="source">    for i in range(linenum, clean_lines.NumLines()):<br></td></tr
><tr
id=sl_svn141_2081

><td class="source">      line = clean_lines.elided[i]<br></td></tr
><tr
id=sl_svn141_2082

><td class="source">      depth += line.count(&#39;{&#39;) - line.count(&#39;}&#39;)<br></td></tr
><tr
id=sl_svn141_2083

><td class="source">      if not depth:<br></td></tr
><tr
id=sl_svn141_2084

><td class="source">        self.last_line = i<br></td></tr
><tr
id=sl_svn141_2085

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_2086

><td class="source"><br></td></tr
><tr
id=sl_svn141_2087

><td class="source">  def CheckBegin(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2088

><td class="source">    # Look for a bare &#39;:&#39;<br></td></tr
><tr
id=sl_svn141_2089

><td class="source">    if Search(&#39;(^|[^:]):($|[^:])&#39;, clean_lines.elided[linenum]):<br></td></tr
><tr
id=sl_svn141_2090

><td class="source">      self.is_derived = True<br></td></tr
><tr
id=sl_svn141_2091

><td class="source"><br></td></tr
><tr
id=sl_svn141_2092

><td class="source">  def CheckEnd(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2093

><td class="source">    # If there is a DISALLOW macro, it should appear near the end of<br></td></tr
><tr
id=sl_svn141_2094

><td class="source">    # the class.<br></td></tr
><tr
id=sl_svn141_2095

><td class="source">    seen_last_thing_in_class = False<br></td></tr
><tr
id=sl_svn141_2096

><td class="source">    for i in xrange(linenum - 1, self.starting_linenum, -1):<br></td></tr
><tr
id=sl_svn141_2097

><td class="source">      match = Search(<br></td></tr
><tr
id=sl_svn141_2098

><td class="source">          r&#39;\b(DISALLOW_COPY_AND_ASSIGN|DISALLOW_IMPLICIT_CONSTRUCTORS)\(&#39; +<br></td></tr
><tr
id=sl_svn141_2099

><td class="source">          self.name + r&#39;\)&#39;,<br></td></tr
><tr
id=sl_svn141_2100

><td class="source">          clean_lines.elided[i])<br></td></tr
><tr
id=sl_svn141_2101

><td class="source">      if match:<br></td></tr
><tr
id=sl_svn141_2102

><td class="source">        if seen_last_thing_in_class:<br></td></tr
><tr
id=sl_svn141_2103

><td class="source">          error(filename, i, &#39;readability/constructors&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2104

><td class="source">                match.group(1) + &#39; should be the last thing in the class&#39;)<br></td></tr
><tr
id=sl_svn141_2105

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_2106

><td class="source"><br></td></tr
><tr
id=sl_svn141_2107

><td class="source">      if not Match(r&#39;^\s*$&#39;, clean_lines.elided[i]):<br></td></tr
><tr
id=sl_svn141_2108

><td class="source">        seen_last_thing_in_class = True<br></td></tr
><tr
id=sl_svn141_2109

><td class="source"><br></td></tr
><tr
id=sl_svn141_2110

><td class="source">    # Check that closing brace is aligned with beginning of the class.<br></td></tr
><tr
id=sl_svn141_2111

><td class="source">    # Only do this if the closing brace is indented by only whitespaces.<br></td></tr
><tr
id=sl_svn141_2112

><td class="source">    # This means we will not check single-line class definitions.<br></td></tr
><tr
id=sl_svn141_2113

><td class="source">    indent = Match(r&#39;^( *)\}&#39;, clean_lines.elided[linenum])<br></td></tr
><tr
id=sl_svn141_2114

><td class="source">    if indent and len(indent.group(1)) != self.class_indent:<br></td></tr
><tr
id=sl_svn141_2115

><td class="source">      if self.is_struct:<br></td></tr
><tr
id=sl_svn141_2116

><td class="source">        parent = &#39;struct &#39; + self.name<br></td></tr
><tr
id=sl_svn141_2117

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2118

><td class="source">        parent = &#39;class &#39; + self.name<br></td></tr
><tr
id=sl_svn141_2119

><td class="source">      error(filename, linenum, &#39;whitespace/indent&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2120

><td class="source">            &#39;Closing brace should be aligned with beginning of %s&#39; % parent)<br></td></tr
><tr
id=sl_svn141_2121

><td class="source"><br></td></tr
><tr
id=sl_svn141_2122

><td class="source"><br></td></tr
><tr
id=sl_svn141_2123

><td class="source">class _NamespaceInfo(_BlockInfo):<br></td></tr
><tr
id=sl_svn141_2124

><td class="source">  &quot;&quot;&quot;Stores information about a namespace.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2125

><td class="source"><br></td></tr
><tr
id=sl_svn141_2126

><td class="source">  def __init__(self, name, linenum):<br></td></tr
><tr
id=sl_svn141_2127

><td class="source">    _BlockInfo.__init__(self, False)<br></td></tr
><tr
id=sl_svn141_2128

><td class="source">    self.name = name or &#39;&#39;<br></td></tr
><tr
id=sl_svn141_2129

><td class="source">    self.starting_linenum = linenum<br></td></tr
><tr
id=sl_svn141_2130

><td class="source">    self.check_namespace_indentation = True<br></td></tr
><tr
id=sl_svn141_2131

><td class="source"><br></td></tr
><tr
id=sl_svn141_2132

><td class="source">  def CheckEnd(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2133

><td class="source">    &quot;&quot;&quot;Check end of namespace comments.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2134

><td class="source">    line = clean_lines.raw_lines[linenum]<br></td></tr
><tr
id=sl_svn141_2135

><td class="source"><br></td></tr
><tr
id=sl_svn141_2136

><td class="source">    # Check how many lines is enclosed in this namespace.  Don&#39;t issue<br></td></tr
><tr
id=sl_svn141_2137

><td class="source">    # warning for missing namespace comments if there aren&#39;t enough<br></td></tr
><tr
id=sl_svn141_2138

><td class="source">    # lines.  However, do apply checks if there is already an end of<br></td></tr
><tr
id=sl_svn141_2139

><td class="source">    # namespace comment and it&#39;s incorrect.<br></td></tr
><tr
id=sl_svn141_2140

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2141

><td class="source">    # TODO(unknown): We always want to check end of namespace comments<br></td></tr
><tr
id=sl_svn141_2142

><td class="source">    # if a namespace is large, but sometimes we also want to apply the<br></td></tr
><tr
id=sl_svn141_2143

><td class="source">    # check if a short namespace contained nontrivial things (something<br></td></tr
><tr
id=sl_svn141_2144

><td class="source">    # other than forward declarations).  There is currently no logic on<br></td></tr
><tr
id=sl_svn141_2145

><td class="source">    # deciding what these nontrivial things are, so this check is<br></td></tr
><tr
id=sl_svn141_2146

><td class="source">    # triggered by namespace size only, which works most of the time.<br></td></tr
><tr
id=sl_svn141_2147

><td class="source">    if (linenum - self.starting_linenum &lt; 10<br></td></tr
><tr
id=sl_svn141_2148

><td class="source">        and not Match(r&#39;};*\s*(//|/\*).*\bnamespace\b&#39;, line)):<br></td></tr
><tr
id=sl_svn141_2149

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_2150

><td class="source"><br></td></tr
><tr
id=sl_svn141_2151

><td class="source">    # Look for matching comment at end of namespace.<br></td></tr
><tr
id=sl_svn141_2152

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2153

><td class="source">    # Note that we accept C style &quot;/* */&quot; comments for terminating<br></td></tr
><tr
id=sl_svn141_2154

><td class="source">    # namespaces, so that code that terminate namespaces inside<br></td></tr
><tr
id=sl_svn141_2155

><td class="source">    # preprocessor macros can be cpplint clean.<br></td></tr
><tr
id=sl_svn141_2156

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2157

><td class="source">    # We also accept stuff like &quot;// end of namespace &lt;name&gt;.&quot; with the<br></td></tr
><tr
id=sl_svn141_2158

><td class="source">    # period at the end.<br></td></tr
><tr
id=sl_svn141_2159

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2160

><td class="source">    # Besides these, we don&#39;t accept anything else, otherwise we might<br></td></tr
><tr
id=sl_svn141_2161

><td class="source">    # get false negatives when existing comment is a substring of the<br></td></tr
><tr
id=sl_svn141_2162

><td class="source">    # expected namespace.<br></td></tr
><tr
id=sl_svn141_2163

><td class="source">    if self.name:<br></td></tr
><tr
id=sl_svn141_2164

><td class="source">      # Named namespace<br></td></tr
><tr
id=sl_svn141_2165

><td class="source">      if not Match((r&#39;};*\s*(//|/\*).*\bnamespace\s+&#39; + re.escape(self.name) +<br></td></tr
><tr
id=sl_svn141_2166

><td class="source">                    r&#39;[\*/\.\\\s]*$&#39;),<br></td></tr
><tr
id=sl_svn141_2167

><td class="source">                   line):<br></td></tr
><tr
id=sl_svn141_2168

><td class="source">        error(filename, linenum, &#39;readability/namespace&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2169

><td class="source">              &#39;Namespace should be terminated with &quot;// namespace %s&quot;&#39; %<br></td></tr
><tr
id=sl_svn141_2170

><td class="source">              self.name)<br></td></tr
><tr
id=sl_svn141_2171

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_2172

><td class="source">      # Anonymous namespace<br></td></tr
><tr
id=sl_svn141_2173

><td class="source">      if not Match(r&#39;};*\s*(//|/\*).*\bnamespace[\*/\.\\\s]*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_2174

><td class="source">        # If &quot;// namespace anonymous&quot; or &quot;// anonymous namespace (more text)&quot;,<br></td></tr
><tr
id=sl_svn141_2175

><td class="source">        # mention &quot;// anonymous namespace&quot; as an acceptable form<br></td></tr
><tr
id=sl_svn141_2176

><td class="source">        if Match(r&#39;}.*\b(namespace anonymous|anonymous namespace)\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_2177

><td class="source">          error(filename, linenum, &#39;readability/namespace&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2178

><td class="source">                &#39;Anonymous namespace should be terminated with &quot;// namespace&quot;&#39;<br></td></tr
><tr
id=sl_svn141_2179

><td class="source">                &#39; or &quot;// anonymous namespace&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_2180

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_2181

><td class="source">          error(filename, linenum, &#39;readability/namespace&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2182

><td class="source">                &#39;Anonymous namespace should be terminated with &quot;// namespace&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_2183

><td class="source"><br></td></tr
><tr
id=sl_svn141_2184

><td class="source"><br></td></tr
><tr
id=sl_svn141_2185

><td class="source">class _PreprocessorInfo(object):<br></td></tr
><tr
id=sl_svn141_2186

><td class="source">  &quot;&quot;&quot;Stores checkpoints of nesting stacks when #if/#else is seen.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2187

><td class="source"><br></td></tr
><tr
id=sl_svn141_2188

><td class="source">  def __init__(self, stack_before_if):<br></td></tr
><tr
id=sl_svn141_2189

><td class="source">    # The entire nesting stack before #if<br></td></tr
><tr
id=sl_svn141_2190

><td class="source">    self.stack_before_if = stack_before_if<br></td></tr
><tr
id=sl_svn141_2191

><td class="source"><br></td></tr
><tr
id=sl_svn141_2192

><td class="source">    # The entire nesting stack up to #else<br></td></tr
><tr
id=sl_svn141_2193

><td class="source">    self.stack_before_else = []<br></td></tr
><tr
id=sl_svn141_2194

><td class="source"><br></td></tr
><tr
id=sl_svn141_2195

><td class="source">    # Whether we have already seen #else or #elif<br></td></tr
><tr
id=sl_svn141_2196

><td class="source">    self.seen_else = False<br></td></tr
><tr
id=sl_svn141_2197

><td class="source"><br></td></tr
><tr
id=sl_svn141_2198

><td class="source"><br></td></tr
><tr
id=sl_svn141_2199

><td class="source">class NestingState(object):<br></td></tr
><tr
id=sl_svn141_2200

><td class="source">  &quot;&quot;&quot;Holds states related to parsing braces.&quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2201

><td class="source"><br></td></tr
><tr
id=sl_svn141_2202

><td class="source">  def __init__(self):<br></td></tr
><tr
id=sl_svn141_2203

><td class="source">    # Stack for tracking all braces.  An object is pushed whenever we<br></td></tr
><tr
id=sl_svn141_2204

><td class="source">    # see a &quot;{&quot;, and popped when we see a &quot;}&quot;.  Only 3 types of<br></td></tr
><tr
id=sl_svn141_2205

><td class="source">    # objects are possible:<br></td></tr
><tr
id=sl_svn141_2206

><td class="source">    # - _ClassInfo: a class or struct.<br></td></tr
><tr
id=sl_svn141_2207

><td class="source">    # - _NamespaceInfo: a namespace.<br></td></tr
><tr
id=sl_svn141_2208

><td class="source">    # - _BlockInfo: some other type of block.<br></td></tr
><tr
id=sl_svn141_2209

><td class="source">    self.stack = []<br></td></tr
><tr
id=sl_svn141_2210

><td class="source"><br></td></tr
><tr
id=sl_svn141_2211

><td class="source">    # Top of the previous stack before each Update().<br></td></tr
><tr
id=sl_svn141_2212

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2213

><td class="source">    # Because the nesting_stack is updated at the end of each line, we<br></td></tr
><tr
id=sl_svn141_2214

><td class="source">    # had to do some convoluted checks to find out what is the current<br></td></tr
><tr
id=sl_svn141_2215

><td class="source">    # scope at the beginning of the line.  This check is simplified by<br></td></tr
><tr
id=sl_svn141_2216

><td class="source">    # saving the previous top of nesting stack.<br></td></tr
><tr
id=sl_svn141_2217

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2218

><td class="source">    # We could save the full stack, but we only need the top.  Copying<br></td></tr
><tr
id=sl_svn141_2219

><td class="source">    # the full nesting stack would slow down cpplint by ~10%.<br></td></tr
><tr
id=sl_svn141_2220

><td class="source">    self.previous_stack_top = []<br></td></tr
><tr
id=sl_svn141_2221

><td class="source"><br></td></tr
><tr
id=sl_svn141_2222

><td class="source">    # Stack of _PreprocessorInfo objects.<br></td></tr
><tr
id=sl_svn141_2223

><td class="source">    self.pp_stack = []<br></td></tr
><tr
id=sl_svn141_2224

><td class="source"><br></td></tr
><tr
id=sl_svn141_2225

><td class="source">  def SeenOpenBrace(self):<br></td></tr
><tr
id=sl_svn141_2226

><td class="source">    &quot;&quot;&quot;Check if we have seen the opening brace for the innermost block.<br></td></tr
><tr
id=sl_svn141_2227

><td class="source"><br></td></tr
><tr
id=sl_svn141_2228

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2229

><td class="source">      True if we have seen the opening brace, False if the innermost<br></td></tr
><tr
id=sl_svn141_2230

><td class="source">      block is still expecting an opening brace.<br></td></tr
><tr
id=sl_svn141_2231

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2232

><td class="source">    return (not self.stack) or self.stack[-1].seen_open_brace<br></td></tr
><tr
id=sl_svn141_2233

><td class="source"><br></td></tr
><tr
id=sl_svn141_2234

><td class="source">  def InNamespaceBody(self):<br></td></tr
><tr
id=sl_svn141_2235

><td class="source">    &quot;&quot;&quot;Check if we are currently one level inside a namespace body.<br></td></tr
><tr
id=sl_svn141_2236

><td class="source"><br></td></tr
><tr
id=sl_svn141_2237

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2238

><td class="source">      True if top of the stack is a namespace block, False otherwise.<br></td></tr
><tr
id=sl_svn141_2239

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2240

><td class="source">    return self.stack and isinstance(self.stack[-1], _NamespaceInfo)<br></td></tr
><tr
id=sl_svn141_2241

><td class="source"><br></td></tr
><tr
id=sl_svn141_2242

><td class="source">  def InExternC(self):<br></td></tr
><tr
id=sl_svn141_2243

><td class="source">    &quot;&quot;&quot;Check if we are currently one level inside an &#39;extern &quot;C&quot;&#39; block.<br></td></tr
><tr
id=sl_svn141_2244

><td class="source"><br></td></tr
><tr
id=sl_svn141_2245

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2246

><td class="source">      True if top of the stack is an extern block, False otherwise.<br></td></tr
><tr
id=sl_svn141_2247

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2248

><td class="source">    return self.stack and isinstance(self.stack[-1], _ExternCInfo)<br></td></tr
><tr
id=sl_svn141_2249

><td class="source"><br></td></tr
><tr
id=sl_svn141_2250

><td class="source">  def InClassDeclaration(self):<br></td></tr
><tr
id=sl_svn141_2251

><td class="source">    &quot;&quot;&quot;Check if we are currently one level inside a class or struct declaration.<br></td></tr
><tr
id=sl_svn141_2252

><td class="source"><br></td></tr
><tr
id=sl_svn141_2253

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2254

><td class="source">      True if top of the stack is a class/struct, False otherwise.<br></td></tr
><tr
id=sl_svn141_2255

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2256

><td class="source">    return self.stack and isinstance(self.stack[-1], _ClassInfo)<br></td></tr
><tr
id=sl_svn141_2257

><td class="source"><br></td></tr
><tr
id=sl_svn141_2258

><td class="source">  def InAsmBlock(self):<br></td></tr
><tr
id=sl_svn141_2259

><td class="source">    &quot;&quot;&quot;Check if we are currently one level inside an inline ASM block.<br></td></tr
><tr
id=sl_svn141_2260

><td class="source"><br></td></tr
><tr
id=sl_svn141_2261

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2262

><td class="source">      True if the top of the stack is a block containing inline ASM.<br></td></tr
><tr
id=sl_svn141_2263

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2264

><td class="source">    return self.stack and self.stack[-1].inline_asm != _NO_ASM<br></td></tr
><tr
id=sl_svn141_2265

><td class="source"><br></td></tr
><tr
id=sl_svn141_2266

><td class="source">  def InTemplateArgumentList(self, clean_lines, linenum, pos):<br></td></tr
><tr
id=sl_svn141_2267

><td class="source">    &quot;&quot;&quot;Check if current position is inside template argument list.<br></td></tr
><tr
id=sl_svn141_2268

><td class="source"><br></td></tr
><tr
id=sl_svn141_2269

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2270

><td class="source">      clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2271

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2272

><td class="source">      pos: position just after the suspected template argument.<br></td></tr
><tr
id=sl_svn141_2273

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2274

><td class="source">      True if (linenum, pos) is inside template arguments.<br></td></tr
><tr
id=sl_svn141_2275

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2276

><td class="source">    while linenum &lt; clean_lines.NumLines():<br></td></tr
><tr
id=sl_svn141_2277

><td class="source">      # Find the earliest character that might indicate a template argument<br></td></tr
><tr
id=sl_svn141_2278

><td class="source">      line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_2279

><td class="source">      match = Match(r&#39;^[^{};=\[\]\.&lt;&gt;]*(.)&#39;, line[pos:])<br></td></tr
><tr
id=sl_svn141_2280

><td class="source">      if not match:<br></td></tr
><tr
id=sl_svn141_2281

><td class="source">        linenum += 1<br></td></tr
><tr
id=sl_svn141_2282

><td class="source">        pos = 0<br></td></tr
><tr
id=sl_svn141_2283

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_2284

><td class="source">      token = match.group(1)<br></td></tr
><tr
id=sl_svn141_2285

><td class="source">      pos += len(match.group(0))<br></td></tr
><tr
id=sl_svn141_2286

><td class="source"><br></td></tr
><tr
id=sl_svn141_2287

><td class="source">      # These things do not look like template argument list:<br></td></tr
><tr
id=sl_svn141_2288

><td class="source">      #   class Suspect {<br></td></tr
><tr
id=sl_svn141_2289

><td class="source">      #   class Suspect x; }<br></td></tr
><tr
id=sl_svn141_2290

><td class="source">      if token in (&#39;{&#39;, &#39;}&#39;, &#39;;&#39;): return False<br></td></tr
><tr
id=sl_svn141_2291

><td class="source"><br></td></tr
><tr
id=sl_svn141_2292

><td class="source">      # These things look like template argument list:<br></td></tr
><tr
id=sl_svn141_2293

><td class="source">      #   template &lt;class Suspect&gt;<br></td></tr
><tr
id=sl_svn141_2294

><td class="source">      #   template &lt;class Suspect = default_value&gt;<br></td></tr
><tr
id=sl_svn141_2295

><td class="source">      #   template &lt;class Suspect[]&gt;<br></td></tr
><tr
id=sl_svn141_2296

><td class="source">      #   template &lt;class Suspect...&gt;<br></td></tr
><tr
id=sl_svn141_2297

><td class="source">      if token in (&#39;&gt;&#39;, &#39;=&#39;, &#39;[&#39;, &#39;]&#39;, &#39;.&#39;): return True<br></td></tr
><tr
id=sl_svn141_2298

><td class="source"><br></td></tr
><tr
id=sl_svn141_2299

><td class="source">      # Check if token is an unmatched &#39;&lt;&#39;.<br></td></tr
><tr
id=sl_svn141_2300

><td class="source">      # If not, move on to the next character.<br></td></tr
><tr
id=sl_svn141_2301

><td class="source">      if token != &#39;&lt;&#39;:<br></td></tr
><tr
id=sl_svn141_2302

><td class="source">        pos += 1<br></td></tr
><tr
id=sl_svn141_2303

><td class="source">        if pos &gt;= len(line):<br></td></tr
><tr
id=sl_svn141_2304

><td class="source">          linenum += 1<br></td></tr
><tr
id=sl_svn141_2305

><td class="source">          pos = 0<br></td></tr
><tr
id=sl_svn141_2306

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_2307

><td class="source"><br></td></tr
><tr
id=sl_svn141_2308

><td class="source">      # We can&#39;t be sure if we just find a single &#39;&lt;&#39;, and need to<br></td></tr
><tr
id=sl_svn141_2309

><td class="source">      # find the matching &#39;&gt;&#39;.<br></td></tr
><tr
id=sl_svn141_2310

><td class="source">      (_, end_line, end_pos) = CloseExpression(clean_lines, linenum, pos - 1)<br></td></tr
><tr
id=sl_svn141_2311

><td class="source">      if end_pos &lt; 0:<br></td></tr
><tr
id=sl_svn141_2312

><td class="source">        # Not sure if template argument list or syntax error in file<br></td></tr
><tr
id=sl_svn141_2313

><td class="source">        return False<br></td></tr
><tr
id=sl_svn141_2314

><td class="source">      linenum = end_line<br></td></tr
><tr
id=sl_svn141_2315

><td class="source">      pos = end_pos<br></td></tr
><tr
id=sl_svn141_2316

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_2317

><td class="source"><br></td></tr
><tr
id=sl_svn141_2318

><td class="source">  def UpdatePreprocessor(self, line):<br></td></tr
><tr
id=sl_svn141_2319

><td class="source">    &quot;&quot;&quot;Update preprocessor stack.<br></td></tr
><tr
id=sl_svn141_2320

><td class="source"><br></td></tr
><tr
id=sl_svn141_2321

><td class="source">    We need to handle preprocessors due to classes like this:<br></td></tr
><tr
id=sl_svn141_2322

><td class="source">      #ifdef SWIG<br></td></tr
><tr
id=sl_svn141_2323

><td class="source">      struct ResultDetailsPageElementExtensionPoint {<br></td></tr
><tr
id=sl_svn141_2324

><td class="source">      #else<br></td></tr
><tr
id=sl_svn141_2325

><td class="source">      struct ResultDetailsPageElementExtensionPoint : public Extension {<br></td></tr
><tr
id=sl_svn141_2326

><td class="source">      #endif<br></td></tr
><tr
id=sl_svn141_2327

><td class="source"><br></td></tr
><tr
id=sl_svn141_2328

><td class="source">    We make the following assumptions (good enough for most files):<br></td></tr
><tr
id=sl_svn141_2329

><td class="source">    - Preprocessor condition evaluates to true from #if up to first<br></td></tr
><tr
id=sl_svn141_2330

><td class="source">      #else/#elif/#endif.<br></td></tr
><tr
id=sl_svn141_2331

><td class="source"><br></td></tr
><tr
id=sl_svn141_2332

><td class="source">    - Preprocessor condition evaluates to false from #else/#elif up<br></td></tr
><tr
id=sl_svn141_2333

><td class="source">      to #endif.  We still perform lint checks on these lines, but<br></td></tr
><tr
id=sl_svn141_2334

><td class="source">      these do not affect nesting stack.<br></td></tr
><tr
id=sl_svn141_2335

><td class="source"><br></td></tr
><tr
id=sl_svn141_2336

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2337

><td class="source">      line: current line to check.<br></td></tr
><tr
id=sl_svn141_2338

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2339

><td class="source">    if Match(r&#39;^\s*#\s*(if|ifdef|ifndef)\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_2340

><td class="source">      # Beginning of #if block, save the nesting stack here.  The saved<br></td></tr
><tr
id=sl_svn141_2341

><td class="source">      # stack will allow us to restore the parsing state in the #else case.<br></td></tr
><tr
id=sl_svn141_2342

><td class="source">      self.pp_stack.append(_PreprocessorInfo(copy.deepcopy(self.stack)))<br></td></tr
><tr
id=sl_svn141_2343

><td class="source">    elif Match(r&#39;^\s*#\s*(else|elif)\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_2344

><td class="source">      # Beginning of #else block<br></td></tr
><tr
id=sl_svn141_2345

><td class="source">      if self.pp_stack:<br></td></tr
><tr
id=sl_svn141_2346

><td class="source">        if not self.pp_stack[-1].seen_else:<br></td></tr
><tr
id=sl_svn141_2347

><td class="source">          # This is the first #else or #elif block.  Remember the<br></td></tr
><tr
id=sl_svn141_2348

><td class="source">          # whole nesting stack up to this point.  This is what we<br></td></tr
><tr
id=sl_svn141_2349

><td class="source">          # keep after the #endif.<br></td></tr
><tr
id=sl_svn141_2350

><td class="source">          self.pp_stack[-1].seen_else = True<br></td></tr
><tr
id=sl_svn141_2351

><td class="source">          self.pp_stack[-1].stack_before_else = copy.deepcopy(self.stack)<br></td></tr
><tr
id=sl_svn141_2352

><td class="source"><br></td></tr
><tr
id=sl_svn141_2353

><td class="source">        # Restore the stack to how it was before the #if<br></td></tr
><tr
id=sl_svn141_2354

><td class="source">        self.stack = copy.deepcopy(self.pp_stack[-1].stack_before_if)<br></td></tr
><tr
id=sl_svn141_2355

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2356

><td class="source">        # TODO(unknown): unexpected #else, issue warning?<br></td></tr
><tr
id=sl_svn141_2357

><td class="source">        pass<br></td></tr
><tr
id=sl_svn141_2358

><td class="source">    elif Match(r&#39;^\s*#\s*endif\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_2359

><td class="source">      # End of #if or #else blocks.<br></td></tr
><tr
id=sl_svn141_2360

><td class="source">      if self.pp_stack:<br></td></tr
><tr
id=sl_svn141_2361

><td class="source">        # If we saw an #else, we will need to restore the nesting<br></td></tr
><tr
id=sl_svn141_2362

><td class="source">        # stack to its former state before the #else, otherwise we<br></td></tr
><tr
id=sl_svn141_2363

><td class="source">        # will just continue from where we left off.<br></td></tr
><tr
id=sl_svn141_2364

><td class="source">        if self.pp_stack[-1].seen_else:<br></td></tr
><tr
id=sl_svn141_2365

><td class="source">          # Here we can just use a shallow copy since we are the last<br></td></tr
><tr
id=sl_svn141_2366

><td class="source">          # reference to it.<br></td></tr
><tr
id=sl_svn141_2367

><td class="source">          self.stack = self.pp_stack[-1].stack_before_else<br></td></tr
><tr
id=sl_svn141_2368

><td class="source">        # Drop the corresponding #if<br></td></tr
><tr
id=sl_svn141_2369

><td class="source">        self.pp_stack.pop()<br></td></tr
><tr
id=sl_svn141_2370

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2371

><td class="source">        # TODO(unknown): unexpected #endif, issue warning?<br></td></tr
><tr
id=sl_svn141_2372

><td class="source">        pass<br></td></tr
><tr
id=sl_svn141_2373

><td class="source"><br></td></tr
><tr
id=sl_svn141_2374

><td class="source">  # TODO(unknown): Update() is too long, but we will refactor later.<br></td></tr
><tr
id=sl_svn141_2375

><td class="source">  def Update(self, filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2376

><td class="source">    &quot;&quot;&quot;Update nesting state with current line.<br></td></tr
><tr
id=sl_svn141_2377

><td class="source"><br></td></tr
><tr
id=sl_svn141_2378

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2379

><td class="source">      filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2380

><td class="source">      clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2381

><td class="source">      linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2382

><td class="source">      error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2383

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2384

><td class="source">    line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_2385

><td class="source"><br></td></tr
><tr
id=sl_svn141_2386

><td class="source">    # Remember top of the previous nesting stack.<br></td></tr
><tr
id=sl_svn141_2387

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_2388

><td class="source">    # The stack is always pushed/popped and not modified in place, so<br></td></tr
><tr
id=sl_svn141_2389

><td class="source">    # we can just do a shallow copy instead of copy.deepcopy.  Using<br></td></tr
><tr
id=sl_svn141_2390

><td class="source">    # deepcopy would slow down cpplint by ~28%.<br></td></tr
><tr
id=sl_svn141_2391

><td class="source">    if self.stack:<br></td></tr
><tr
id=sl_svn141_2392

><td class="source">      self.previous_stack_top = self.stack[-1]<br></td></tr
><tr
id=sl_svn141_2393

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_2394

><td class="source">      self.previous_stack_top = None<br></td></tr
><tr
id=sl_svn141_2395

><td class="source"><br></td></tr
><tr
id=sl_svn141_2396

><td class="source">    # Update pp_stack<br></td></tr
><tr
id=sl_svn141_2397

><td class="source">    self.UpdatePreprocessor(line)<br></td></tr
><tr
id=sl_svn141_2398

><td class="source"><br></td></tr
><tr
id=sl_svn141_2399

><td class="source">    # Count parentheses.  This is to avoid adding struct arguments to<br></td></tr
><tr
id=sl_svn141_2400

><td class="source">    # the nesting stack.<br></td></tr
><tr
id=sl_svn141_2401

><td class="source">    if self.stack:<br></td></tr
><tr
id=sl_svn141_2402

><td class="source">      inner_block = self.stack[-1]<br></td></tr
><tr
id=sl_svn141_2403

><td class="source">      depth_change = line.count(&#39;(&#39;) - line.count(&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_2404

><td class="source">      inner_block.open_parentheses += depth_change<br></td></tr
><tr
id=sl_svn141_2405

><td class="source"><br></td></tr
><tr
id=sl_svn141_2406

><td class="source">      # Also check if we are starting or ending an inline assembly block.<br></td></tr
><tr
id=sl_svn141_2407

><td class="source">      if inner_block.inline_asm in (_NO_ASM, _END_ASM):<br></td></tr
><tr
id=sl_svn141_2408

><td class="source">        if (depth_change != 0 and<br></td></tr
><tr
id=sl_svn141_2409

><td class="source">            inner_block.open_parentheses == 1 and<br></td></tr
><tr
id=sl_svn141_2410

><td class="source">            _MATCH_ASM.match(line)):<br></td></tr
><tr
id=sl_svn141_2411

><td class="source">          # Enter assembly block<br></td></tr
><tr
id=sl_svn141_2412

><td class="source">          inner_block.inline_asm = _INSIDE_ASM<br></td></tr
><tr
id=sl_svn141_2413

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_2414

><td class="source">          # Not entering assembly block.  If previous line was _END_ASM,<br></td></tr
><tr
id=sl_svn141_2415

><td class="source">          # we will now shift to _NO_ASM state.<br></td></tr
><tr
id=sl_svn141_2416

><td class="source">          inner_block.inline_asm = _NO_ASM<br></td></tr
><tr
id=sl_svn141_2417

><td class="source">      elif (inner_block.inline_asm == _INSIDE_ASM and<br></td></tr
><tr
id=sl_svn141_2418

><td class="source">            inner_block.open_parentheses == 0):<br></td></tr
><tr
id=sl_svn141_2419

><td class="source">        # Exit assembly block<br></td></tr
><tr
id=sl_svn141_2420

><td class="source">        inner_block.inline_asm = _END_ASM<br></td></tr
><tr
id=sl_svn141_2421

><td class="source"><br></td></tr
><tr
id=sl_svn141_2422

><td class="source">    # Consume namespace declaration at the beginning of the line.  Do<br></td></tr
><tr
id=sl_svn141_2423

><td class="source">    # this in a loop so that we catch same line declarations like this:<br></td></tr
><tr
id=sl_svn141_2424

><td class="source">    #   namespace proto2 { namespace bridge { class MessageSet; } }<br></td></tr
><tr
id=sl_svn141_2425

><td class="source">    while True:<br></td></tr
><tr
id=sl_svn141_2426

><td class="source">      # Match start of namespace.  The &quot;\b\s*&quot; below catches namespace<br></td></tr
><tr
id=sl_svn141_2427

><td class="source">      # declarations even if it weren&#39;t followed by a whitespace, this<br></td></tr
><tr
id=sl_svn141_2428

><td class="source">      # is so that we don&#39;t confuse our namespace checker.  The<br></td></tr
><tr
id=sl_svn141_2429

><td class="source">      # missing spaces will be flagged by CheckSpacing.<br></td></tr
><tr
id=sl_svn141_2430

><td class="source">      namespace_decl_match = Match(r&#39;^\s*namespace\b\s*([:\w]+)?(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_2431

><td class="source">      if not namespace_decl_match:<br></td></tr
><tr
id=sl_svn141_2432

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_2433

><td class="source"><br></td></tr
><tr
id=sl_svn141_2434

><td class="source">      new_namespace = _NamespaceInfo(namespace_decl_match.group(1), linenum)<br></td></tr
><tr
id=sl_svn141_2435

><td class="source">      self.stack.append(new_namespace)<br></td></tr
><tr
id=sl_svn141_2436

><td class="source"><br></td></tr
><tr
id=sl_svn141_2437

><td class="source">      line = namespace_decl_match.group(2)<br></td></tr
><tr
id=sl_svn141_2438

><td class="source">      if line.find(&#39;{&#39;) != -1:<br></td></tr
><tr
id=sl_svn141_2439

><td class="source">        new_namespace.seen_open_brace = True<br></td></tr
><tr
id=sl_svn141_2440

><td class="source">        line = line[line.find(&#39;{&#39;) + 1:]<br></td></tr
><tr
id=sl_svn141_2441

><td class="source"><br></td></tr
><tr
id=sl_svn141_2442

><td class="source">    # Look for a class declaration in whatever is left of the line<br></td></tr
><tr
id=sl_svn141_2443

><td class="source">    # after parsing namespaces.  The regexp accounts for decorated classes<br></td></tr
><tr
id=sl_svn141_2444

><td class="source">    # such as in:<br></td></tr
><tr
id=sl_svn141_2445

><td class="source">    #   class LOCKABLE API Object {<br></td></tr
><tr
id=sl_svn141_2446

><td class="source">    #   };<br></td></tr
><tr
id=sl_svn141_2447

><td class="source">    class_decl_match = Match(<br></td></tr
><tr
id=sl_svn141_2448

><td class="source">        r&#39;^(\s*(?:template\s*&lt;[\w\s&lt;&gt;,:]*&gt;\s*)?&#39;<br></td></tr
><tr
id=sl_svn141_2449

><td class="source">        r&#39;(class|struct)\s+(?:[A-Z_]+\s+)*(\w+(?:::\w+)*))&#39;<br></td></tr
><tr
id=sl_svn141_2450

><td class="source">        r&#39;(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_2451

><td class="source">    if (class_decl_match and<br></td></tr
><tr
id=sl_svn141_2452

><td class="source">        (not self.stack or self.stack[-1].open_parentheses == 0)):<br></td></tr
><tr
id=sl_svn141_2453

><td class="source">      # We do not want to accept classes that are actually template arguments:<br></td></tr
><tr
id=sl_svn141_2454

><td class="source">      #   template &lt;class Ignore1,<br></td></tr
><tr
id=sl_svn141_2455

><td class="source">      #             class Ignore2 = Default&lt;Args&gt;,<br></td></tr
><tr
id=sl_svn141_2456

><td class="source">      #             template &lt;Args&gt; class Ignore3&gt;<br></td></tr
><tr
id=sl_svn141_2457

><td class="source">      #   void Function() {};<br></td></tr
><tr
id=sl_svn141_2458

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_2459

><td class="source">      # To avoid template argument cases, we scan forward and look for<br></td></tr
><tr
id=sl_svn141_2460

><td class="source">      # an unmatched &#39;&gt;&#39;.  If we see one, assume we are inside a<br></td></tr
><tr
id=sl_svn141_2461

><td class="source">      # template argument list.<br></td></tr
><tr
id=sl_svn141_2462

><td class="source">      end_declaration = len(class_decl_match.group(1))<br></td></tr
><tr
id=sl_svn141_2463

><td class="source">      if not self.InTemplateArgumentList(clean_lines, linenum, end_declaration):<br></td></tr
><tr
id=sl_svn141_2464

><td class="source">        self.stack.append(_ClassInfo(<br></td></tr
><tr
id=sl_svn141_2465

><td class="source">            class_decl_match.group(3), class_decl_match.group(2),<br></td></tr
><tr
id=sl_svn141_2466

><td class="source">            clean_lines, linenum))<br></td></tr
><tr
id=sl_svn141_2467

><td class="source">        line = class_decl_match.group(4)<br></td></tr
><tr
id=sl_svn141_2468

><td class="source"><br></td></tr
><tr
id=sl_svn141_2469

><td class="source">    # If we have not yet seen the opening brace for the innermost block,<br></td></tr
><tr
id=sl_svn141_2470

><td class="source">    # run checks here.<br></td></tr
><tr
id=sl_svn141_2471

><td class="source">    if not self.SeenOpenBrace():<br></td></tr
><tr
id=sl_svn141_2472

><td class="source">      self.stack[-1].CheckBegin(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_2473

><td class="source"><br></td></tr
><tr
id=sl_svn141_2474

><td class="source">    # Update access control if we are inside a class/struct<br></td></tr
><tr
id=sl_svn141_2475

><td class="source">    if self.stack and isinstance(self.stack[-1], _ClassInfo):<br></td></tr
><tr
id=sl_svn141_2476

><td class="source">      classinfo = self.stack[-1]<br></td></tr
><tr
id=sl_svn141_2477

><td class="source">      access_match = Match(<br></td></tr
><tr
id=sl_svn141_2478

><td class="source">          r&#39;^(.*)\b(public|private|protected|signals)(\s+(?:slots\s*)?)?&#39;<br></td></tr
><tr
id=sl_svn141_2479

><td class="source">          r&#39;:(?:[^:]|$)&#39;,<br></td></tr
><tr
id=sl_svn141_2480

><td class="source">          line)<br></td></tr
><tr
id=sl_svn141_2481

><td class="source">      if access_match:<br></td></tr
><tr
id=sl_svn141_2482

><td class="source">        classinfo.access = access_match.group(2)<br></td></tr
><tr
id=sl_svn141_2483

><td class="source"><br></td></tr
><tr
id=sl_svn141_2484

><td class="source">        # Check that access keywords are indented +1 space.  Skip this<br></td></tr
><tr
id=sl_svn141_2485

><td class="source">        # check if the keywords are not preceded by whitespaces.<br></td></tr
><tr
id=sl_svn141_2486

><td class="source">        indent = access_match.group(1)<br></td></tr
><tr
id=sl_svn141_2487

><td class="source">        if (len(indent) != classinfo.class_indent + 1 and<br></td></tr
><tr
id=sl_svn141_2488

><td class="source">            Match(r&#39;^\s*$&#39;, indent)):<br></td></tr
><tr
id=sl_svn141_2489

><td class="source">          if classinfo.is_struct:<br></td></tr
><tr
id=sl_svn141_2490

><td class="source">            parent = &#39;struct &#39; + classinfo.name<br></td></tr
><tr
id=sl_svn141_2491

><td class="source">          else:<br></td></tr
><tr
id=sl_svn141_2492

><td class="source">            parent = &#39;class &#39; + classinfo.name<br></td></tr
><tr
id=sl_svn141_2493

><td class="source">          slots = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_2494

><td class="source">          if access_match.group(3):<br></td></tr
><tr
id=sl_svn141_2495

><td class="source">            slots = access_match.group(3)<br></td></tr
><tr
id=sl_svn141_2496

><td class="source">          error(filename, linenum, &#39;whitespace/indent&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2497

><td class="source">                &#39;%s%s: should be indented +1 space inside %s&#39; % (<br></td></tr
><tr
id=sl_svn141_2498

><td class="source">                    access_match.group(2), slots, parent))<br></td></tr
><tr
id=sl_svn141_2499

><td class="source"><br></td></tr
><tr
id=sl_svn141_2500

><td class="source">    # Consume braces or semicolons from what&#39;s left of the line<br></td></tr
><tr
id=sl_svn141_2501

><td class="source">    while True:<br></td></tr
><tr
id=sl_svn141_2502

><td class="source">      # Match first brace, semicolon, or closed parenthesis.<br></td></tr
><tr
id=sl_svn141_2503

><td class="source">      matched = Match(r&#39;^[^{;)}]*([{;)}])(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_2504

><td class="source">      if not matched:<br></td></tr
><tr
id=sl_svn141_2505

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_2506

><td class="source"><br></td></tr
><tr
id=sl_svn141_2507

><td class="source">      token = matched.group(1)<br></td></tr
><tr
id=sl_svn141_2508

><td class="source">      if token == &#39;{&#39;:<br></td></tr
><tr
id=sl_svn141_2509

><td class="source">        # If namespace or class hasn&#39;t seen a opening brace yet, mark<br></td></tr
><tr
id=sl_svn141_2510

><td class="source">        # namespace/class head as complete.  Push a new block onto the<br></td></tr
><tr
id=sl_svn141_2511

><td class="source">        # stack otherwise.<br></td></tr
><tr
id=sl_svn141_2512

><td class="source">        if not self.SeenOpenBrace():<br></td></tr
><tr
id=sl_svn141_2513

><td class="source">          self.stack[-1].seen_open_brace = True<br></td></tr
><tr
id=sl_svn141_2514

><td class="source">        elif Match(r&#39;^extern\s*&quot;[^&quot;]*&quot;\s*\{&#39;, line):<br></td></tr
><tr
id=sl_svn141_2515

><td class="source">          self.stack.append(_ExternCInfo())<br></td></tr
><tr
id=sl_svn141_2516

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_2517

><td class="source">          self.stack.append(_BlockInfo(True))<br></td></tr
><tr
id=sl_svn141_2518

><td class="source">          if _MATCH_ASM.match(line):<br></td></tr
><tr
id=sl_svn141_2519

><td class="source">            self.stack[-1].inline_asm = _BLOCK_ASM<br></td></tr
><tr
id=sl_svn141_2520

><td class="source"><br></td></tr
><tr
id=sl_svn141_2521

><td class="source">      elif token == &#39;;&#39; or token == &#39;)&#39;:<br></td></tr
><tr
id=sl_svn141_2522

><td class="source">        # If we haven&#39;t seen an opening brace yet, but we already saw<br></td></tr
><tr
id=sl_svn141_2523

><td class="source">        # a semicolon, this is probably a forward declaration.  Pop<br></td></tr
><tr
id=sl_svn141_2524

><td class="source">        # the stack for these.<br></td></tr
><tr
id=sl_svn141_2525

><td class="source">        #<br></td></tr
><tr
id=sl_svn141_2526

><td class="source">        # Similarly, if we haven&#39;t seen an opening brace yet, but we<br></td></tr
><tr
id=sl_svn141_2527

><td class="source">        # already saw a closing parenthesis, then these are probably<br></td></tr
><tr
id=sl_svn141_2528

><td class="source">        # function arguments with extra &quot;class&quot; or &quot;struct&quot; keywords.<br></td></tr
><tr
id=sl_svn141_2529

><td class="source">        # Also pop these stack for these.<br></td></tr
><tr
id=sl_svn141_2530

><td class="source">        if not self.SeenOpenBrace():<br></td></tr
><tr
id=sl_svn141_2531

><td class="source">          self.stack.pop()<br></td></tr
><tr
id=sl_svn141_2532

><td class="source">      else:  # token == &#39;}&#39;<br></td></tr
><tr
id=sl_svn141_2533

><td class="source">        # Perform end of block checks and pop the stack.<br></td></tr
><tr
id=sl_svn141_2534

><td class="source">        if self.stack:<br></td></tr
><tr
id=sl_svn141_2535

><td class="source">          self.stack[-1].CheckEnd(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_2536

><td class="source">          self.stack.pop()<br></td></tr
><tr
id=sl_svn141_2537

><td class="source">      line = matched.group(2)<br></td></tr
><tr
id=sl_svn141_2538

><td class="source"><br></td></tr
><tr
id=sl_svn141_2539

><td class="source">  def InnermostClass(self):<br></td></tr
><tr
id=sl_svn141_2540

><td class="source">    &quot;&quot;&quot;Get class info on the top of the stack.<br></td></tr
><tr
id=sl_svn141_2541

><td class="source"><br></td></tr
><tr
id=sl_svn141_2542

><td class="source">    Returns:<br></td></tr
><tr
id=sl_svn141_2543

><td class="source">      A _ClassInfo object if we are inside a class, or None otherwise.<br></td></tr
><tr
id=sl_svn141_2544

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2545

><td class="source">    for i in range(len(self.stack), 0, -1):<br></td></tr
><tr
id=sl_svn141_2546

><td class="source">      classinfo = self.stack[i - 1]<br></td></tr
><tr
id=sl_svn141_2547

><td class="source">      if isinstance(classinfo, _ClassInfo):<br></td></tr
><tr
id=sl_svn141_2548

><td class="source">        return classinfo<br></td></tr
><tr
id=sl_svn141_2549

><td class="source">    return None<br></td></tr
><tr
id=sl_svn141_2550

><td class="source"><br></td></tr
><tr
id=sl_svn141_2551

><td class="source">  def CheckCompletedBlocks(self, filename, error):<br></td></tr
><tr
id=sl_svn141_2552

><td class="source">    &quot;&quot;&quot;Checks that all classes and namespaces have been completely parsed.<br></td></tr
><tr
id=sl_svn141_2553

><td class="source"><br></td></tr
><tr
id=sl_svn141_2554

><td class="source">    Call this when all lines in a file have been processed.<br></td></tr
><tr
id=sl_svn141_2555

><td class="source">    Args:<br></td></tr
><tr
id=sl_svn141_2556

><td class="source">      filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2557

><td class="source">      error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2558

><td class="source">    &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2559

><td class="source">    # Note: This test can result in false positives if #ifdef constructs<br></td></tr
><tr
id=sl_svn141_2560

><td class="source">    # get in the way of brace matching. See the testBuildClass test in<br></td></tr
><tr
id=sl_svn141_2561

><td class="source">    # cpplint_unittest.py for an example of this.<br></td></tr
><tr
id=sl_svn141_2562

><td class="source">    for obj in self.stack:<br></td></tr
><tr
id=sl_svn141_2563

><td class="source">      if isinstance(obj, _ClassInfo):<br></td></tr
><tr
id=sl_svn141_2564

><td class="source">        error(filename, obj.starting_linenum, &#39;build/class&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2565

><td class="source">              &#39;Failed to find complete declaration of class %s&#39; %<br></td></tr
><tr
id=sl_svn141_2566

><td class="source">              obj.name)<br></td></tr
><tr
id=sl_svn141_2567

><td class="source">      elif isinstance(obj, _NamespaceInfo):<br></td></tr
><tr
id=sl_svn141_2568

><td class="source">        error(filename, obj.starting_linenum, &#39;build/namespaces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2569

><td class="source">              &#39;Failed to find complete declaration of namespace %s&#39; %<br></td></tr
><tr
id=sl_svn141_2570

><td class="source">              obj.name)<br></td></tr
><tr
id=sl_svn141_2571

><td class="source"><br></td></tr
><tr
id=sl_svn141_2572

><td class="source"><br></td></tr
><tr
id=sl_svn141_2573

><td class="source">def CheckForNonStandardConstructs(filename, clean_lines, linenum,<br></td></tr
><tr
id=sl_svn141_2574

><td class="source">                                  nesting_state, error):<br></td></tr
><tr
id=sl_svn141_2575

><td class="source">  r&quot;&quot;&quot;Logs an error if we see certain non-ANSI constructs ignored by gcc-2.<br></td></tr
><tr
id=sl_svn141_2576

><td class="source"><br></td></tr
><tr
id=sl_svn141_2577

><td class="source">  Complain about several constructs which gcc-2 accepts, but which are<br></td></tr
><tr
id=sl_svn141_2578

><td class="source">  not standard C++.  Warning about these in lint is one way to ease the<br></td></tr
><tr
id=sl_svn141_2579

><td class="source">  transition to new compilers.<br></td></tr
><tr
id=sl_svn141_2580

><td class="source">  - put storage class first (e.g. &quot;static const&quot; instead of &quot;const static&quot;).<br></td></tr
><tr
id=sl_svn141_2581

><td class="source">  - &quot;%lld&quot; instead of %qd&quot; in printf-type functions.<br></td></tr
><tr
id=sl_svn141_2582

><td class="source">  - &quot;%1$d&quot; is non-standard in printf-type functions.<br></td></tr
><tr
id=sl_svn141_2583

><td class="source">  - &quot;\%&quot; is an undefined character escape sequence.<br></td></tr
><tr
id=sl_svn141_2584

><td class="source">  - text after #endif is not allowed.<br></td></tr
><tr
id=sl_svn141_2585

><td class="source">  - invalid inner-style forward declaration.<br></td></tr
><tr
id=sl_svn141_2586

><td class="source">  - &gt;? and &lt;? operators, and their &gt;?= and &lt;?= cousins.<br></td></tr
><tr
id=sl_svn141_2587

><td class="source"><br></td></tr
><tr
id=sl_svn141_2588

><td class="source">  Additionally, check for constructor/destructor style violations and reference<br></td></tr
><tr
id=sl_svn141_2589

><td class="source">  members, as it is very convenient to do so while checking for<br></td></tr
><tr
id=sl_svn141_2590

><td class="source">  gcc-2 compliance.<br></td></tr
><tr
id=sl_svn141_2591

><td class="source"><br></td></tr
><tr
id=sl_svn141_2592

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2593

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2594

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2595

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2596

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_2597

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_2598

><td class="source">    error: A callable to which errors are reported, which takes 4 arguments:<br></td></tr
><tr
id=sl_svn141_2599

><td class="source">           filename, line number, error level, and message<br></td></tr
><tr
id=sl_svn141_2600

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2601

><td class="source"><br></td></tr
><tr
id=sl_svn141_2602

><td class="source">  # Remove comments from the line, but leave in strings for now.<br></td></tr
><tr
id=sl_svn141_2603

><td class="source">  line = clean_lines.lines[linenum]<br></td></tr
><tr
id=sl_svn141_2604

><td class="source"><br></td></tr
><tr
id=sl_svn141_2605

><td class="source">  if Search(r&#39;printf\s*\(.*&quot;.*%[-+ ]?\d*q&#39;, line):<br></td></tr
><tr
id=sl_svn141_2606

><td class="source">    error(filename, linenum, &#39;runtime/printf_format&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2607

><td class="source">          &#39;%q in format strings is deprecated.  Use %ll instead.&#39;)<br></td></tr
><tr
id=sl_svn141_2608

><td class="source"><br></td></tr
><tr
id=sl_svn141_2609

><td class="source">  if Search(r&#39;printf\s*\(.*&quot;.*%\d+\$&#39;, line):<br></td></tr
><tr
id=sl_svn141_2610

><td class="source">    error(filename, linenum, &#39;runtime/printf_format&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2611

><td class="source">          &#39;%N$ formats are unconventional.  Try rewriting to avoid them.&#39;)<br></td></tr
><tr
id=sl_svn141_2612

><td class="source"><br></td></tr
><tr
id=sl_svn141_2613

><td class="source">  # Remove escaped backslashes before looking for undefined escapes.<br></td></tr
><tr
id=sl_svn141_2614

><td class="source">  line = line.replace(&#39;\\\\&#39;, &#39;&#39;)<br></td></tr
><tr
id=sl_svn141_2615

><td class="source"><br></td></tr
><tr
id=sl_svn141_2616

><td class="source">  if Search(r&#39;(&quot;|\&#39;).*\\(%|\[|\(|{)&#39;, line):<br></td></tr
><tr
id=sl_svn141_2617

><td class="source">    error(filename, linenum, &#39;build/printf_format&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2618

><td class="source">          &#39;%, [, (, and { are undefined character escapes.  Unescape them.&#39;)<br></td></tr
><tr
id=sl_svn141_2619

><td class="source"><br></td></tr
><tr
id=sl_svn141_2620

><td class="source">  # For the rest, work with both comments and strings removed.<br></td></tr
><tr
id=sl_svn141_2621

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_2622

><td class="source"><br></td></tr
><tr
id=sl_svn141_2623

><td class="source">  if Search(r&#39;\b(const|volatile|void|char|short|int|long&#39;<br></td></tr
><tr
id=sl_svn141_2624

><td class="source">            r&#39;|float|double|signed|unsigned&#39;<br></td></tr
><tr
id=sl_svn141_2625

><td class="source">            r&#39;|schar|u?int8|u?int16|u?int32|u?int64)&#39;<br></td></tr
><tr
id=sl_svn141_2626

><td class="source">            r&#39;\s+(register|static|extern|typedef)\b&#39;,<br></td></tr
><tr
id=sl_svn141_2627

><td class="source">            line):<br></td></tr
><tr
id=sl_svn141_2628

><td class="source">    error(filename, linenum, &#39;build/storage_class&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2629

><td class="source">          &#39;Storage class (static, extern, typedef, etc) should be first.&#39;)<br></td></tr
><tr
id=sl_svn141_2630

><td class="source"><br></td></tr
><tr
id=sl_svn141_2631

><td class="source">  if Match(r&#39;\s*#\s*endif\s*[^/\s]+&#39;, line):<br></td></tr
><tr
id=sl_svn141_2632

><td class="source">    error(filename, linenum, &#39;build/endif_comment&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2633

><td class="source">          &#39;Uncommented text after #endif is non-standard.  Use a comment.&#39;)<br></td></tr
><tr
id=sl_svn141_2634

><td class="source"><br></td></tr
><tr
id=sl_svn141_2635

><td class="source">  if Match(r&#39;\s*class\s+(\w+\s*::\s*)+\w+\s*;&#39;, line):<br></td></tr
><tr
id=sl_svn141_2636

><td class="source">    error(filename, linenum, &#39;build/forward_decl&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2637

><td class="source">          &#39;Inner-style forward declarations are invalid.  Remove this line.&#39;)<br></td></tr
><tr
id=sl_svn141_2638

><td class="source"><br></td></tr
><tr
id=sl_svn141_2639

><td class="source">  if Search(r&#39;(\w+|[+-]?\d+(\.\d*)?)\s*(&lt;|&gt;)\?=?\s*(\w+|[+-]?\d+)(\.\d*)?&#39;,<br></td></tr
><tr
id=sl_svn141_2640

><td class="source">            line):<br></td></tr
><tr
id=sl_svn141_2641

><td class="source">    error(filename, linenum, &#39;build/deprecated&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2642

><td class="source">          &#39;&gt;? and &lt;? (max and min) operators are non-standard and deprecated.&#39;)<br></td></tr
><tr
id=sl_svn141_2643

><td class="source"><br></td></tr
><tr
id=sl_svn141_2644

><td class="source">  if Search(r&#39;^\s*const\s*string\s*&amp;\s*\w+\s*;&#39;, line):<br></td></tr
><tr
id=sl_svn141_2645

><td class="source">    # TODO(unknown): Could it be expanded safely to arbitrary references,<br></td></tr
><tr
id=sl_svn141_2646

><td class="source">    # without triggering too many false positives? The first<br></td></tr
><tr
id=sl_svn141_2647

><td class="source">    # attempt triggered 5 warnings for mostly benign code in the regtest, hence<br></td></tr
><tr
id=sl_svn141_2648

><td class="source">    # the restriction.<br></td></tr
><tr
id=sl_svn141_2649

><td class="source">    # Here&#39;s the original regexp, for the reference:<br></td></tr
><tr
id=sl_svn141_2650

><td class="source">    # type_name = r&#39;\w+((\s*::\s*\w+)|(\s*&lt;\s*\w+?\s*&gt;))?&#39;<br></td></tr
><tr
id=sl_svn141_2651

><td class="source">    # r&#39;\s*const\s*&#39; + type_name + &#39;\s*&amp;\s*\w+\s*;&#39;<br></td></tr
><tr
id=sl_svn141_2652

><td class="source">    error(filename, linenum, &#39;runtime/member_string_references&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2653

><td class="source">          &#39;const string&amp; members are dangerous. It is much better to use &#39;<br></td></tr
><tr
id=sl_svn141_2654

><td class="source">          &#39;alternatives, such as pointers or simple constants.&#39;)<br></td></tr
><tr
id=sl_svn141_2655

><td class="source"><br></td></tr
><tr
id=sl_svn141_2656

><td class="source">  # Everything else in this function operates on class declarations.<br></td></tr
><tr
id=sl_svn141_2657

><td class="source">  # Return early if the top of the nesting stack is not a class, or if<br></td></tr
><tr
id=sl_svn141_2658

><td class="source">  # the class head is not completed yet.<br></td></tr
><tr
id=sl_svn141_2659

><td class="source">  classinfo = nesting_state.InnermostClass()<br></td></tr
><tr
id=sl_svn141_2660

><td class="source">  if not classinfo or not classinfo.seen_open_brace:<br></td></tr
><tr
id=sl_svn141_2661

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_2662

><td class="source"><br></td></tr
><tr
id=sl_svn141_2663

><td class="source">  # The class may have been declared with namespace or classname qualifiers.<br></td></tr
><tr
id=sl_svn141_2664

><td class="source">  # The constructor and destructor will not have those qualifiers.<br></td></tr
><tr
id=sl_svn141_2665

><td class="source">  base_classname = classinfo.name.split(&#39;::&#39;)[-1]<br></td></tr
><tr
id=sl_svn141_2666

><td class="source"><br></td></tr
><tr
id=sl_svn141_2667

><td class="source">  # Look for single-argument constructors that aren&#39;t marked explicit.<br></td></tr
><tr
id=sl_svn141_2668

><td class="source">  # Technically a valid construct, but against style. Also look for<br></td></tr
><tr
id=sl_svn141_2669

><td class="source">  # non-single-argument constructors which are also technically valid, but<br></td></tr
><tr
id=sl_svn141_2670

><td class="source">  # strongly suggest something is wrong.<br></td></tr
><tr
id=sl_svn141_2671

><td class="source">  explicit_constructor_match = Match(<br></td></tr
><tr
id=sl_svn141_2672

><td class="source">      r&#39;\s+(?:inline\s+)?(explicit\s+)?(?:inline\s+)?%s\s*&#39;<br></td></tr
><tr
id=sl_svn141_2673

><td class="source">      r&#39;\(((?:[^()]|\([^()]*\))*)\)&#39;<br></td></tr
><tr
id=sl_svn141_2674

><td class="source">      % re.escape(base_classname),<br></td></tr
><tr
id=sl_svn141_2675

><td class="source">      line)<br></td></tr
><tr
id=sl_svn141_2676

><td class="source"><br></td></tr
><tr
id=sl_svn141_2677

><td class="source">  if explicit_constructor_match:<br></td></tr
><tr
id=sl_svn141_2678

><td class="source">    is_marked_explicit = explicit_constructor_match.group(1)<br></td></tr
><tr
id=sl_svn141_2679

><td class="source"><br></td></tr
><tr
id=sl_svn141_2680

><td class="source">    if not explicit_constructor_match.group(2):<br></td></tr
><tr
id=sl_svn141_2681

><td class="source">      constructor_args = []<br></td></tr
><tr
id=sl_svn141_2682

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_2683

><td class="source">      constructor_args = explicit_constructor_match.group(2).split(&#39;,&#39;)<br></td></tr
><tr
id=sl_svn141_2684

><td class="source"><br></td></tr
><tr
id=sl_svn141_2685

><td class="source">    # collapse arguments so that commas in template parameter lists and function<br></td></tr
><tr
id=sl_svn141_2686

><td class="source">    # argument parameter lists don&#39;t split arguments in two<br></td></tr
><tr
id=sl_svn141_2687

><td class="source">    i = 0<br></td></tr
><tr
id=sl_svn141_2688

><td class="source">    while i &lt; len(constructor_args):<br></td></tr
><tr
id=sl_svn141_2689

><td class="source">      constructor_arg = constructor_args[i]<br></td></tr
><tr
id=sl_svn141_2690

><td class="source">      while (constructor_arg.count(&#39;&lt;&#39;) &gt; constructor_arg.count(&#39;&gt;&#39;) or<br></td></tr
><tr
id=sl_svn141_2691

><td class="source">             constructor_arg.count(&#39;(&#39;) &gt; constructor_arg.count(&#39;)&#39;)):<br></td></tr
><tr
id=sl_svn141_2692

><td class="source">        constructor_arg += &#39;,&#39; + constructor_args[i + 1]<br></td></tr
><tr
id=sl_svn141_2693

><td class="source">        del constructor_args[i + 1]<br></td></tr
><tr
id=sl_svn141_2694

><td class="source">      constructor_args[i] = constructor_arg<br></td></tr
><tr
id=sl_svn141_2695

><td class="source">      i += 1<br></td></tr
><tr
id=sl_svn141_2696

><td class="source"><br></td></tr
><tr
id=sl_svn141_2697

><td class="source">    defaulted_args = [arg for arg in constructor_args if &#39;=&#39; in arg]<br></td></tr
><tr
id=sl_svn141_2698

><td class="source">    noarg_constructor = (not constructor_args or  # empty arg list<br></td></tr
><tr
id=sl_svn141_2699

><td class="source">                         # &#39;void&#39; arg specifier<br></td></tr
><tr
id=sl_svn141_2700

><td class="source">                         (len(constructor_args) == 1 and<br></td></tr
><tr
id=sl_svn141_2701

><td class="source">                          constructor_args[0].strip() == &#39;void&#39;))<br></td></tr
><tr
id=sl_svn141_2702

><td class="source">    onearg_constructor = ((len(constructor_args) == 1 and  # exactly one arg<br></td></tr
><tr
id=sl_svn141_2703

><td class="source">                           not noarg_constructor) or<br></td></tr
><tr
id=sl_svn141_2704

><td class="source">                          # all but at most one arg defaulted<br></td></tr
><tr
id=sl_svn141_2705

><td class="source">                          (len(constructor_args) &gt;= 1 and<br></td></tr
><tr
id=sl_svn141_2706

><td class="source">                           not noarg_constructor and<br></td></tr
><tr
id=sl_svn141_2707

><td class="source">                           len(defaulted_args) &gt;= len(constructor_args) - 1))<br></td></tr
><tr
id=sl_svn141_2708

><td class="source">    initializer_list_constructor = bool(<br></td></tr
><tr
id=sl_svn141_2709

><td class="source">        onearg_constructor and<br></td></tr
><tr
id=sl_svn141_2710

><td class="source">        Search(r&#39;\bstd\s*::\s*initializer_list\b&#39;, constructor_args[0]))<br></td></tr
><tr
id=sl_svn141_2711

><td class="source">    copy_constructor = bool(<br></td></tr
><tr
id=sl_svn141_2712

><td class="source">        onearg_constructor and<br></td></tr
><tr
id=sl_svn141_2713

><td class="source">        Match(r&#39;(const\s+)?%s(\s*&lt;[^&gt;]*&gt;)?(\s+const)?\s*(?:&lt;\w+&gt;\s*)?&amp;&#39;<br></td></tr
><tr
id=sl_svn141_2714

><td class="source">              % re.escape(base_classname), constructor_args[0].strip()))<br></td></tr
><tr
id=sl_svn141_2715

><td class="source"><br></td></tr
><tr
id=sl_svn141_2716

><td class="source">    if (not is_marked_explicit and<br></td></tr
><tr
id=sl_svn141_2717

><td class="source">        onearg_constructor and<br></td></tr
><tr
id=sl_svn141_2718

><td class="source">        not initializer_list_constructor and<br></td></tr
><tr
id=sl_svn141_2719

><td class="source">        not copy_constructor):<br></td></tr
><tr
id=sl_svn141_2720

><td class="source">      if defaulted_args:<br></td></tr
><tr
id=sl_svn141_2721

><td class="source">        error(filename, linenum, &#39;runtime/explicit&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2722

><td class="source">              &#39;Constructors callable with one argument &#39;<br></td></tr
><tr
id=sl_svn141_2723

><td class="source">              &#39;should be marked explicit.&#39;)<br></td></tr
><tr
id=sl_svn141_2724

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2725

><td class="source">        error(filename, linenum, &#39;runtime/explicit&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2726

><td class="source">              &#39;Single-parameter constructors should be marked explicit.&#39;)<br></td></tr
><tr
id=sl_svn141_2727

><td class="source">    elif is_marked_explicit and not onearg_constructor:<br></td></tr
><tr
id=sl_svn141_2728

><td class="source">      if noarg_constructor:<br></td></tr
><tr
id=sl_svn141_2729

><td class="source">        error(filename, linenum, &#39;runtime/explicit&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2730

><td class="source">              &#39;Zero-parameter constructors should not be marked explicit.&#39;)<br></td></tr
><tr
id=sl_svn141_2731

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2732

><td class="source">        error(filename, linenum, &#39;runtime/explicit&#39;, 0,<br></td></tr
><tr
id=sl_svn141_2733

><td class="source">              &#39;Constructors that require multiple arguments &#39;<br></td></tr
><tr
id=sl_svn141_2734

><td class="source">              &#39;should not be marked explicit.&#39;)<br></td></tr
><tr
id=sl_svn141_2735

><td class="source"><br></td></tr
><tr
id=sl_svn141_2736

><td class="source"><br></td></tr
><tr
id=sl_svn141_2737

><td class="source">def CheckSpacingForFunctionCall(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_2738

><td class="source">  &quot;&quot;&quot;Checks for the correctness of various spacing around function calls.<br></td></tr
><tr
id=sl_svn141_2739

><td class="source"><br></td></tr
><tr
id=sl_svn141_2740

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2741

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2742

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2743

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2744

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2745

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2746

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_2747

><td class="source"><br></td></tr
><tr
id=sl_svn141_2748

><td class="source">  # Since function calls often occur inside if/for/while/switch<br></td></tr
><tr
id=sl_svn141_2749

><td class="source">  # expressions - which have their own, more liberal conventions - we<br></td></tr
><tr
id=sl_svn141_2750

><td class="source">  # first see if we should be looking inside such an expression for a<br></td></tr
><tr
id=sl_svn141_2751

><td class="source">  # function call, to which we can apply more strict standards.<br></td></tr
><tr
id=sl_svn141_2752

><td class="source">  fncall = line    # if there&#39;s no control flow construct, look at whole line<br></td></tr
><tr
id=sl_svn141_2753

><td class="source">  for pattern in (r&#39;\bif\s*\((.*)\)\s*{&#39;,<br></td></tr
><tr
id=sl_svn141_2754

><td class="source">                  r&#39;\bfor\s*\((.*)\)\s*{&#39;,<br></td></tr
><tr
id=sl_svn141_2755

><td class="source">                  r&#39;\bwhile\s*\((.*)\)\s*[{;]&#39;,<br></td></tr
><tr
id=sl_svn141_2756

><td class="source">                  r&#39;\bswitch\s*\((.*)\)\s*{&#39;):<br></td></tr
><tr
id=sl_svn141_2757

><td class="source">    match = Search(pattern, line)<br></td></tr
><tr
id=sl_svn141_2758

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_2759

><td class="source">      fncall = match.group(1)    # look inside the parens for function calls<br></td></tr
><tr
id=sl_svn141_2760

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_2761

><td class="source"><br></td></tr
><tr
id=sl_svn141_2762

><td class="source">  # Except in if/for/while/switch, there should never be space<br></td></tr
><tr
id=sl_svn141_2763

><td class="source">  # immediately inside parens (eg &quot;f( 3, 4 )&quot;).  We make an exception<br></td></tr
><tr
id=sl_svn141_2764

><td class="source">  # for nested parens ( (a+b) + c ).  Likewise, there should never be<br></td></tr
><tr
id=sl_svn141_2765

><td class="source">  # a space before a ( when it&#39;s a function argument.  I assume it&#39;s a<br></td></tr
><tr
id=sl_svn141_2766

><td class="source">  # function argument when the char before the whitespace is legal in<br></td></tr
><tr
id=sl_svn141_2767

><td class="source">  # a function name (alnum + _) and we&#39;re not starting a macro. Also ignore<br></td></tr
><tr
id=sl_svn141_2768

><td class="source">  # pointers and references to arrays and functions coz they&#39;re too tricky:<br></td></tr
><tr
id=sl_svn141_2769

><td class="source">  # we use a very simple way to recognize these:<br></td></tr
><tr
id=sl_svn141_2770

><td class="source">  # &quot; (something)(maybe-something)&quot; or<br></td></tr
><tr
id=sl_svn141_2771

><td class="source">  # &quot; (something)(maybe-something,&quot; or<br></td></tr
><tr
id=sl_svn141_2772

><td class="source">  # &quot; (something)[something]&quot;<br></td></tr
><tr
id=sl_svn141_2773

><td class="source">  # Note that we assume the contents of [] to be short enough that<br></td></tr
><tr
id=sl_svn141_2774

><td class="source">  # they&#39;ll never need to wrap.<br></td></tr
><tr
id=sl_svn141_2775

><td class="source">  if (  # Ignore control structures.<br></td></tr
><tr
id=sl_svn141_2776

><td class="source">      not Search(r&#39;\b(if|for|while|switch|return|new|delete|catch|sizeof)\b&#39;,<br></td></tr
><tr
id=sl_svn141_2777

><td class="source">                 fncall) and<br></td></tr
><tr
id=sl_svn141_2778

><td class="source">      # Ignore pointers/references to functions.<br></td></tr
><tr
id=sl_svn141_2779

><td class="source">      not Search(r&#39; \([^)]+\)\([^)]*(\)|,$)&#39;, fncall) and<br></td></tr
><tr
id=sl_svn141_2780

><td class="source">      # Ignore pointers/references to arrays.<br></td></tr
><tr
id=sl_svn141_2781

><td class="source">      not Search(r&#39; \([^)]+\)\[[^\]]+\]&#39;, fncall)):<br></td></tr
><tr
id=sl_svn141_2782

><td class="source">    if Search(r&#39;\w\s*\(\s(?!\s*\\$)&#39;, fncall):      # a ( used for a fn call<br></td></tr
><tr
id=sl_svn141_2783

><td class="source">      error(filename, linenum, &#39;whitespace/parens&#39;, 4,<br></td></tr
><tr
id=sl_svn141_2784

><td class="source">            &#39;Extra space after ( in function call&#39;)<br></td></tr
><tr
id=sl_svn141_2785

><td class="source">    elif Search(r&#39;\(\s+(?!(\s*\\)|\()&#39;, fncall):<br></td></tr
><tr
id=sl_svn141_2786

><td class="source">      error(filename, linenum, &#39;whitespace/parens&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2787

><td class="source">            &#39;Extra space after (&#39;)<br></td></tr
><tr
id=sl_svn141_2788

><td class="source">    if (Search(r&#39;\w\s+\(&#39;, fncall) and<br></td></tr
><tr
id=sl_svn141_2789

><td class="source">        not Search(r&#39;#\s*define|typedef|using\s+\w+\s*=&#39;, fncall) and<br></td></tr
><tr
id=sl_svn141_2790

><td class="source">        not Search(r&#39;\w\s+\((\w+::)*\*\w+\)\(&#39;, fncall) and<br></td></tr
><tr
id=sl_svn141_2791

><td class="source">        not Search(r&#39;\bcase\s+\(&#39;, fncall)):<br></td></tr
><tr
id=sl_svn141_2792

><td class="source">      # TODO(unknown): Space after an operator function seem to be a common<br></td></tr
><tr
id=sl_svn141_2793

><td class="source">      # error, silence those for now by restricting them to highest verbosity.<br></td></tr
><tr
id=sl_svn141_2794

><td class="source">      if Search(r&#39;\boperator_*\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_2795

><td class="source">        error(filename, linenum, &#39;whitespace/parens&#39;, 0,<br></td></tr
><tr
id=sl_svn141_2796

><td class="source">              &#39;Extra space before ( in function call&#39;)<br></td></tr
><tr
id=sl_svn141_2797

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2798

><td class="source">        error(filename, linenum, &#39;whitespace/parens&#39;, 4,<br></td></tr
><tr
id=sl_svn141_2799

><td class="source">              &#39;Extra space before ( in function call&#39;)<br></td></tr
><tr
id=sl_svn141_2800

><td class="source">    # If the ) is followed only by a newline or a { + newline, assume it&#39;s<br></td></tr
><tr
id=sl_svn141_2801

><td class="source">    # part of a control statement (if/while/etc), and don&#39;t complain<br></td></tr
><tr
id=sl_svn141_2802

><td class="source">    if Search(r&#39;[^)]\s+\)\s*[^{\s]&#39;, fncall):<br></td></tr
><tr
id=sl_svn141_2803

><td class="source">      # If the closing parenthesis is preceded by only whitespaces,<br></td></tr
><tr
id=sl_svn141_2804

><td class="source">      # try to give a more descriptive error message.<br></td></tr
><tr
id=sl_svn141_2805

><td class="source">      if Search(r&#39;^\s+\)&#39;, fncall):<br></td></tr
><tr
id=sl_svn141_2806

><td class="source">        error(filename, linenum, &#39;whitespace/parens&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2807

><td class="source">              &#39;Closing ) should be moved to the previous line&#39;)<br></td></tr
><tr
id=sl_svn141_2808

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_2809

><td class="source">        error(filename, linenum, &#39;whitespace/parens&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2810

><td class="source">              &#39;Extra space before )&#39;)<br></td></tr
><tr
id=sl_svn141_2811

><td class="source"><br></td></tr
><tr
id=sl_svn141_2812

><td class="source"><br></td></tr
><tr
id=sl_svn141_2813

><td class="source">def IsBlankLine(line):<br></td></tr
><tr
id=sl_svn141_2814

><td class="source">  &quot;&quot;&quot;Returns true if the given line is blank.<br></td></tr
><tr
id=sl_svn141_2815

><td class="source"><br></td></tr
><tr
id=sl_svn141_2816

><td class="source">  We consider a line to be blank if the line is empty or consists of<br></td></tr
><tr
id=sl_svn141_2817

><td class="source">  only white spaces.<br></td></tr
><tr
id=sl_svn141_2818

><td class="source"><br></td></tr
><tr
id=sl_svn141_2819

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2820

><td class="source">    line: A line of a string.<br></td></tr
><tr
id=sl_svn141_2821

><td class="source"><br></td></tr
><tr
id=sl_svn141_2822

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_2823

><td class="source">    True, if the given line is blank.<br></td></tr
><tr
id=sl_svn141_2824

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2825

><td class="source">  return not line or line.isspace()<br></td></tr
><tr
id=sl_svn141_2826

><td class="source"><br></td></tr
><tr
id=sl_svn141_2827

><td class="source"><br></td></tr
><tr
id=sl_svn141_2828

><td class="source">def CheckForNamespaceIndentation(filename, nesting_state, clean_lines, line,<br></td></tr
><tr
id=sl_svn141_2829

><td class="source">                                 error):<br></td></tr
><tr
id=sl_svn141_2830

><td class="source">  is_namespace_indent_item = (<br></td></tr
><tr
id=sl_svn141_2831

><td class="source">      len(nesting_state.stack) &gt; 1 and<br></td></tr
><tr
id=sl_svn141_2832

><td class="source">      nesting_state.stack[-1].check_namespace_indentation and<br></td></tr
><tr
id=sl_svn141_2833

><td class="source">      isinstance(nesting_state.previous_stack_top, _NamespaceInfo) and<br></td></tr
><tr
id=sl_svn141_2834

><td class="source">      nesting_state.previous_stack_top == nesting_state.stack[-2])<br></td></tr
><tr
id=sl_svn141_2835

><td class="source"><br></td></tr
><tr
id=sl_svn141_2836

><td class="source">  if ShouldCheckNamespaceIndentation(nesting_state, is_namespace_indent_item,<br></td></tr
><tr
id=sl_svn141_2837

><td class="source">                                     clean_lines.elided, line):<br></td></tr
><tr
id=sl_svn141_2838

><td class="source">    CheckItemIndentationInNamespace(filename, clean_lines.elided,<br></td></tr
><tr
id=sl_svn141_2839

><td class="source">                                    line, error)<br></td></tr
><tr
id=sl_svn141_2840

><td class="source"><br></td></tr
><tr
id=sl_svn141_2841

><td class="source"><br></td></tr
><tr
id=sl_svn141_2842

><td class="source">def CheckForFunctionLengths(filename, clean_lines, linenum,<br></td></tr
><tr
id=sl_svn141_2843

><td class="source">                            function_state, error):<br></td></tr
><tr
id=sl_svn141_2844

><td class="source">  &quot;&quot;&quot;Reports for long function bodies.<br></td></tr
><tr
id=sl_svn141_2845

><td class="source"><br></td></tr
><tr
id=sl_svn141_2846

><td class="source">  For an overview why this is done, see:<br></td></tr
><tr
id=sl_svn141_2847

><td class="source">  http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Write_Short_Functions<br></td></tr
><tr
id=sl_svn141_2848

><td class="source"><br></td></tr
><tr
id=sl_svn141_2849

><td class="source">  Uses a simplistic algorithm assuming other style guidelines<br></td></tr
><tr
id=sl_svn141_2850

><td class="source">  (especially spacing) are followed.<br></td></tr
><tr
id=sl_svn141_2851

><td class="source">  Only checks unindented functions, so class members are unchecked.<br></td></tr
><tr
id=sl_svn141_2852

><td class="source">  Trivial bodies are unchecked, so constructors with huge initializer lists<br></td></tr
><tr
id=sl_svn141_2853

><td class="source">  may be missed.<br></td></tr
><tr
id=sl_svn141_2854

><td class="source">  Blank/comment lines are not counted so as to avoid encouraging the removal<br></td></tr
><tr
id=sl_svn141_2855

><td class="source">  of vertical space and comments just to get through a lint check.<br></td></tr
><tr
id=sl_svn141_2856

><td class="source">  NOLINT *on the last line of a function* disables this check.<br></td></tr
><tr
id=sl_svn141_2857

><td class="source"><br></td></tr
><tr
id=sl_svn141_2858

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2859

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2860

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2861

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2862

><td class="source">    function_state: Current function name and lines in body so far.<br></td></tr
><tr
id=sl_svn141_2863

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2864

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2865

><td class="source">  lines = clean_lines.lines<br></td></tr
><tr
id=sl_svn141_2866

><td class="source">  line = lines[linenum]<br></td></tr
><tr
id=sl_svn141_2867

><td class="source">  joined_line = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_2868

><td class="source"><br></td></tr
><tr
id=sl_svn141_2869

><td class="source">  starting_func = False<br></td></tr
><tr
id=sl_svn141_2870

><td class="source">  regexp = r&#39;(\w(\w|::|\*|\&amp;|\s)*)\(&#39;  # decls * &amp; space::name( ...<br></td></tr
><tr
id=sl_svn141_2871

><td class="source">  match_result = Match(regexp, line)<br></td></tr
><tr
id=sl_svn141_2872

><td class="source">  if match_result:<br></td></tr
><tr
id=sl_svn141_2873

><td class="source">    # If the name is all caps and underscores, figure it&#39;s a macro and<br></td></tr
><tr
id=sl_svn141_2874

><td class="source">    # ignore it, unless it&#39;s TEST or TEST_F.<br></td></tr
><tr
id=sl_svn141_2875

><td class="source">    function_name = match_result.group(1).split()[-1]<br></td></tr
><tr
id=sl_svn141_2876

><td class="source">    if function_name == &#39;TEST&#39; or function_name == &#39;TEST_F&#39; or (<br></td></tr
><tr
id=sl_svn141_2877

><td class="source">        not Match(r&#39;[A-Z_]+$&#39;, function_name)):<br></td></tr
><tr
id=sl_svn141_2878

><td class="source">      starting_func = True<br></td></tr
><tr
id=sl_svn141_2879

><td class="source"><br></td></tr
><tr
id=sl_svn141_2880

><td class="source">  if starting_func:<br></td></tr
><tr
id=sl_svn141_2881

><td class="source">    body_found = False<br></td></tr
><tr
id=sl_svn141_2882

><td class="source">    for start_linenum in xrange(linenum, clean_lines.NumLines()):<br></td></tr
><tr
id=sl_svn141_2883

><td class="source">      start_line = lines[start_linenum]<br></td></tr
><tr
id=sl_svn141_2884

><td class="source">      joined_line += &#39; &#39; + start_line.lstrip()<br></td></tr
><tr
id=sl_svn141_2885

><td class="source">      if Search(r&#39;(;|})&#39;, start_line):  # Declarations and trivial functions<br></td></tr
><tr
id=sl_svn141_2886

><td class="source">        body_found = True<br></td></tr
><tr
id=sl_svn141_2887

><td class="source">        break                              # ... ignore<br></td></tr
><tr
id=sl_svn141_2888

><td class="source">      elif Search(r&#39;{&#39;, start_line):<br></td></tr
><tr
id=sl_svn141_2889

><td class="source">        body_found = True<br></td></tr
><tr
id=sl_svn141_2890

><td class="source">        function = Search(r&#39;((\w|:)*)\(&#39;, line).group(1)<br></td></tr
><tr
id=sl_svn141_2891

><td class="source">        if Match(r&#39;TEST&#39;, function):    # Handle TEST... macros<br></td></tr
><tr
id=sl_svn141_2892

><td class="source">          parameter_regexp = Search(r&#39;(\(.*\))&#39;, joined_line)<br></td></tr
><tr
id=sl_svn141_2893

><td class="source">          if parameter_regexp:             # Ignore bad syntax<br></td></tr
><tr
id=sl_svn141_2894

><td class="source">            function += parameter_regexp.group(1)<br></td></tr
><tr
id=sl_svn141_2895

><td class="source">        else:<br></td></tr
><tr
id=sl_svn141_2896

><td class="source">          function += &#39;()&#39;<br></td></tr
><tr
id=sl_svn141_2897

><td class="source">        function_state.Begin(function)<br></td></tr
><tr
id=sl_svn141_2898

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_2899

><td class="source">    if not body_found:<br></td></tr
><tr
id=sl_svn141_2900

><td class="source">      # No body for the function (or evidence of a non-function) was found.<br></td></tr
><tr
id=sl_svn141_2901

><td class="source">      error(filename, linenum, &#39;readability/fn_size&#39;, 5,<br></td></tr
><tr
id=sl_svn141_2902

><td class="source">            &#39;Lint failed to find start of function body.&#39;)<br></td></tr
><tr
id=sl_svn141_2903

><td class="source">  elif Match(r&#39;^\}\s*$&#39;, line):  # function end<br></td></tr
><tr
id=sl_svn141_2904

><td class="source">    function_state.Check(error, filename, linenum)<br></td></tr
><tr
id=sl_svn141_2905

><td class="source">    function_state.End()<br></td></tr
><tr
id=sl_svn141_2906

><td class="source">  elif not Match(r&#39;^\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_2907

><td class="source">    function_state.Count()  # Count non-blank/non-comment lines.<br></td></tr
><tr
id=sl_svn141_2908

><td class="source"><br></td></tr
><tr
id=sl_svn141_2909

><td class="source"><br></td></tr
><tr
id=sl_svn141_2910

><td class="source">_RE_PATTERN_TODO = re.compile(r&#39;^//(\s*)TODO(\(.+?\))?:?(\s|$)?&#39;)<br></td></tr
><tr
id=sl_svn141_2911

><td class="source"><br></td></tr
><tr
id=sl_svn141_2912

><td class="source"><br></td></tr
><tr
id=sl_svn141_2913

><td class="source">def CheckComment(line, filename, linenum, next_line_start, error):<br></td></tr
><tr
id=sl_svn141_2914

><td class="source">  &quot;&quot;&quot;Checks for common mistakes in comments.<br></td></tr
><tr
id=sl_svn141_2915

><td class="source"><br></td></tr
><tr
id=sl_svn141_2916

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2917

><td class="source">    line: The line in question.<br></td></tr
><tr
id=sl_svn141_2918

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2919

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2920

><td class="source">    next_line_start: The first non-whitespace column of the next line.<br></td></tr
><tr
id=sl_svn141_2921

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2922

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2923

><td class="source">  commentpos = line.find(&#39;//&#39;)<br></td></tr
><tr
id=sl_svn141_2924

><td class="source">  if commentpos != -1:<br></td></tr
><tr
id=sl_svn141_2925

><td class="source">    # Check if the // may be in quotes.  If so, ignore it<br></td></tr
><tr
id=sl_svn141_2926

><td class="source">    # Comparisons made explicit for clarity -- pylint: disable=g-explicit-bool-comparison<br></td></tr
><tr
id=sl_svn141_2927

><td class="source">    if (line.count(&#39;&quot;&#39;, 0, commentpos) -<br></td></tr
><tr
id=sl_svn141_2928

><td class="source">        line.count(&#39;\\&quot;&#39;, 0, commentpos)) % 2 == 0:   # not in quotes<br></td></tr
><tr
id=sl_svn141_2929

><td class="source">      # Allow one space for new scopes, two spaces otherwise:<br></td></tr
><tr
id=sl_svn141_2930

><td class="source">      if (not (Match(r&#39;^.*{ *//&#39;, line) and next_line_start == commentpos) and<br></td></tr
><tr
id=sl_svn141_2931

><td class="source">          ((commentpos &gt;= 1 and<br></td></tr
><tr
id=sl_svn141_2932

><td class="source">            line[commentpos-1] not in string.whitespace) or<br></td></tr
><tr
id=sl_svn141_2933

><td class="source">           (commentpos &gt;= 2 and<br></td></tr
><tr
id=sl_svn141_2934

><td class="source">            line[commentpos-2] not in string.whitespace))):<br></td></tr
><tr
id=sl_svn141_2935

><td class="source">        error(filename, linenum, &#39;whitespace/comments&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2936

><td class="source">              &#39;At least two spaces is best between code and comments&#39;)<br></td></tr
><tr
id=sl_svn141_2937

><td class="source"><br></td></tr
><tr
id=sl_svn141_2938

><td class="source">      # Checks for common mistakes in TODO comments.<br></td></tr
><tr
id=sl_svn141_2939

><td class="source">      comment = line[commentpos:]<br></td></tr
><tr
id=sl_svn141_2940

><td class="source">      match = _RE_PATTERN_TODO.match(comment)<br></td></tr
><tr
id=sl_svn141_2941

><td class="source">      if match:<br></td></tr
><tr
id=sl_svn141_2942

><td class="source">        # One whitespace is correct; zero whitespace is handled elsewhere.<br></td></tr
><tr
id=sl_svn141_2943

><td class="source">        leading_whitespace = match.group(1)<br></td></tr
><tr
id=sl_svn141_2944

><td class="source">        if len(leading_whitespace) &gt; 1:<br></td></tr
><tr
id=sl_svn141_2945

><td class="source">          error(filename, linenum, &#39;whitespace/todo&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2946

><td class="source">                &#39;Too many spaces before TODO&#39;)<br></td></tr
><tr
id=sl_svn141_2947

><td class="source"><br></td></tr
><tr
id=sl_svn141_2948

><td class="source">        username = match.group(2)<br></td></tr
><tr
id=sl_svn141_2949

><td class="source">        if not username:<br></td></tr
><tr
id=sl_svn141_2950

><td class="source">          error(filename, linenum, &#39;readability/todo&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2951

><td class="source">                &#39;Missing username in TODO; it should look like &#39;<br></td></tr
><tr
id=sl_svn141_2952

><td class="source">                &#39;&quot;// TODO(my_username): Stuff.&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_2953

><td class="source"><br></td></tr
><tr
id=sl_svn141_2954

><td class="source">        middle_whitespace = match.group(3)<br></td></tr
><tr
id=sl_svn141_2955

><td class="source">        # Comparisons made explicit for correctness -- pylint: disable=g-explicit-bool-comparison<br></td></tr
><tr
id=sl_svn141_2956

><td class="source">        if middle_whitespace != &#39; &#39; and middle_whitespace != &#39;&#39;:<br></td></tr
><tr
id=sl_svn141_2957

><td class="source">          error(filename, linenum, &#39;whitespace/todo&#39;, 2,<br></td></tr
><tr
id=sl_svn141_2958

><td class="source">                &#39;TODO(my_username) should be followed by a space&#39;)<br></td></tr
><tr
id=sl_svn141_2959

><td class="source"><br></td></tr
><tr
id=sl_svn141_2960

><td class="source">      # If the comment contains an alphanumeric character, there<br></td></tr
><tr
id=sl_svn141_2961

><td class="source">      # should be a space somewhere between it and the // unless<br></td></tr
><tr
id=sl_svn141_2962

><td class="source">      # it&#39;s a /// or //! Doxygen comment.<br></td></tr
><tr
id=sl_svn141_2963

><td class="source">      if (Match(r&#39;//[^ ]*\w&#39;, comment) and<br></td></tr
><tr
id=sl_svn141_2964

><td class="source">          not Match(r&#39;(///|//\!)(\s+|$)&#39;, comment)):<br></td></tr
><tr
id=sl_svn141_2965

><td class="source">        error(filename, linenum, &#39;whitespace/comments&#39;, 4,<br></td></tr
><tr
id=sl_svn141_2966

><td class="source">              &#39;Should have a space between // and comment&#39;)<br></td></tr
><tr
id=sl_svn141_2967

><td class="source"><br></td></tr
><tr
id=sl_svn141_2968

><td class="source"><br></td></tr
><tr
id=sl_svn141_2969

><td class="source">def CheckAccess(filename, clean_lines, linenum, nesting_state, error):<br></td></tr
><tr
id=sl_svn141_2970

><td class="source">  &quot;&quot;&quot;Checks for improper use of DISALLOW* macros.<br></td></tr
><tr
id=sl_svn141_2971

><td class="source"><br></td></tr
><tr
id=sl_svn141_2972

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_2973

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_2974

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_2975

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_2976

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_2977

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_2978

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_2979

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_2980

><td class="source">  line = clean_lines.elided[linenum]  # get rid of comments and strings<br></td></tr
><tr
id=sl_svn141_2981

><td class="source"><br></td></tr
><tr
id=sl_svn141_2982

><td class="source">  matched = Match((r&#39;\s*(DISALLOW_COPY_AND_ASSIGN|&#39;<br></td></tr
><tr
id=sl_svn141_2983

><td class="source">                   r&#39;DISALLOW_IMPLICIT_CONSTRUCTORS)&#39;), line)<br></td></tr
><tr
id=sl_svn141_2984

><td class="source">  if not matched:<br></td></tr
><tr
id=sl_svn141_2985

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_2986

><td class="source">  if nesting_state.stack and isinstance(nesting_state.stack[-1], _ClassInfo):<br></td></tr
><tr
id=sl_svn141_2987

><td class="source">    if nesting_state.stack[-1].access != &#39;private&#39;:<br></td></tr
><tr
id=sl_svn141_2988

><td class="source">      error(filename, linenum, &#39;readability/constructors&#39;, 3,<br></td></tr
><tr
id=sl_svn141_2989

><td class="source">            &#39;%s must be in the private: section&#39; % matched.group(1))<br></td></tr
><tr
id=sl_svn141_2990

><td class="source"><br></td></tr
><tr
id=sl_svn141_2991

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_2992

><td class="source">    # Found DISALLOW* macro outside a class declaration, or perhaps it<br></td></tr
><tr
id=sl_svn141_2993

><td class="source">    # was used inside a function when it should have been part of the<br></td></tr
><tr
id=sl_svn141_2994

><td class="source">    # class declaration.  We could issue a warning here, but it<br></td></tr
><tr
id=sl_svn141_2995

><td class="source">    # probably resulted in a compiler error already.<br></td></tr
><tr
id=sl_svn141_2996

><td class="source">    pass<br></td></tr
><tr
id=sl_svn141_2997

><td class="source"><br></td></tr
><tr
id=sl_svn141_2998

><td class="source"><br></td></tr
><tr
id=sl_svn141_2999

><td class="source">def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):<br></td></tr
><tr
id=sl_svn141_3000

><td class="source">  &quot;&quot;&quot;Checks for the correctness of various spacing issues in the code.<br></td></tr
><tr
id=sl_svn141_3001

><td class="source"><br></td></tr
><tr
id=sl_svn141_3002

><td class="source">  Things we check for: spaces around operators, spaces after<br></td></tr
><tr
id=sl_svn141_3003

><td class="source">  if/for/while/switch, no spaces around parens in function calls, two<br></td></tr
><tr
id=sl_svn141_3004

><td class="source">  spaces between code and comment, don&#39;t start a block with a blank<br></td></tr
><tr
id=sl_svn141_3005

><td class="source">  line, don&#39;t end a function with a blank line, don&#39;t add a blank line<br></td></tr
><tr
id=sl_svn141_3006

><td class="source">  after public/protected/private, don&#39;t have too many blank lines in a row.<br></td></tr
><tr
id=sl_svn141_3007

><td class="source"><br></td></tr
><tr
id=sl_svn141_3008

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3009

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3010

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3011

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3012

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_3013

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_3014

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3015

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3016

><td class="source"><br></td></tr
><tr
id=sl_svn141_3017

><td class="source">  # Don&#39;t use &quot;elided&quot; lines here, otherwise we can&#39;t check commented lines.<br></td></tr
><tr
id=sl_svn141_3018

><td class="source">  # Don&#39;t want to use &quot;raw&quot; either, because we don&#39;t want to check inside C++11<br></td></tr
><tr
id=sl_svn141_3019

><td class="source">  # raw strings,<br></td></tr
><tr
id=sl_svn141_3020

><td class="source">  raw = clean_lines.lines_without_raw_strings<br></td></tr
><tr
id=sl_svn141_3021

><td class="source">  line = raw[linenum]<br></td></tr
><tr
id=sl_svn141_3022

><td class="source"><br></td></tr
><tr
id=sl_svn141_3023

><td class="source">  # Before nixing comments, check if the line is blank for no good<br></td></tr
><tr
id=sl_svn141_3024

><td class="source">  # reason.  This includes the first line after a block is opened, and<br></td></tr
><tr
id=sl_svn141_3025

><td class="source">  # blank lines at the end of a function (ie, right before a line like &#39;}&#39;<br></td></tr
><tr
id=sl_svn141_3026

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3027

><td class="source">  # Skip all the blank line checks if we are immediately inside a<br></td></tr
><tr
id=sl_svn141_3028

><td class="source">  # namespace body.  In other words, don&#39;t issue blank line warnings<br></td></tr
><tr
id=sl_svn141_3029

><td class="source">  # for this block:<br></td></tr
><tr
id=sl_svn141_3030

><td class="source">  #   namespace {<br></td></tr
><tr
id=sl_svn141_3031

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3032

><td class="source">  #   }<br></td></tr
><tr
id=sl_svn141_3033

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3034

><td class="source">  # A warning about missing end of namespace comments will be issued instead.<br></td></tr
><tr
id=sl_svn141_3035

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3036

><td class="source">  # Also skip blank line checks for &#39;extern &quot;C&quot;&#39; blocks, which are formatted<br></td></tr
><tr
id=sl_svn141_3037

><td class="source">  # like namespaces.<br></td></tr
><tr
id=sl_svn141_3038

><td class="source">  if (IsBlankLine(line) and<br></td></tr
><tr
id=sl_svn141_3039

><td class="source">      not nesting_state.InNamespaceBody() and<br></td></tr
><tr
id=sl_svn141_3040

><td class="source">      not nesting_state.InExternC()):<br></td></tr
><tr
id=sl_svn141_3041

><td class="source">    elided = clean_lines.elided<br></td></tr
><tr
id=sl_svn141_3042

><td class="source">    prev_line = elided[linenum - 1]<br></td></tr
><tr
id=sl_svn141_3043

><td class="source">    prevbrace = prev_line.rfind(&#39;{&#39;)<br></td></tr
><tr
id=sl_svn141_3044

><td class="source">    # TODO(unknown): Don&#39;t complain if line before blank line, and line after,<br></td></tr
><tr
id=sl_svn141_3045

><td class="source">    #                both start with alnums and are indented the same amount.<br></td></tr
><tr
id=sl_svn141_3046

><td class="source">    #                This ignores whitespace at the start of a namespace block<br></td></tr
><tr
id=sl_svn141_3047

><td class="source">    #                because those are not usually indented.<br></td></tr
><tr
id=sl_svn141_3048

><td class="source">    if prevbrace != -1 and prev_line[prevbrace:].find(&#39;}&#39;) == -1:<br></td></tr
><tr
id=sl_svn141_3049

><td class="source">      # OK, we have a blank line at the start of a code block.  Before we<br></td></tr
><tr
id=sl_svn141_3050

><td class="source">      # complain, we check if it is an exception to the rule: The previous<br></td></tr
><tr
id=sl_svn141_3051

><td class="source">      # non-empty line has the parameters of a function header that are indented<br></td></tr
><tr
id=sl_svn141_3052

><td class="source">      # 4 spaces (because they did not fit in a 80 column line when placed on<br></td></tr
><tr
id=sl_svn141_3053

><td class="source">      # the same line as the function name).  We also check for the case where<br></td></tr
><tr
id=sl_svn141_3054

><td class="source">      # the previous line is indented 6 spaces, which may happen when the<br></td></tr
><tr
id=sl_svn141_3055

><td class="source">      # initializers of a constructor do not fit into a 80 column line.<br></td></tr
><tr
id=sl_svn141_3056

><td class="source">      exception = False<br></td></tr
><tr
id=sl_svn141_3057

><td class="source">      if Match(r&#39; {6}\w&#39;, prev_line):  # Initializer list?<br></td></tr
><tr
id=sl_svn141_3058

><td class="source">        # We are looking for the opening column of initializer list, which<br></td></tr
><tr
id=sl_svn141_3059

><td class="source">        # should be indented 4 spaces to cause 6 space indentation afterwards.<br></td></tr
><tr
id=sl_svn141_3060

><td class="source">        search_position = linenum-2<br></td></tr
><tr
id=sl_svn141_3061

><td class="source">        while (search_position &gt;= 0<br></td></tr
><tr
id=sl_svn141_3062

><td class="source">               and Match(r&#39; {6}\w&#39;, elided[search_position])):<br></td></tr
><tr
id=sl_svn141_3063

><td class="source">          search_position -= 1<br></td></tr
><tr
id=sl_svn141_3064

><td class="source">        exception = (search_position &gt;= 0<br></td></tr
><tr
id=sl_svn141_3065

><td class="source">                     and elided[search_position][:5] == &#39;    :&#39;)<br></td></tr
><tr
id=sl_svn141_3066

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_3067

><td class="source">        # Search for the function arguments or an initializer list.  We use a<br></td></tr
><tr
id=sl_svn141_3068

><td class="source">        # simple heuristic here: If the line is indented 4 spaces; and we have a<br></td></tr
><tr
id=sl_svn141_3069

><td class="source">        # closing paren, without the opening paren, followed by an opening brace<br></td></tr
><tr
id=sl_svn141_3070

><td class="source">        # or colon (for initializer lists) we assume that it is the last line of<br></td></tr
><tr
id=sl_svn141_3071

><td class="source">        # a function header.  If we have a colon indented 4 spaces, it is an<br></td></tr
><tr
id=sl_svn141_3072

><td class="source">        # initializer list.<br></td></tr
><tr
id=sl_svn141_3073

><td class="source">        exception = (Match(r&#39; {4}\w[^\(]*\)\s*(const\s*)?(\{\s*$|:)&#39;,<br></td></tr
><tr
id=sl_svn141_3074

><td class="source">                           prev_line)<br></td></tr
><tr
id=sl_svn141_3075

><td class="source">                     or Match(r&#39; {4}:&#39;, prev_line))<br></td></tr
><tr
id=sl_svn141_3076

><td class="source"><br></td></tr
><tr
id=sl_svn141_3077

><td class="source">      if not exception:<br></td></tr
><tr
id=sl_svn141_3078

><td class="source">        error(filename, linenum, &#39;whitespace/blank_line&#39;, 2,<br></td></tr
><tr
id=sl_svn141_3079

><td class="source">              &#39;Redundant blank line at the start of a code block &#39;<br></td></tr
><tr
id=sl_svn141_3080

><td class="source">              &#39;should be deleted.&#39;)<br></td></tr
><tr
id=sl_svn141_3081

><td class="source">    # Ignore blank lines at the end of a block in a long if-else<br></td></tr
><tr
id=sl_svn141_3082

><td class="source">    # chain, like this:<br></td></tr
><tr
id=sl_svn141_3083

><td class="source">    #   if (condition1) {<br></td></tr
><tr
id=sl_svn141_3084

><td class="source">    #     // Something followed by a blank line<br></td></tr
><tr
id=sl_svn141_3085

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3086

><td class="source">    #   } else if (condition2) {<br></td></tr
><tr
id=sl_svn141_3087

><td class="source">    #     // Something else<br></td></tr
><tr
id=sl_svn141_3088

><td class="source">    #   }<br></td></tr
><tr
id=sl_svn141_3089

><td class="source">    if linenum + 1 &lt; clean_lines.NumLines():<br></td></tr
><tr
id=sl_svn141_3090

><td class="source">      next_line = raw[linenum + 1]<br></td></tr
><tr
id=sl_svn141_3091

><td class="source">      if (next_line<br></td></tr
><tr
id=sl_svn141_3092

><td class="source">          and Match(r&#39;\s*}&#39;, next_line)<br></td></tr
><tr
id=sl_svn141_3093

><td class="source">          and next_line.find(&#39;} else &#39;) == -1):<br></td></tr
><tr
id=sl_svn141_3094

><td class="source">        error(filename, linenum, &#39;whitespace/blank_line&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3095

><td class="source">              &#39;Redundant blank line at the end of a code block &#39;<br></td></tr
><tr
id=sl_svn141_3096

><td class="source">              &#39;should be deleted.&#39;)<br></td></tr
><tr
id=sl_svn141_3097

><td class="source"><br></td></tr
><tr
id=sl_svn141_3098

><td class="source">    matched = Match(r&#39;\s*(public|protected|private):&#39;, prev_line)<br></td></tr
><tr
id=sl_svn141_3099

><td class="source">    if matched:<br></td></tr
><tr
id=sl_svn141_3100

><td class="source">      error(filename, linenum, &#39;whitespace/blank_line&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3101

><td class="source">            &#39;Do not leave a blank line after &quot;%s:&quot;&#39; % matched.group(1))<br></td></tr
><tr
id=sl_svn141_3102

><td class="source"><br></td></tr
><tr
id=sl_svn141_3103

><td class="source">  # Next, check comments<br></td></tr
><tr
id=sl_svn141_3104

><td class="source">  next_line_start = 0<br></td></tr
><tr
id=sl_svn141_3105

><td class="source">  if linenum + 1 &lt; clean_lines.NumLines():<br></td></tr
><tr
id=sl_svn141_3106

><td class="source">    next_line = raw[linenum + 1]<br></td></tr
><tr
id=sl_svn141_3107

><td class="source">    next_line_start = len(next_line) - len(next_line.lstrip())<br></td></tr
><tr
id=sl_svn141_3108

><td class="source">  CheckComment(line, filename, linenum, next_line_start, error)<br></td></tr
><tr
id=sl_svn141_3109

><td class="source"><br></td></tr
><tr
id=sl_svn141_3110

><td class="source">  # get rid of comments and strings<br></td></tr
><tr
id=sl_svn141_3111

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3112

><td class="source"><br></td></tr
><tr
id=sl_svn141_3113

><td class="source">  # You shouldn&#39;t have spaces before your brackets, except maybe after<br></td></tr
><tr
id=sl_svn141_3114

><td class="source">  # &#39;delete []&#39; or &#39;return []() {};&#39;<br></td></tr
><tr
id=sl_svn141_3115

><td class="source">  if Search(r&#39;\w\s+\[&#39;, line) and not Search(r&#39;(?:delete|return)\s+\[&#39;, line):<br></td></tr
><tr
id=sl_svn141_3116

><td class="source">    error(filename, linenum, &#39;whitespace/braces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3117

><td class="source">          &#39;Extra space before [&#39;)<br></td></tr
><tr
id=sl_svn141_3118

><td class="source"><br></td></tr
><tr
id=sl_svn141_3119

><td class="source">  # In range-based for, we wanted spaces before and after the colon, but<br></td></tr
><tr
id=sl_svn141_3120

><td class="source">  # not around &quot;::&quot; tokens that might appear.<br></td></tr
><tr
id=sl_svn141_3121

><td class="source">  if (Search(r&#39;for *\(.*[^:]:[^: ]&#39;, line) or<br></td></tr
><tr
id=sl_svn141_3122

><td class="source">      Search(r&#39;for *\(.*[^: ]:[^:]&#39;, line)):<br></td></tr
><tr
id=sl_svn141_3123

><td class="source">    error(filename, linenum, &#39;whitespace/forcolon&#39;, 2,<br></td></tr
><tr
id=sl_svn141_3124

><td class="source">          &#39;Missing space around colon in range-based for loop&#39;)<br></td></tr
><tr
id=sl_svn141_3125

><td class="source"><br></td></tr
><tr
id=sl_svn141_3126

><td class="source"><br></td></tr
><tr
id=sl_svn141_3127

><td class="source">def CheckOperatorSpacing(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_3128

><td class="source">  &quot;&quot;&quot;Checks for horizontal spacing around operators.<br></td></tr
><tr
id=sl_svn141_3129

><td class="source"><br></td></tr
><tr
id=sl_svn141_3130

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3131

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3132

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3133

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3134

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3135

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3136

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3137

><td class="source"><br></td></tr
><tr
id=sl_svn141_3138

><td class="source">  # Don&#39;t try to do spacing checks for operator methods.  Do this by<br></td></tr
><tr
id=sl_svn141_3139

><td class="source">  # replacing the troublesome characters with something else,<br></td></tr
><tr
id=sl_svn141_3140

><td class="source">  # preserving column position for all other characters.<br></td></tr
><tr
id=sl_svn141_3141

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3142

><td class="source">  # The replacement is done repeatedly to avoid false positives from<br></td></tr
><tr
id=sl_svn141_3143

><td class="source">  # operators that call operators.<br></td></tr
><tr
id=sl_svn141_3144

><td class="source">  while True:<br></td></tr
><tr
id=sl_svn141_3145

><td class="source">    match = Match(r&#39;^(.*\boperator\b)(\S+)(\s*\(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_3146

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_3147

><td class="source">      line = match.group(1) + (&#39;_&#39; * len(match.group(2))) + match.group(3)<br></td></tr
><tr
id=sl_svn141_3148

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_3149

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_3150

><td class="source"><br></td></tr
><tr
id=sl_svn141_3151

><td class="source">  # We allow no-spaces around = within an if: &quot;if ( (a=Foo()) == 0 )&quot;.<br></td></tr
><tr
id=sl_svn141_3152

><td class="source">  # Otherwise not.  Note we only check for non-spaces on *both* sides;<br></td></tr
><tr
id=sl_svn141_3153

><td class="source">  # sometimes people put non-spaces on one side when aligning =&#39;s among<br></td></tr
><tr
id=sl_svn141_3154

><td class="source">  # many lines (not that this is behavior that I approve of...)<br></td></tr
><tr
id=sl_svn141_3155

><td class="source">  if ((Search(r&#39;[\w.]=&#39;, line) or<br></td></tr
><tr
id=sl_svn141_3156

><td class="source">       Search(r&#39;=[\w.]&#39;, line))<br></td></tr
><tr
id=sl_svn141_3157

><td class="source">      and not Search(r&#39;\b(if|while|for) &#39;, line)<br></td></tr
><tr
id=sl_svn141_3158

><td class="source">      # Operators taken from [lex.operators] in C++11 standard.<br></td></tr
><tr
id=sl_svn141_3159

><td class="source">      and not Search(r&#39;(&gt;=|&lt;=|==|!=|&amp;=|\^=|\|=|\+=|\*=|\/=|\%=)&#39;, line)<br></td></tr
><tr
id=sl_svn141_3160

><td class="source">      and not Search(r&#39;operator=&#39;, line)):<br></td></tr
><tr
id=sl_svn141_3161

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3162

><td class="source">          &#39;Missing spaces around =&#39;)<br></td></tr
><tr
id=sl_svn141_3163

><td class="source"><br></td></tr
><tr
id=sl_svn141_3164

><td class="source">  # It&#39;s ok not to have spaces around binary operators like + - * /, but if<br></td></tr
><tr
id=sl_svn141_3165

><td class="source">  # there&#39;s too little whitespace, we get concerned.  It&#39;s hard to tell,<br></td></tr
><tr
id=sl_svn141_3166

><td class="source">  # though, so we punt on this one for now.  TODO.<br></td></tr
><tr
id=sl_svn141_3167

><td class="source"><br></td></tr
><tr
id=sl_svn141_3168

><td class="source">  # You should always have whitespace around binary operators.<br></td></tr
><tr
id=sl_svn141_3169

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3170

><td class="source">  # Check &lt;= and &gt;= first to avoid false positives with &lt; and &gt;, then<br></td></tr
><tr
id=sl_svn141_3171

><td class="source">  # check non-include lines for spacing around &lt; and &gt;.<br></td></tr
><tr
id=sl_svn141_3172

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3173

><td class="source">  # If the operator is followed by a comma, assume it&#39;s be used in a<br></td></tr
><tr
id=sl_svn141_3174

><td class="source">  # macro context and don&#39;t do any checks.  This avoids false<br></td></tr
><tr
id=sl_svn141_3175

><td class="source">  # positives.<br></td></tr
><tr
id=sl_svn141_3176

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3177

><td class="source">  # Note that &amp;&amp; is not included here.  Those are checked separately<br></td></tr
><tr
id=sl_svn141_3178

><td class="source">  # in CheckRValueReference<br></td></tr
><tr
id=sl_svn141_3179

><td class="source">  match = Search(r&#39;[^&lt;&gt;=!\s](==|!=|&lt;=|&gt;=|\|\|)[^&lt;&gt;=!\s,;\)]&#39;, line)<br></td></tr
><tr
id=sl_svn141_3180

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3181

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3182

><td class="source">          &#39;Missing spaces around %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_3183

><td class="source">  elif not Match(r&#39;#.*include&#39;, line):<br></td></tr
><tr
id=sl_svn141_3184

><td class="source">    # Look for &lt; that is not surrounded by spaces.  This is only<br></td></tr
><tr
id=sl_svn141_3185

><td class="source">    # triggered if both sides are missing spaces, even though<br></td></tr
><tr
id=sl_svn141_3186

><td class="source">    # technically should should flag if at least one side is missing a<br></td></tr
><tr
id=sl_svn141_3187

><td class="source">    # space.  This is done to avoid some false positives with shifts.<br></td></tr
><tr
id=sl_svn141_3188

><td class="source">    match = Match(r&#39;^(.*[^\s&lt;])&lt;[^\s=&lt;,]&#39;, line)<br></td></tr
><tr
id=sl_svn141_3189

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_3190

><td class="source">      (_, _, end_pos) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_3191

><td class="source">          clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_3192

><td class="source">      if end_pos &lt;= -1:<br></td></tr
><tr
id=sl_svn141_3193

><td class="source">        error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3194

><td class="source">              &#39;Missing spaces around &lt;&#39;)<br></td></tr
><tr
id=sl_svn141_3195

><td class="source"><br></td></tr
><tr
id=sl_svn141_3196

><td class="source">    # Look for &gt; that is not surrounded by spaces.  Similar to the<br></td></tr
><tr
id=sl_svn141_3197

><td class="source">    # above, we only trigger if both sides are missing spaces to avoid<br></td></tr
><tr
id=sl_svn141_3198

><td class="source">    # false positives with shifts.<br></td></tr
><tr
id=sl_svn141_3199

><td class="source">    match = Match(r&#39;^(.*[^-\s&gt;])&gt;[^\s=&gt;,]&#39;, line)<br></td></tr
><tr
id=sl_svn141_3200

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_3201

><td class="source">      (_, _, start_pos) = ReverseCloseExpression(<br></td></tr
><tr
id=sl_svn141_3202

><td class="source">          clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_3203

><td class="source">      if start_pos &lt;= -1:<br></td></tr
><tr
id=sl_svn141_3204

><td class="source">        error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3205

><td class="source">              &#39;Missing spaces around &gt;&#39;)<br></td></tr
><tr
id=sl_svn141_3206

><td class="source"><br></td></tr
><tr
id=sl_svn141_3207

><td class="source">  # We allow no-spaces around &lt;&lt; when used like this: 10&lt;&lt;20, but<br></td></tr
><tr
id=sl_svn141_3208

><td class="source">  # not otherwise (particularly, not when used as streams)<br></td></tr
><tr
id=sl_svn141_3209

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3210

><td class="source">  # We also allow operators following an opening parenthesis, since<br></td></tr
><tr
id=sl_svn141_3211

><td class="source">  # those tend to be macros that deal with operators.<br></td></tr
><tr
id=sl_svn141_3212

><td class="source">  match = Search(r&#39;(operator|[^\s(&lt;])(?:L|UL|ULL|l|ul|ull)?&lt;&lt;([^\s,=&lt;])&#39;, line)<br></td></tr
><tr
id=sl_svn141_3213

><td class="source">  if (match and not (match.group(1).isdigit() and match.group(2).isdigit()) and<br></td></tr
><tr
id=sl_svn141_3214

><td class="source">      not (match.group(1) == &#39;operator&#39; and match.group(2) == &#39;;&#39;)):<br></td></tr
><tr
id=sl_svn141_3215

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3216

><td class="source">          &#39;Missing spaces around &lt;&lt;&#39;)<br></td></tr
><tr
id=sl_svn141_3217

><td class="source"><br></td></tr
><tr
id=sl_svn141_3218

><td class="source">  # We allow no-spaces around &gt;&gt; for almost anything.  This is because<br></td></tr
><tr
id=sl_svn141_3219

><td class="source">  # C++11 allows &quot;&gt;&gt;&quot; to close nested templates, which accounts for<br></td></tr
><tr
id=sl_svn141_3220

><td class="source">  # most cases when &quot;&gt;&gt;&quot; is not followed by a space.<br></td></tr
><tr
id=sl_svn141_3221

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3222

><td class="source">  # We still warn on &quot;&gt;&gt;&quot; followed by alpha character, because that is<br></td></tr
><tr
id=sl_svn141_3223

><td class="source">  # likely due to &quot;&gt;&gt;&quot; being used for right shifts, e.g.:<br></td></tr
><tr
id=sl_svn141_3224

><td class="source">  #   value &gt;&gt; alpha<br></td></tr
><tr
id=sl_svn141_3225

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3226

><td class="source">  # When &quot;&gt;&gt;&quot; is used to close templates, the alphanumeric letter that<br></td></tr
><tr
id=sl_svn141_3227

><td class="source">  # follows would be part of an identifier, and there should still be<br></td></tr
><tr
id=sl_svn141_3228

><td class="source">  # a space separating the template type and the identifier.<br></td></tr
><tr
id=sl_svn141_3229

><td class="source">  #   type&lt;type&lt;type&gt;&gt; alpha<br></td></tr
><tr
id=sl_svn141_3230

><td class="source">  match = Search(r&#39;&gt;&gt;[a-zA-Z_]&#39;, line)<br></td></tr
><tr
id=sl_svn141_3231

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3232

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3233

><td class="source">          &#39;Missing spaces around &gt;&gt;&#39;)<br></td></tr
><tr
id=sl_svn141_3234

><td class="source"><br></td></tr
><tr
id=sl_svn141_3235

><td class="source">  # There shouldn&#39;t be space around unary operators<br></td></tr
><tr
id=sl_svn141_3236

><td class="source">  match = Search(r&#39;(!\s|~\s|[\s]--[\s;]|[\s]\+\+[\s;])&#39;, line)<br></td></tr
><tr
id=sl_svn141_3237

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3238

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3239

><td class="source">          &#39;Extra space for operator %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_3240

><td class="source"><br></td></tr
><tr
id=sl_svn141_3241

><td class="source"><br></td></tr
><tr
id=sl_svn141_3242

><td class="source">def CheckParenthesisSpacing(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_3243

><td class="source">  &quot;&quot;&quot;Checks for horizontal spacing around parentheses.<br></td></tr
><tr
id=sl_svn141_3244

><td class="source"><br></td></tr
><tr
id=sl_svn141_3245

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3246

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3247

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3248

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3249

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3250

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3251

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3252

><td class="source"><br></td></tr
><tr
id=sl_svn141_3253

><td class="source">  # No spaces after an if, while, switch, or for<br></td></tr
><tr
id=sl_svn141_3254

><td class="source">  match = Search(r&#39; (if\(|for\(|while\(|switch\()&#39;, line)<br></td></tr
><tr
id=sl_svn141_3255

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3256

><td class="source">    error(filename, linenum, &#39;whitespace/parens&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3257

><td class="source">          &#39;Missing space before ( in %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_3258

><td class="source"><br></td></tr
><tr
id=sl_svn141_3259

><td class="source">  # For if/for/while/switch, the left and right parens should be<br></td></tr
><tr
id=sl_svn141_3260

><td class="source">  # consistent about how many spaces are inside the parens, and<br></td></tr
><tr
id=sl_svn141_3261

><td class="source">  # there should either be zero or one spaces inside the parens.<br></td></tr
><tr
id=sl_svn141_3262

><td class="source">  # We don&#39;t want: &quot;if ( foo)&quot; or &quot;if ( foo   )&quot;.<br></td></tr
><tr
id=sl_svn141_3263

><td class="source">  # Exception: &quot;for ( ; foo; bar)&quot; and &quot;for (foo; bar; )&quot; are allowed.<br></td></tr
><tr
id=sl_svn141_3264

><td class="source">  match = Search(r&#39;\b(if|for|while|switch)\s*&#39;<br></td></tr
><tr
id=sl_svn141_3265

><td class="source">                 r&#39;\(([ ]*)(.).*[^ ]+([ ]*)\)\s*{\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_3266

><td class="source">                 line)<br></td></tr
><tr
id=sl_svn141_3267

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3268

><td class="source">    if len(match.group(2)) != len(match.group(4)):<br></td></tr
><tr
id=sl_svn141_3269

><td class="source">      if not (match.group(3) == &#39;;&#39; and<br></td></tr
><tr
id=sl_svn141_3270

><td class="source">              len(match.group(2)) == 1 + len(match.group(4)) or<br></td></tr
><tr
id=sl_svn141_3271

><td class="source">              not match.group(2) and Search(r&#39;\bfor\s*\(.*; \)&#39;, line)):<br></td></tr
><tr
id=sl_svn141_3272

><td class="source">        error(filename, linenum, &#39;whitespace/parens&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3273

><td class="source">              &#39;Mismatching spaces inside () in %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_3274

><td class="source">    if len(match.group(2)) not in [0, 1]:<br></td></tr
><tr
id=sl_svn141_3275

><td class="source">      error(filename, linenum, &#39;whitespace/parens&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3276

><td class="source">            &#39;Should have zero or one spaces inside ( and ) in %s&#39; %<br></td></tr
><tr
id=sl_svn141_3277

><td class="source">            match.group(1))<br></td></tr
><tr
id=sl_svn141_3278

><td class="source"><br></td></tr
><tr
id=sl_svn141_3279

><td class="source"><br></td></tr
><tr
id=sl_svn141_3280

><td class="source">def CheckCommaSpacing(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_3281

><td class="source">  &quot;&quot;&quot;Checks for horizontal spacing near commas and semicolons.<br></td></tr
><tr
id=sl_svn141_3282

><td class="source"><br></td></tr
><tr
id=sl_svn141_3283

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3284

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3285

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3286

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3287

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3288

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3289

><td class="source">  raw = clean_lines.lines_without_raw_strings<br></td></tr
><tr
id=sl_svn141_3290

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3291

><td class="source"><br></td></tr
><tr
id=sl_svn141_3292

><td class="source">  # You should always have a space after a comma (either as fn arg or operator)<br></td></tr
><tr
id=sl_svn141_3293

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3294

><td class="source">  # This does not apply when the non-space character following the<br></td></tr
><tr
id=sl_svn141_3295

><td class="source">  # comma is another comma, since the only time when that happens is<br></td></tr
><tr
id=sl_svn141_3296

><td class="source">  # for empty macro arguments.<br></td></tr
><tr
id=sl_svn141_3297

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3298

><td class="source">  # We run this check in two passes: first pass on elided lines to<br></td></tr
><tr
id=sl_svn141_3299

><td class="source">  # verify that lines contain missing whitespaces, second pass on raw<br></td></tr
><tr
id=sl_svn141_3300

><td class="source">  # lines to confirm that those missing whitespaces are not due to<br></td></tr
><tr
id=sl_svn141_3301

><td class="source">  # elided comments.<br></td></tr
><tr
id=sl_svn141_3302

><td class="source">  if (Search(r&#39;,[^,\s]&#39;, ReplaceAll(r&#39;\boperator\s*,\s*\(&#39;, &#39;F(&#39;, line)) and<br></td></tr
><tr
id=sl_svn141_3303

><td class="source">      Search(r&#39;,[^,\s]&#39;, raw[linenum])):<br></td></tr
><tr
id=sl_svn141_3304

><td class="source">    error(filename, linenum, &#39;whitespace/comma&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3305

><td class="source">          &#39;Missing space after ,&#39;)<br></td></tr
><tr
id=sl_svn141_3306

><td class="source"><br></td></tr
><tr
id=sl_svn141_3307

><td class="source">  # You should always have a space after a semicolon<br></td></tr
><tr
id=sl_svn141_3308

><td class="source">  # except for few corner cases<br></td></tr
><tr
id=sl_svn141_3309

><td class="source">  # TODO(unknown): clarify if &#39;if (1) { return 1;}&#39; is requires one more<br></td></tr
><tr
id=sl_svn141_3310

><td class="source">  # space after ;<br></td></tr
><tr
id=sl_svn141_3311

><td class="source">  if Search(r&#39;;[^\s};\\)/]&#39;, line):<br></td></tr
><tr
id=sl_svn141_3312

><td class="source">    error(filename, linenum, &#39;whitespace/semicolon&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3313

><td class="source">          &#39;Missing space after ;&#39;)<br></td></tr
><tr
id=sl_svn141_3314

><td class="source"><br></td></tr
><tr
id=sl_svn141_3315

><td class="source"><br></td></tr
><tr
id=sl_svn141_3316

><td class="source">def CheckBracesSpacing(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_3317

><td class="source">  &quot;&quot;&quot;Checks for horizontal spacing near commas.<br></td></tr
><tr
id=sl_svn141_3318

><td class="source"><br></td></tr
><tr
id=sl_svn141_3319

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3320

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3321

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3322

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3323

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3324

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3325

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3326

><td class="source"><br></td></tr
><tr
id=sl_svn141_3327

><td class="source">  # Except after an opening paren, or after another opening brace (in case of<br></td></tr
><tr
id=sl_svn141_3328

><td class="source">  # an initializer list, for instance), you should have spaces before your<br></td></tr
><tr
id=sl_svn141_3329

><td class="source">  # braces. And since you should never have braces at the beginning of a line,<br></td></tr
><tr
id=sl_svn141_3330

><td class="source">  # this is an easy test.<br></td></tr
><tr
id=sl_svn141_3331

><td class="source">  match = Match(r&#39;^(.*[^ ({&gt;]){&#39;, line)<br></td></tr
><tr
id=sl_svn141_3332

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3333

><td class="source">    # Try a bit harder to check for brace initialization.  This<br></td></tr
><tr
id=sl_svn141_3334

><td class="source">    # happens in one of the following forms:<br></td></tr
><tr
id=sl_svn141_3335

><td class="source">    #   Constructor() : initializer_list_{} { ... }<br></td></tr
><tr
id=sl_svn141_3336

><td class="source">    #   Constructor{}.MemberFunction()<br></td></tr
><tr
id=sl_svn141_3337

><td class="source">    #   Type variable{};<br></td></tr
><tr
id=sl_svn141_3338

><td class="source">    #   FunctionCall(type{}, ...);<br></td></tr
><tr
id=sl_svn141_3339

><td class="source">    #   LastArgument(..., type{});<br></td></tr
><tr
id=sl_svn141_3340

><td class="source">    #   LOG(INFO) &lt;&lt; type{} &lt;&lt; &quot; ...&quot;;<br></td></tr
><tr
id=sl_svn141_3341

><td class="source">    #   map_of_type[{...}] = ...;<br></td></tr
><tr
id=sl_svn141_3342

><td class="source">    #   ternary = expr ? new type{} : nullptr;<br></td></tr
><tr
id=sl_svn141_3343

><td class="source">    #   OuterTemplate&lt;InnerTemplateConstructor&lt;Type&gt;{}&gt;<br></td></tr
><tr
id=sl_svn141_3344

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3345

><td class="source">    # We check for the character following the closing brace, and<br></td></tr
><tr
id=sl_svn141_3346

><td class="source">    # silence the warning if it&#39;s one of those listed above, i.e.<br></td></tr
><tr
id=sl_svn141_3347

><td class="source">    # &quot;{.;,)&lt;&gt;]:&quot;.<br></td></tr
><tr
id=sl_svn141_3348

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3349

><td class="source">    # To account for nested initializer list, we allow any number of<br></td></tr
><tr
id=sl_svn141_3350

><td class="source">    # closing braces up to &quot;{;,)&lt;&quot;.  We can&#39;t simply silence the<br></td></tr
><tr
id=sl_svn141_3351

><td class="source">    # warning on first sight of closing brace, because that would<br></td></tr
><tr
id=sl_svn141_3352

><td class="source">    # cause false negatives for things that are not initializer lists.<br></td></tr
><tr
id=sl_svn141_3353

><td class="source">    #   Silence this:         But not this:<br></td></tr
><tr
id=sl_svn141_3354

><td class="source">    #     Outer{                if (...) {<br></td></tr
><tr
id=sl_svn141_3355

><td class="source">    #       Inner{...}            if (...){  // Missing space before {<br></td></tr
><tr
id=sl_svn141_3356

><td class="source">    #     };                    }<br></td></tr
><tr
id=sl_svn141_3357

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3358

><td class="source">    # There is a false negative with this approach if people inserted<br></td></tr
><tr
id=sl_svn141_3359

><td class="source">    # spurious semicolons, e.g. &quot;if (cond){};&quot;, but we will catch the<br></td></tr
><tr
id=sl_svn141_3360

><td class="source">    # spurious semicolon with a separate check.<br></td></tr
><tr
id=sl_svn141_3361

><td class="source">    (endline, endlinenum, endpos) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_3362

><td class="source">        clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_3363

><td class="source">    trailing_text = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_3364

><td class="source">    if endpos &gt; -1:<br></td></tr
><tr
id=sl_svn141_3365

><td class="source">      trailing_text = endline[endpos:]<br></td></tr
><tr
id=sl_svn141_3366

><td class="source">    for offset in xrange(endlinenum + 1,<br></td></tr
><tr
id=sl_svn141_3367

><td class="source">                         min(endlinenum + 3, clean_lines.NumLines() - 1)):<br></td></tr
><tr
id=sl_svn141_3368

><td class="source">      trailing_text += clean_lines.elided[offset]<br></td></tr
><tr
id=sl_svn141_3369

><td class="source">    if not Match(r&#39;^[\s}]*[{.;,)&lt;&gt;\]:]&#39;, trailing_text):<br></td></tr
><tr
id=sl_svn141_3370

><td class="source">      error(filename, linenum, &#39;whitespace/braces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3371

><td class="source">            &#39;Missing space before {&#39;)<br></td></tr
><tr
id=sl_svn141_3372

><td class="source"><br></td></tr
><tr
id=sl_svn141_3373

><td class="source">  # Make sure &#39;} else {&#39; has spaces.<br></td></tr
><tr
id=sl_svn141_3374

><td class="source">  if Search(r&#39;}else&#39;, line):<br></td></tr
><tr
id=sl_svn141_3375

><td class="source">    error(filename, linenum, &#39;whitespace/braces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3376

><td class="source">          &#39;Missing space before else&#39;)<br></td></tr
><tr
id=sl_svn141_3377

><td class="source"><br></td></tr
><tr
id=sl_svn141_3378

><td class="source">  # You shouldn&#39;t have a space before a semicolon at the end of the line.<br></td></tr
><tr
id=sl_svn141_3379

><td class="source">  # There&#39;s a special case for &quot;for&quot; since the style guide allows space before<br></td></tr
><tr
id=sl_svn141_3380

><td class="source">  # the semicolon there.<br></td></tr
><tr
id=sl_svn141_3381

><td class="source">  if Search(r&#39;:\s*;\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_3382

><td class="source">    error(filename, linenum, &#39;whitespace/semicolon&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3383

><td class="source">          &#39;Semicolon defining empty statement. Use {} instead.&#39;)<br></td></tr
><tr
id=sl_svn141_3384

><td class="source">  elif Search(r&#39;^\s*;\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_3385

><td class="source">    error(filename, linenum, &#39;whitespace/semicolon&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3386

><td class="source">          &#39;Line contains only semicolon. If this should be an empty statement, &#39;<br></td></tr
><tr
id=sl_svn141_3387

><td class="source">          &#39;use {} instead.&#39;)<br></td></tr
><tr
id=sl_svn141_3388

><td class="source">  elif (Search(r&#39;\s+;\s*$&#39;, line) and<br></td></tr
><tr
id=sl_svn141_3389

><td class="source">        not Search(r&#39;\bfor\b&#39;, line)):<br></td></tr
><tr
id=sl_svn141_3390

><td class="source">    error(filename, linenum, &#39;whitespace/semicolon&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3391

><td class="source">          &#39;Extra space before last semicolon. If this should be an empty &#39;<br></td></tr
><tr
id=sl_svn141_3392

><td class="source">          &#39;statement, use {} instead.&#39;)<br></td></tr
><tr
id=sl_svn141_3393

><td class="source"><br></td></tr
><tr
id=sl_svn141_3394

><td class="source"><br></td></tr
><tr
id=sl_svn141_3395

><td class="source">def IsDecltype(clean_lines, linenum, column):<br></td></tr
><tr
id=sl_svn141_3396

><td class="source">  &quot;&quot;&quot;Check if the token ending on (linenum, column) is decltype().<br></td></tr
><tr
id=sl_svn141_3397

><td class="source"><br></td></tr
><tr
id=sl_svn141_3398

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3399

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3400

><td class="source">    linenum: the number of the line to check.<br></td></tr
><tr
id=sl_svn141_3401

><td class="source">    column: end column of the token to check.<br></td></tr
><tr
id=sl_svn141_3402

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3403

><td class="source">    True if this token is decltype() expression, False otherwise.<br></td></tr
><tr
id=sl_svn141_3404

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3405

><td class="source">  (text, _, start_col) = ReverseCloseExpression(clean_lines, linenum, column)<br></td></tr
><tr
id=sl_svn141_3406

><td class="source">  if start_col &lt; 0:<br></td></tr
><tr
id=sl_svn141_3407

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_3408

><td class="source">  if Search(r&#39;\bdecltype\s*$&#39;, text[0:start_col]):<br></td></tr
><tr
id=sl_svn141_3409

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3410

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_3411

><td class="source"><br></td></tr
><tr
id=sl_svn141_3412

><td class="source"><br></td></tr
><tr
id=sl_svn141_3413

><td class="source">def IsTemplateParameterList(clean_lines, linenum, column):<br></td></tr
><tr
id=sl_svn141_3414

><td class="source">  &quot;&quot;&quot;Check if the token ending on (linenum, column) is the end of template&lt;&gt;.<br></td></tr
><tr
id=sl_svn141_3415

><td class="source"><br></td></tr
><tr
id=sl_svn141_3416

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3417

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3418

><td class="source">    linenum: the number of the line to check.<br></td></tr
><tr
id=sl_svn141_3419

><td class="source">    column: end column of the token to check.<br></td></tr
><tr
id=sl_svn141_3420

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3421

><td class="source">    True if this token is end of a template parameter list, False otherwise.<br></td></tr
><tr
id=sl_svn141_3422

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3423

><td class="source">  (_, startline, startpos) = ReverseCloseExpression(<br></td></tr
><tr
id=sl_svn141_3424

><td class="source">      clean_lines, linenum, column)<br></td></tr
><tr
id=sl_svn141_3425

><td class="source">  if (startpos &gt; -1 and<br></td></tr
><tr
id=sl_svn141_3426

><td class="source">      Search(r&#39;\btemplate\s*$&#39;, clean_lines.elided[startline][0:startpos])):<br></td></tr
><tr
id=sl_svn141_3427

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3428

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_3429

><td class="source"><br></td></tr
><tr
id=sl_svn141_3430

><td class="source"><br></td></tr
><tr
id=sl_svn141_3431

><td class="source">def IsRValueType(typenames, clean_lines, nesting_state, linenum, column):<br></td></tr
><tr
id=sl_svn141_3432

><td class="source">  &quot;&quot;&quot;Check if the token ending on (linenum, column) is a type.<br></td></tr
><tr
id=sl_svn141_3433

><td class="source"><br></td></tr
><tr
id=sl_svn141_3434

><td class="source">  Assumes that text to the right of the column is &quot;&amp;&amp;&quot; or a function<br></td></tr
><tr
id=sl_svn141_3435

><td class="source">  name.<br></td></tr
><tr
id=sl_svn141_3436

><td class="source"><br></td></tr
><tr
id=sl_svn141_3437

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3438

><td class="source">    typenames: set of type names from template-argument-list.<br></td></tr
><tr
id=sl_svn141_3439

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3440

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_3441

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_3442

><td class="source">    linenum: the number of the line to check.<br></td></tr
><tr
id=sl_svn141_3443

><td class="source">    column: end column of the token to check.<br></td></tr
><tr
id=sl_svn141_3444

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3445

><td class="source">    True if this token is a type, False if we are not sure.<br></td></tr
><tr
id=sl_svn141_3446

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3447

><td class="source">  prefix = clean_lines.elided[linenum][0:column]<br></td></tr
><tr
id=sl_svn141_3448

><td class="source"><br></td></tr
><tr
id=sl_svn141_3449

><td class="source">  # Get one word to the left.  If we failed to do so, this is most<br></td></tr
><tr
id=sl_svn141_3450

><td class="source">  # likely not a type, since it&#39;s unlikely that the type name and &quot;&amp;&amp;&quot;<br></td></tr
><tr
id=sl_svn141_3451

><td class="source">  # would be split across multiple lines.<br></td></tr
><tr
id=sl_svn141_3452

><td class="source">  match = Match(r&#39;^(.*)(\b\w+|[&gt;*)&amp;])\s*$&#39;, prefix)<br></td></tr
><tr
id=sl_svn141_3453

><td class="source">  if not match:<br></td></tr
><tr
id=sl_svn141_3454

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_3455

><td class="source"><br></td></tr
><tr
id=sl_svn141_3456

><td class="source">  # Check text following the token.  If it&#39;s &quot;&amp;&amp;&gt;&quot; or &quot;&amp;&amp;,&quot; or &quot;&amp;&amp;...&quot;, it&#39;s<br></td></tr
><tr
id=sl_svn141_3457

><td class="source">  # most likely a rvalue reference used inside a template.<br></td></tr
><tr
id=sl_svn141_3458

><td class="source">  suffix = clean_lines.elided[linenum][column:]<br></td></tr
><tr
id=sl_svn141_3459

><td class="source">  if Match(r&#39;&amp;&amp;\s*(?:[&gt;,]|\.\.\.)&#39;, suffix):<br></td></tr
><tr
id=sl_svn141_3460

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3461

><td class="source"><br></td></tr
><tr
id=sl_svn141_3462

><td class="source">  # Check for known types and end of templates:<br></td></tr
><tr
id=sl_svn141_3463

><td class="source">  #   int&amp;&amp; variable<br></td></tr
><tr
id=sl_svn141_3464

><td class="source">  #   vector&lt;int&gt;&amp;&amp; variable<br></td></tr
><tr
id=sl_svn141_3465

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3466

><td class="source">  # Because this function is called recursively, we also need to<br></td></tr
><tr
id=sl_svn141_3467

><td class="source">  # recognize pointer and reference types:<br></td></tr
><tr
id=sl_svn141_3468

><td class="source">  #   int* Function()<br></td></tr
><tr
id=sl_svn141_3469

><td class="source">  #   int&amp; Function()<br></td></tr
><tr
id=sl_svn141_3470

><td class="source">  if (match.group(2) in typenames or<br></td></tr
><tr
id=sl_svn141_3471

><td class="source">      match.group(2) in [&#39;char&#39;, &#39;char16_t&#39;, &#39;char32_t&#39;, &#39;wchar_t&#39;, &#39;bool&#39;,<br></td></tr
><tr
id=sl_svn141_3472

><td class="source">                         &#39;short&#39;, &#39;int&#39;, &#39;long&#39;, &#39;signed&#39;, &#39;unsigned&#39;,<br></td></tr
><tr
id=sl_svn141_3473

><td class="source">                         &#39;float&#39;, &#39;double&#39;, &#39;void&#39;, &#39;auto&#39;, &#39;&gt;&#39;, &#39;*&#39;, &#39;&amp;&#39;]):<br></td></tr
><tr
id=sl_svn141_3474

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3475

><td class="source"><br></td></tr
><tr
id=sl_svn141_3476

><td class="source">  # If we see a close parenthesis, look for decltype on the other side.<br></td></tr
><tr
id=sl_svn141_3477

><td class="source">  # decltype would unambiguously identify a type, anything else is<br></td></tr
><tr
id=sl_svn141_3478

><td class="source">  # probably a parenthesized expression and not a type.<br></td></tr
><tr
id=sl_svn141_3479

><td class="source">  if match.group(2) == &#39;)&#39;:<br></td></tr
><tr
id=sl_svn141_3480

><td class="source">    return IsDecltype(<br></td></tr
><tr
id=sl_svn141_3481

><td class="source">        clean_lines, linenum, len(match.group(1)) + len(match.group(2)) - 1)<br></td></tr
><tr
id=sl_svn141_3482

><td class="source"><br></td></tr
><tr
id=sl_svn141_3483

><td class="source">  # Check for casts and cv-qualifiers.<br></td></tr
><tr
id=sl_svn141_3484

><td class="source">  #   match.group(1)  remainder<br></td></tr
><tr
id=sl_svn141_3485

><td class="source">  #   --------------  ---------<br></td></tr
><tr
id=sl_svn141_3486

><td class="source">  #   const_cast&lt;     type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3487

><td class="source">  #   const           type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3488

><td class="source">  #   type            const&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3489

><td class="source">  if Search(r&#39;\b(?:const_cast\s*&lt;|static_cast\s*&lt;|dynamic_cast\s*&lt;|&#39;<br></td></tr
><tr
id=sl_svn141_3490

><td class="source">            r&#39;reinterpret_cast\s*&lt;|\w+\s)\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_3491

><td class="source">            match.group(1)):<br></td></tr
><tr
id=sl_svn141_3492

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3493

><td class="source"><br></td></tr
><tr
id=sl_svn141_3494

><td class="source">  # Look for a preceding symbol that might help differentiate the context.<br></td></tr
><tr
id=sl_svn141_3495

><td class="source">  # These are the cases that would be ambiguous:<br></td></tr
><tr
id=sl_svn141_3496

><td class="source">  #   match.group(1)  remainder<br></td></tr
><tr
id=sl_svn141_3497

><td class="source">  #   --------------  ---------<br></td></tr
><tr
id=sl_svn141_3498

><td class="source">  #   Call         (   expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3499

><td class="source">  #   Declaration  (   type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3500

><td class="source">  #   sizeof       (   type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3501

><td class="source">  #   if           (   expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3502

><td class="source">  #   while        (   expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3503

><td class="source">  #   for          (   type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3504

><td class="source">  #   for(         ;   expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3505

><td class="source">  #   statement    ;   type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3506

><td class="source">  #   block        {   type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3507

><td class="source">  #   constructor  {   expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3508

><td class="source">  start = linenum<br></td></tr
><tr
id=sl_svn141_3509

><td class="source">  line = match.group(1)<br></td></tr
><tr
id=sl_svn141_3510

><td class="source">  match_symbol = None<br></td></tr
><tr
id=sl_svn141_3511

><td class="source">  while start &gt;= 0:<br></td></tr
><tr
id=sl_svn141_3512

><td class="source">    # We want to skip over identifiers and commas to get to a symbol.<br></td></tr
><tr
id=sl_svn141_3513

><td class="source">    # Commas are skipped so that we can find the opening parenthesis<br></td></tr
><tr
id=sl_svn141_3514

><td class="source">    # for function parameter lists.<br></td></tr
><tr
id=sl_svn141_3515

><td class="source">    match_symbol = Match(r&#39;^(.*)([^\w\s,])[\w\s,]*$&#39;, line)<br></td></tr
><tr
id=sl_svn141_3516

><td class="source">    if match_symbol:<br></td></tr
><tr
id=sl_svn141_3517

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_3518

><td class="source">    start -= 1<br></td></tr
><tr
id=sl_svn141_3519

><td class="source">    line = clean_lines.elided[start]<br></td></tr
><tr
id=sl_svn141_3520

><td class="source"><br></td></tr
><tr
id=sl_svn141_3521

><td class="source">  if not match_symbol:<br></td></tr
><tr
id=sl_svn141_3522

><td class="source">    # Probably the first statement in the file is an rvalue reference<br></td></tr
><tr
id=sl_svn141_3523

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3524

><td class="source"><br></td></tr
><tr
id=sl_svn141_3525

><td class="source">  if match_symbol.group(2) == &#39;}&#39;:<br></td></tr
><tr
id=sl_svn141_3526

><td class="source">    # Found closing brace, probably an indicate of this:<br></td></tr
><tr
id=sl_svn141_3527

><td class="source">    #   block{} type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3528

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3529

><td class="source"><br></td></tr
><tr
id=sl_svn141_3530

><td class="source">  if match_symbol.group(2) == &#39;;&#39;:<br></td></tr
><tr
id=sl_svn141_3531

><td class="source">    # Found semicolon, probably one of these:<br></td></tr
><tr
id=sl_svn141_3532

><td class="source">    #   for(; expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3533

><td class="source">    #   statement; type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3534

><td class="source"><br></td></tr
><tr
id=sl_svn141_3535

><td class="source">    # Look for the previous &#39;for(&#39; in the previous lines.<br></td></tr
><tr
id=sl_svn141_3536

><td class="source">    before_text = match_symbol.group(1)<br></td></tr
><tr
id=sl_svn141_3537

><td class="source">    for i in xrange(start - 1, max(start - 6, 0), -1):<br></td></tr
><tr
id=sl_svn141_3538

><td class="source">      before_text = clean_lines.elided[i] + before_text<br></td></tr
><tr
id=sl_svn141_3539

><td class="source">    if Search(r&#39;for\s*\([^{};]*$&#39;, before_text):<br></td></tr
><tr
id=sl_svn141_3540

><td class="source">      # This is the condition inside a for-loop<br></td></tr
><tr
id=sl_svn141_3541

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_3542

><td class="source"><br></td></tr
><tr
id=sl_svn141_3543

><td class="source">    # Did not find a for-init-statement before this semicolon, so this<br></td></tr
><tr
id=sl_svn141_3544

><td class="source">    # is probably a new statement and not a condition.<br></td></tr
><tr
id=sl_svn141_3545

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_3546

><td class="source"><br></td></tr
><tr
id=sl_svn141_3547

><td class="source">  if match_symbol.group(2) == &#39;{&#39;:<br></td></tr
><tr
id=sl_svn141_3548

><td class="source">    # Found opening brace, probably one of these:<br></td></tr
><tr
id=sl_svn141_3549

><td class="source">    #   block{ type&amp;&amp; = ... ; }<br></td></tr
><tr
id=sl_svn141_3550

><td class="source">    #   constructor{ expression &amp;&amp; expression }<br></td></tr
><tr
id=sl_svn141_3551

><td class="source"><br></td></tr
><tr
id=sl_svn141_3552

><td class="source">    # Look for a closing brace or a semicolon.  If we see a semicolon<br></td></tr
><tr
id=sl_svn141_3553

><td class="source">    # first, this is probably a rvalue reference.<br></td></tr
><tr
id=sl_svn141_3554

><td class="source">    line = clean_lines.elided[start][0:len(match_symbol.group(1)) + 1]<br></td></tr
><tr
id=sl_svn141_3555

><td class="source">    end = start<br></td></tr
><tr
id=sl_svn141_3556

><td class="source">    depth = 1<br></td></tr
><tr
id=sl_svn141_3557

><td class="source">    while True:<br></td></tr
><tr
id=sl_svn141_3558

><td class="source">      for ch in line:<br></td></tr
><tr
id=sl_svn141_3559

><td class="source">        if ch == &#39;;&#39;:<br></td></tr
><tr
id=sl_svn141_3560

><td class="source">          return True<br></td></tr
><tr
id=sl_svn141_3561

><td class="source">        elif ch == &#39;{&#39;:<br></td></tr
><tr
id=sl_svn141_3562

><td class="source">          depth += 1<br></td></tr
><tr
id=sl_svn141_3563

><td class="source">        elif ch == &#39;}&#39;:<br></td></tr
><tr
id=sl_svn141_3564

><td class="source">          depth -= 1<br></td></tr
><tr
id=sl_svn141_3565

><td class="source">          if depth == 0:<br></td></tr
><tr
id=sl_svn141_3566

><td class="source">            return False<br></td></tr
><tr
id=sl_svn141_3567

><td class="source">      end += 1<br></td></tr
><tr
id=sl_svn141_3568

><td class="source">      if end &gt;= clean_lines.NumLines():<br></td></tr
><tr
id=sl_svn141_3569

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_3570

><td class="source">      line = clean_lines.elided[end]<br></td></tr
><tr
id=sl_svn141_3571

><td class="source">    # Incomplete program?<br></td></tr
><tr
id=sl_svn141_3572

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_3573

><td class="source"><br></td></tr
><tr
id=sl_svn141_3574

><td class="source">  if match_symbol.group(2) == &#39;(&#39;:<br></td></tr
><tr
id=sl_svn141_3575

><td class="source">    # Opening parenthesis.  Need to check what&#39;s to the left of the<br></td></tr
><tr
id=sl_svn141_3576

><td class="source">    # parenthesis.  Look back one extra line for additional context.<br></td></tr
><tr
id=sl_svn141_3577

><td class="source">    before_text = match_symbol.group(1)<br></td></tr
><tr
id=sl_svn141_3578

><td class="source">    if linenum &gt; 1:<br></td></tr
><tr
id=sl_svn141_3579

><td class="source">      before_text = clean_lines.elided[linenum - 1] + before_text<br></td></tr
><tr
id=sl_svn141_3580

><td class="source">    before_text = match_symbol.group(1)<br></td></tr
><tr
id=sl_svn141_3581

><td class="source"><br></td></tr
><tr
id=sl_svn141_3582

><td class="source">    # Patterns that are likely to be types:<br></td></tr
><tr
id=sl_svn141_3583

><td class="source">    #   [](type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3584

><td class="source">    #   for (type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3585

><td class="source">    #   sizeof(type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3586

><td class="source">    #   operator=(type&amp;&amp;<br></td></tr
><tr
id=sl_svn141_3587

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3588

><td class="source">    if Search(r&#39;(?:\]|\bfor|\bsizeof|\boperator\s*\S+\s*)\s*$&#39;, before_text):<br></td></tr
><tr
id=sl_svn141_3589

><td class="source">      return True<br></td></tr
><tr
id=sl_svn141_3590

><td class="source"><br></td></tr
><tr
id=sl_svn141_3591

><td class="source">    # Patterns that are likely to be expressions:<br></td></tr
><tr
id=sl_svn141_3592

><td class="source">    #   if (expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3593

><td class="source">    #   while (expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3594

><td class="source">    #   : initializer(expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3595

><td class="source">    #   , initializer(expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3596

><td class="source">    #   ( FunctionCall(expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3597

><td class="source">    #   + FunctionCall(expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3598

><td class="source">    #   + (expression &amp;&amp;<br></td></tr
><tr
id=sl_svn141_3599

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_3600

><td class="source">    # The last &#39;+&#39; represents operators such as &#39;+&#39; and &#39;-&#39;.<br></td></tr
><tr
id=sl_svn141_3601

><td class="source">    if Search(r&#39;(?:\bif|\bwhile|[-+=%^(&lt;!?:,&amp;*]\s*)$&#39;, before_text):<br></td></tr
><tr
id=sl_svn141_3602

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_3603

><td class="source"><br></td></tr
><tr
id=sl_svn141_3604

><td class="source">    # Something else.  Check that tokens to the left look like<br></td></tr
><tr
id=sl_svn141_3605

><td class="source">    #   return_type function_name<br></td></tr
><tr
id=sl_svn141_3606

><td class="source">    match_func = Match(r&#39;^(.*\S.*)\s+\w(?:\w|::)*(?:&lt;[^&lt;&gt;]*&gt;)?\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_3607

><td class="source">                       match_symbol.group(1))<br></td></tr
><tr
id=sl_svn141_3608

><td class="source">    if match_func:<br></td></tr
><tr
id=sl_svn141_3609

><td class="source">      # Check for constructors, which don&#39;t have return types.<br></td></tr
><tr
id=sl_svn141_3610

><td class="source">      if Search(r&#39;\b(?:explicit|inline)$&#39;, match_func.group(1)):<br></td></tr
><tr
id=sl_svn141_3611

><td class="source">        return True<br></td></tr
><tr
id=sl_svn141_3612

><td class="source">      implicit_constructor = Match(r&#39;\s*(\w+)\((?:const\s+)?(\w+)&#39;, prefix)<br></td></tr
><tr
id=sl_svn141_3613

><td class="source">      if (implicit_constructor and<br></td></tr
><tr
id=sl_svn141_3614

><td class="source">          implicit_constructor.group(1) == implicit_constructor.group(2)):<br></td></tr
><tr
id=sl_svn141_3615

><td class="source">        return True<br></td></tr
><tr
id=sl_svn141_3616

><td class="source">      return IsRValueType(typenames, clean_lines, nesting_state, linenum,<br></td></tr
><tr
id=sl_svn141_3617

><td class="source">                          len(match_func.group(1)))<br></td></tr
><tr
id=sl_svn141_3618

><td class="source"><br></td></tr
><tr
id=sl_svn141_3619

><td class="source">    # Nothing before the function name.  If this is inside a block scope,<br></td></tr
><tr
id=sl_svn141_3620

><td class="source">    # this is probably a function call.<br></td></tr
><tr
id=sl_svn141_3621

><td class="source">    return not (nesting_state.previous_stack_top and<br></td></tr
><tr
id=sl_svn141_3622

><td class="source">                nesting_state.previous_stack_top.IsBlockInfo())<br></td></tr
><tr
id=sl_svn141_3623

><td class="source"><br></td></tr
><tr
id=sl_svn141_3624

><td class="source">  if match_symbol.group(2) == &#39;&gt;&#39;:<br></td></tr
><tr
id=sl_svn141_3625

><td class="source">    # Possibly a closing bracket, check that what&#39;s on the other side<br></td></tr
><tr
id=sl_svn141_3626

><td class="source">    # looks like the start of a template.<br></td></tr
><tr
id=sl_svn141_3627

><td class="source">    return IsTemplateParameterList(<br></td></tr
><tr
id=sl_svn141_3628

><td class="source">        clean_lines, start, len(match_symbol.group(1)))<br></td></tr
><tr
id=sl_svn141_3629

><td class="source"><br></td></tr
><tr
id=sl_svn141_3630

><td class="source">  # Some other symbol, usually something like &quot;a=b&amp;&amp;c&quot;.  This is most<br></td></tr
><tr
id=sl_svn141_3631

><td class="source">  # likely not a type.<br></td></tr
><tr
id=sl_svn141_3632

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_3633

><td class="source"><br></td></tr
><tr
id=sl_svn141_3634

><td class="source"><br></td></tr
><tr
id=sl_svn141_3635

><td class="source">def IsDeletedOrDefault(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_3636

><td class="source">  &quot;&quot;&quot;Check if current constructor or operator is deleted or default.<br></td></tr
><tr
id=sl_svn141_3637

><td class="source"><br></td></tr
><tr
id=sl_svn141_3638

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3639

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3640

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3641

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3642

><td class="source">    True if this is a deleted or default constructor.<br></td></tr
><tr
id=sl_svn141_3643

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3644

><td class="source">  open_paren = clean_lines.elided[linenum].find(&#39;(&#39;)<br></td></tr
><tr
id=sl_svn141_3645

><td class="source">  if open_paren &lt; 0:<br></td></tr
><tr
id=sl_svn141_3646

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_3647

><td class="source">  (close_line, _, close_paren) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_3648

><td class="source">      clean_lines, linenum, open_paren)<br></td></tr
><tr
id=sl_svn141_3649

><td class="source">  if close_paren &lt; 0:<br></td></tr
><tr
id=sl_svn141_3650

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_3651

><td class="source">  return Match(r&#39;\s*=\s*(?:delete|default)\b&#39;, close_line[close_paren:])<br></td></tr
><tr
id=sl_svn141_3652

><td class="source"><br></td></tr
><tr
id=sl_svn141_3653

><td class="source"><br></td></tr
><tr
id=sl_svn141_3654

><td class="source">def IsRValueAllowed(clean_lines, linenum, typenames):<br></td></tr
><tr
id=sl_svn141_3655

><td class="source">  &quot;&quot;&quot;Check if RValue reference is allowed on a particular line.<br></td></tr
><tr
id=sl_svn141_3656

><td class="source"><br></td></tr
><tr
id=sl_svn141_3657

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3658

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3659

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3660

><td class="source">    typenames: set of type names from template-argument-list.<br></td></tr
><tr
id=sl_svn141_3661

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3662

><td class="source">    True if line is within the region where RValue references are allowed.<br></td></tr
><tr
id=sl_svn141_3663

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3664

><td class="source">  # Allow region marked by PUSH/POP macros<br></td></tr
><tr
id=sl_svn141_3665

><td class="source">  for i in xrange(linenum, 0, -1):<br></td></tr
><tr
id=sl_svn141_3666

><td class="source">    line = clean_lines.elided[i]<br></td></tr
><tr
id=sl_svn141_3667

><td class="source">    if Match(r&#39;GOOGLE_ALLOW_RVALUE_REFERENCES_(?:PUSH|POP)&#39;, line):<br></td></tr
><tr
id=sl_svn141_3668

><td class="source">      if not line.endswith(&#39;PUSH&#39;):<br></td></tr
><tr
id=sl_svn141_3669

><td class="source">        return False<br></td></tr
><tr
id=sl_svn141_3670

><td class="source">      for j in xrange(linenum, clean_lines.NumLines(), 1):<br></td></tr
><tr
id=sl_svn141_3671

><td class="source">        line = clean_lines.elided[j]<br></td></tr
><tr
id=sl_svn141_3672

><td class="source">        if Match(r&#39;GOOGLE_ALLOW_RVALUE_REFERENCES_(?:PUSH|POP)&#39;, line):<br></td></tr
><tr
id=sl_svn141_3673

><td class="source">          return line.endswith(&#39;POP&#39;)<br></td></tr
><tr
id=sl_svn141_3674

><td class="source"><br></td></tr
><tr
id=sl_svn141_3675

><td class="source">  # Allow operator=<br></td></tr
><tr
id=sl_svn141_3676

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3677

><td class="source">  if Search(r&#39;\boperator\s*=\s*\(&#39;, line):<br></td></tr
><tr
id=sl_svn141_3678

><td class="source">    return IsDeletedOrDefault(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_3679

><td class="source"><br></td></tr
><tr
id=sl_svn141_3680

><td class="source">  # Allow constructors<br></td></tr
><tr
id=sl_svn141_3681

><td class="source">  match = Match(r&#39;\s*(?:[\w&lt;&gt;]+::)*([\w&lt;&gt;]+)\s*::\s*([\w&lt;&gt;]+)\s*\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_3682

><td class="source">  if match and match.group(1) == match.group(2):<br></td></tr
><tr
id=sl_svn141_3683

><td class="source">    return IsDeletedOrDefault(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_3684

><td class="source">  if Search(r&#39;\b(?:explicit|inline)\s+[\w&lt;&gt;]+\s*\(&#39;, line):<br></td></tr
><tr
id=sl_svn141_3685

><td class="source">    return IsDeletedOrDefault(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_3686

><td class="source"><br></td></tr
><tr
id=sl_svn141_3687

><td class="source">  if Match(r&#39;\s*[\w&lt;&gt;]+\s*\(&#39;, line):<br></td></tr
><tr
id=sl_svn141_3688

><td class="source">    previous_line = &#39;ReturnType&#39;<br></td></tr
><tr
id=sl_svn141_3689

><td class="source">    if linenum &gt; 0:<br></td></tr
><tr
id=sl_svn141_3690

><td class="source">      previous_line = clean_lines.elided[linenum - 1]<br></td></tr
><tr
id=sl_svn141_3691

><td class="source">    if Match(r&#39;^\s*$&#39;, previous_line) or Search(r&#39;[{}:;]\s*$&#39;, previous_line):<br></td></tr
><tr
id=sl_svn141_3692

><td class="source">      return IsDeletedOrDefault(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_3693

><td class="source"><br></td></tr
><tr
id=sl_svn141_3694

><td class="source">  # Reject types not mentioned in template-argument-list<br></td></tr
><tr
id=sl_svn141_3695

><td class="source">  while line:<br></td></tr
><tr
id=sl_svn141_3696

><td class="source">    match = Match(r&#39;^.*?(\w+)\s*&amp;&amp;(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_3697

><td class="source">    if not match:<br></td></tr
><tr
id=sl_svn141_3698

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_3699

><td class="source">    if match.group(1) not in typenames:<br></td></tr
><tr
id=sl_svn141_3700

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_3701

><td class="source">    line = match.group(2)<br></td></tr
><tr
id=sl_svn141_3702

><td class="source"><br></td></tr
><tr
id=sl_svn141_3703

><td class="source">  # All RValue types that were in template-argument-list should have<br></td></tr
><tr
id=sl_svn141_3704

><td class="source">  # been removed by now.  Those were allowed, assuming that they will<br></td></tr
><tr
id=sl_svn141_3705

><td class="source">  # be forwarded.<br></td></tr
><tr
id=sl_svn141_3706

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3707

><td class="source">  # If there are no remaining RValue types left (i.e. types that were<br></td></tr
><tr
id=sl_svn141_3708

><td class="source">  # not found in template-argument-list), flag those as not allowed.<br></td></tr
><tr
id=sl_svn141_3709

><td class="source">  return line.find(&#39;&amp;&amp;&#39;) &lt; 0<br></td></tr
><tr
id=sl_svn141_3710

><td class="source"><br></td></tr
><tr
id=sl_svn141_3711

><td class="source"><br></td></tr
><tr
id=sl_svn141_3712

><td class="source">def GetTemplateArgs(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_3713

><td class="source">  &quot;&quot;&quot;Find list of template arguments associated with this function declaration.<br></td></tr
><tr
id=sl_svn141_3714

><td class="source"><br></td></tr
><tr
id=sl_svn141_3715

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3716

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3717

><td class="source">    linenum: Line number containing the start of the function declaration,<br></td></tr
><tr
id=sl_svn141_3718

><td class="source">             usually one line after the end of the template-argument-list.<br></td></tr
><tr
id=sl_svn141_3719

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3720

><td class="source">    Set of type names, or empty set if this does not appear to have<br></td></tr
><tr
id=sl_svn141_3721

><td class="source">    any template parameters.<br></td></tr
><tr
id=sl_svn141_3722

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3723

><td class="source">  # Find start of function<br></td></tr
><tr
id=sl_svn141_3724

><td class="source">  func_line = linenum<br></td></tr
><tr
id=sl_svn141_3725

><td class="source">  while func_line &gt; 0:<br></td></tr
><tr
id=sl_svn141_3726

><td class="source">    line = clean_lines.elided[func_line]<br></td></tr
><tr
id=sl_svn141_3727

><td class="source">    if Match(r&#39;^\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_3728

><td class="source">      return set()<br></td></tr
><tr
id=sl_svn141_3729

><td class="source">    if line.find(&#39;(&#39;) &gt;= 0:<br></td></tr
><tr
id=sl_svn141_3730

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_3731

><td class="source">    func_line -= 1<br></td></tr
><tr
id=sl_svn141_3732

><td class="source">  if func_line == 0:<br></td></tr
><tr
id=sl_svn141_3733

><td class="source">    return set()<br></td></tr
><tr
id=sl_svn141_3734

><td class="source"><br></td></tr
><tr
id=sl_svn141_3735

><td class="source">  # Collapse template-argument-list into a single string<br></td></tr
><tr
id=sl_svn141_3736

><td class="source">  argument_list = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_3737

><td class="source">  match = Match(r&#39;^(\s*template\s*)&lt;&#39;, clean_lines.elided[func_line])<br></td></tr
><tr
id=sl_svn141_3738

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_3739

><td class="source">    # template-argument-list on the same line as function name<br></td></tr
><tr
id=sl_svn141_3740

><td class="source">    start_col = len(match.group(1))<br></td></tr
><tr
id=sl_svn141_3741

><td class="source">    _, end_line, end_col = CloseExpression(clean_lines, func_line, start_col)<br></td></tr
><tr
id=sl_svn141_3742

><td class="source">    if end_col &gt; -1 and end_line == func_line:<br></td></tr
><tr
id=sl_svn141_3743

><td class="source">      start_col += 1  # Skip the opening bracket<br></td></tr
><tr
id=sl_svn141_3744

><td class="source">      argument_list = clean_lines.elided[func_line][start_col:end_col]<br></td></tr
><tr
id=sl_svn141_3745

><td class="source"><br></td></tr
><tr
id=sl_svn141_3746

><td class="source">  elif func_line &gt; 1:<br></td></tr
><tr
id=sl_svn141_3747

><td class="source">    # template-argument-list one line before function name<br></td></tr
><tr
id=sl_svn141_3748

><td class="source">    match = Match(r&#39;^(.*)&gt;\s*$&#39;, clean_lines.elided[func_line - 1])<br></td></tr
><tr
id=sl_svn141_3749

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_3750

><td class="source">      end_col = len(match.group(1))<br></td></tr
><tr
id=sl_svn141_3751

><td class="source">      _, start_line, start_col = ReverseCloseExpression(<br></td></tr
><tr
id=sl_svn141_3752

><td class="source">          clean_lines, func_line - 1, end_col)<br></td></tr
><tr
id=sl_svn141_3753

><td class="source">      if start_col &gt; -1:<br></td></tr
><tr
id=sl_svn141_3754

><td class="source">        start_col += 1  # Skip the opening bracket<br></td></tr
><tr
id=sl_svn141_3755

><td class="source">        while start_line &lt; func_line - 1:<br></td></tr
><tr
id=sl_svn141_3756

><td class="source">          argument_list += clean_lines.elided[start_line][start_col:]<br></td></tr
><tr
id=sl_svn141_3757

><td class="source">          start_col = 0<br></td></tr
><tr
id=sl_svn141_3758

><td class="source">          start_line += 1<br></td></tr
><tr
id=sl_svn141_3759

><td class="source">        argument_list += clean_lines.elided[func_line - 1][start_col:end_col]<br></td></tr
><tr
id=sl_svn141_3760

><td class="source"><br></td></tr
><tr
id=sl_svn141_3761

><td class="source">  if not argument_list:<br></td></tr
><tr
id=sl_svn141_3762

><td class="source">    return set()<br></td></tr
><tr
id=sl_svn141_3763

><td class="source"><br></td></tr
><tr
id=sl_svn141_3764

><td class="source">  # Extract type names<br></td></tr
><tr
id=sl_svn141_3765

><td class="source">  typenames = set()<br></td></tr
><tr
id=sl_svn141_3766

><td class="source">  while True:<br></td></tr
><tr
id=sl_svn141_3767

><td class="source">    match = Match(r&#39;^[,\s]*(?:typename|class)(?:\.\.\.)?\s+(\w+)(.*)$&#39;,<br></td></tr
><tr
id=sl_svn141_3768

><td class="source">                  argument_list)<br></td></tr
><tr
id=sl_svn141_3769

><td class="source">    if not match:<br></td></tr
><tr
id=sl_svn141_3770

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_3771

><td class="source">    typenames.add(match.group(1))<br></td></tr
><tr
id=sl_svn141_3772

><td class="source">    argument_list = match.group(2)<br></td></tr
><tr
id=sl_svn141_3773

><td class="source">  return typenames<br></td></tr
><tr
id=sl_svn141_3774

><td class="source"><br></td></tr
><tr
id=sl_svn141_3775

><td class="source"><br></td></tr
><tr
id=sl_svn141_3776

><td class="source">def CheckRValueReference(filename, clean_lines, linenum, nesting_state, error):<br></td></tr
><tr
id=sl_svn141_3777

><td class="source">  &quot;&quot;&quot;Check for rvalue references.<br></td></tr
><tr
id=sl_svn141_3778

><td class="source"><br></td></tr
><tr
id=sl_svn141_3779

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3780

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3781

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3782

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3783

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_3784

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_3785

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3786

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3787

><td class="source">  # Find lines missing spaces around &amp;&amp;.<br></td></tr
><tr
id=sl_svn141_3788

><td class="source">  # TODO(unknown): currently we don&#39;t check for rvalue references<br></td></tr
><tr
id=sl_svn141_3789

><td class="source">  # with spaces surrounding the &amp;&amp; to avoid false positives with<br></td></tr
><tr
id=sl_svn141_3790

><td class="source">  # boolean expressions.<br></td></tr
><tr
id=sl_svn141_3791

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_3792

><td class="source">  match = Match(r&#39;^(.*\S)&amp;&amp;&#39;, line)<br></td></tr
><tr
id=sl_svn141_3793

><td class="source">  if not match:<br></td></tr
><tr
id=sl_svn141_3794

><td class="source">    match = Match(r&#39;(.*)&amp;&amp;\S&#39;, line)<br></td></tr
><tr
id=sl_svn141_3795

><td class="source">  if (not match) or &#39;(&amp;&amp;)&#39; in line or Search(r&#39;\boperator\s*$&#39;, match.group(1)):<br></td></tr
><tr
id=sl_svn141_3796

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_3797

><td class="source"><br></td></tr
><tr
id=sl_svn141_3798

><td class="source">  # Either poorly formed &amp;&amp; or an rvalue reference, check the context<br></td></tr
><tr
id=sl_svn141_3799

><td class="source">  # to get a more accurate error message.  Mostly we want to determine<br></td></tr
><tr
id=sl_svn141_3800

><td class="source">  # if what&#39;s to the left of &quot;&amp;&amp;&quot; is a type or not.<br></td></tr
><tr
id=sl_svn141_3801

><td class="source">  typenames = GetTemplateArgs(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_3802

><td class="source">  and_pos = len(match.group(1))<br></td></tr
><tr
id=sl_svn141_3803

><td class="source">  if IsRValueType(typenames, clean_lines, nesting_state, linenum, and_pos):<br></td></tr
><tr
id=sl_svn141_3804

><td class="source">    if not IsRValueAllowed(clean_lines, linenum, typenames):<br></td></tr
><tr
id=sl_svn141_3805

><td class="source">      error(filename, linenum, &#39;build/c++11&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3806

><td class="source">            &#39;RValue references are an unapproved C++ feature.&#39;)<br></td></tr
><tr
id=sl_svn141_3807

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_3808

><td class="source">    error(filename, linenum, &#39;whitespace/operators&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3809

><td class="source">          &#39;Missing spaces around &amp;&amp;&#39;)<br></td></tr
><tr
id=sl_svn141_3810

><td class="source"><br></td></tr
><tr
id=sl_svn141_3811

><td class="source"><br></td></tr
><tr
id=sl_svn141_3812

><td class="source">def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):<br></td></tr
><tr
id=sl_svn141_3813

><td class="source">  &quot;&quot;&quot;Checks for additional blank line issues related to sections.<br></td></tr
><tr
id=sl_svn141_3814

><td class="source"><br></td></tr
><tr
id=sl_svn141_3815

><td class="source">  Currently the only thing checked here is blank line before protected/private.<br></td></tr
><tr
id=sl_svn141_3816

><td class="source"><br></td></tr
><tr
id=sl_svn141_3817

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3818

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3819

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3820

><td class="source">    class_info: A _ClassInfo objects.<br></td></tr
><tr
id=sl_svn141_3821

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3822

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3823

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3824

><td class="source">  # Skip checks if the class is small, where small means 25 lines or less.<br></td></tr
><tr
id=sl_svn141_3825

><td class="source">  # 25 lines seems like a good cutoff since that&#39;s the usual height of<br></td></tr
><tr
id=sl_svn141_3826

><td class="source">  # terminals, and any class that can&#39;t fit in one screen can&#39;t really<br></td></tr
><tr
id=sl_svn141_3827

><td class="source">  # be considered &quot;small&quot;.<br></td></tr
><tr
id=sl_svn141_3828

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3829

><td class="source">  # Also skip checks if we are on the first line.  This accounts for<br></td></tr
><tr
id=sl_svn141_3830

><td class="source">  # classes that look like<br></td></tr
><tr
id=sl_svn141_3831

><td class="source">  #   class Foo { public: ... };<br></td></tr
><tr
id=sl_svn141_3832

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_3833

><td class="source">  # If we didn&#39;t find the end of the class, last_line would be zero,<br></td></tr
><tr
id=sl_svn141_3834

><td class="source">  # and the check will be skipped by the first condition.<br></td></tr
><tr
id=sl_svn141_3835

><td class="source">  if (class_info.last_line - class_info.starting_linenum &lt;= 24 or<br></td></tr
><tr
id=sl_svn141_3836

><td class="source">      linenum &lt;= class_info.starting_linenum):<br></td></tr
><tr
id=sl_svn141_3837

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_3838

><td class="source"><br></td></tr
><tr
id=sl_svn141_3839

><td class="source">  matched = Match(r&#39;\s*(public|protected|private):&#39;, clean_lines.lines[linenum])<br></td></tr
><tr
id=sl_svn141_3840

><td class="source">  if matched:<br></td></tr
><tr
id=sl_svn141_3841

><td class="source">    # Issue warning if the line before public/protected/private was<br></td></tr
><tr
id=sl_svn141_3842

><td class="source">    # not a blank line, but don&#39;t do this if the previous line contains<br></td></tr
><tr
id=sl_svn141_3843

><td class="source">    # &quot;class&quot; or &quot;struct&quot;.  This can happen two ways:<br></td></tr
><tr
id=sl_svn141_3844

><td class="source">    #  - We are at the beginning of the class.<br></td></tr
><tr
id=sl_svn141_3845

><td class="source">    #  - We are forward-declaring an inner class that is semantically<br></td></tr
><tr
id=sl_svn141_3846

><td class="source">    #    private, but needed to be public for implementation reasons.<br></td></tr
><tr
id=sl_svn141_3847

><td class="source">    # Also ignores cases where the previous line ends with a backslash as can be<br></td></tr
><tr
id=sl_svn141_3848

><td class="source">    # common when defining classes in C macros.<br></td></tr
><tr
id=sl_svn141_3849

><td class="source">    prev_line = clean_lines.lines[linenum - 1]<br></td></tr
><tr
id=sl_svn141_3850

><td class="source">    if (not IsBlankLine(prev_line) and<br></td></tr
><tr
id=sl_svn141_3851

><td class="source">        not Search(r&#39;\b(class|struct)\b&#39;, prev_line) and<br></td></tr
><tr
id=sl_svn141_3852

><td class="source">        not Search(r&#39;\\$&#39;, prev_line)):<br></td></tr
><tr
id=sl_svn141_3853

><td class="source">      # Try a bit harder to find the beginning of the class.  This is to<br></td></tr
><tr
id=sl_svn141_3854

><td class="source">      # account for multi-line base-specifier lists, e.g.:<br></td></tr
><tr
id=sl_svn141_3855

><td class="source">      #   class Derived<br></td></tr
><tr
id=sl_svn141_3856

><td class="source">      #       : public Base {<br></td></tr
><tr
id=sl_svn141_3857

><td class="source">      end_class_head = class_info.starting_linenum<br></td></tr
><tr
id=sl_svn141_3858

><td class="source">      for i in range(class_info.starting_linenum, linenum):<br></td></tr
><tr
id=sl_svn141_3859

><td class="source">        if Search(r&#39;\{\s*$&#39;, clean_lines.lines[i]):<br></td></tr
><tr
id=sl_svn141_3860

><td class="source">          end_class_head = i<br></td></tr
><tr
id=sl_svn141_3861

><td class="source">          break<br></td></tr
><tr
id=sl_svn141_3862

><td class="source">      if end_class_head &lt; linenum - 1:<br></td></tr
><tr
id=sl_svn141_3863

><td class="source">        error(filename, linenum, &#39;whitespace/blank_line&#39;, 3,<br></td></tr
><tr
id=sl_svn141_3864

><td class="source">              &#39;&quot;%s:&quot; should be preceded by a blank line&#39; % matched.group(1))<br></td></tr
><tr
id=sl_svn141_3865

><td class="source"><br></td></tr
><tr
id=sl_svn141_3866

><td class="source"><br></td></tr
><tr
id=sl_svn141_3867

><td class="source">def GetPreviousNonBlankLine(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_3868

><td class="source">  &quot;&quot;&quot;Return the most recent non-blank line and its line number.<br></td></tr
><tr
id=sl_svn141_3869

><td class="source"><br></td></tr
><tr
id=sl_svn141_3870

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3871

><td class="source">    clean_lines: A CleansedLines instance containing the file contents.<br></td></tr
><tr
id=sl_svn141_3872

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3873

><td class="source"><br></td></tr
><tr
id=sl_svn141_3874

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_3875

><td class="source">    A tuple with two elements.  The first element is the contents of the last<br></td></tr
><tr
id=sl_svn141_3876

><td class="source">    non-blank line before the current line, or the empty string if this is the<br></td></tr
><tr
id=sl_svn141_3877

><td class="source">    first non-blank line.  The second is the line number of that line, or -1<br></td></tr
><tr
id=sl_svn141_3878

><td class="source">    if this is the first non-blank line.<br></td></tr
><tr
id=sl_svn141_3879

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3880

><td class="source"><br></td></tr
><tr
id=sl_svn141_3881

><td class="source">  prevlinenum = linenum - 1<br></td></tr
><tr
id=sl_svn141_3882

><td class="source">  while prevlinenum &gt;= 0:<br></td></tr
><tr
id=sl_svn141_3883

><td class="source">    prevline = clean_lines.elided[prevlinenum]<br></td></tr
><tr
id=sl_svn141_3884

><td class="source">    if not IsBlankLine(prevline):     # if not a blank line...<br></td></tr
><tr
id=sl_svn141_3885

><td class="source">      return (prevline, prevlinenum)<br></td></tr
><tr
id=sl_svn141_3886

><td class="source">    prevlinenum -= 1<br></td></tr
><tr
id=sl_svn141_3887

><td class="source">  return (&#39;&#39;, -1)<br></td></tr
><tr
id=sl_svn141_3888

><td class="source"><br></td></tr
><tr
id=sl_svn141_3889

><td class="source"><br></td></tr
><tr
id=sl_svn141_3890

><td class="source">def CheckBraces(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_3891

><td class="source">  &quot;&quot;&quot;Looks for misplaced braces (e.g. at the end of line).<br></td></tr
><tr
id=sl_svn141_3892

><td class="source"><br></td></tr
><tr
id=sl_svn141_3893

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_3894

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_3895

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_3896

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_3897

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_3898

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_3899

><td class="source"><br></td></tr
><tr
id=sl_svn141_3900

><td class="source">  line = clean_lines.elided[linenum]        # get rid of comments and strings<br></td></tr
><tr
id=sl_svn141_3901

><td class="source"><br></td></tr
><tr
id=sl_svn141_3902

><td class="source">  if Match(r&#39;\s*{\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_3903

><td class="source">    # We allow an open brace to start a line in the case where someone is using<br></td></tr
><tr
id=sl_svn141_3904

><td class="source">    # braces in a block to explicitly create a new scope, which is commonly used<br></td></tr
><tr
id=sl_svn141_3905

><td class="source">    # to control the lifetime of stack-allocated variables.  Braces are also<br></td></tr
><tr
id=sl_svn141_3906

><td class="source">    # used for brace initializers inside function calls.  We don&#39;t detect this<br></td></tr
><tr
id=sl_svn141_3907

><td class="source">    # perfectly: we just don&#39;t complain if the last non-whitespace character on<br></td></tr
><tr
id=sl_svn141_3908

><td class="source">    # the previous non-blank line is &#39;,&#39;, &#39;;&#39;, &#39;:&#39;, &#39;(&#39;, &#39;{&#39;, or &#39;}&#39;, or if the<br></td></tr
><tr
id=sl_svn141_3909

><td class="source">    # previous line starts a preprocessor block.<br></td></tr
><tr
id=sl_svn141_3910

><td class="source">    prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]<br></td></tr
><tr
id=sl_svn141_3911

><td class="source">    if (not Search(r&#39;[,;:}{(]\s*$&#39;, prevline) and<br></td></tr
><tr
id=sl_svn141_3912

><td class="source">        not Match(r&#39;\s*#&#39;, prevline)):<br></td></tr
><tr
id=sl_svn141_3913

><td class="source">      error(filename, linenum, &#39;whitespace/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3914

><td class="source">            &#39;{ should almost always be at the end of the previous line&#39;)<br></td></tr
><tr
id=sl_svn141_3915

><td class="source"><br></td></tr
><tr
id=sl_svn141_3916

><td class="source">  # An else clause should be on the same line as the preceding closing brace.<br></td></tr
><tr
id=sl_svn141_3917

><td class="source">  if Match(r&#39;\s*else\b\s*(?:if\b|\{|$)&#39;, line):<br></td></tr
><tr
id=sl_svn141_3918

><td class="source">    prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]<br></td></tr
><tr
id=sl_svn141_3919

><td class="source">    if Match(r&#39;\s*}\s*$&#39;, prevline):<br></td></tr
><tr
id=sl_svn141_3920

><td class="source">      error(filename, linenum, &#39;whitespace/newline&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3921

><td class="source">            &#39;An else should appear on the same line as the preceding }&#39;)<br></td></tr
><tr
id=sl_svn141_3922

><td class="source"><br></td></tr
><tr
id=sl_svn141_3923

><td class="source">  # If braces come on one side of an else, they should be on both.<br></td></tr
><tr
id=sl_svn141_3924

><td class="source">  # However, we have to worry about &quot;else if&quot; that spans multiple lines!<br></td></tr
><tr
id=sl_svn141_3925

><td class="source">  if Search(r&#39;else if\s*\(&#39;, line):       # could be multi-line if<br></td></tr
><tr
id=sl_svn141_3926

><td class="source">    brace_on_left = bool(Search(r&#39;}\s*else if\s*\(&#39;, line))<br></td></tr
><tr
id=sl_svn141_3927

><td class="source">    # find the ( after the if<br></td></tr
><tr
id=sl_svn141_3928

><td class="source">    pos = line.find(&#39;else if&#39;)<br></td></tr
><tr
id=sl_svn141_3929

><td class="source">    pos = line.find(&#39;(&#39;, pos)<br></td></tr
><tr
id=sl_svn141_3930

><td class="source">    if pos &gt; 0:<br></td></tr
><tr
id=sl_svn141_3931

><td class="source">      (endline, _, endpos) = CloseExpression(clean_lines, linenum, pos)<br></td></tr
><tr
id=sl_svn141_3932

><td class="source">      brace_on_right = endline[endpos:].find(&#39;{&#39;) != -1<br></td></tr
><tr
id=sl_svn141_3933

><td class="source">      if brace_on_left != brace_on_right:    # must be brace after if<br></td></tr
><tr
id=sl_svn141_3934

><td class="source">        error(filename, linenum, &#39;readability/braces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3935

><td class="source">              &#39;If an else has a brace on one side, it should have it on both&#39;)<br></td></tr
><tr
id=sl_svn141_3936

><td class="source">  elif Search(r&#39;}\s*else[^{]*$&#39;, line) or Match(r&#39;[^}]*else\s*{&#39;, line):<br></td></tr
><tr
id=sl_svn141_3937

><td class="source">    error(filename, linenum, &#39;readability/braces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_3938

><td class="source">          &#39;If an else has a brace on one side, it should have it on both&#39;)<br></td></tr
><tr
id=sl_svn141_3939

><td class="source"><br></td></tr
><tr
id=sl_svn141_3940

><td class="source">  # Likewise, an else should never have the else clause on the same line<br></td></tr
><tr
id=sl_svn141_3941

><td class="source">  if Search(r&#39;\belse [^\s{]&#39;, line) and not Search(r&#39;\belse if\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_3942

><td class="source">    error(filename, linenum, &#39;whitespace/newline&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3943

><td class="source">          &#39;Else clause should never be on same line as else (use 2 lines)&#39;)<br></td></tr
><tr
id=sl_svn141_3944

><td class="source"><br></td></tr
><tr
id=sl_svn141_3945

><td class="source">  # In the same way, a do/while should never be on one line<br></td></tr
><tr
id=sl_svn141_3946

><td class="source">  if Match(r&#39;\s*do [^\s{]&#39;, line):<br></td></tr
><tr
id=sl_svn141_3947

><td class="source">    error(filename, linenum, &#39;whitespace/newline&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3948

><td class="source">          &#39;do/while clauses should not be on a single line&#39;)<br></td></tr
><tr
id=sl_svn141_3949

><td class="source"><br></td></tr
><tr
id=sl_svn141_3950

><td class="source">  # Check single-line if/else bodies. The style guide says &#39;curly braces are not<br></td></tr
><tr
id=sl_svn141_3951

><td class="source">  # required for single-line statements&#39;. We additionally allow multi-line,<br></td></tr
><tr
id=sl_svn141_3952

><td class="source">  # single statements, but we reject anything with more than one semicolon in<br></td></tr
><tr
id=sl_svn141_3953

><td class="source">  # it. This means that the first semicolon after the if should be at the end of<br></td></tr
><tr
id=sl_svn141_3954

><td class="source">  # its line, and the line after that should have an indent level equal to or<br></td></tr
><tr
id=sl_svn141_3955

><td class="source">  # lower than the if. We also check for ambiguous if/else nesting without<br></td></tr
><tr
id=sl_svn141_3956

><td class="source">  # braces.<br></td></tr
><tr
id=sl_svn141_3957

><td class="source">  if_else_match = Search(r&#39;\b(if\s*\(|else\b)&#39;, line)<br></td></tr
><tr
id=sl_svn141_3958

><td class="source">  if if_else_match and not Match(r&#39;\s*#&#39;, line):<br></td></tr
><tr
id=sl_svn141_3959

><td class="source">    if_indent = GetIndentLevel(line)<br></td></tr
><tr
id=sl_svn141_3960

><td class="source">    endline, endlinenum, endpos = line, linenum, if_else_match.end()<br></td></tr
><tr
id=sl_svn141_3961

><td class="source">    if_match = Search(r&#39;\bif\s*\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_3962

><td class="source">    if if_match:<br></td></tr
><tr
id=sl_svn141_3963

><td class="source">      # This could be a multiline if condition, so find the end first.<br></td></tr
><tr
id=sl_svn141_3964

><td class="source">      pos = if_match.end() - 1<br></td></tr
><tr
id=sl_svn141_3965

><td class="source">      (endline, endlinenum, endpos) = CloseExpression(clean_lines, linenum, pos)<br></td></tr
><tr
id=sl_svn141_3966

><td class="source">    # Check for an opening brace, either directly after the if or on the next<br></td></tr
><tr
id=sl_svn141_3967

><td class="source">    # line. If found, this isn&#39;t a single-statement conditional.<br></td></tr
><tr
id=sl_svn141_3968

><td class="source">    if (not Match(r&#39;\s*{&#39;, endline[endpos:])<br></td></tr
><tr
id=sl_svn141_3969

><td class="source">        and not (Match(r&#39;\s*$&#39;, endline[endpos:])<br></td></tr
><tr
id=sl_svn141_3970

><td class="source">                 and endlinenum &lt; (len(clean_lines.elided) - 1)<br></td></tr
><tr
id=sl_svn141_3971

><td class="source">                 and Match(r&#39;\s*{&#39;, clean_lines.elided[endlinenum + 1]))):<br></td></tr
><tr
id=sl_svn141_3972

><td class="source">      while (endlinenum &lt; len(clean_lines.elided)<br></td></tr
><tr
id=sl_svn141_3973

><td class="source">             and &#39;;&#39; not in clean_lines.elided[endlinenum][endpos:]):<br></td></tr
><tr
id=sl_svn141_3974

><td class="source">        endlinenum += 1<br></td></tr
><tr
id=sl_svn141_3975

><td class="source">        endpos = 0<br></td></tr
><tr
id=sl_svn141_3976

><td class="source">      if endlinenum &lt; len(clean_lines.elided):<br></td></tr
><tr
id=sl_svn141_3977

><td class="source">        endline = clean_lines.elided[endlinenum]<br></td></tr
><tr
id=sl_svn141_3978

><td class="source">        # We allow a mix of whitespace and closing braces (e.g. for one-liner<br></td></tr
><tr
id=sl_svn141_3979

><td class="source">        # methods) and a single \ after the semicolon (for macros)<br></td></tr
><tr
id=sl_svn141_3980

><td class="source">        endpos = endline.find(&#39;;&#39;)<br></td></tr
><tr
id=sl_svn141_3981

><td class="source">        if not Match(r&#39;;[\s}]*(\\?)$&#39;, endline[endpos:]):<br></td></tr
><tr
id=sl_svn141_3982

><td class="source">          # Semicolon isn&#39;t the last character, there&#39;s something trailing.<br></td></tr
><tr
id=sl_svn141_3983

><td class="source">          # Output a warning if the semicolon is not contained inside<br></td></tr
><tr
id=sl_svn141_3984

><td class="source">          # a lambda expression.<br></td></tr
><tr
id=sl_svn141_3985

><td class="source">          if not Match(r&#39;^[^{};]*\[[^\[\]]*\][^{}]*\{[^{}]*\}\s*\)*[;,]\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_3986

><td class="source">                       endline):<br></td></tr
><tr
id=sl_svn141_3987

><td class="source">            error(filename, linenum, &#39;readability/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3988

><td class="source">                  &#39;If/else bodies with multiple statements require braces&#39;)<br></td></tr
><tr
id=sl_svn141_3989

><td class="source">        elif endlinenum &lt; len(clean_lines.elided) - 1:<br></td></tr
><tr
id=sl_svn141_3990

><td class="source">          # Make sure the next line is dedented<br></td></tr
><tr
id=sl_svn141_3991

><td class="source">          next_line = clean_lines.elided[endlinenum + 1]<br></td></tr
><tr
id=sl_svn141_3992

><td class="source">          next_indent = GetIndentLevel(next_line)<br></td></tr
><tr
id=sl_svn141_3993

><td class="source">          # With ambiguous nested if statements, this will error out on the<br></td></tr
><tr
id=sl_svn141_3994

><td class="source">          # if that *doesn&#39;t* match the else, regardless of whether it&#39;s the<br></td></tr
><tr
id=sl_svn141_3995

><td class="source">          # inner one or outer one.<br></td></tr
><tr
id=sl_svn141_3996

><td class="source">          if (if_match and Match(r&#39;\s*else\b&#39;, next_line)<br></td></tr
><tr
id=sl_svn141_3997

><td class="source">              and next_indent != if_indent):<br></td></tr
><tr
id=sl_svn141_3998

><td class="source">            error(filename, linenum, &#39;readability/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_3999

><td class="source">                  &#39;Else clause should be indented at the same level as if. &#39;<br></td></tr
><tr
id=sl_svn141_4000

><td class="source">                  &#39;Ambiguous nested if/else chains require braces.&#39;)<br></td></tr
><tr
id=sl_svn141_4001

><td class="source">          elif next_indent &gt; if_indent:<br></td></tr
><tr
id=sl_svn141_4002

><td class="source">            error(filename, linenum, &#39;readability/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4003

><td class="source">                  &#39;If/else bodies with multiple statements require braces&#39;)<br></td></tr
><tr
id=sl_svn141_4004

><td class="source"><br></td></tr
><tr
id=sl_svn141_4005

><td class="source"><br></td></tr
><tr
id=sl_svn141_4006

><td class="source">def CheckTrailingSemicolon(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4007

><td class="source">  &quot;&quot;&quot;Looks for redundant trailing semicolon.<br></td></tr
><tr
id=sl_svn141_4008

><td class="source"><br></td></tr
><tr
id=sl_svn141_4009

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4010

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4011

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4012

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4013

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4014

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4015

><td class="source"><br></td></tr
><tr
id=sl_svn141_4016

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4017

><td class="source"><br></td></tr
><tr
id=sl_svn141_4018

><td class="source">  # Block bodies should not be followed by a semicolon.  Due to C++11<br></td></tr
><tr
id=sl_svn141_4019

><td class="source">  # brace initialization, there are more places where semicolons are<br></td></tr
><tr
id=sl_svn141_4020

><td class="source">  # required than not, so we use a whitelist approach to check these<br></td></tr
><tr
id=sl_svn141_4021

><td class="source">  # rather than a blacklist.  These are the places where &quot;};&quot; should<br></td></tr
><tr
id=sl_svn141_4022

><td class="source">  # be replaced by just &quot;}&quot;:<br></td></tr
><tr
id=sl_svn141_4023

><td class="source">  # 1. Some flavor of block following closing parenthesis:<br></td></tr
><tr
id=sl_svn141_4024

><td class="source">  #    for (;;) {};<br></td></tr
><tr
id=sl_svn141_4025

><td class="source">  #    while (...) {};<br></td></tr
><tr
id=sl_svn141_4026

><td class="source">  #    switch (...) {};<br></td></tr
><tr
id=sl_svn141_4027

><td class="source">  #    Function(...) {};<br></td></tr
><tr
id=sl_svn141_4028

><td class="source">  #    if (...) {};<br></td></tr
><tr
id=sl_svn141_4029

><td class="source">  #    if (...) else if (...) {};<br></td></tr
><tr
id=sl_svn141_4030

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4031

><td class="source">  # 2. else block:<br></td></tr
><tr
id=sl_svn141_4032

><td class="source">  #    if (...) else {};<br></td></tr
><tr
id=sl_svn141_4033

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4034

><td class="source">  # 3. const member function:<br></td></tr
><tr
id=sl_svn141_4035

><td class="source">  #    Function(...) const {};<br></td></tr
><tr
id=sl_svn141_4036

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4037

><td class="source">  # 4. Block following some statement:<br></td></tr
><tr
id=sl_svn141_4038

><td class="source">  #    x = 42;<br></td></tr
><tr
id=sl_svn141_4039

><td class="source">  #    {};<br></td></tr
><tr
id=sl_svn141_4040

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4041

><td class="source">  # 5. Block at the beginning of a function:<br></td></tr
><tr
id=sl_svn141_4042

><td class="source">  #    Function(...) {<br></td></tr
><tr
id=sl_svn141_4043

><td class="source">  #      {};<br></td></tr
><tr
id=sl_svn141_4044

><td class="source">  #    }<br></td></tr
><tr
id=sl_svn141_4045

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4046

><td class="source">  #    Note that naively checking for the preceding &quot;{&quot; will also match<br></td></tr
><tr
id=sl_svn141_4047

><td class="source">  #    braces inside multi-dimensional arrays, but this is fine since<br></td></tr
><tr
id=sl_svn141_4048

><td class="source">  #    that expression will not contain semicolons.<br></td></tr
><tr
id=sl_svn141_4049

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4050

><td class="source">  # 6. Block following another block:<br></td></tr
><tr
id=sl_svn141_4051

><td class="source">  #    while (true) {}<br></td></tr
><tr
id=sl_svn141_4052

><td class="source">  #    {};<br></td></tr
><tr
id=sl_svn141_4053

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4054

><td class="source">  # 7. End of namespaces:<br></td></tr
><tr
id=sl_svn141_4055

><td class="source">  #    namespace {};<br></td></tr
><tr
id=sl_svn141_4056

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4057

><td class="source">  #    These semicolons seems far more common than other kinds of<br></td></tr
><tr
id=sl_svn141_4058

><td class="source">  #    redundant semicolons, possibly due to people converting classes<br></td></tr
><tr
id=sl_svn141_4059

><td class="source">  #    to namespaces.  For now we do not warn for this case.<br></td></tr
><tr
id=sl_svn141_4060

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4061

><td class="source">  # Try matching case 1 first.<br></td></tr
><tr
id=sl_svn141_4062

><td class="source">  match = Match(r&#39;^(.*\)\s*)\{&#39;, line)<br></td></tr
><tr
id=sl_svn141_4063

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4064

><td class="source">    # Matched closing parenthesis (case 1).  Check the token before the<br></td></tr
><tr
id=sl_svn141_4065

><td class="source">    # matching opening parenthesis, and don&#39;t warn if it looks like a<br></td></tr
><tr
id=sl_svn141_4066

><td class="source">    # macro.  This avoids these false positives:<br></td></tr
><tr
id=sl_svn141_4067

><td class="source">    #  - macro that defines a base class<br></td></tr
><tr
id=sl_svn141_4068

><td class="source">    #  - multi-line macro that defines a base class<br></td></tr
><tr
id=sl_svn141_4069

><td class="source">    #  - macro that defines the whole class-head<br></td></tr
><tr
id=sl_svn141_4070

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_4071

><td class="source">    # But we still issue warnings for macros that we know are safe to<br></td></tr
><tr
id=sl_svn141_4072

><td class="source">    # warn, specifically:<br></td></tr
><tr
id=sl_svn141_4073

><td class="source">    #  - TEST, TEST_F, TEST_P, MATCHER, MATCHER_P<br></td></tr
><tr
id=sl_svn141_4074

><td class="source">    #  - TYPED_TEST<br></td></tr
><tr
id=sl_svn141_4075

><td class="source">    #  - INTERFACE_DEF<br></td></tr
><tr
id=sl_svn141_4076

><td class="source">    #  - EXCLUSIVE_LOCKS_REQUIRED, SHARED_LOCKS_REQUIRED, LOCKS_EXCLUDED:<br></td></tr
><tr
id=sl_svn141_4077

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_4078

><td class="source">    # We implement a whitelist of safe macros instead of a blacklist of<br></td></tr
><tr
id=sl_svn141_4079

><td class="source">    # unsafe macros, even though the latter appears less frequently in<br></td></tr
><tr
id=sl_svn141_4080

><td class="source">    # google code and would have been easier to implement.  This is because<br></td></tr
><tr
id=sl_svn141_4081

><td class="source">    # the downside for getting the whitelist wrong means some extra<br></td></tr
><tr
id=sl_svn141_4082

><td class="source">    # semicolons, while the downside for getting the blacklist wrong<br></td></tr
><tr
id=sl_svn141_4083

><td class="source">    # would result in compile errors.<br></td></tr
><tr
id=sl_svn141_4084

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_4085

><td class="source">    # In addition to macros, we also don&#39;t want to warn on<br></td></tr
><tr
id=sl_svn141_4086

><td class="source">    #  - Compound literals<br></td></tr
><tr
id=sl_svn141_4087

><td class="source">    #  - Lambdas<br></td></tr
><tr
id=sl_svn141_4088

><td class="source">    #  - alignas specifier with anonymous structs:<br></td></tr
><tr
id=sl_svn141_4089

><td class="source">    closing_brace_pos = match.group(1).rfind(&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_4090

><td class="source">    opening_parenthesis = ReverseCloseExpression(<br></td></tr
><tr
id=sl_svn141_4091

><td class="source">        clean_lines, linenum, closing_brace_pos)<br></td></tr
><tr
id=sl_svn141_4092

><td class="source">    if opening_parenthesis[2] &gt; -1:<br></td></tr
><tr
id=sl_svn141_4093

><td class="source">      line_prefix = opening_parenthesis[0][0:opening_parenthesis[2]]<br></td></tr
><tr
id=sl_svn141_4094

><td class="source">      macro = Search(r&#39;\b([A-Z_]+)\s*$&#39;, line_prefix)<br></td></tr
><tr
id=sl_svn141_4095

><td class="source">      func = Match(r&#39;^(.*\])\s*$&#39;, line_prefix)<br></td></tr
><tr
id=sl_svn141_4096

><td class="source">      if ((macro and<br></td></tr
><tr
id=sl_svn141_4097

><td class="source">           macro.group(1) not in (<br></td></tr
><tr
id=sl_svn141_4098

><td class="source">               &#39;TEST&#39;, &#39;TEST_F&#39;, &#39;MATCHER&#39;, &#39;MATCHER_P&#39;, &#39;TYPED_TEST&#39;,<br></td></tr
><tr
id=sl_svn141_4099

><td class="source">               &#39;EXCLUSIVE_LOCKS_REQUIRED&#39;, &#39;SHARED_LOCKS_REQUIRED&#39;,<br></td></tr
><tr
id=sl_svn141_4100

><td class="source">               &#39;LOCKS_EXCLUDED&#39;, &#39;INTERFACE_DEF&#39;)) or<br></td></tr
><tr
id=sl_svn141_4101

><td class="source">          (func and not Search(r&#39;\boperator\s*\[\s*\]&#39;, func.group(1))) or<br></td></tr
><tr
id=sl_svn141_4102

><td class="source">          Search(r&#39;\b(?:struct|union)\s+alignas\s*$&#39;, line_prefix) or<br></td></tr
><tr
id=sl_svn141_4103

><td class="source">          Search(r&#39;\s+=\s*$&#39;, line_prefix)):<br></td></tr
><tr
id=sl_svn141_4104

><td class="source">        match = None<br></td></tr
><tr
id=sl_svn141_4105

><td class="source">    if (match and<br></td></tr
><tr
id=sl_svn141_4106

><td class="source">        opening_parenthesis[1] &gt; 1 and<br></td></tr
><tr
id=sl_svn141_4107

><td class="source">        Search(r&#39;\]\s*$&#39;, clean_lines.elided[opening_parenthesis[1] - 1])):<br></td></tr
><tr
id=sl_svn141_4108

><td class="source">      # Multi-line lambda-expression<br></td></tr
><tr
id=sl_svn141_4109

><td class="source">      match = None<br></td></tr
><tr
id=sl_svn141_4110

><td class="source"><br></td></tr
><tr
id=sl_svn141_4111

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_4112

><td class="source">    # Try matching cases 2-3.<br></td></tr
><tr
id=sl_svn141_4113

><td class="source">    match = Match(r&#39;^(.*(?:else|\)\s*const)\s*)\{&#39;, line)<br></td></tr
><tr
id=sl_svn141_4114

><td class="source">    if not match:<br></td></tr
><tr
id=sl_svn141_4115

><td class="source">      # Try matching cases 4-6.  These are always matched on separate lines.<br></td></tr
><tr
id=sl_svn141_4116

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_4117

><td class="source">      # Note that we can&#39;t simply concatenate the previous line to the<br></td></tr
><tr
id=sl_svn141_4118

><td class="source">      # current line and do a single match, otherwise we may output<br></td></tr
><tr
id=sl_svn141_4119

><td class="source">      # duplicate warnings for the blank line case:<br></td></tr
><tr
id=sl_svn141_4120

><td class="source">      #   if (cond) {<br></td></tr
><tr
id=sl_svn141_4121

><td class="source">      #     // blank line<br></td></tr
><tr
id=sl_svn141_4122

><td class="source">      #   }<br></td></tr
><tr
id=sl_svn141_4123

><td class="source">      prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]<br></td></tr
><tr
id=sl_svn141_4124

><td class="source">      if prevline and Search(r&#39;[;{}]\s*$&#39;, prevline):<br></td></tr
><tr
id=sl_svn141_4125

><td class="source">        match = Match(r&#39;^(\s*)\{&#39;, line)<br></td></tr
><tr
id=sl_svn141_4126

><td class="source"><br></td></tr
><tr
id=sl_svn141_4127

><td class="source">  # Check matching closing brace<br></td></tr
><tr
id=sl_svn141_4128

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4129

><td class="source">    (endline, endlinenum, endpos) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_4130

><td class="source">        clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_4131

><td class="source">    if endpos &gt; -1 and Match(r&#39;^\s*;&#39;, endline[endpos:]):<br></td></tr
><tr
id=sl_svn141_4132

><td class="source">      # Current {} pair is eligible for semicolon check, and we have found<br></td></tr
><tr
id=sl_svn141_4133

><td class="source">      # the redundant semicolon, output warning here.<br></td></tr
><tr
id=sl_svn141_4134

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_4135

><td class="source">      # Note: because we are scanning forward for opening braces, and<br></td></tr
><tr
id=sl_svn141_4136

><td class="source">      # outputting warnings for the matching closing brace, if there are<br></td></tr
><tr
id=sl_svn141_4137

><td class="source">      # nested blocks with trailing semicolons, we will get the error<br></td></tr
><tr
id=sl_svn141_4138

><td class="source">      # messages in reversed order.<br></td></tr
><tr
id=sl_svn141_4139

><td class="source">      error(filename, endlinenum, &#39;readability/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4140

><td class="source">            &quot;You don&#39;t need a ; after a }&quot;)<br></td></tr
><tr
id=sl_svn141_4141

><td class="source"><br></td></tr
><tr
id=sl_svn141_4142

><td class="source"><br></td></tr
><tr
id=sl_svn141_4143

><td class="source">def CheckEmptyBlockBody(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4144

><td class="source">  &quot;&quot;&quot;Look for empty loop/conditional body with only a single semicolon.<br></td></tr
><tr
id=sl_svn141_4145

><td class="source"><br></td></tr
><tr
id=sl_svn141_4146

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4147

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4148

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4149

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4150

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4151

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4152

><td class="source"><br></td></tr
><tr
id=sl_svn141_4153

><td class="source">  # Search for loop keywords at the beginning of the line.  Because only<br></td></tr
><tr
id=sl_svn141_4154

><td class="source">  # whitespaces are allowed before the keywords, this will also ignore most<br></td></tr
><tr
id=sl_svn141_4155

><td class="source">  # do-while-loops, since those lines should start with closing brace.<br></td></tr
><tr
id=sl_svn141_4156

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4157

><td class="source">  # We also check &quot;if&quot; blocks here, since an empty conditional block<br></td></tr
><tr
id=sl_svn141_4158

><td class="source">  # is likely an error.<br></td></tr
><tr
id=sl_svn141_4159

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4160

><td class="source">  matched = Match(r&#39;\s*(for|while|if)\s*\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_4161

><td class="source">  if matched:<br></td></tr
><tr
id=sl_svn141_4162

><td class="source">    # Find the end of the conditional expression<br></td></tr
><tr
id=sl_svn141_4163

><td class="source">    (end_line, end_linenum, end_pos) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_4164

><td class="source">        clean_lines, linenum, line.find(&#39;(&#39;))<br></td></tr
><tr
id=sl_svn141_4165

><td class="source"><br></td></tr
><tr
id=sl_svn141_4166

><td class="source">    # Output warning if what follows the condition expression is a semicolon.<br></td></tr
><tr
id=sl_svn141_4167

><td class="source">    # No warning for all other cases, including whitespace or newline, since we<br></td></tr
><tr
id=sl_svn141_4168

><td class="source">    # have a separate check for semicolons preceded by whitespace.<br></td></tr
><tr
id=sl_svn141_4169

><td class="source">    if end_pos &gt;= 0 and Match(r&#39;;&#39;, end_line[end_pos:]):<br></td></tr
><tr
id=sl_svn141_4170

><td class="source">      if matched.group(1) == &#39;if&#39;:<br></td></tr
><tr
id=sl_svn141_4171

><td class="source">        error(filename, end_linenum, &#39;whitespace/empty_conditional_body&#39;, 5,<br></td></tr
><tr
id=sl_svn141_4172

><td class="source">              &#39;Empty conditional bodies should use {}&#39;)<br></td></tr
><tr
id=sl_svn141_4173

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_4174

><td class="source">        error(filename, end_linenum, &#39;whitespace/empty_loop_body&#39;, 5,<br></td></tr
><tr
id=sl_svn141_4175

><td class="source">              &#39;Empty loop bodies should use {} or continue&#39;)<br></td></tr
><tr
id=sl_svn141_4176

><td class="source"><br></td></tr
><tr
id=sl_svn141_4177

><td class="source"><br></td></tr
><tr
id=sl_svn141_4178

><td class="source">def FindCheckMacro(line):<br></td></tr
><tr
id=sl_svn141_4179

><td class="source">  &quot;&quot;&quot;Find a replaceable CHECK-like macro.<br></td></tr
><tr
id=sl_svn141_4180

><td class="source"><br></td></tr
><tr
id=sl_svn141_4181

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4182

><td class="source">    line: line to search on.<br></td></tr
><tr
id=sl_svn141_4183

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4184

><td class="source">    (macro name, start position), or (None, -1) if no replaceable<br></td></tr
><tr
id=sl_svn141_4185

><td class="source">    macro is found.<br></td></tr
><tr
id=sl_svn141_4186

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4187

><td class="source">  for macro in _CHECK_MACROS:<br></td></tr
><tr
id=sl_svn141_4188

><td class="source">    i = line.find(macro)<br></td></tr
><tr
id=sl_svn141_4189

><td class="source">    if i &gt;= 0:<br></td></tr
><tr
id=sl_svn141_4190

><td class="source">      # Find opening parenthesis.  Do a regular expression match here<br></td></tr
><tr
id=sl_svn141_4191

><td class="source">      # to make sure that we are matching the expected CHECK macro, as<br></td></tr
><tr
id=sl_svn141_4192

><td class="source">      # opposed to some other macro that happens to contain the CHECK<br></td></tr
><tr
id=sl_svn141_4193

><td class="source">      # substring.<br></td></tr
><tr
id=sl_svn141_4194

><td class="source">      matched = Match(r&#39;^(.*\b&#39; + macro + r&#39;\s*)\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_4195

><td class="source">      if not matched:<br></td></tr
><tr
id=sl_svn141_4196

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_4197

><td class="source">      return (macro, len(matched.group(1)))<br></td></tr
><tr
id=sl_svn141_4198

><td class="source">  return (None, -1)<br></td></tr
><tr
id=sl_svn141_4199

><td class="source"><br></td></tr
><tr
id=sl_svn141_4200

><td class="source"><br></td></tr
><tr
id=sl_svn141_4201

><td class="source">def CheckCheck(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4202

><td class="source">  &quot;&quot;&quot;Checks the use of CHECK and EXPECT macros.<br></td></tr
><tr
id=sl_svn141_4203

><td class="source"><br></td></tr
><tr
id=sl_svn141_4204

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4205

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4206

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4207

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4208

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4209

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4210

><td class="source"><br></td></tr
><tr
id=sl_svn141_4211

><td class="source">  # Decide the set of replacement macros that should be suggested<br></td></tr
><tr
id=sl_svn141_4212

><td class="source">  lines = clean_lines.elided<br></td></tr
><tr
id=sl_svn141_4213

><td class="source">  (check_macro, start_pos) = FindCheckMacro(lines[linenum])<br></td></tr
><tr
id=sl_svn141_4214

><td class="source">  if not check_macro:<br></td></tr
><tr
id=sl_svn141_4215

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4216

><td class="source"><br></td></tr
><tr
id=sl_svn141_4217

><td class="source">  # Find end of the boolean expression by matching parentheses<br></td></tr
><tr
id=sl_svn141_4218

><td class="source">  (last_line, end_line, end_pos) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_4219

><td class="source">      clean_lines, linenum, start_pos)<br></td></tr
><tr
id=sl_svn141_4220

><td class="source">  if end_pos &lt; 0:<br></td></tr
><tr
id=sl_svn141_4221

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4222

><td class="source"><br></td></tr
><tr
id=sl_svn141_4223

><td class="source">  # If the check macro is followed by something other than a<br></td></tr
><tr
id=sl_svn141_4224

><td class="source">  # semicolon, assume users will log their own custom error messages<br></td></tr
><tr
id=sl_svn141_4225

><td class="source">  # and don&#39;t suggest any replacements.<br></td></tr
><tr
id=sl_svn141_4226

><td class="source">  if not Match(r&#39;\s*;&#39;, last_line[end_pos:]):<br></td></tr
><tr
id=sl_svn141_4227

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4228

><td class="source"><br></td></tr
><tr
id=sl_svn141_4229

><td class="source">  if linenum == end_line:<br></td></tr
><tr
id=sl_svn141_4230

><td class="source">    expression = lines[linenum][start_pos + 1:end_pos - 1]<br></td></tr
><tr
id=sl_svn141_4231

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_4232

><td class="source">    expression = lines[linenum][start_pos + 1:]<br></td></tr
><tr
id=sl_svn141_4233

><td class="source">    for i in xrange(linenum + 1, end_line):<br></td></tr
><tr
id=sl_svn141_4234

><td class="source">      expression += lines[i]<br></td></tr
><tr
id=sl_svn141_4235

><td class="source">    expression += last_line[0:end_pos - 1]<br></td></tr
><tr
id=sl_svn141_4236

><td class="source"><br></td></tr
><tr
id=sl_svn141_4237

><td class="source">  # Parse expression so that we can take parentheses into account.<br></td></tr
><tr
id=sl_svn141_4238

><td class="source">  # This avoids false positives for inputs like &quot;CHECK((a &lt; 4) == b)&quot;,<br></td></tr
><tr
id=sl_svn141_4239

><td class="source">  # which is not replaceable by CHECK_LE.<br></td></tr
><tr
id=sl_svn141_4240

><td class="source">  lhs = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_4241

><td class="source">  rhs = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_4242

><td class="source">  operator = None<br></td></tr
><tr
id=sl_svn141_4243

><td class="source">  while expression:<br></td></tr
><tr
id=sl_svn141_4244

><td class="source">    matched = Match(r&#39;^\s*(&lt;&lt;|&lt;&lt;=|&gt;&gt;|&gt;&gt;=|-&gt;\*|-&gt;|&amp;&amp;|\|\||&#39;<br></td></tr
><tr
id=sl_svn141_4245

><td class="source">                    r&#39;==|!=|&gt;=|&gt;|&lt;=|&lt;|\()(.*)$&#39;, expression)<br></td></tr
><tr
id=sl_svn141_4246

><td class="source">    if matched:<br></td></tr
><tr
id=sl_svn141_4247

><td class="source">      token = matched.group(1)<br></td></tr
><tr
id=sl_svn141_4248

><td class="source">      if token == &#39;(&#39;:<br></td></tr
><tr
id=sl_svn141_4249

><td class="source">        # Parenthesized operand<br></td></tr
><tr
id=sl_svn141_4250

><td class="source">        expression = matched.group(2)<br></td></tr
><tr
id=sl_svn141_4251

><td class="source">        (end, _) = FindEndOfExpressionInLine(expression, 0, [&#39;(&#39;])<br></td></tr
><tr
id=sl_svn141_4252

><td class="source">        if end &lt; 0:<br></td></tr
><tr
id=sl_svn141_4253

><td class="source">          return  # Unmatched parenthesis<br></td></tr
><tr
id=sl_svn141_4254

><td class="source">        lhs += &#39;(&#39; + expression[0:end]<br></td></tr
><tr
id=sl_svn141_4255

><td class="source">        expression = expression[end:]<br></td></tr
><tr
id=sl_svn141_4256

><td class="source">      elif token in (&#39;&amp;&amp;&#39;, &#39;||&#39;):<br></td></tr
><tr
id=sl_svn141_4257

><td class="source">        # Logical and/or operators.  This means the expression<br></td></tr
><tr
id=sl_svn141_4258

><td class="source">        # contains more than one term, for example:<br></td></tr
><tr
id=sl_svn141_4259

><td class="source">        #   CHECK(42 &lt; a &amp;&amp; a &lt; b);<br></td></tr
><tr
id=sl_svn141_4260

><td class="source">        #<br></td></tr
><tr
id=sl_svn141_4261

><td class="source">        # These are not replaceable with CHECK_LE, so bail out early.<br></td></tr
><tr
id=sl_svn141_4262

><td class="source">        return<br></td></tr
><tr
id=sl_svn141_4263

><td class="source">      elif token in (&#39;&lt;&lt;&#39;, &#39;&lt;&lt;=&#39;, &#39;&gt;&gt;&#39;, &#39;&gt;&gt;=&#39;, &#39;-&gt;*&#39;, &#39;-&gt;&#39;):<br></td></tr
><tr
id=sl_svn141_4264

><td class="source">        # Non-relational operator<br></td></tr
><tr
id=sl_svn141_4265

><td class="source">        lhs += token<br></td></tr
><tr
id=sl_svn141_4266

><td class="source">        expression = matched.group(2)<br></td></tr
><tr
id=sl_svn141_4267

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_4268

><td class="source">        # Relational operator<br></td></tr
><tr
id=sl_svn141_4269

><td class="source">        operator = token<br></td></tr
><tr
id=sl_svn141_4270

><td class="source">        rhs = matched.group(2)<br></td></tr
><tr
id=sl_svn141_4271

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_4272

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_4273

><td class="source">      # Unparenthesized operand.  Instead of appending to lhs one character<br></td></tr
><tr
id=sl_svn141_4274

><td class="source">      # at a time, we do another regular expression match to consume several<br></td></tr
><tr
id=sl_svn141_4275

><td class="source">      # characters at once if possible.  Trivial benchmark shows that this<br></td></tr
><tr
id=sl_svn141_4276

><td class="source">      # is more efficient when the operands are longer than a single<br></td></tr
><tr
id=sl_svn141_4277

><td class="source">      # character, which is generally the case.<br></td></tr
><tr
id=sl_svn141_4278

><td class="source">      matched = Match(r&#39;^([^-=!&lt;&gt;()&amp;|]+)(.*)$&#39;, expression)<br></td></tr
><tr
id=sl_svn141_4279

><td class="source">      if not matched:<br></td></tr
><tr
id=sl_svn141_4280

><td class="source">        matched = Match(r&#39;^(\s*\S)(.*)$&#39;, expression)<br></td></tr
><tr
id=sl_svn141_4281

><td class="source">        if not matched:<br></td></tr
><tr
id=sl_svn141_4282

><td class="source">          break<br></td></tr
><tr
id=sl_svn141_4283

><td class="source">      lhs += matched.group(1)<br></td></tr
><tr
id=sl_svn141_4284

><td class="source">      expression = matched.group(2)<br></td></tr
><tr
id=sl_svn141_4285

><td class="source"><br></td></tr
><tr
id=sl_svn141_4286

><td class="source">  # Only apply checks if we got all parts of the boolean expression<br></td></tr
><tr
id=sl_svn141_4287

><td class="source">  if not (lhs and operator and rhs):<br></td></tr
><tr
id=sl_svn141_4288

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4289

><td class="source"><br></td></tr
><tr
id=sl_svn141_4290

><td class="source">  # Check that rhs do not contain logical operators.  We already know<br></td></tr
><tr
id=sl_svn141_4291

><td class="source">  # that lhs is fine since the loop above parses out &amp;&amp; and ||.<br></td></tr
><tr
id=sl_svn141_4292

><td class="source">  if rhs.find(&#39;&amp;&amp;&#39;) &gt; -1 or rhs.find(&#39;||&#39;) &gt; -1:<br></td></tr
><tr
id=sl_svn141_4293

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4294

><td class="source"><br></td></tr
><tr
id=sl_svn141_4295

><td class="source">  # At least one of the operands must be a constant literal.  This is<br></td></tr
><tr
id=sl_svn141_4296

><td class="source">  # to avoid suggesting replacements for unprintable things like<br></td></tr
><tr
id=sl_svn141_4297

><td class="source">  # CHECK(variable != iterator)<br></td></tr
><tr
id=sl_svn141_4298

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4299

><td class="source">  # The following pattern matches decimal, hex integers, strings, and<br></td></tr
><tr
id=sl_svn141_4300

><td class="source">  # characters (in that order).<br></td></tr
><tr
id=sl_svn141_4301

><td class="source">  lhs = lhs.strip()<br></td></tr
><tr
id=sl_svn141_4302

><td class="source">  rhs = rhs.strip()<br></td></tr
><tr
id=sl_svn141_4303

><td class="source">  match_constant = r&#39;^([-+]?(\d+|0[xX][0-9a-fA-F]+)[lLuU]{0,3}|&quot;.*&quot;|\&#39;.*\&#39;)$&#39;<br></td></tr
><tr
id=sl_svn141_4304

><td class="source">  if Match(match_constant, lhs) or Match(match_constant, rhs):<br></td></tr
><tr
id=sl_svn141_4305

><td class="source">    # Note: since we know both lhs and rhs, we can provide a more<br></td></tr
><tr
id=sl_svn141_4306

><td class="source">    # descriptive error message like:<br></td></tr
><tr
id=sl_svn141_4307

><td class="source">    #   Consider using CHECK_EQ(x, 42) instead of CHECK(x == 42)<br></td></tr
><tr
id=sl_svn141_4308

><td class="source">    # Instead of:<br></td></tr
><tr
id=sl_svn141_4309

><td class="source">    #   Consider using CHECK_EQ instead of CHECK(a == b)<br></td></tr
><tr
id=sl_svn141_4310

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_4311

><td class="source">    # We are still keeping the less descriptive message because if lhs<br></td></tr
><tr
id=sl_svn141_4312

><td class="source">    # or rhs gets long, the error message might become unreadable.<br></td></tr
><tr
id=sl_svn141_4313

><td class="source">    error(filename, linenum, &#39;readability/check&#39;, 2,<br></td></tr
><tr
id=sl_svn141_4314

><td class="source">          &#39;Consider using %s instead of %s(a %s b)&#39; % (<br></td></tr
><tr
id=sl_svn141_4315

><td class="source">              _CHECK_REPLACEMENT[check_macro][operator],<br></td></tr
><tr
id=sl_svn141_4316

><td class="source">              check_macro, operator))<br></td></tr
><tr
id=sl_svn141_4317

><td class="source"><br></td></tr
><tr
id=sl_svn141_4318

><td class="source"><br></td></tr
><tr
id=sl_svn141_4319

><td class="source">def CheckAltTokens(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4320

><td class="source">  &quot;&quot;&quot;Check alternative keywords being used in boolean expressions.<br></td></tr
><tr
id=sl_svn141_4321

><td class="source"><br></td></tr
><tr
id=sl_svn141_4322

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4323

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4324

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4325

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4326

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4327

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4328

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4329

><td class="source"><br></td></tr
><tr
id=sl_svn141_4330

><td class="source">  # Avoid preprocessor lines<br></td></tr
><tr
id=sl_svn141_4331

><td class="source">  if Match(r&#39;^\s*#&#39;, line):<br></td></tr
><tr
id=sl_svn141_4332

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4333

><td class="source"><br></td></tr
><tr
id=sl_svn141_4334

><td class="source">  # Last ditch effort to avoid multi-line comments.  This will not help<br></td></tr
><tr
id=sl_svn141_4335

><td class="source">  # if the comment started before the current line or ended after the<br></td></tr
><tr
id=sl_svn141_4336

><td class="source">  # current line, but it catches most of the false positives.  At least,<br></td></tr
><tr
id=sl_svn141_4337

><td class="source">  # it provides a way to workaround this warning for people who use<br></td></tr
><tr
id=sl_svn141_4338

><td class="source">  # multi-line comments in preprocessor macros.<br></td></tr
><tr
id=sl_svn141_4339

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4340

><td class="source">  # TODO(unknown): remove this once cpplint has better support for<br></td></tr
><tr
id=sl_svn141_4341

><td class="source">  # multi-line comments.<br></td></tr
><tr
id=sl_svn141_4342

><td class="source">  if line.find(&#39;/*&#39;) &gt;= 0 or line.find(&#39;*/&#39;) &gt;= 0:<br></td></tr
><tr
id=sl_svn141_4343

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4344

><td class="source"><br></td></tr
><tr
id=sl_svn141_4345

><td class="source">  for match in _ALT_TOKEN_REPLACEMENT_PATTERN.finditer(line):<br></td></tr
><tr
id=sl_svn141_4346

><td class="source">    error(filename, linenum, &#39;readability/alt_tokens&#39;, 2,<br></td></tr
><tr
id=sl_svn141_4347

><td class="source">          &#39;Use operator %s instead of %s&#39; % (<br></td></tr
><tr
id=sl_svn141_4348

><td class="source">              _ALT_TOKEN_REPLACEMENT[match.group(1)], match.group(1)))<br></td></tr
><tr
id=sl_svn141_4349

><td class="source"><br></td></tr
><tr
id=sl_svn141_4350

><td class="source"><br></td></tr
><tr
id=sl_svn141_4351

><td class="source">def GetLineWidth(line):<br></td></tr
><tr
id=sl_svn141_4352

><td class="source">  &quot;&quot;&quot;Determines the width of the line in column positions.<br></td></tr
><tr
id=sl_svn141_4353

><td class="source"><br></td></tr
><tr
id=sl_svn141_4354

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4355

><td class="source">    line: A string, which may be a Unicode string.<br></td></tr
><tr
id=sl_svn141_4356

><td class="source"><br></td></tr
><tr
id=sl_svn141_4357

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4358

><td class="source">    The width of the line in column positions, accounting for Unicode<br></td></tr
><tr
id=sl_svn141_4359

><td class="source">    combining characters and wide characters.<br></td></tr
><tr
id=sl_svn141_4360

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4361

><td class="source">  if isinstance(line, unicode):<br></td></tr
><tr
id=sl_svn141_4362

><td class="source">    width = 0<br></td></tr
><tr
id=sl_svn141_4363

><td class="source">    for uc in unicodedata.normalize(&#39;NFC&#39;, line):<br></td></tr
><tr
id=sl_svn141_4364

><td class="source">      if unicodedata.east_asian_width(uc) in (&#39;W&#39;, &#39;F&#39;):<br></td></tr
><tr
id=sl_svn141_4365

><td class="source">        width += 2<br></td></tr
><tr
id=sl_svn141_4366

><td class="source">      elif not unicodedata.combining(uc):<br></td></tr
><tr
id=sl_svn141_4367

><td class="source">        width += 1<br></td></tr
><tr
id=sl_svn141_4368

><td class="source">    return width<br></td></tr
><tr
id=sl_svn141_4369

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_4370

><td class="source">    return len(line)<br></td></tr
><tr
id=sl_svn141_4371

><td class="source"><br></td></tr
><tr
id=sl_svn141_4372

><td class="source"><br></td></tr
><tr
id=sl_svn141_4373

><td class="source">def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,<br></td></tr
><tr
id=sl_svn141_4374

><td class="source">               error):<br></td></tr
><tr
id=sl_svn141_4375

><td class="source">  &quot;&quot;&quot;Checks rules from the &#39;C++ style rules&#39; section of cppguide.html.<br></td></tr
><tr
id=sl_svn141_4376

><td class="source"><br></td></tr
><tr
id=sl_svn141_4377

><td class="source">  Most of these rules are hard to test (naming, comment style), but we<br></td></tr
><tr
id=sl_svn141_4378

><td class="source">  do what we can.  In particular we check for 2-space indents, line lengths,<br></td></tr
><tr
id=sl_svn141_4379

><td class="source">  tab usage, spaces inside code, etc.<br></td></tr
><tr
id=sl_svn141_4380

><td class="source"><br></td></tr
><tr
id=sl_svn141_4381

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4382

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4383

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4384

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4385

><td class="source">    file_extension: The extension (without the dot) of the filename.<br></td></tr
><tr
id=sl_svn141_4386

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_4387

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_4388

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4389

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4390

><td class="source"><br></td></tr
><tr
id=sl_svn141_4391

><td class="source">  # Don&#39;t use &quot;elided&quot; lines here, otherwise we can&#39;t check commented lines.<br></td></tr
><tr
id=sl_svn141_4392

><td class="source">  # Don&#39;t want to use &quot;raw&quot; either, because we don&#39;t want to check inside C++11<br></td></tr
><tr
id=sl_svn141_4393

><td class="source">  # raw strings,<br></td></tr
><tr
id=sl_svn141_4394

><td class="source">  raw_lines = clean_lines.lines_without_raw_strings<br></td></tr
><tr
id=sl_svn141_4395

><td class="source">  line = raw_lines[linenum]<br></td></tr
><tr
id=sl_svn141_4396

><td class="source"><br></td></tr
><tr
id=sl_svn141_4397

><td class="source">  if line.find(&#39;\t&#39;) != -1:<br></td></tr
><tr
id=sl_svn141_4398

><td class="source">    error(filename, linenum, &#39;whitespace/tab&#39;, 1,<br></td></tr
><tr
id=sl_svn141_4399

><td class="source">          &#39;Tab found; better to use spaces&#39;)<br></td></tr
><tr
id=sl_svn141_4400

><td class="source"><br></td></tr
><tr
id=sl_svn141_4401

><td class="source">  # One or three blank spaces at the beginning of the line is weird; it&#39;s<br></td></tr
><tr
id=sl_svn141_4402

><td class="source">  # hard to reconcile that with 2-space indents.<br></td></tr
><tr
id=sl_svn141_4403

><td class="source">  # NOTE: here are the conditions rob pike used for his tests.  Mine aren&#39;t<br></td></tr
><tr
id=sl_svn141_4404

><td class="source">  # as sophisticated, but it may be worth becoming so:  RLENGTH==initial_spaces<br></td></tr
><tr
id=sl_svn141_4405

><td class="source">  # if(RLENGTH &gt; 20) complain = 0;<br></td></tr
><tr
id=sl_svn141_4406

><td class="source">  # if(match($0, &quot; +(error|private|public|protected):&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4407

><td class="source">  # if(match(prev, &quot;&amp;&amp; *$&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4408

><td class="source">  # if(match(prev, &quot;\\|\\| *$&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4409

><td class="source">  # if(match(prev, &quot;[\&quot;,=&gt;&lt;] *$&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4410

><td class="source">  # if(match($0, &quot; &lt;&lt;&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4411

><td class="source">  # if(match(prev, &quot; +for \\(&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4412

><td class="source">  # if(prevodd &amp;&amp; match(prevprev, &quot; +for \\(&quot;)) complain = 0;<br></td></tr
><tr
id=sl_svn141_4413

><td class="source">  scope_or_label_pattern = r&#39;\s*\w+\s*:\s*\\?$&#39;<br></td></tr
><tr
id=sl_svn141_4414

><td class="source">  classinfo = nesting_state.InnermostClass()<br></td></tr
><tr
id=sl_svn141_4415

><td class="source">  initial_spaces = 0<br></td></tr
><tr
id=sl_svn141_4416

><td class="source">  cleansed_line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4417

><td class="source">  while initial_spaces &lt; len(line) and line[initial_spaces] == &#39; &#39;:<br></td></tr
><tr
id=sl_svn141_4418

><td class="source">    initial_spaces += 1<br></td></tr
><tr
id=sl_svn141_4419

><td class="source">  if line and line[-1].isspace():<br></td></tr
><tr
id=sl_svn141_4420

><td class="source">    error(filename, linenum, &#39;whitespace/end_of_line&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4421

><td class="source">          &#39;Line ends in whitespace.  Consider deleting these extra spaces.&#39;)<br></td></tr
><tr
id=sl_svn141_4422

><td class="source">  # There are certain situations we allow one space, notably for<br></td></tr
><tr
id=sl_svn141_4423

><td class="source">  # section labels, and also lines containing multi-line raw strings.<br></td></tr
><tr
id=sl_svn141_4424

><td class="source">  elif ((initial_spaces == 1 or initial_spaces == 3) and<br></td></tr
><tr
id=sl_svn141_4425

><td class="source">        not Match(scope_or_label_pattern, cleansed_line) and<br></td></tr
><tr
id=sl_svn141_4426

><td class="source">        not (clean_lines.raw_lines[linenum] != line and<br></td></tr
><tr
id=sl_svn141_4427

><td class="source">             Match(r&#39;^\s*&quot;&quot;&#39;, line))):<br></td></tr
><tr
id=sl_svn141_4428

><td class="source">    error(filename, linenum, &#39;whitespace/indent&#39;, 3,<br></td></tr
><tr
id=sl_svn141_4429

><td class="source">          &#39;Weird number of spaces at line-start.  &#39;<br></td></tr
><tr
id=sl_svn141_4430

><td class="source">          &#39;Are you using a 2-space indent?&#39;)<br></td></tr
><tr
id=sl_svn141_4431

><td class="source"><br></td></tr
><tr
id=sl_svn141_4432

><td class="source">  # Check if the line is a header guard.<br></td></tr
><tr
id=sl_svn141_4433

><td class="source">  is_header_guard = False<br></td></tr
><tr
id=sl_svn141_4434

><td class="source">  if file_extension == &#39;h&#39;:<br></td></tr
><tr
id=sl_svn141_4435

><td class="source">    cppvar = GetHeaderGuardCPPVariable(filename)<br></td></tr
><tr
id=sl_svn141_4436

><td class="source">    if (line.startswith(&#39;#ifndef %s&#39; % cppvar) or<br></td></tr
><tr
id=sl_svn141_4437

><td class="source">        line.startswith(&#39;#define %s&#39; % cppvar) or<br></td></tr
><tr
id=sl_svn141_4438

><td class="source">        line.startswith(&#39;#endif  // %s&#39; % cppvar)):<br></td></tr
><tr
id=sl_svn141_4439

><td class="source">      is_header_guard = True<br></td></tr
><tr
id=sl_svn141_4440

><td class="source">  # #include lines and header guards can be long, since there&#39;s no clean way to<br></td></tr
><tr
id=sl_svn141_4441

><td class="source">  # split them.<br></td></tr
><tr
id=sl_svn141_4442

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4443

><td class="source">  # URLs can be long too.  It&#39;s possible to split these, but it makes them<br></td></tr
><tr
id=sl_svn141_4444

><td class="source">  # harder to cut&amp;paste.<br></td></tr
><tr
id=sl_svn141_4445

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4446

><td class="source">  # The &quot;$Id:...$&quot; comment may also get very long without it being the<br></td></tr
><tr
id=sl_svn141_4447

><td class="source">  # developers fault.<br></td></tr
><tr
id=sl_svn141_4448

><td class="source">  if (not line.startswith(&#39;#include&#39;) and not is_header_guard and<br></td></tr
><tr
id=sl_svn141_4449

><td class="source">      not Match(r&#39;^\s*//.*http(s?)://\S*$&#39;, line) and<br></td></tr
><tr
id=sl_svn141_4450

><td class="source">      not Match(r&#39;^// \$Id:.*#[0-9]+ \$$&#39;, line)):<br></td></tr
><tr
id=sl_svn141_4451

><td class="source">    line_width = GetLineWidth(line)<br></td></tr
><tr
id=sl_svn141_4452

><td class="source">    extended_length = int((_line_length * 1.25))<br></td></tr
><tr
id=sl_svn141_4453

><td class="source">    if line_width &gt; extended_length:<br></td></tr
><tr
id=sl_svn141_4454

><td class="source">      error(filename, linenum, &#39;whitespace/line_length&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4455

><td class="source">            &#39;Lines should very rarely be longer than %i characters&#39; %<br></td></tr
><tr
id=sl_svn141_4456

><td class="source">            extended_length)<br></td></tr
><tr
id=sl_svn141_4457

><td class="source">    elif line_width &gt; _line_length:<br></td></tr
><tr
id=sl_svn141_4458

><td class="source">      error(filename, linenum, &#39;whitespace/line_length&#39;, 2,<br></td></tr
><tr
id=sl_svn141_4459

><td class="source">            &#39;Lines should be &lt;= %i characters long&#39; % _line_length)<br></td></tr
><tr
id=sl_svn141_4460

><td class="source"><br></td></tr
><tr
id=sl_svn141_4461

><td class="source">  if (cleansed_line.count(&#39;;&#39;) &gt; 1 and<br></td></tr
><tr
id=sl_svn141_4462

><td class="source">      # for loops are allowed two ;&#39;s (and may run over two lines).<br></td></tr
><tr
id=sl_svn141_4463

><td class="source">      cleansed_line.find(&#39;for&#39;) == -1 and<br></td></tr
><tr
id=sl_svn141_4464

><td class="source">      (GetPreviousNonBlankLine(clean_lines, linenum)[0].find(&#39;for&#39;) == -1 or<br></td></tr
><tr
id=sl_svn141_4465

><td class="source">       GetPreviousNonBlankLine(clean_lines, linenum)[0].find(&#39;;&#39;) != -1) and<br></td></tr
><tr
id=sl_svn141_4466

><td class="source">      # It&#39;s ok to have many commands in a switch case that fits in 1 line<br></td></tr
><tr
id=sl_svn141_4467

><td class="source">      not ((cleansed_line.find(&#39;case &#39;) != -1 or<br></td></tr
><tr
id=sl_svn141_4468

><td class="source">            cleansed_line.find(&#39;default:&#39;) != -1) and<br></td></tr
><tr
id=sl_svn141_4469

><td class="source">           cleansed_line.find(&#39;break;&#39;) != -1)):<br></td></tr
><tr
id=sl_svn141_4470

><td class="source">    error(filename, linenum, &#39;whitespace/newline&#39;, 0,<br></td></tr
><tr
id=sl_svn141_4471

><td class="source">          &#39;More than one command on the same line&#39;)<br></td></tr
><tr
id=sl_svn141_4472

><td class="source"><br></td></tr
><tr
id=sl_svn141_4473

><td class="source">  # Some more style checks<br></td></tr
><tr
id=sl_svn141_4474

><td class="source">  CheckBraces(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4475

><td class="source">  CheckTrailingSemicolon(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4476

><td class="source">  CheckEmptyBlockBody(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4477

><td class="source">  CheckAccess(filename, clean_lines, linenum, nesting_state, error)<br></td></tr
><tr
id=sl_svn141_4478

><td class="source">  CheckSpacing(filename, clean_lines, linenum, nesting_state, error)<br></td></tr
><tr
id=sl_svn141_4479

><td class="source">  CheckOperatorSpacing(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4480

><td class="source">  CheckParenthesisSpacing(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4481

><td class="source">  CheckCommaSpacing(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4482

><td class="source">  CheckBracesSpacing(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4483

><td class="source">  CheckSpacingForFunctionCall(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4484

><td class="source">  CheckRValueReference(filename, clean_lines, linenum, nesting_state, error)<br></td></tr
><tr
id=sl_svn141_4485

><td class="source">  CheckCheck(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4486

><td class="source">  CheckAltTokens(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4487

><td class="source">  classinfo = nesting_state.InnermostClass()<br></td></tr
><tr
id=sl_svn141_4488

><td class="source">  if classinfo:<br></td></tr
><tr
id=sl_svn141_4489

><td class="source">    CheckSectionSpacing(filename, clean_lines, classinfo, linenum, error)<br></td></tr
><tr
id=sl_svn141_4490

><td class="source"><br></td></tr
><tr
id=sl_svn141_4491

><td class="source"><br></td></tr
><tr
id=sl_svn141_4492

><td class="source">_RE_PATTERN_INCLUDE = re.compile(r&#39;^\s*#\s*include\s*([&lt;&quot;])([^&gt;&quot;]*)[&gt;&quot;].*$&#39;)<br></td></tr
><tr
id=sl_svn141_4493

><td class="source"># Matches the first component of a filename delimited by -s and _s. That is:<br></td></tr
><tr
id=sl_svn141_4494

><td class="source">#  _RE_FIRST_COMPONENT.match(&#39;foo&#39;).group(0) == &#39;foo&#39;<br></td></tr
><tr
id=sl_svn141_4495

><td class="source">#  _RE_FIRST_COMPONENT.match(&#39;foo.cc&#39;).group(0) == &#39;foo&#39;<br></td></tr
><tr
id=sl_svn141_4496

><td class="source">#  _RE_FIRST_COMPONENT.match(&#39;foo-bar_baz.cc&#39;).group(0) == &#39;foo&#39;<br></td></tr
><tr
id=sl_svn141_4497

><td class="source">#  _RE_FIRST_COMPONENT.match(&#39;foo_bar-baz.cc&#39;).group(0) == &#39;foo&#39;<br></td></tr
><tr
id=sl_svn141_4498

><td class="source">_RE_FIRST_COMPONENT = re.compile(r&#39;^[^-_.]+&#39;)<br></td></tr
><tr
id=sl_svn141_4499

><td class="source"><br></td></tr
><tr
id=sl_svn141_4500

><td class="source"><br></td></tr
><tr
id=sl_svn141_4501

><td class="source">def _DropCommonSuffixes(filename):<br></td></tr
><tr
id=sl_svn141_4502

><td class="source">  &quot;&quot;&quot;Drops common suffixes like _test.cc or -inl.h from filename.<br></td></tr
><tr
id=sl_svn141_4503

><td class="source"><br></td></tr
><tr
id=sl_svn141_4504

><td class="source">  For example:<br></td></tr
><tr
id=sl_svn141_4505

><td class="source">    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo-inl.h&#39;)<br></td></tr
><tr
id=sl_svn141_4506

><td class="source">    &#39;foo/foo&#39;<br></td></tr
><tr
id=sl_svn141_4507

><td class="source">    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/bar/foo.cc&#39;)<br></td></tr
><tr
id=sl_svn141_4508

><td class="source">    &#39;foo/bar/foo&#39;<br></td></tr
><tr
id=sl_svn141_4509

><td class="source">    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo_internal.h&#39;)<br></td></tr
><tr
id=sl_svn141_4510

><td class="source">    &#39;foo/foo&#39;<br></td></tr
><tr
id=sl_svn141_4511

><td class="source">    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo_unusualinternal.h&#39;)<br></td></tr
><tr
id=sl_svn141_4512

><td class="source">    &#39;foo/foo_unusualinternal&#39;<br></td></tr
><tr
id=sl_svn141_4513

><td class="source"><br></td></tr
><tr
id=sl_svn141_4514

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4515

><td class="source">    filename: The input filename.<br></td></tr
><tr
id=sl_svn141_4516

><td class="source"><br></td></tr
><tr
id=sl_svn141_4517

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4518

><td class="source">    The filename with the common suffix removed.<br></td></tr
><tr
id=sl_svn141_4519

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4520

><td class="source">  for suffix in (&#39;test.cc&#39;, &#39;regtest.cc&#39;, &#39;unittest.cc&#39;,<br></td></tr
><tr
id=sl_svn141_4521

><td class="source">                 &#39;inl.h&#39;, &#39;impl.h&#39;, &#39;internal.h&#39;):<br></td></tr
><tr
id=sl_svn141_4522

><td class="source">    if (filename.endswith(suffix) and len(filename) &gt; len(suffix) and<br></td></tr
><tr
id=sl_svn141_4523

><td class="source">        filename[-len(suffix) - 1] in (&#39;-&#39;, &#39;_&#39;)):<br></td></tr
><tr
id=sl_svn141_4524

><td class="source">      return filename[:-len(suffix) - 1]<br></td></tr
><tr
id=sl_svn141_4525

><td class="source">  return os.path.splitext(filename)[0]<br></td></tr
><tr
id=sl_svn141_4526

><td class="source"><br></td></tr
><tr
id=sl_svn141_4527

><td class="source"><br></td></tr
><tr
id=sl_svn141_4528

><td class="source">def _IsTestFilename(filename):<br></td></tr
><tr
id=sl_svn141_4529

><td class="source">  &quot;&quot;&quot;Determines if the given filename has a suffix that identifies it as a test.<br></td></tr
><tr
id=sl_svn141_4530

><td class="source"><br></td></tr
><tr
id=sl_svn141_4531

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4532

><td class="source">    filename: The input filename.<br></td></tr
><tr
id=sl_svn141_4533

><td class="source"><br></td></tr
><tr
id=sl_svn141_4534

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4535

><td class="source">    True if &#39;filename&#39; looks like a test, False otherwise.<br></td></tr
><tr
id=sl_svn141_4536

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4537

><td class="source">  if (filename.endswith(&#39;_test.cc&#39;) or<br></td></tr
><tr
id=sl_svn141_4538

><td class="source">      filename.endswith(&#39;_unittest.cc&#39;) or<br></td></tr
><tr
id=sl_svn141_4539

><td class="source">      filename.endswith(&#39;_regtest.cc&#39;)):<br></td></tr
><tr
id=sl_svn141_4540

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_4541

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_4542

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_4543

><td class="source"><br></td></tr
><tr
id=sl_svn141_4544

><td class="source"><br></td></tr
><tr
id=sl_svn141_4545

><td class="source">def _ClassifyInclude(fileinfo, include, is_system):<br></td></tr
><tr
id=sl_svn141_4546

><td class="source">  &quot;&quot;&quot;Figures out what kind of header &#39;include&#39; is.<br></td></tr
><tr
id=sl_svn141_4547

><td class="source"><br></td></tr
><tr
id=sl_svn141_4548

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4549

><td class="source">    fileinfo: The current file cpplint is running over. A FileInfo instance.<br></td></tr
><tr
id=sl_svn141_4550

><td class="source">    include: The path to a #included file.<br></td></tr
><tr
id=sl_svn141_4551

><td class="source">    is_system: True if the #include used &lt;&gt; rather than &quot;&quot;.<br></td></tr
><tr
id=sl_svn141_4552

><td class="source"><br></td></tr
><tr
id=sl_svn141_4553

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4554

><td class="source">    One of the _XXX_HEADER constants.<br></td></tr
><tr
id=sl_svn141_4555

><td class="source"><br></td></tr
><tr
id=sl_svn141_4556

><td class="source">  For example:<br></td></tr
><tr
id=sl_svn141_4557

><td class="source">    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;stdio.h&#39;, True)<br></td></tr
><tr
id=sl_svn141_4558

><td class="source">    _C_SYS_HEADER<br></td></tr
><tr
id=sl_svn141_4559

><td class="source">    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;string&#39;, True)<br></td></tr
><tr
id=sl_svn141_4560

><td class="source">    _CPP_SYS_HEADER<br></td></tr
><tr
id=sl_svn141_4561

><td class="source">    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;foo/foo.h&#39;, False)<br></td></tr
><tr
id=sl_svn141_4562

><td class="source">    _LIKELY_MY_HEADER<br></td></tr
><tr
id=sl_svn141_4563

><td class="source">    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo_unknown_extension.cc&#39;),<br></td></tr
><tr
id=sl_svn141_4564

><td class="source">    ...                  &#39;bar/foo_other_ext.h&#39;, False)<br></td></tr
><tr
id=sl_svn141_4565

><td class="source">    _POSSIBLE_MY_HEADER<br></td></tr
><tr
id=sl_svn141_4566

><td class="source">    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;foo/bar.h&#39;, False)<br></td></tr
><tr
id=sl_svn141_4567

><td class="source">    _OTHER_HEADER<br></td></tr
><tr
id=sl_svn141_4568

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4569

><td class="source">  # This is a list of all standard c++ header files, except<br></td></tr
><tr
id=sl_svn141_4570

><td class="source">  # those already checked for above.<br></td></tr
><tr
id=sl_svn141_4571

><td class="source">  is_cpp_h = include in _CPP_HEADERS<br></td></tr
><tr
id=sl_svn141_4572

><td class="source"><br></td></tr
><tr
id=sl_svn141_4573

><td class="source">  if is_system:<br></td></tr
><tr
id=sl_svn141_4574

><td class="source">    if is_cpp_h:<br></td></tr
><tr
id=sl_svn141_4575

><td class="source">      return _CPP_SYS_HEADER<br></td></tr
><tr
id=sl_svn141_4576

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_4577

><td class="source">      return _C_SYS_HEADER<br></td></tr
><tr
id=sl_svn141_4578

><td class="source"><br></td></tr
><tr
id=sl_svn141_4579

><td class="source">  # If the target file and the include we&#39;re checking share a<br></td></tr
><tr
id=sl_svn141_4580

><td class="source">  # basename when we drop common extensions, and the include<br></td></tr
><tr
id=sl_svn141_4581

><td class="source">  # lives in . , then it&#39;s likely to be owned by the target file.<br></td></tr
><tr
id=sl_svn141_4582

><td class="source">  target_dir, target_base = (<br></td></tr
><tr
id=sl_svn141_4583

><td class="source">      os.path.split(_DropCommonSuffixes(fileinfo.RepositoryName())))<br></td></tr
><tr
id=sl_svn141_4584

><td class="source">  include_dir, include_base = os.path.split(_DropCommonSuffixes(include))<br></td></tr
><tr
id=sl_svn141_4585

><td class="source">  if target_base == include_base and (<br></td></tr
><tr
id=sl_svn141_4586

><td class="source">      include_dir == target_dir or<br></td></tr
><tr
id=sl_svn141_4587

><td class="source">      include_dir == os.path.normpath(target_dir + &#39;/../public&#39;)):<br></td></tr
><tr
id=sl_svn141_4588

><td class="source">    return _LIKELY_MY_HEADER<br></td></tr
><tr
id=sl_svn141_4589

><td class="source"><br></td></tr
><tr
id=sl_svn141_4590

><td class="source">  # If the target and include share some initial basename<br></td></tr
><tr
id=sl_svn141_4591

><td class="source">  # component, it&#39;s possible the target is implementing the<br></td></tr
><tr
id=sl_svn141_4592

><td class="source">  # include, so it&#39;s allowed to be first, but we&#39;ll never<br></td></tr
><tr
id=sl_svn141_4593

><td class="source">  # complain if it&#39;s not there.<br></td></tr
><tr
id=sl_svn141_4594

><td class="source">  target_first_component = _RE_FIRST_COMPONENT.match(target_base)<br></td></tr
><tr
id=sl_svn141_4595

><td class="source">  include_first_component = _RE_FIRST_COMPONENT.match(include_base)<br></td></tr
><tr
id=sl_svn141_4596

><td class="source">  if (target_first_component and include_first_component and<br></td></tr
><tr
id=sl_svn141_4597

><td class="source">      target_first_component.group(0) ==<br></td></tr
><tr
id=sl_svn141_4598

><td class="source">      include_first_component.group(0)):<br></td></tr
><tr
id=sl_svn141_4599

><td class="source">    return _POSSIBLE_MY_HEADER<br></td></tr
><tr
id=sl_svn141_4600

><td class="source"><br></td></tr
><tr
id=sl_svn141_4601

><td class="source">  return _OTHER_HEADER<br></td></tr
><tr
id=sl_svn141_4602

><td class="source"><br></td></tr
><tr
id=sl_svn141_4603

><td class="source"><br></td></tr
><tr
id=sl_svn141_4604

><td class="source"><br></td></tr
><tr
id=sl_svn141_4605

><td class="source">def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):<br></td></tr
><tr
id=sl_svn141_4606

><td class="source">  &quot;&quot;&quot;Check rules that are applicable to #include lines.<br></td></tr
><tr
id=sl_svn141_4607

><td class="source"><br></td></tr
><tr
id=sl_svn141_4608

><td class="source">  Strings on #include lines are NOT removed from elided line, to make<br></td></tr
><tr
id=sl_svn141_4609

><td class="source">  certain tasks easier. However, to prevent false positives, checks<br></td></tr
><tr
id=sl_svn141_4610

><td class="source">  applicable to #include lines in CheckLanguage must be put here.<br></td></tr
><tr
id=sl_svn141_4611

><td class="source"><br></td></tr
><tr
id=sl_svn141_4612

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4613

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4614

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4615

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4616

><td class="source">    include_state: An _IncludeState instance in which the headers are inserted.<br></td></tr
><tr
id=sl_svn141_4617

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4618

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4619

><td class="source">  fileinfo = FileInfo(filename)<br></td></tr
><tr
id=sl_svn141_4620

><td class="source">  line = clean_lines.lines[linenum]<br></td></tr
><tr
id=sl_svn141_4621

><td class="source"><br></td></tr
><tr
id=sl_svn141_4622

><td class="source">  # &quot;include&quot; should use the new style &quot;foo/bar.h&quot; instead of just &quot;bar.h&quot;<br></td></tr
><tr
id=sl_svn141_4623

><td class="source">  # Only do this check if the included header follows google naming<br></td></tr
><tr
id=sl_svn141_4624

><td class="source">  # conventions.  If not, assume that it&#39;s a 3rd party API that<br></td></tr
><tr
id=sl_svn141_4625

><td class="source">  # requires special include conventions.<br></td></tr
><tr
id=sl_svn141_4626

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4627

><td class="source">  # We also make an exception for Lua headers, which follow google<br></td></tr
><tr
id=sl_svn141_4628

><td class="source">  # naming convention but not the include convention.<br></td></tr
><tr
id=sl_svn141_4629

><td class="source">  match = Match(r&#39;#include\s*&quot;([^/]+\.h)&quot;&#39;, line)<br></td></tr
><tr
id=sl_svn141_4630

><td class="source">  if match and not _THIRD_PARTY_HEADERS_PATTERN.match(match.group(1)):<br></td></tr
><tr
id=sl_svn141_4631

><td class="source">    error(filename, linenum, &#39;build/include&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4632

><td class="source">          &#39;Include the directory when naming .h files&#39;)<br></td></tr
><tr
id=sl_svn141_4633

><td class="source"><br></td></tr
><tr
id=sl_svn141_4634

><td class="source">  # we shouldn&#39;t include a file more than once. actually, there are a<br></td></tr
><tr
id=sl_svn141_4635

><td class="source">  # handful of instances where doing so is okay, but in general it&#39;s<br></td></tr
><tr
id=sl_svn141_4636

><td class="source">  # not.<br></td></tr
><tr
id=sl_svn141_4637

><td class="source">  match = _RE_PATTERN_INCLUDE.search(line)<br></td></tr
><tr
id=sl_svn141_4638

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4639

><td class="source">    include = match.group(2)<br></td></tr
><tr
id=sl_svn141_4640

><td class="source">    is_system = (match.group(1) == &#39;&lt;&#39;)<br></td></tr
><tr
id=sl_svn141_4641

><td class="source">    duplicate_line = include_state.FindHeader(include)<br></td></tr
><tr
id=sl_svn141_4642

><td class="source">    if duplicate_line &gt;= 0:<br></td></tr
><tr
id=sl_svn141_4643

><td class="source">      error(filename, linenum, &#39;build/include&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4644

><td class="source">            &#39;&quot;%s&quot; already included at %s:%s&#39; %<br></td></tr
><tr
id=sl_svn141_4645

><td class="source">            (include, filename, duplicate_line))<br></td></tr
><tr
id=sl_svn141_4646

><td class="source">    elif (include.endswith(&#39;.cc&#39;) and<br></td></tr
><tr
id=sl_svn141_4647

><td class="source">          os.path.dirname(fileinfo.RepositoryName()) != os.path.dirname(include)):<br></td></tr
><tr
id=sl_svn141_4648

><td class="source">      error(filename, linenum, &#39;build/include&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4649

><td class="source">            &#39;Do not include .cc files from other packages&#39;)<br></td></tr
><tr
id=sl_svn141_4650

><td class="source">    elif not _THIRD_PARTY_HEADERS_PATTERN.match(include):<br></td></tr
><tr
id=sl_svn141_4651

><td class="source">      include_state.include_list[-1].append((include, linenum))<br></td></tr
><tr
id=sl_svn141_4652

><td class="source"><br></td></tr
><tr
id=sl_svn141_4653

><td class="source">      # We want to ensure that headers appear in the right order:<br></td></tr
><tr
id=sl_svn141_4654

><td class="source">      # 1) for foo.cc, foo.h  (preferred location)<br></td></tr
><tr
id=sl_svn141_4655

><td class="source">      # 2) c system files<br></td></tr
><tr
id=sl_svn141_4656

><td class="source">      # 3) cpp system files<br></td></tr
><tr
id=sl_svn141_4657

><td class="source">      # 4) for foo.cc, foo.h  (deprecated location)<br></td></tr
><tr
id=sl_svn141_4658

><td class="source">      # 5) other google headers<br></td></tr
><tr
id=sl_svn141_4659

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_4660

><td class="source">      # We classify each include statement as one of those 5 types<br></td></tr
><tr
id=sl_svn141_4661

><td class="source">      # using a number of techniques. The include_state object keeps<br></td></tr
><tr
id=sl_svn141_4662

><td class="source">      # track of the highest type seen, and complains if we see a<br></td></tr
><tr
id=sl_svn141_4663

><td class="source">      # lower type after that.<br></td></tr
><tr
id=sl_svn141_4664

><td class="source">      error_message = include_state.CheckNextIncludeOrder(<br></td></tr
><tr
id=sl_svn141_4665

><td class="source">          _ClassifyInclude(fileinfo, include, is_system))<br></td></tr
><tr
id=sl_svn141_4666

><td class="source">      if error_message:<br></td></tr
><tr
id=sl_svn141_4667

><td class="source">        error(filename, linenum, &#39;build/include_order&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4668

><td class="source">              &#39;%s. Should be: %s.h, c system, c++ system, other.&#39; %<br></td></tr
><tr
id=sl_svn141_4669

><td class="source">              (error_message, fileinfo.BaseName()))<br></td></tr
><tr
id=sl_svn141_4670

><td class="source">      canonical_include = include_state.CanonicalizeAlphabeticalOrder(include)<br></td></tr
><tr
id=sl_svn141_4671

><td class="source">      if not include_state.IsInAlphabeticalOrder(<br></td></tr
><tr
id=sl_svn141_4672

><td class="source">          clean_lines, linenum, canonical_include):<br></td></tr
><tr
id=sl_svn141_4673

><td class="source">        error(filename, linenum, &#39;build/include_alpha&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4674

><td class="source">              &#39;Include &quot;%s&quot; not in alphabetical order&#39; % include)<br></td></tr
><tr
id=sl_svn141_4675

><td class="source">      include_state.SetLastHeader(canonical_include)<br></td></tr
><tr
id=sl_svn141_4676

><td class="source"><br></td></tr
><tr
id=sl_svn141_4677

><td class="source"><br></td></tr
><tr
id=sl_svn141_4678

><td class="source"><br></td></tr
><tr
id=sl_svn141_4679

><td class="source">def _GetTextInside(text, start_pattern):<br></td></tr
><tr
id=sl_svn141_4680

><td class="source">  r&quot;&quot;&quot;Retrieves all the text between matching open and close parentheses.<br></td></tr
><tr
id=sl_svn141_4681

><td class="source"><br></td></tr
><tr
id=sl_svn141_4682

><td class="source">  Given a string of lines and a regular expression string, retrieve all the text<br></td></tr
><tr
id=sl_svn141_4683

><td class="source">  following the expression and between opening punctuation symbols like<br></td></tr
><tr
id=sl_svn141_4684

><td class="source">  (, [, or {, and the matching close-punctuation symbol. This properly nested<br></td></tr
><tr
id=sl_svn141_4685

><td class="source">  occurrences of the punctuations, so for the text like<br></td></tr
><tr
id=sl_svn141_4686

><td class="source">    printf(a(), b(c()));<br></td></tr
><tr
id=sl_svn141_4687

><td class="source">  a call to _GetTextInside(text, r&#39;printf\(&#39;) will return &#39;a(), b(c())&#39;.<br></td></tr
><tr
id=sl_svn141_4688

><td class="source">  start_pattern must match string having an open punctuation symbol at the end.<br></td></tr
><tr
id=sl_svn141_4689

><td class="source"><br></td></tr
><tr
id=sl_svn141_4690

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4691

><td class="source">    text: The lines to extract text. Its comments and strings must be elided.<br></td></tr
><tr
id=sl_svn141_4692

><td class="source">           It can be single line and can span multiple lines.<br></td></tr
><tr
id=sl_svn141_4693

><td class="source">    start_pattern: The regexp string indicating where to start extracting<br></td></tr
><tr
id=sl_svn141_4694

><td class="source">                   the text.<br></td></tr
><tr
id=sl_svn141_4695

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_4696

><td class="source">    The extracted text.<br></td></tr
><tr
id=sl_svn141_4697

><td class="source">    None if either the opening string or ending punctuation could not be found.<br></td></tr
><tr
id=sl_svn141_4698

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4699

><td class="source">  # TODO(unknown): Audit cpplint.py to see what places could be profitably<br></td></tr
><tr
id=sl_svn141_4700

><td class="source">  # rewritten to use _GetTextInside (and use inferior regexp matching today).<br></td></tr
><tr
id=sl_svn141_4701

><td class="source"><br></td></tr
><tr
id=sl_svn141_4702

><td class="source">  # Give opening punctuations to get the matching close-punctuations.<br></td></tr
><tr
id=sl_svn141_4703

><td class="source">  matching_punctuation = {&#39;(&#39;: &#39;)&#39;, &#39;{&#39;: &#39;}&#39;, &#39;[&#39;: &#39;]&#39;}<br></td></tr
><tr
id=sl_svn141_4704

><td class="source">  closing_punctuation = set(matching_punctuation.itervalues())<br></td></tr
><tr
id=sl_svn141_4705

><td class="source"><br></td></tr
><tr
id=sl_svn141_4706

><td class="source">  # Find the position to start extracting text.<br></td></tr
><tr
id=sl_svn141_4707

><td class="source">  match = re.search(start_pattern, text, re.M)<br></td></tr
><tr
id=sl_svn141_4708

><td class="source">  if not match:  # start_pattern not found in text.<br></td></tr
><tr
id=sl_svn141_4709

><td class="source">    return None<br></td></tr
><tr
id=sl_svn141_4710

><td class="source">  start_position = match.end(0)<br></td></tr
><tr
id=sl_svn141_4711

><td class="source"><br></td></tr
><tr
id=sl_svn141_4712

><td class="source">  assert start_position &gt; 0, (<br></td></tr
><tr
id=sl_svn141_4713

><td class="source">      &#39;start_pattern must ends with an opening punctuation.&#39;)<br></td></tr
><tr
id=sl_svn141_4714

><td class="source">  assert text[start_position - 1] in matching_punctuation, (<br></td></tr
><tr
id=sl_svn141_4715

><td class="source">      &#39;start_pattern must ends with an opening punctuation.&#39;)<br></td></tr
><tr
id=sl_svn141_4716

><td class="source">  # Stack of closing punctuations we expect to have in text after position.<br></td></tr
><tr
id=sl_svn141_4717

><td class="source">  punctuation_stack = [matching_punctuation[text[start_position - 1]]]<br></td></tr
><tr
id=sl_svn141_4718

><td class="source">  position = start_position<br></td></tr
><tr
id=sl_svn141_4719

><td class="source">  while punctuation_stack and position &lt; len(text):<br></td></tr
><tr
id=sl_svn141_4720

><td class="source">    if text[position] == punctuation_stack[-1]:<br></td></tr
><tr
id=sl_svn141_4721

><td class="source">      punctuation_stack.pop()<br></td></tr
><tr
id=sl_svn141_4722

><td class="source">    elif text[position] in closing_punctuation:<br></td></tr
><tr
id=sl_svn141_4723

><td class="source">      # A closing punctuation without matching opening punctuations.<br></td></tr
><tr
id=sl_svn141_4724

><td class="source">      return None<br></td></tr
><tr
id=sl_svn141_4725

><td class="source">    elif text[position] in matching_punctuation:<br></td></tr
><tr
id=sl_svn141_4726

><td class="source">      punctuation_stack.append(matching_punctuation[text[position]])<br></td></tr
><tr
id=sl_svn141_4727

><td class="source">    position += 1<br></td></tr
><tr
id=sl_svn141_4728

><td class="source">  if punctuation_stack:<br></td></tr
><tr
id=sl_svn141_4729

><td class="source">    # Opening punctuations left without matching close-punctuations.<br></td></tr
><tr
id=sl_svn141_4730

><td class="source">    return None<br></td></tr
><tr
id=sl_svn141_4731

><td class="source">  # punctuations match.<br></td></tr
><tr
id=sl_svn141_4732

><td class="source">  return text[start_position:position - 1]<br></td></tr
><tr
id=sl_svn141_4733

><td class="source"><br></td></tr
><tr
id=sl_svn141_4734

><td class="source"><br></td></tr
><tr
id=sl_svn141_4735

><td class="source"># Patterns for matching call-by-reference parameters.<br></td></tr
><tr
id=sl_svn141_4736

><td class="source">#<br></td></tr
><tr
id=sl_svn141_4737

><td class="source"># Supports nested templates up to 2 levels deep using this messy pattern:<br></td></tr
><tr
id=sl_svn141_4738

><td class="source">#   &lt; (?: &lt; (?: &lt; [^&lt;&gt;]*<br></td></tr
><tr
id=sl_svn141_4739

><td class="source">#               &gt;<br></td></tr
><tr
id=sl_svn141_4740

><td class="source">#           |   [^&lt;&gt;] )*<br></td></tr
><tr
id=sl_svn141_4741

><td class="source">#         &gt;<br></td></tr
><tr
id=sl_svn141_4742

><td class="source">#     |   [^&lt;&gt;] )*<br></td></tr
><tr
id=sl_svn141_4743

><td class="source">#   &gt;<br></td></tr
><tr
id=sl_svn141_4744

><td class="source">_RE_PATTERN_IDENT = r&#39;[_a-zA-Z]\w*&#39;  # =~ [[:alpha:]][[:alnum:]]*<br></td></tr
><tr
id=sl_svn141_4745

><td class="source">_RE_PATTERN_TYPE = (<br></td></tr
><tr
id=sl_svn141_4746

><td class="source">    r&#39;(?:const\s+)?(?:typename\s+|class\s+|struct\s+|union\s+|enum\s+)?&#39;<br></td></tr
><tr
id=sl_svn141_4747

><td class="source">    r&#39;(?:\w|&#39;<br></td></tr
><tr
id=sl_svn141_4748

><td class="source">    r&#39;\s*&lt;(?:&lt;(?:&lt;[^&lt;&gt;]*&gt;|[^&lt;&gt;])*&gt;|[^&lt;&gt;])*&gt;|&#39;<br></td></tr
><tr
id=sl_svn141_4749

><td class="source">    r&#39;::)+&#39;)<br></td></tr
><tr
id=sl_svn141_4750

><td class="source"># A call-by-reference parameter ends with &#39;&amp; identifier&#39;.<br></td></tr
><tr
id=sl_svn141_4751

><td class="source">_RE_PATTERN_REF_PARAM = re.compile(<br></td></tr
><tr
id=sl_svn141_4752

><td class="source">    r&#39;(&#39; + _RE_PATTERN_TYPE + r&#39;(?:\s*(?:\bconst\b|[*]))*\s*&#39;<br></td></tr
><tr
id=sl_svn141_4753

><td class="source">    r&#39;&amp;\s*&#39; + _RE_PATTERN_IDENT + r&#39;)\s*(?:=[^,()]+)?[,)]&#39;)<br></td></tr
><tr
id=sl_svn141_4754

><td class="source"># A call-by-const-reference parameter either ends with &#39;const&amp; identifier&#39;<br></td></tr
><tr
id=sl_svn141_4755

><td class="source"># or looks like &#39;const type&amp; identifier&#39; when &#39;type&#39; is atomic.<br></td></tr
><tr
id=sl_svn141_4756

><td class="source">_RE_PATTERN_CONST_REF_PARAM = (<br></td></tr
><tr
id=sl_svn141_4757

><td class="source">    r&#39;(?:.*\s*\bconst\s*&amp;\s*&#39; + _RE_PATTERN_IDENT +<br></td></tr
><tr
id=sl_svn141_4758

><td class="source">    r&#39;|const\s+&#39; + _RE_PATTERN_TYPE + r&#39;\s*&amp;\s*&#39; + _RE_PATTERN_IDENT + r&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_4759

><td class="source"><br></td></tr
><tr
id=sl_svn141_4760

><td class="source"><br></td></tr
><tr
id=sl_svn141_4761

><td class="source">def CheckLanguage(filename, clean_lines, linenum, file_extension,<br></td></tr
><tr
id=sl_svn141_4762

><td class="source">                  include_state, nesting_state, error):<br></td></tr
><tr
id=sl_svn141_4763

><td class="source">  &quot;&quot;&quot;Checks rules from the &#39;C++ language rules&#39; section of cppguide.html.<br></td></tr
><tr
id=sl_svn141_4764

><td class="source"><br></td></tr
><tr
id=sl_svn141_4765

><td class="source">  Some of these rules are hard to test (function overloading, using<br></td></tr
><tr
id=sl_svn141_4766

><td class="source">  uint32 inappropriately), but we do the best we can.<br></td></tr
><tr
id=sl_svn141_4767

><td class="source"><br></td></tr
><tr
id=sl_svn141_4768

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4769

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4770

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4771

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4772

><td class="source">    file_extension: The extension (without the dot) of the filename.<br></td></tr
><tr
id=sl_svn141_4773

><td class="source">    include_state: An _IncludeState instance in which the headers are inserted.<br></td></tr
><tr
id=sl_svn141_4774

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_4775

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_4776

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4777

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4778

><td class="source">  # If the line is empty or consists of entirely a comment, no need to<br></td></tr
><tr
id=sl_svn141_4779

><td class="source">  # check it.<br></td></tr
><tr
id=sl_svn141_4780

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4781

><td class="source">  if not line:<br></td></tr
><tr
id=sl_svn141_4782

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4783

><td class="source"><br></td></tr
><tr
id=sl_svn141_4784

><td class="source">  match = _RE_PATTERN_INCLUDE.search(line)<br></td></tr
><tr
id=sl_svn141_4785

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4786

><td class="source">    CheckIncludeLine(filename, clean_lines, linenum, include_state, error)<br></td></tr
><tr
id=sl_svn141_4787

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_4788

><td class="source"><br></td></tr
><tr
id=sl_svn141_4789

><td class="source">  # Reset include state across preprocessor directives.  This is meant<br></td></tr
><tr
id=sl_svn141_4790

><td class="source">  # to silence warnings for conditional includes.<br></td></tr
><tr
id=sl_svn141_4791

><td class="source">  match = Match(r&#39;^\s*#\s*(if|ifdef|ifndef|elif|else|endif)\b&#39;, line)<br></td></tr
><tr
id=sl_svn141_4792

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4793

><td class="source">    include_state.ResetSection(match.group(1))<br></td></tr
><tr
id=sl_svn141_4794

><td class="source"><br></td></tr
><tr
id=sl_svn141_4795

><td class="source">  # Make Windows paths like Unix.<br></td></tr
><tr
id=sl_svn141_4796

><td class="source">  fullname = os.path.abspath(filename).replace(&#39;\\&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_4797

><td class="source">  <br></td></tr
><tr
id=sl_svn141_4798

><td class="source">  # Perform other checks now that we are sure that this is not an include line<br></td></tr
><tr
id=sl_svn141_4799

><td class="source">  CheckCasts(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4800

><td class="source">  CheckGlobalStatic(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4801

><td class="source">  CheckPrintf(filename, clean_lines, linenum, error)<br></td></tr
><tr
id=sl_svn141_4802

><td class="source"><br></td></tr
><tr
id=sl_svn141_4803

><td class="source">  if file_extension == &#39;h&#39;:<br></td></tr
><tr
id=sl_svn141_4804

><td class="source">    # TODO(unknown): check that 1-arg constructors are explicit.<br></td></tr
><tr
id=sl_svn141_4805

><td class="source">    #                How to tell it&#39;s a constructor?<br></td></tr
><tr
id=sl_svn141_4806

><td class="source">    #                (handled in CheckForNonStandardConstructs for now)<br></td></tr
><tr
id=sl_svn141_4807

><td class="source">    # TODO(unknown): check that classes declare or disable copy/assign<br></td></tr
><tr
id=sl_svn141_4808

><td class="source">    #                (level 1 error)<br></td></tr
><tr
id=sl_svn141_4809

><td class="source">    pass<br></td></tr
><tr
id=sl_svn141_4810

><td class="source"><br></td></tr
><tr
id=sl_svn141_4811

><td class="source">  # Check if people are using the verboten C basic types.  The only exception<br></td></tr
><tr
id=sl_svn141_4812

><td class="source">  # we regularly allow is &quot;unsigned short port&quot; for port.<br></td></tr
><tr
id=sl_svn141_4813

><td class="source">  if Search(r&#39;\bshort port\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_4814

><td class="source">    if not Search(r&#39;\bunsigned short port\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_4815

><td class="source">      error(filename, linenum, &#39;runtime/int&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4816

><td class="source">            &#39;Use &quot;unsigned short&quot; for ports, not &quot;short&quot;&#39;)<br></td></tr
><tr
id=sl_svn141_4817

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_4818

><td class="source">    match = Search(r&#39;\b(short|long(?! +double)|long long)\b&#39;, line)<br></td></tr
><tr
id=sl_svn141_4819

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_4820

><td class="source">      error(filename, linenum, &#39;runtime/int&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4821

><td class="source">            &#39;Use int16/int64/etc, rather than the C type %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_4822

><td class="source"><br></td></tr
><tr
id=sl_svn141_4823

><td class="source">  # Check if some verboten operator overloading is going on<br></td></tr
><tr
id=sl_svn141_4824

><td class="source">  # TODO(unknown): catch out-of-line unary operator&amp;:<br></td></tr
><tr
id=sl_svn141_4825

><td class="source">  #   class X {};<br></td></tr
><tr
id=sl_svn141_4826

><td class="source">  #   int operator&amp;(const X&amp; x) { return 42; }  // unary operator&amp;<br></td></tr
><tr
id=sl_svn141_4827

><td class="source">  # The trick is it&#39;s hard to tell apart from binary operator&amp;:<br></td></tr
><tr
id=sl_svn141_4828

><td class="source">  #   class Y { int operator&amp;(const Y&amp; x) { return 23; } }; // binary operator&amp;<br></td></tr
><tr
id=sl_svn141_4829

><td class="source">  if Search(r&#39;\boperator\s*&amp;\s*\(\s*\)&#39;, line):<br></td></tr
><tr
id=sl_svn141_4830

><td class="source">    error(filename, linenum, &#39;runtime/operator&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4831

><td class="source">          &#39;Unary operator&amp; is dangerous.  Do not use it.&#39;)<br></td></tr
><tr
id=sl_svn141_4832

><td class="source"><br></td></tr
><tr
id=sl_svn141_4833

><td class="source">  # Check for suspicious usage of &quot;if&quot; like<br></td></tr
><tr
id=sl_svn141_4834

><td class="source">  # } if (a == b) {<br></td></tr
><tr
id=sl_svn141_4835

><td class="source">  if Search(r&#39;\}\s*if\s*\(&#39;, line):<br></td></tr
><tr
id=sl_svn141_4836

><td class="source">    error(filename, linenum, &#39;readability/braces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4837

><td class="source">          &#39;Did you mean &quot;else if&quot;? If not, start a new line for &quot;if&quot;.&#39;)<br></td></tr
><tr
id=sl_svn141_4838

><td class="source"><br></td></tr
><tr
id=sl_svn141_4839

><td class="source">  # Check for potential format string bugs like printf(foo).<br></td></tr
><tr
id=sl_svn141_4840

><td class="source">  # We constrain the pattern not to pick things like DocidForPrintf(foo).<br></td></tr
><tr
id=sl_svn141_4841

><td class="source">  # Not perfect but it can catch printf(foo.c_str()) and printf(foo-&gt;c_str())<br></td></tr
><tr
id=sl_svn141_4842

><td class="source">  # TODO(unknown): Catch the following case. Need to change the calling<br></td></tr
><tr
id=sl_svn141_4843

><td class="source">  # convention of the whole function to process multiple line to handle it.<br></td></tr
><tr
id=sl_svn141_4844

><td class="source">  #   printf(<br></td></tr
><tr
id=sl_svn141_4845

><td class="source">  #       boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);<br></td></tr
><tr
id=sl_svn141_4846

><td class="source">  printf_args = _GetTextInside(line, r&#39;(?i)\b(string)?printf\s*\(&#39;)<br></td></tr
><tr
id=sl_svn141_4847

><td class="source">  if printf_args:<br></td></tr
><tr
id=sl_svn141_4848

><td class="source">    match = Match(r&#39;([\w.\-&gt;()]+)$&#39;, printf_args)<br></td></tr
><tr
id=sl_svn141_4849

><td class="source">    if match and match.group(1) != &#39;__VA_ARGS__&#39;:<br></td></tr
><tr
id=sl_svn141_4850

><td class="source">      function_name = re.search(r&#39;\b((?:string)?printf)\s*\(&#39;,<br></td></tr
><tr
id=sl_svn141_4851

><td class="source">                                line, re.I).group(1)<br></td></tr
><tr
id=sl_svn141_4852

><td class="source">      error(filename, linenum, &#39;runtime/printf&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4853

><td class="source">            &#39;Potential format string bug. Do %s(&quot;%%s&quot;, %s) instead.&#39;<br></td></tr
><tr
id=sl_svn141_4854

><td class="source">            % (function_name, match.group(1)))<br></td></tr
><tr
id=sl_svn141_4855

><td class="source"><br></td></tr
><tr
id=sl_svn141_4856

><td class="source">  # Check for potential memset bugs like memset(buf, sizeof(buf), 0).<br></td></tr
><tr
id=sl_svn141_4857

><td class="source">  match = Search(r&#39;memset\s*\(([^,]*),\s*([^,]*),\s*0\s*\)&#39;, line)<br></td></tr
><tr
id=sl_svn141_4858

><td class="source">  if match and not Match(r&quot;^&#39;&#39;|-?[0-9]+|0x[0-9A-Fa-f]$&quot;, match.group(2)):<br></td></tr
><tr
id=sl_svn141_4859

><td class="source">    error(filename, linenum, &#39;runtime/memset&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4860

><td class="source">          &#39;Did you mean &quot;memset(%s, 0, %s)&quot;?&#39;<br></td></tr
><tr
id=sl_svn141_4861

><td class="source">          % (match.group(1), match.group(2)))<br></td></tr
><tr
id=sl_svn141_4862

><td class="source"><br></td></tr
><tr
id=sl_svn141_4863

><td class="source">  if Search(r&#39;\busing namespace\b&#39;, line):<br></td></tr
><tr
id=sl_svn141_4864

><td class="source">    error(filename, linenum, &#39;build/namespaces&#39;, 5,<br></td></tr
><tr
id=sl_svn141_4865

><td class="source">          &#39;Do not use namespace using-directives.  &#39;<br></td></tr
><tr
id=sl_svn141_4866

><td class="source">          &#39;Use using-declarations instead.&#39;)<br></td></tr
><tr
id=sl_svn141_4867

><td class="source"><br></td></tr
><tr
id=sl_svn141_4868

><td class="source">  # Detect variable-length arrays.<br></td></tr
><tr
id=sl_svn141_4869

><td class="source">  match = Match(r&#39;\s*(.+::)?(\w+) [a-z]\w*\[(.+)];&#39;, line)<br></td></tr
><tr
id=sl_svn141_4870

><td class="source">  if (match and match.group(2) != &#39;return&#39; and match.group(2) != &#39;delete&#39; and<br></td></tr
><tr
id=sl_svn141_4871

><td class="source">      match.group(3).find(&#39;]&#39;) == -1):<br></td></tr
><tr
id=sl_svn141_4872

><td class="source">    # Split the size using space and arithmetic operators as delimiters.<br></td></tr
><tr
id=sl_svn141_4873

><td class="source">    # If any of the resulting tokens are not compile time constants then<br></td></tr
><tr
id=sl_svn141_4874

><td class="source">    # report the error.<br></td></tr
><tr
id=sl_svn141_4875

><td class="source">    tokens = re.split(r&#39;\s|\+|\-|\*|\/|&lt;&lt;|&gt;&gt;]&#39;, match.group(3))<br></td></tr
><tr
id=sl_svn141_4876

><td class="source">    is_const = True<br></td></tr
><tr
id=sl_svn141_4877

><td class="source">    skip_next = False<br></td></tr
><tr
id=sl_svn141_4878

><td class="source">    for tok in tokens:<br></td></tr
><tr
id=sl_svn141_4879

><td class="source">      if skip_next:<br></td></tr
><tr
id=sl_svn141_4880

><td class="source">        skip_next = False<br></td></tr
><tr
id=sl_svn141_4881

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_4882

><td class="source"><br></td></tr
><tr
id=sl_svn141_4883

><td class="source">      if Search(r&#39;sizeof\(.+\)&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4884

><td class="source">      if Search(r&#39;arraysize\(\w+\)&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4885

><td class="source"><br></td></tr
><tr
id=sl_svn141_4886

><td class="source">      tok = tok.lstrip(&#39;(&#39;)<br></td></tr
><tr
id=sl_svn141_4887

><td class="source">      tok = tok.rstrip(&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_4888

><td class="source">      if not tok: continue<br></td></tr
><tr
id=sl_svn141_4889

><td class="source">      if Match(r&#39;\d+&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4890

><td class="source">      if Match(r&#39;0[xX][0-9a-fA-F]+&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4891

><td class="source">      if Match(r&#39;k[A-Z0-9]\w*&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4892

><td class="source">      if Match(r&#39;(.+::)?k[A-Z0-9]\w*&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4893

><td class="source">      if Match(r&#39;(.+::)?[A-Z][A-Z0-9_]*&#39;, tok): continue<br></td></tr
><tr
id=sl_svn141_4894

><td class="source">      # A catch all for tricky sizeof cases, including &#39;sizeof expression&#39;,<br></td></tr
><tr
id=sl_svn141_4895

><td class="source">      # &#39;sizeof(*type)&#39;, &#39;sizeof(const type)&#39;, &#39;sizeof(struct StructName)&#39;<br></td></tr
><tr
id=sl_svn141_4896

><td class="source">      # requires skipping the next token because we split on &#39; &#39; and &#39;*&#39;.<br></td></tr
><tr
id=sl_svn141_4897

><td class="source">      if tok.startswith(&#39;sizeof&#39;):<br></td></tr
><tr
id=sl_svn141_4898

><td class="source">        skip_next = True<br></td></tr
><tr
id=sl_svn141_4899

><td class="source">        continue<br></td></tr
><tr
id=sl_svn141_4900

><td class="source">      is_const = False<br></td></tr
><tr
id=sl_svn141_4901

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_4902

><td class="source">    if not is_const:<br></td></tr
><tr
id=sl_svn141_4903

><td class="source">      error(filename, linenum, &#39;runtime/arrays&#39;, 1,<br></td></tr
><tr
id=sl_svn141_4904

><td class="source">            &#39;Do not use variable-length arrays.  Use an appropriately named &#39;<br></td></tr
><tr
id=sl_svn141_4905

><td class="source">            &quot;(&#39;k&#39; followed by CamelCase) compile-time constant for the size.&quot;)<br></td></tr
><tr
id=sl_svn141_4906

><td class="source"><br></td></tr
><tr
id=sl_svn141_4907

><td class="source">  # Check for use of unnamed namespaces in header files.  Registration<br></td></tr
><tr
id=sl_svn141_4908

><td class="source">  # macros are typically OK, so we allow use of &quot;namespace {&quot; on lines<br></td></tr
><tr
id=sl_svn141_4909

><td class="source">  # that end with backslashes.<br></td></tr
><tr
id=sl_svn141_4910

><td class="source">  if (file_extension == &#39;h&#39;<br></td></tr
><tr
id=sl_svn141_4911

><td class="source">      and Search(r&#39;\bnamespace\s*{&#39;, line)<br></td></tr
><tr
id=sl_svn141_4912

><td class="source">      and line[-1] != &#39;\\&#39;):<br></td></tr
><tr
id=sl_svn141_4913

><td class="source">    error(filename, linenum, &#39;build/namespaces&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4914

><td class="source">          &#39;Do not use unnamed namespaces in header files.  See &#39;<br></td></tr
><tr
id=sl_svn141_4915

><td class="source">          &#39;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Namespaces&#39;<br></td></tr
><tr
id=sl_svn141_4916

><td class="source">          &#39; for more information.&#39;)<br></td></tr
><tr
id=sl_svn141_4917

><td class="source"><br></td></tr
><tr
id=sl_svn141_4918

><td class="source"><br></td></tr
><tr
id=sl_svn141_4919

><td class="source">def CheckGlobalStatic(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4920

><td class="source">  &quot;&quot;&quot;Check for unsafe global or static objects.<br></td></tr
><tr
id=sl_svn141_4921

><td class="source"><br></td></tr
><tr
id=sl_svn141_4922

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4923

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4924

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4925

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4926

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4927

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4928

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4929

><td class="source"><br></td></tr
><tr
id=sl_svn141_4930

><td class="source">  # Match two lines at a time to support multiline declarations<br></td></tr
><tr
id=sl_svn141_4931

><td class="source">  if linenum + 1 &lt; clean_lines.NumLines() and not Search(r&#39;[;({]&#39;, line):<br></td></tr
><tr
id=sl_svn141_4932

><td class="source">    line += clean_lines.elided[linenum + 1].strip()<br></td></tr
><tr
id=sl_svn141_4933

><td class="source"><br></td></tr
><tr
id=sl_svn141_4934

><td class="source">  # Check for people declaring static/global STL strings at the top level.<br></td></tr
><tr
id=sl_svn141_4935

><td class="source">  # This is dangerous because the C++ language does not guarantee that<br></td></tr
><tr
id=sl_svn141_4936

><td class="source">  # globals with constructors are initialized before the first access.<br></td></tr
><tr
id=sl_svn141_4937

><td class="source">  match = Match(<br></td></tr
><tr
id=sl_svn141_4938

><td class="source">      r&#39;((?:|static +)(?:|const +))string +([a-zA-Z0-9_:]+)\b(.*)&#39;,<br></td></tr
><tr
id=sl_svn141_4939

><td class="source">      line)<br></td></tr
><tr
id=sl_svn141_4940

><td class="source"><br></td></tr
><tr
id=sl_svn141_4941

><td class="source">  # Remove false positives:<br></td></tr
><tr
id=sl_svn141_4942

><td class="source">  # - String pointers (as opposed to values).<br></td></tr
><tr
id=sl_svn141_4943

><td class="source">  #    string *pointer<br></td></tr
><tr
id=sl_svn141_4944

><td class="source">  #    const string *pointer<br></td></tr
><tr
id=sl_svn141_4945

><td class="source">  #    string const *pointer<br></td></tr
><tr
id=sl_svn141_4946

><td class="source">  #    string *const pointer<br></td></tr
><tr
id=sl_svn141_4947

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4948

><td class="source">  # - Functions and template specializations.<br></td></tr
><tr
id=sl_svn141_4949

><td class="source">  #    string Function&lt;Type&gt;(...<br></td></tr
><tr
id=sl_svn141_4950

><td class="source">  #    string Class&lt;Type&gt;::Method(...<br></td></tr
><tr
id=sl_svn141_4951

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_4952

><td class="source">  # - Operators.  These are matched separately because operator names<br></td></tr
><tr
id=sl_svn141_4953

><td class="source">  #   cross non-word boundaries, and trying to match both operators<br></td></tr
><tr
id=sl_svn141_4954

><td class="source">  #   and functions at the same time would decrease accuracy of<br></td></tr
><tr
id=sl_svn141_4955

><td class="source">  #   matching identifiers.<br></td></tr
><tr
id=sl_svn141_4956

><td class="source">  #    string Class::operator*()<br></td></tr
><tr
id=sl_svn141_4957

><td class="source">  if (match and<br></td></tr
><tr
id=sl_svn141_4958

><td class="source">      not Search(r&#39;\bstring\b(\s+const)?\s*\*\s*(const\s+)?\w&#39;, line) and<br></td></tr
><tr
id=sl_svn141_4959

><td class="source">      not Search(r&#39;\boperator\W&#39;, line) and<br></td></tr
><tr
id=sl_svn141_4960

><td class="source">      not Match(r&#39;\s*(&lt;.*&gt;)?(::[a-zA-Z0-9_]+)*\s*\(([^&quot;]|$)&#39;, match.group(3))):<br></td></tr
><tr
id=sl_svn141_4961

><td class="source">    error(filename, linenum, &#39;runtime/string&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4962

><td class="source">          &#39;For a static/global string constant, use a C style string instead: &#39;<br></td></tr
><tr
id=sl_svn141_4963

><td class="source">          &#39;&quot;%schar %s[]&quot;.&#39; %<br></td></tr
><tr
id=sl_svn141_4964

><td class="source">          (match.group(1), match.group(2)))<br></td></tr
><tr
id=sl_svn141_4965

><td class="source"><br></td></tr
><tr
id=sl_svn141_4966

><td class="source">  if Search(r&#39;\b([A-Za-z0-9_]*_)\(\1\)&#39;, line):<br></td></tr
><tr
id=sl_svn141_4967

><td class="source">    error(filename, linenum, &#39;runtime/init&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4968

><td class="source">          &#39;You seem to be initializing a member variable with itself.&#39;)<br></td></tr
><tr
id=sl_svn141_4969

><td class="source"><br></td></tr
><tr
id=sl_svn141_4970

><td class="source"><br></td></tr
><tr
id=sl_svn141_4971

><td class="source">def CheckPrintf(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_4972

><td class="source">  &quot;&quot;&quot;Check for printf related issues.<br></td></tr
><tr
id=sl_svn141_4973

><td class="source"><br></td></tr
><tr
id=sl_svn141_4974

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_4975

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_4976

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_4977

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_4978

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_4979

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_4980

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_4981

><td class="source"><br></td></tr
><tr
id=sl_svn141_4982

><td class="source">  # When snprintf is used, the second argument shouldn&#39;t be a literal.<br></td></tr
><tr
id=sl_svn141_4983

><td class="source">  match = Search(r&#39;snprintf\s*\(([^,]*),\s*([0-9]*)\s*,&#39;, line)<br></td></tr
><tr
id=sl_svn141_4984

><td class="source">  if match and match.group(2) != &#39;0&#39;:<br></td></tr
><tr
id=sl_svn141_4985

><td class="source">    # If 2nd arg is zero, snprintf is used to calculate size.<br></td></tr
><tr
id=sl_svn141_4986

><td class="source">    error(filename, linenum, &#39;runtime/printf&#39;, 3,<br></td></tr
><tr
id=sl_svn141_4987

><td class="source">          &#39;If you can, use sizeof(%s) instead of %s as the 2nd arg &#39;<br></td></tr
><tr
id=sl_svn141_4988

><td class="source">          &#39;to snprintf.&#39; % (match.group(1), match.group(2)))<br></td></tr
><tr
id=sl_svn141_4989

><td class="source"><br></td></tr
><tr
id=sl_svn141_4990

><td class="source">  # Check if some verboten C functions are being used.<br></td></tr
><tr
id=sl_svn141_4991

><td class="source">  if Search(r&#39;\bsprintf\s*\(&#39;, line):<br></td></tr
><tr
id=sl_svn141_4992

><td class="source">    error(filename, linenum, &#39;runtime/printf&#39;, 5,<br></td></tr
><tr
id=sl_svn141_4993

><td class="source">          &#39;Never use sprintf. Use snprintf instead.&#39;)<br></td></tr
><tr
id=sl_svn141_4994

><td class="source">  match = Search(r&#39;\b(strcpy|strcat)\s*\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_4995

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_4996

><td class="source">    error(filename, linenum, &#39;runtime/printf&#39;, 4,<br></td></tr
><tr
id=sl_svn141_4997

><td class="source">          &#39;Almost always, snprintf is better than %s&#39; % match.group(1))<br></td></tr
><tr
id=sl_svn141_4998

><td class="source"><br></td></tr
><tr
id=sl_svn141_4999

><td class="source"><br></td></tr
><tr
id=sl_svn141_5000

><td class="source">def IsDerivedFunction(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5001

><td class="source">  &quot;&quot;&quot;Check if current line contains an inherited function.<br></td></tr
><tr
id=sl_svn141_5002

><td class="source"><br></td></tr
><tr
id=sl_svn141_5003

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5004

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5005

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5006

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5007

><td class="source">    True if current line contains a function with &quot;override&quot;<br></td></tr
><tr
id=sl_svn141_5008

><td class="source">    virt-specifier.<br></td></tr
><tr
id=sl_svn141_5009

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5010

><td class="source">  # Scan back a few lines for start of current function<br></td></tr
><tr
id=sl_svn141_5011

><td class="source">  for i in xrange(linenum, max(-1, linenum - 10), -1):<br></td></tr
><tr
id=sl_svn141_5012

><td class="source">    match = Match(r&#39;^([^()]*\w+)\(&#39;, clean_lines.elided[i])<br></td></tr
><tr
id=sl_svn141_5013

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_5014

><td class="source">      # Look for &quot;override&quot; after the matching closing parenthesis<br></td></tr
><tr
id=sl_svn141_5015

><td class="source">      line, _, closing_paren = CloseExpression(<br></td></tr
><tr
id=sl_svn141_5016

><td class="source">          clean_lines, i, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_5017

><td class="source">      return (closing_paren &gt;= 0 and<br></td></tr
><tr
id=sl_svn141_5018

><td class="source">              Search(r&#39;\boverride\b&#39;, line[closing_paren:]))<br></td></tr
><tr
id=sl_svn141_5019

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_5020

><td class="source"><br></td></tr
><tr
id=sl_svn141_5021

><td class="source"><br></td></tr
><tr
id=sl_svn141_5022

><td class="source">def IsOutOfLineMethodDefinition(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5023

><td class="source">  &quot;&quot;&quot;Check if current line contains an out-of-line method definition.<br></td></tr
><tr
id=sl_svn141_5024

><td class="source"><br></td></tr
><tr
id=sl_svn141_5025

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5026

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5027

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5028

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5029

><td class="source">    True if current line contains an out-of-line method definition.<br></td></tr
><tr
id=sl_svn141_5030

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5031

><td class="source">  # Scan back a few lines for start of current function<br></td></tr
><tr
id=sl_svn141_5032

><td class="source">  for i in xrange(linenum, max(-1, linenum - 10), -1):<br></td></tr
><tr
id=sl_svn141_5033

><td class="source">    if Match(r&#39;^([^()]*\w+)\(&#39;, clean_lines.elided[i]):<br></td></tr
><tr
id=sl_svn141_5034

><td class="source">      return Match(r&#39;^[^()]*\w+::\w+\(&#39;, clean_lines.elided[i]) is not None<br></td></tr
><tr
id=sl_svn141_5035

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_5036

><td class="source"><br></td></tr
><tr
id=sl_svn141_5037

><td class="source"><br></td></tr
><tr
id=sl_svn141_5038

><td class="source">def IsInitializerList(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5039

><td class="source">  &quot;&quot;&quot;Check if current line is inside constructor initializer list.<br></td></tr
><tr
id=sl_svn141_5040

><td class="source"><br></td></tr
><tr
id=sl_svn141_5041

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5042

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5043

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5044

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5045

><td class="source">    True if current line appears to be inside constructor initializer<br></td></tr
><tr
id=sl_svn141_5046

><td class="source">    list, False otherwise.<br></td></tr
><tr
id=sl_svn141_5047

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5048

><td class="source">  for i in xrange(linenum, 1, -1):<br></td></tr
><tr
id=sl_svn141_5049

><td class="source">    line = clean_lines.elided[i]<br></td></tr
><tr
id=sl_svn141_5050

><td class="source">    if i == linenum:<br></td></tr
><tr
id=sl_svn141_5051

><td class="source">      remove_function_body = Match(r&#39;^(.*)\{\s*$&#39;, line)<br></td></tr
><tr
id=sl_svn141_5052

><td class="source">      if remove_function_body:<br></td></tr
><tr
id=sl_svn141_5053

><td class="source">        line = remove_function_body.group(1)<br></td></tr
><tr
id=sl_svn141_5054

><td class="source"><br></td></tr
><tr
id=sl_svn141_5055

><td class="source">    if Search(r&#39;\s:\s*\w+[({]&#39;, line):<br></td></tr
><tr
id=sl_svn141_5056

><td class="source">      # A lone colon tend to indicate the start of a constructor<br></td></tr
><tr
id=sl_svn141_5057

><td class="source">      # initializer list.  It could also be a ternary operator, which<br></td></tr
><tr
id=sl_svn141_5058

><td class="source">      # also tend to appear in constructor initializer lists as<br></td></tr
><tr
id=sl_svn141_5059

><td class="source">      # opposed to parameter lists.<br></td></tr
><tr
id=sl_svn141_5060

><td class="source">      return True<br></td></tr
><tr
id=sl_svn141_5061

><td class="source">    if Search(r&#39;\}\s*,\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_5062

><td class="source">      # A closing brace followed by a comma is probably the end of a<br></td></tr
><tr
id=sl_svn141_5063

><td class="source">      # brace-initialized member in constructor initializer list.<br></td></tr
><tr
id=sl_svn141_5064

><td class="source">      return True<br></td></tr
><tr
id=sl_svn141_5065

><td class="source">    if Search(r&#39;[{};]\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_5066

><td class="source">      # Found one of the following:<br></td></tr
><tr
id=sl_svn141_5067

><td class="source">      # - A closing brace or semicolon, probably the end of the previous<br></td></tr
><tr
id=sl_svn141_5068

><td class="source">      #   function.<br></td></tr
><tr
id=sl_svn141_5069

><td class="source">      # - An opening brace, probably the start of current class or namespace.<br></td></tr
><tr
id=sl_svn141_5070

><td class="source">      #<br></td></tr
><tr
id=sl_svn141_5071

><td class="source">      # Current line is probably not inside an initializer list since<br></td></tr
><tr
id=sl_svn141_5072

><td class="source">      # we saw one of those things without seeing the starting colon.<br></td></tr
><tr
id=sl_svn141_5073

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5074

><td class="source"><br></td></tr
><tr
id=sl_svn141_5075

><td class="source">  # Got to the beginning of the file without seeing the start of<br></td></tr
><tr
id=sl_svn141_5076

><td class="source">  # constructor initializer list.<br></td></tr
><tr
id=sl_svn141_5077

><td class="source">  return False<br></td></tr
><tr
id=sl_svn141_5078

><td class="source"><br></td></tr
><tr
id=sl_svn141_5079

><td class="source"><br></td></tr
><tr
id=sl_svn141_5080

><td class="source">def CheckForNonConstReference(filename, clean_lines, linenum,<br></td></tr
><tr
id=sl_svn141_5081

><td class="source">                              nesting_state, error):<br></td></tr
><tr
id=sl_svn141_5082

><td class="source">  &quot;&quot;&quot;Check for non-const references.<br></td></tr
><tr
id=sl_svn141_5083

><td class="source"><br></td></tr
><tr
id=sl_svn141_5084

><td class="source">  Separate from CheckLanguage since it scans backwards from current<br></td></tr
><tr
id=sl_svn141_5085

><td class="source">  line, instead of scanning forward.<br></td></tr
><tr
id=sl_svn141_5086

><td class="source"><br></td></tr
><tr
id=sl_svn141_5087

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5088

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5089

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5090

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5091

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_5092

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_5093

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5094

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5095

><td class="source">  # Do nothing if there is no &#39;&amp;&#39; on current line.<br></td></tr
><tr
id=sl_svn141_5096

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5097

><td class="source">  if &#39;&amp;&#39; not in line:<br></td></tr
><tr
id=sl_svn141_5098

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5099

><td class="source"><br></td></tr
><tr
id=sl_svn141_5100

><td class="source">  # If a function is inherited, current function doesn&#39;t have much of<br></td></tr
><tr
id=sl_svn141_5101

><td class="source">  # a choice, so any non-const references should not be blamed on<br></td></tr
><tr
id=sl_svn141_5102

><td class="source">  # derived function.<br></td></tr
><tr
id=sl_svn141_5103

><td class="source">  if IsDerivedFunction(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5104

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5105

><td class="source"><br></td></tr
><tr
id=sl_svn141_5106

><td class="source">  # Don&#39;t warn on out-of-line method definitions, as we would warn on the<br></td></tr
><tr
id=sl_svn141_5107

><td class="source">  # in-line declaration, if it isn&#39;t marked with &#39;override&#39;.<br></td></tr
><tr
id=sl_svn141_5108

><td class="source">  if IsOutOfLineMethodDefinition(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5109

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5110

><td class="source"><br></td></tr
><tr
id=sl_svn141_5111

><td class="source">  # Long type names may be broken across multiple lines, usually in one<br></td></tr
><tr
id=sl_svn141_5112

><td class="source">  # of these forms:<br></td></tr
><tr
id=sl_svn141_5113

><td class="source">  #   LongType<br></td></tr
><tr
id=sl_svn141_5114

><td class="source">  #       ::LongTypeContinued &amp;identifier<br></td></tr
><tr
id=sl_svn141_5115

><td class="source">  #   LongType::<br></td></tr
><tr
id=sl_svn141_5116

><td class="source">  #       LongTypeContinued &amp;identifier<br></td></tr
><tr
id=sl_svn141_5117

><td class="source">  #   LongType&lt;<br></td></tr
><tr
id=sl_svn141_5118

><td class="source">  #       ...&gt;::LongTypeContinued &amp;identifier<br></td></tr
><tr
id=sl_svn141_5119

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5120

><td class="source">  # If we detected a type split across two lines, join the previous<br></td></tr
><tr
id=sl_svn141_5121

><td class="source">  # line to current line so that we can match const references<br></td></tr
><tr
id=sl_svn141_5122

><td class="source">  # accordingly.<br></td></tr
><tr
id=sl_svn141_5123

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5124

><td class="source">  # Note that this only scans back one line, since scanning back<br></td></tr
><tr
id=sl_svn141_5125

><td class="source">  # arbitrary number of lines would be expensive.  If you have a type<br></td></tr
><tr
id=sl_svn141_5126

><td class="source">  # that spans more than 2 lines, please use a typedef.<br></td></tr
><tr
id=sl_svn141_5127

><td class="source">  if linenum &gt; 1:<br></td></tr
><tr
id=sl_svn141_5128

><td class="source">    previous = None<br></td></tr
><tr
id=sl_svn141_5129

><td class="source">    if Match(r&#39;\s*::(?:[\w&lt;&gt;]|::)+\s*&amp;\s*\S&#39;, line):<br></td></tr
><tr
id=sl_svn141_5130

><td class="source">      # previous_line\n + ::current_line<br></td></tr
><tr
id=sl_svn141_5131

><td class="source">      previous = Search(r&#39;\b((?:const\s*)?(?:[\w&lt;&gt;]|::)+[\w&lt;&gt;])\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_5132

><td class="source">                        clean_lines.elided[linenum - 1])<br></td></tr
><tr
id=sl_svn141_5133

><td class="source">    elif Match(r&#39;\s*[a-zA-Z_]([\w&lt;&gt;]|::)+\s*&amp;\s*\S&#39;, line):<br></td></tr
><tr
id=sl_svn141_5134

><td class="source">      # previous_line::\n + current_line<br></td></tr
><tr
id=sl_svn141_5135

><td class="source">      previous = Search(r&#39;\b((?:const\s*)?(?:[\w&lt;&gt;]|::)+::)\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_5136

><td class="source">                        clean_lines.elided[linenum - 1])<br></td></tr
><tr
id=sl_svn141_5137

><td class="source">    if previous:<br></td></tr
><tr
id=sl_svn141_5138

><td class="source">      line = previous.group(1) + line.lstrip()<br></td></tr
><tr
id=sl_svn141_5139

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_5140

><td class="source">      # Check for templated parameter that is split across multiple lines<br></td></tr
><tr
id=sl_svn141_5141

><td class="source">      endpos = line.rfind(&#39;&gt;&#39;)<br></td></tr
><tr
id=sl_svn141_5142

><td class="source">      if endpos &gt; -1:<br></td></tr
><tr
id=sl_svn141_5143

><td class="source">        (_, startline, startpos) = ReverseCloseExpression(<br></td></tr
><tr
id=sl_svn141_5144

><td class="source">            clean_lines, linenum, endpos)<br></td></tr
><tr
id=sl_svn141_5145

><td class="source">        if startpos &gt; -1 and startline &lt; linenum:<br></td></tr
><tr
id=sl_svn141_5146

><td class="source">          # Found the matching &lt; on an earlier line, collect all<br></td></tr
><tr
id=sl_svn141_5147

><td class="source">          # pieces up to current line.<br></td></tr
><tr
id=sl_svn141_5148

><td class="source">          line = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_5149

><td class="source">          for i in xrange(startline, linenum + 1):<br></td></tr
><tr
id=sl_svn141_5150

><td class="source">            line += clean_lines.elided[i].strip()<br></td></tr
><tr
id=sl_svn141_5151

><td class="source"><br></td></tr
><tr
id=sl_svn141_5152

><td class="source">  # Check for non-const references in function parameters.  A single &#39;&amp;&#39; may<br></td></tr
><tr
id=sl_svn141_5153

><td class="source">  # found in the following places:<br></td></tr
><tr
id=sl_svn141_5154

><td class="source">  #   inside expression: binary &amp; for bitwise AND<br></td></tr
><tr
id=sl_svn141_5155

><td class="source">  #   inside expression: unary &amp; for taking the address of something<br></td></tr
><tr
id=sl_svn141_5156

><td class="source">  #   inside declarators: reference parameter<br></td></tr
><tr
id=sl_svn141_5157

><td class="source">  # We will exclude the first two cases by checking that we are not inside a<br></td></tr
><tr
id=sl_svn141_5158

><td class="source">  # function body, including one that was just introduced by a trailing &#39;{&#39;.<br></td></tr
><tr
id=sl_svn141_5159

><td class="source">  # TODO(unknown): Doesn&#39;t account for &#39;catch(Exception&amp; e)&#39; [rare].<br></td></tr
><tr
id=sl_svn141_5160

><td class="source">  if (nesting_state.previous_stack_top and<br></td></tr
><tr
id=sl_svn141_5161

><td class="source">      not (isinstance(nesting_state.previous_stack_top, _ClassInfo) or<br></td></tr
><tr
id=sl_svn141_5162

><td class="source">           isinstance(nesting_state.previous_stack_top, _NamespaceInfo))):<br></td></tr
><tr
id=sl_svn141_5163

><td class="source">    # Not at toplevel, not within a class, and not within a namespace<br></td></tr
><tr
id=sl_svn141_5164

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5165

><td class="source"><br></td></tr
><tr
id=sl_svn141_5166

><td class="source">  # Avoid initializer lists.  We only need to scan back from the<br></td></tr
><tr
id=sl_svn141_5167

><td class="source">  # current line for something that starts with &#39;:&#39;.<br></td></tr
><tr
id=sl_svn141_5168

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5169

><td class="source">  # We don&#39;t need to check the current line, since the &#39;&amp;&#39; would<br></td></tr
><tr
id=sl_svn141_5170

><td class="source">  # appear inside the second set of parentheses on the current line as<br></td></tr
><tr
id=sl_svn141_5171

><td class="source">  # opposed to the first set.<br></td></tr
><tr
id=sl_svn141_5172

><td class="source">  if linenum &gt; 0:<br></td></tr
><tr
id=sl_svn141_5173

><td class="source">    for i in xrange(linenum - 1, max(0, linenum - 10), -1):<br></td></tr
><tr
id=sl_svn141_5174

><td class="source">      previous_line = clean_lines.elided[i]<br></td></tr
><tr
id=sl_svn141_5175

><td class="source">      if not Search(r&#39;[),]\s*$&#39;, previous_line):<br></td></tr
><tr
id=sl_svn141_5176

><td class="source">        break<br></td></tr
><tr
id=sl_svn141_5177

><td class="source">      if Match(r&#39;^\s*:\s+\S&#39;, previous_line):<br></td></tr
><tr
id=sl_svn141_5178

><td class="source">        return<br></td></tr
><tr
id=sl_svn141_5179

><td class="source"><br></td></tr
><tr
id=sl_svn141_5180

><td class="source">  # Avoid preprocessors<br></td></tr
><tr
id=sl_svn141_5181

><td class="source">  if Search(r&#39;\\\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_5182

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5183

><td class="source"><br></td></tr
><tr
id=sl_svn141_5184

><td class="source">  # Avoid constructor initializer lists<br></td></tr
><tr
id=sl_svn141_5185

><td class="source">  if IsInitializerList(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5186

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5187

><td class="source"><br></td></tr
><tr
id=sl_svn141_5188

><td class="source">  # We allow non-const references in a few standard places, like functions<br></td></tr
><tr
id=sl_svn141_5189

><td class="source">  # called &quot;swap()&quot; or iostream operators like &quot;&lt;&lt;&quot; or &quot;&gt;&gt;&quot;.  Do not check<br></td></tr
><tr
id=sl_svn141_5190

><td class="source">  # those function parameters.<br></td></tr
><tr
id=sl_svn141_5191

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5192

><td class="source">  # We also accept &amp; in static_assert, which looks like a function but<br></td></tr
><tr
id=sl_svn141_5193

><td class="source">  # it&#39;s actually a declaration expression.<br></td></tr
><tr
id=sl_svn141_5194

><td class="source">  whitelisted_functions = (r&#39;(?:[sS]wap(?:&lt;\w:+&gt;)?|&#39;<br></td></tr
><tr
id=sl_svn141_5195

><td class="source">                           r&#39;operator\s*[&lt;&gt;][&lt;&gt;]|&#39;<br></td></tr
><tr
id=sl_svn141_5196

><td class="source">                           r&#39;static_assert|COMPILE_ASSERT&#39;<br></td></tr
><tr
id=sl_svn141_5197

><td class="source">                           r&#39;)\s*\(&#39;)<br></td></tr
><tr
id=sl_svn141_5198

><td class="source">  if Search(whitelisted_functions, line):<br></td></tr
><tr
id=sl_svn141_5199

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5200

><td class="source">  elif not Search(r&#39;\S+\([^)]*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_5201

><td class="source">    # Don&#39;t see a whitelisted function on this line.  Actually we<br></td></tr
><tr
id=sl_svn141_5202

><td class="source">    # didn&#39;t see any function name on this line, so this is likely a<br></td></tr
><tr
id=sl_svn141_5203

><td class="source">    # multi-line parameter list.  Try a bit harder to catch this case.<br></td></tr
><tr
id=sl_svn141_5204

><td class="source">    for i in xrange(2):<br></td></tr
><tr
id=sl_svn141_5205

><td class="source">      if (linenum &gt; i and<br></td></tr
><tr
id=sl_svn141_5206

><td class="source">          Search(whitelisted_functions, clean_lines.elided[linenum - i - 1])):<br></td></tr
><tr
id=sl_svn141_5207

><td class="source">        return<br></td></tr
><tr
id=sl_svn141_5208

><td class="source"><br></td></tr
><tr
id=sl_svn141_5209

><td class="source">  decls = ReplaceAll(r&#39;{[^}]*}&#39;, &#39; &#39;, line)  # exclude function body<br></td></tr
><tr
id=sl_svn141_5210

><td class="source">  for parameter in re.findall(_RE_PATTERN_REF_PARAM, decls):<br></td></tr
><tr
id=sl_svn141_5211

><td class="source">    if not Match(_RE_PATTERN_CONST_REF_PARAM, parameter):<br></td></tr
><tr
id=sl_svn141_5212

><td class="source">      error(filename, linenum, &#39;runtime/references&#39;, 2,<br></td></tr
><tr
id=sl_svn141_5213

><td class="source">            &#39;Is this a non-const reference? &#39;<br></td></tr
><tr
id=sl_svn141_5214

><td class="source">            &#39;If so, make const or use a pointer: &#39; +<br></td></tr
><tr
id=sl_svn141_5215

><td class="source">            ReplaceAll(&#39; *&lt;&#39;, &#39;&lt;&#39;, parameter))<br></td></tr
><tr
id=sl_svn141_5216

><td class="source"><br></td></tr
><tr
id=sl_svn141_5217

><td class="source"><br></td></tr
><tr
id=sl_svn141_5218

><td class="source">def CheckCasts(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5219

><td class="source">  &quot;&quot;&quot;Various cast related checks.<br></td></tr
><tr
id=sl_svn141_5220

><td class="source"><br></td></tr
><tr
id=sl_svn141_5221

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5222

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5223

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5224

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5225

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5226

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5227

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5228

><td class="source"><br></td></tr
><tr
id=sl_svn141_5229

><td class="source">  # Check to see if they&#39;re using an conversion function cast.<br></td></tr
><tr
id=sl_svn141_5230

><td class="source">  # I just try to capture the most common basic types, though there are more.<br></td></tr
><tr
id=sl_svn141_5231

><td class="source">  # Parameterless conversion functions, such as bool(), are allowed as they are<br></td></tr
><tr
id=sl_svn141_5232

><td class="source">  # probably a member operator declaration or default constructor.<br></td></tr
><tr
id=sl_svn141_5233

><td class="source">  match = Search(<br></td></tr
><tr
id=sl_svn141_5234

><td class="source">      r&#39;(\bnew\s+|\S&lt;\s*(?:const\s+)?)?\b&#39;<br></td></tr
><tr
id=sl_svn141_5235

><td class="source">      r&#39;(int|float|double|bool|char|int32|uint32|int64|uint64)&#39;<br></td></tr
><tr
id=sl_svn141_5236

><td class="source">      r&#39;(\([^)].*)&#39;, line)<br></td></tr
><tr
id=sl_svn141_5237

><td class="source">  expecting_function = ExpectingFunctionArgs(clean_lines, linenum)<br></td></tr
><tr
id=sl_svn141_5238

><td class="source">  if match and not expecting_function:<br></td></tr
><tr
id=sl_svn141_5239

><td class="source">    matched_type = match.group(2)<br></td></tr
><tr
id=sl_svn141_5240

><td class="source"><br></td></tr
><tr
id=sl_svn141_5241

><td class="source">    # matched_new_or_template is used to silence two false positives:<br></td></tr
><tr
id=sl_svn141_5242

><td class="source">    # - New operators<br></td></tr
><tr
id=sl_svn141_5243

><td class="source">    # - Template arguments with function types<br></td></tr
><tr
id=sl_svn141_5244

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_5245

><td class="source">    # For template arguments, we match on types immediately following<br></td></tr
><tr
id=sl_svn141_5246

><td class="source">    # an opening bracket without any spaces.  This is a fast way to<br></td></tr
><tr
id=sl_svn141_5247

><td class="source">    # silence the common case where the function type is the first<br></td></tr
><tr
id=sl_svn141_5248

><td class="source">    # template argument.  False negative with less-than comparison is<br></td></tr
><tr
id=sl_svn141_5249

><td class="source">    # avoided because those operators are usually followed by a space.<br></td></tr
><tr
id=sl_svn141_5250

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_5251

><td class="source">    #   function&lt;double(double)&gt;   // bracket + no space = false positive<br></td></tr
><tr
id=sl_svn141_5252

><td class="source">    #   value &lt; double(42)         // bracket + space = true positive<br></td></tr
><tr
id=sl_svn141_5253

><td class="source">    matched_new_or_template = match.group(1)<br></td></tr
><tr
id=sl_svn141_5254

><td class="source"><br></td></tr
><tr
id=sl_svn141_5255

><td class="source">    # Avoid arrays by looking for brackets that come after the closing<br></td></tr
><tr
id=sl_svn141_5256

><td class="source">    # parenthesis.<br></td></tr
><tr
id=sl_svn141_5257

><td class="source">    if Match(r&#39;\([^()]+\)\s*\[&#39;, match.group(3)):<br></td></tr
><tr
id=sl_svn141_5258

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_5259

><td class="source"><br></td></tr
><tr
id=sl_svn141_5260

><td class="source">    # Other things to ignore:<br></td></tr
><tr
id=sl_svn141_5261

><td class="source">    # - Function pointers<br></td></tr
><tr
id=sl_svn141_5262

><td class="source">    # - Casts to pointer types<br></td></tr
><tr
id=sl_svn141_5263

><td class="source">    # - Placement new<br></td></tr
><tr
id=sl_svn141_5264

><td class="source">    # - Alias declarations<br></td></tr
><tr
id=sl_svn141_5265

><td class="source">    matched_funcptr = match.group(3)<br></td></tr
><tr
id=sl_svn141_5266

><td class="source">    if (matched_new_or_template is None and<br></td></tr
><tr
id=sl_svn141_5267

><td class="source">        not (matched_funcptr and<br></td></tr
><tr
id=sl_svn141_5268

><td class="source">             (Match(r&#39;\((?:[^() ]+::\s*\*\s*)?[^() ]+\)\s*\(&#39;,<br></td></tr
><tr
id=sl_svn141_5269

><td class="source">                    matched_funcptr) or<br></td></tr
><tr
id=sl_svn141_5270

><td class="source">              matched_funcptr.startswith(&#39;(*)&#39;))) and<br></td></tr
><tr
id=sl_svn141_5271

><td class="source">        not Match(r&#39;\s*using\s+\S+\s*=\s*&#39; + matched_type, line) and<br></td></tr
><tr
id=sl_svn141_5272

><td class="source">        not Search(r&#39;new\(\S+\)\s*&#39; + matched_type, line)):<br></td></tr
><tr
id=sl_svn141_5273

><td class="source">      error(filename, linenum, &#39;readability/casting&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5274

><td class="source">            &#39;Using deprecated casting style.  &#39;<br></td></tr
><tr
id=sl_svn141_5275

><td class="source">            &#39;Use static_cast&lt;%s&gt;(...) instead&#39; %<br></td></tr
><tr
id=sl_svn141_5276

><td class="source">            matched_type)<br></td></tr
><tr
id=sl_svn141_5277

><td class="source"><br></td></tr
><tr
id=sl_svn141_5278

><td class="source">  if not expecting_function:<br></td></tr
><tr
id=sl_svn141_5279

><td class="source">    CheckCStyleCast(filename, clean_lines, linenum, &#39;static_cast&#39;,<br></td></tr
><tr
id=sl_svn141_5280

><td class="source">                    r&#39;\((int|float|double|bool|char|u?int(16|32|64))\)&#39;, error)<br></td></tr
><tr
id=sl_svn141_5281

><td class="source"><br></td></tr
><tr
id=sl_svn141_5282

><td class="source">  # This doesn&#39;t catch all cases. Consider (const char * const)&quot;hello&quot;.<br></td></tr
><tr
id=sl_svn141_5283

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5284

><td class="source">  # (char *) &quot;foo&quot; should always be a const_cast (reinterpret_cast won&#39;t<br></td></tr
><tr
id=sl_svn141_5285

><td class="source">  # compile).<br></td></tr
><tr
id=sl_svn141_5286

><td class="source">  if CheckCStyleCast(filename, clean_lines, linenum, &#39;const_cast&#39;,<br></td></tr
><tr
id=sl_svn141_5287

><td class="source">                     r&#39;\((char\s?\*+\s?)\)\s*&quot;&#39;, error):<br></td></tr
><tr
id=sl_svn141_5288

><td class="source">    pass<br></td></tr
><tr
id=sl_svn141_5289

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_5290

><td class="source">    # Check pointer casts for other than string constants<br></td></tr
><tr
id=sl_svn141_5291

><td class="source">    CheckCStyleCast(filename, clean_lines, linenum, &#39;reinterpret_cast&#39;,<br></td></tr
><tr
id=sl_svn141_5292

><td class="source">                    r&#39;\((\w+\s?\*+\s?)\)&#39;, error)<br></td></tr
><tr
id=sl_svn141_5293

><td class="source"><br></td></tr
><tr
id=sl_svn141_5294

><td class="source">  # In addition, we look for people taking the address of a cast.  This<br></td></tr
><tr
id=sl_svn141_5295

><td class="source">  # is dangerous -- casts can assign to temporaries, so the pointer doesn&#39;t<br></td></tr
><tr
id=sl_svn141_5296

><td class="source">  # point where you think.<br></td></tr
><tr
id=sl_svn141_5297

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5298

><td class="source">  # Some non-identifier character is required before the &#39;&amp;&#39; for the<br></td></tr
><tr
id=sl_svn141_5299

><td class="source">  # expression to be recognized as a cast.  These are casts:<br></td></tr
><tr
id=sl_svn141_5300

><td class="source">  #   expression = &amp;static_cast&lt;int*&gt;(temporary());<br></td></tr
><tr
id=sl_svn141_5301

><td class="source">  #   function(&amp;(int*)(temporary()));<br></td></tr
><tr
id=sl_svn141_5302

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5303

><td class="source">  # This is not a cast:<br></td></tr
><tr
id=sl_svn141_5304

><td class="source">  #   reference_type&amp;(int* function_param);<br></td></tr
><tr
id=sl_svn141_5305

><td class="source">  match = Search(<br></td></tr
><tr
id=sl_svn141_5306

><td class="source">      r&#39;(?:[^\w]&amp;\(([^)*][^)]*)\)[\w(])|&#39;<br></td></tr
><tr
id=sl_svn141_5307

><td class="source">      r&#39;(?:[^\w]&amp;(static|dynamic|down|reinterpret)_cast\b)&#39;, line)<br></td></tr
><tr
id=sl_svn141_5308

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_5309

><td class="source">    # Try a better error message when the &amp; is bound to something<br></td></tr
><tr
id=sl_svn141_5310

><td class="source">    # dereferenced by the casted pointer, as opposed to the casted<br></td></tr
><tr
id=sl_svn141_5311

><td class="source">    # pointer itself.<br></td></tr
><tr
id=sl_svn141_5312

><td class="source">    parenthesis_error = False<br></td></tr
><tr
id=sl_svn141_5313

><td class="source">    match = Match(r&#39;^(.*&amp;(?:static|dynamic|down|reinterpret)_cast\b)&lt;&#39;, line)<br></td></tr
><tr
id=sl_svn141_5314

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_5315

><td class="source">      _, y1, x1 = CloseExpression(clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_5316

><td class="source">      if x1 &gt;= 0 and clean_lines.elided[y1][x1] == &#39;(&#39;:<br></td></tr
><tr
id=sl_svn141_5317

><td class="source">        _, y2, x2 = CloseExpression(clean_lines, y1, x1)<br></td></tr
><tr
id=sl_svn141_5318

><td class="source">        if x2 &gt;= 0:<br></td></tr
><tr
id=sl_svn141_5319

><td class="source">          extended_line = clean_lines.elided[y2][x2:]<br></td></tr
><tr
id=sl_svn141_5320

><td class="source">          if y2 &lt; clean_lines.NumLines() - 1:<br></td></tr
><tr
id=sl_svn141_5321

><td class="source">            extended_line += clean_lines.elided[y2 + 1]<br></td></tr
><tr
id=sl_svn141_5322

><td class="source">          if Match(r&#39;\s*(?:-&gt;|\[)&#39;, extended_line):<br></td></tr
><tr
id=sl_svn141_5323

><td class="source">            parenthesis_error = True<br></td></tr
><tr
id=sl_svn141_5324

><td class="source"><br></td></tr
><tr
id=sl_svn141_5325

><td class="source">    if parenthesis_error:<br></td></tr
><tr
id=sl_svn141_5326

><td class="source">      error(filename, linenum, &#39;readability/casting&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5327

><td class="source">            (&#39;Are you taking an address of something dereferenced &#39;<br></td></tr
><tr
id=sl_svn141_5328

><td class="source">             &#39;from a cast?  Wrapping the dereferenced expression in &#39;<br></td></tr
><tr
id=sl_svn141_5329

><td class="source">             &#39;parentheses will make the binding more obvious&#39;))<br></td></tr
><tr
id=sl_svn141_5330

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_5331

><td class="source">      error(filename, linenum, &#39;runtime/casting&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5332

><td class="source">            (&#39;Are you taking an address of a cast?  &#39;<br></td></tr
><tr
id=sl_svn141_5333

><td class="source">             &#39;This is dangerous: could be a temp var.  &#39;<br></td></tr
><tr
id=sl_svn141_5334

><td class="source">             &#39;Take the address before doing the cast, rather than after&#39;))<br></td></tr
><tr
id=sl_svn141_5335

><td class="source"><br></td></tr
><tr
id=sl_svn141_5336

><td class="source"><br></td></tr
><tr
id=sl_svn141_5337

><td class="source">def CheckCStyleCast(filename, clean_lines, linenum, cast_type, pattern, error):<br></td></tr
><tr
id=sl_svn141_5338

><td class="source">  &quot;&quot;&quot;Checks for a C-style cast by looking for the pattern.<br></td></tr
><tr
id=sl_svn141_5339

><td class="source"><br></td></tr
><tr
id=sl_svn141_5340

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5341

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5342

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5343

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5344

><td class="source">    cast_type: The string for the C++ cast to recommend.  This is either<br></td></tr
><tr
id=sl_svn141_5345

><td class="source">      reinterpret_cast, static_cast, or const_cast, depending.<br></td></tr
><tr
id=sl_svn141_5346

><td class="source">    pattern: The regular expression used to find C-style casts.<br></td></tr
><tr
id=sl_svn141_5347

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5348

><td class="source"><br></td></tr
><tr
id=sl_svn141_5349

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5350

><td class="source">    True if an error was emitted.<br></td></tr
><tr
id=sl_svn141_5351

><td class="source">    False otherwise.<br></td></tr
><tr
id=sl_svn141_5352

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5353

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5354

><td class="source">  match = Search(pattern, line)<br></td></tr
><tr
id=sl_svn141_5355

><td class="source">  if not match:<br></td></tr
><tr
id=sl_svn141_5356

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5357

><td class="source"><br></td></tr
><tr
id=sl_svn141_5358

><td class="source">  # Exclude lines with keywords that tend to look like casts<br></td></tr
><tr
id=sl_svn141_5359

><td class="source">  context = line[0:match.start(1) - 1]<br></td></tr
><tr
id=sl_svn141_5360

><td class="source">  if Match(r&#39;.*\b(?:sizeof|alignof|alignas|[_A-Z][_A-Z0-9]*)\s*$&#39;, context):<br></td></tr
><tr
id=sl_svn141_5361

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5362

><td class="source"><br></td></tr
><tr
id=sl_svn141_5363

><td class="source">  # Try expanding current context to see if we one level of<br></td></tr
><tr
id=sl_svn141_5364

><td class="source">  # parentheses inside a macro.<br></td></tr
><tr
id=sl_svn141_5365

><td class="source">  if linenum &gt; 0:<br></td></tr
><tr
id=sl_svn141_5366

><td class="source">    for i in xrange(linenum - 1, max(0, linenum - 5), -1):<br></td></tr
><tr
id=sl_svn141_5367

><td class="source">      context = clean_lines.elided[i] + context<br></td></tr
><tr
id=sl_svn141_5368

><td class="source">  if Match(r&#39;.*\b[_A-Z][_A-Z0-9]*\s*\((?:\([^()]*\)|[^()])*$&#39;, context):<br></td></tr
><tr
id=sl_svn141_5369

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5370

><td class="source"><br></td></tr
><tr
id=sl_svn141_5371

><td class="source">  # operator++(int) and operator--(int)<br></td></tr
><tr
id=sl_svn141_5372

><td class="source">  if context.endswith(&#39; operator++&#39;) or context.endswith(&#39; operator--&#39;):<br></td></tr
><tr
id=sl_svn141_5373

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5374

><td class="source"><br></td></tr
><tr
id=sl_svn141_5375

><td class="source">  # A single unnamed argument for a function tends to look like old<br></td></tr
><tr
id=sl_svn141_5376

><td class="source">  # style cast.  If we see those, don&#39;t issue warnings for deprecated<br></td></tr
><tr
id=sl_svn141_5377

><td class="source">  # casts, instead issue warnings for unnamed arguments where<br></td></tr
><tr
id=sl_svn141_5378

><td class="source">  # appropriate.<br></td></tr
><tr
id=sl_svn141_5379

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5380

><td class="source">  # These are things that we want warnings for, since the style guide<br></td></tr
><tr
id=sl_svn141_5381

><td class="source">  # explicitly require all parameters to be named:<br></td></tr
><tr
id=sl_svn141_5382

><td class="source">  #   Function(int);<br></td></tr
><tr
id=sl_svn141_5383

><td class="source">  #   Function(int) {<br></td></tr
><tr
id=sl_svn141_5384

><td class="source">  #   ConstMember(int) const;<br></td></tr
><tr
id=sl_svn141_5385

><td class="source">  #   ConstMember(int) const {<br></td></tr
><tr
id=sl_svn141_5386

><td class="source">  #   ExceptionMember(int) throw (...);<br></td></tr
><tr
id=sl_svn141_5387

><td class="source">  #   ExceptionMember(int) throw (...) {<br></td></tr
><tr
id=sl_svn141_5388

><td class="source">  #   PureVirtual(int) = 0;<br></td></tr
><tr
id=sl_svn141_5389

><td class="source">  #   [](int) -&gt; bool {<br></td></tr
><tr
id=sl_svn141_5390

><td class="source">  #<br></td></tr
><tr
id=sl_svn141_5391

><td class="source">  # These are functions of some sort, where the compiler would be fine<br></td></tr
><tr
id=sl_svn141_5392

><td class="source">  # if they had named parameters, but people often omit those<br></td></tr
><tr
id=sl_svn141_5393

><td class="source">  # identifiers to reduce clutter:<br></td></tr
><tr
id=sl_svn141_5394

><td class="source">  #   (FunctionPointer)(int);<br></td></tr
><tr
id=sl_svn141_5395

><td class="source">  #   (FunctionPointer)(int) = value;<br></td></tr
><tr
id=sl_svn141_5396

><td class="source">  #   Function((function_pointer_arg)(int))<br></td></tr
><tr
id=sl_svn141_5397

><td class="source">  #   Function((function_pointer_arg)(int), int param)<br></td></tr
><tr
id=sl_svn141_5398

><td class="source">  #   &lt;TemplateArgument(int)&gt;;<br></td></tr
><tr
id=sl_svn141_5399

><td class="source">  #   &lt;(FunctionPointerTemplateArgument)(int)&gt;;<br></td></tr
><tr
id=sl_svn141_5400

><td class="source">  remainder = line[match.end(0):]<br></td></tr
><tr
id=sl_svn141_5401

><td class="source">  if Match(r&#39;^\s*(?:;|const\b|throw\b|final\b|override\b|[=&gt;{),]|-&gt;)&#39;,<br></td></tr
><tr
id=sl_svn141_5402

><td class="source">           remainder):<br></td></tr
><tr
id=sl_svn141_5403

><td class="source">    # Looks like an unnamed parameter.<br></td></tr
><tr
id=sl_svn141_5404

><td class="source"><br></td></tr
><tr
id=sl_svn141_5405

><td class="source">    # Don&#39;t warn on any kind of template arguments.<br></td></tr
><tr
id=sl_svn141_5406

><td class="source">    if Match(r&#39;^\s*&gt;&#39;, remainder):<br></td></tr
><tr
id=sl_svn141_5407

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5408

><td class="source"><br></td></tr
><tr
id=sl_svn141_5409

><td class="source">    # Don&#39;t warn on assignments to function pointers, but keep warnings for<br></td></tr
><tr
id=sl_svn141_5410

><td class="source">    # unnamed parameters to pure virtual functions.  Note that this pattern<br></td></tr
><tr
id=sl_svn141_5411

><td class="source">    # will also pass on assignments of &quot;0&quot; to function pointers, but the<br></td></tr
><tr
id=sl_svn141_5412

><td class="source">    # preferred values for those would be &quot;nullptr&quot; or &quot;NULL&quot;.<br></td></tr
><tr
id=sl_svn141_5413

><td class="source">    matched_zero = Match(r&#39;^\s=\s*(\S+)\s*;&#39;, remainder)<br></td></tr
><tr
id=sl_svn141_5414

><td class="source">    if matched_zero and matched_zero.group(1) != &#39;0&#39;:<br></td></tr
><tr
id=sl_svn141_5415

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5416

><td class="source"><br></td></tr
><tr
id=sl_svn141_5417

><td class="source">    # Don&#39;t warn on function pointer declarations.  For this we need<br></td></tr
><tr
id=sl_svn141_5418

><td class="source">    # to check what came before the &quot;(type)&quot; string.<br></td></tr
><tr
id=sl_svn141_5419

><td class="source">    if Match(r&#39;.*\)\s*$&#39;, line[0:match.start(0)]):<br></td></tr
><tr
id=sl_svn141_5420

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5421

><td class="source"><br></td></tr
><tr
id=sl_svn141_5422

><td class="source">    # Don&#39;t warn if the parameter is named with block comments, e.g.:<br></td></tr
><tr
id=sl_svn141_5423

><td class="source">    #  Function(int /*unused_param*/);<br></td></tr
><tr
id=sl_svn141_5424

><td class="source">    raw_line = clean_lines.raw_lines[linenum]<br></td></tr
><tr
id=sl_svn141_5425

><td class="source">    if &#39;/*&#39; in raw_line:<br></td></tr
><tr
id=sl_svn141_5426

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5427

><td class="source"><br></td></tr
><tr
id=sl_svn141_5428

><td class="source">    # Passed all filters, issue warning here.<br></td></tr
><tr
id=sl_svn141_5429

><td class="source">    error(filename, linenum, &#39;readability/function&#39;, 3,<br></td></tr
><tr
id=sl_svn141_5430

><td class="source">          &#39;All parameters should be named in a function&#39;)<br></td></tr
><tr
id=sl_svn141_5431

><td class="source">    return True<br></td></tr
><tr
id=sl_svn141_5432

><td class="source"><br></td></tr
><tr
id=sl_svn141_5433

><td class="source">  # At this point, all that should be left is actual casts.<br></td></tr
><tr
id=sl_svn141_5434

><td class="source">  error(filename, linenum, &#39;readability/casting&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5435

><td class="source">        &#39;Using C-style cast.  Use %s&lt;%s&gt;(...) instead&#39; %<br></td></tr
><tr
id=sl_svn141_5436

><td class="source">        (cast_type, match.group(1)))<br></td></tr
><tr
id=sl_svn141_5437

><td class="source"><br></td></tr
><tr
id=sl_svn141_5438

><td class="source">  return True<br></td></tr
><tr
id=sl_svn141_5439

><td class="source"><br></td></tr
><tr
id=sl_svn141_5440

><td class="source"><br></td></tr
><tr
id=sl_svn141_5441

><td class="source">def ExpectingFunctionArgs(clean_lines, linenum):<br></td></tr
><tr
id=sl_svn141_5442

><td class="source">  &quot;&quot;&quot;Checks whether where function type arguments are expected.<br></td></tr
><tr
id=sl_svn141_5443

><td class="source"><br></td></tr
><tr
id=sl_svn141_5444

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5445

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5446

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5447

><td class="source"><br></td></tr
><tr
id=sl_svn141_5448

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5449

><td class="source">    True if the line at &#39;linenum&#39; is inside something that expects arguments<br></td></tr
><tr
id=sl_svn141_5450

><td class="source">    of function types.<br></td></tr
><tr
id=sl_svn141_5451

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5452

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5453

><td class="source">  return (Match(r&#39;^\s*MOCK_(CONST_)?METHOD\d+(_T)?\(&#39;, line) or<br></td></tr
><tr
id=sl_svn141_5454

><td class="source">          (linenum &gt;= 2 and<br></td></tr
><tr
id=sl_svn141_5455

><td class="source">           (Match(r&#39;^\s*MOCK_(?:CONST_)?METHOD\d+(?:_T)?\((?:\S+,)?\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_5456

><td class="source">                  clean_lines.elided[linenum - 1]) or<br></td></tr
><tr
id=sl_svn141_5457

><td class="source">            Match(r&#39;^\s*MOCK_(?:CONST_)?METHOD\d+(?:_T)?\(\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_5458

><td class="source">                  clean_lines.elided[linenum - 2]) or<br></td></tr
><tr
id=sl_svn141_5459

><td class="source">            Search(r&#39;\bstd::m?function\s*\&lt;\s*$&#39;,<br></td></tr
><tr
id=sl_svn141_5460

><td class="source">                   clean_lines.elided[linenum - 1]))))<br></td></tr
><tr
id=sl_svn141_5461

><td class="source"><br></td></tr
><tr
id=sl_svn141_5462

><td class="source"><br></td></tr
><tr
id=sl_svn141_5463

><td class="source">_HEADERS_CONTAINING_TEMPLATES = (<br></td></tr
><tr
id=sl_svn141_5464

><td class="source">    (&#39;&lt;deque&gt;&#39;, (&#39;deque&#39;,)),<br></td></tr
><tr
id=sl_svn141_5465

><td class="source">    (&#39;&lt;functional&gt;&#39;, (&#39;unary_function&#39;, &#39;binary_function&#39;,<br></td></tr
><tr
id=sl_svn141_5466

><td class="source">                      &#39;plus&#39;, &#39;minus&#39;, &#39;multiplies&#39;, &#39;divides&#39;, &#39;modulus&#39;,<br></td></tr
><tr
id=sl_svn141_5467

><td class="source">                      &#39;negate&#39;,<br></td></tr
><tr
id=sl_svn141_5468

><td class="source">                      &#39;equal_to&#39;, &#39;not_equal_to&#39;, &#39;greater&#39;, &#39;less&#39;,<br></td></tr
><tr
id=sl_svn141_5469

><td class="source">                      &#39;greater_equal&#39;, &#39;less_equal&#39;,<br></td></tr
><tr
id=sl_svn141_5470

><td class="source">                      &#39;logical_and&#39;, &#39;logical_or&#39;, &#39;logical_not&#39;,<br></td></tr
><tr
id=sl_svn141_5471

><td class="source">                      &#39;unary_negate&#39;, &#39;not1&#39;, &#39;binary_negate&#39;, &#39;not2&#39;,<br></td></tr
><tr
id=sl_svn141_5472

><td class="source">                      &#39;bind1st&#39;, &#39;bind2nd&#39;,<br></td></tr
><tr
id=sl_svn141_5473

><td class="source">                      &#39;pointer_to_unary_function&#39;,<br></td></tr
><tr
id=sl_svn141_5474

><td class="source">                      &#39;pointer_to_binary_function&#39;,<br></td></tr
><tr
id=sl_svn141_5475

><td class="source">                      &#39;ptr_fun&#39;,<br></td></tr
><tr
id=sl_svn141_5476

><td class="source">                      &#39;mem_fun_t&#39;, &#39;mem_fun&#39;, &#39;mem_fun1_t&#39;, &#39;mem_fun1_ref_t&#39;,<br></td></tr
><tr
id=sl_svn141_5477

><td class="source">                      &#39;mem_fun_ref_t&#39;,<br></td></tr
><tr
id=sl_svn141_5478

><td class="source">                      &#39;const_mem_fun_t&#39;, &#39;const_mem_fun1_t&#39;,<br></td></tr
><tr
id=sl_svn141_5479

><td class="source">                      &#39;const_mem_fun_ref_t&#39;, &#39;const_mem_fun1_ref_t&#39;,<br></td></tr
><tr
id=sl_svn141_5480

><td class="source">                      &#39;mem_fun_ref&#39;,<br></td></tr
><tr
id=sl_svn141_5481

><td class="source">                     )),<br></td></tr
><tr
id=sl_svn141_5482

><td class="source">    (&#39;&lt;limits&gt;&#39;, (&#39;numeric_limits&#39;,)),<br></td></tr
><tr
id=sl_svn141_5483

><td class="source">    (&#39;&lt;list&gt;&#39;, (&#39;list&#39;,)),<br></td></tr
><tr
id=sl_svn141_5484

><td class="source">    (&#39;&lt;map&gt;&#39;, (&#39;map&#39;, &#39;multimap&#39;,)),<br></td></tr
><tr
id=sl_svn141_5485

><td class="source">    (&#39;&lt;memory&gt;&#39;, (&#39;allocator&#39;,)),<br></td></tr
><tr
id=sl_svn141_5486

><td class="source">    (&#39;&lt;queue&gt;&#39;, (&#39;queue&#39;, &#39;priority_queue&#39;,)),<br></td></tr
><tr
id=sl_svn141_5487

><td class="source">    (&#39;&lt;set&gt;&#39;, (&#39;set&#39;, &#39;multiset&#39;,)),<br></td></tr
><tr
id=sl_svn141_5488

><td class="source">    (&#39;&lt;stack&gt;&#39;, (&#39;stack&#39;,)),<br></td></tr
><tr
id=sl_svn141_5489

><td class="source">    (&#39;&lt;string&gt;&#39;, (&#39;char_traits&#39;, &#39;basic_string&#39;,)),<br></td></tr
><tr
id=sl_svn141_5490

><td class="source">    (&#39;&lt;tuple&gt;&#39;, (&#39;tuple&#39;,)),<br></td></tr
><tr
id=sl_svn141_5491

><td class="source">    (&#39;&lt;utility&gt;&#39;, (&#39;pair&#39;,)),<br></td></tr
><tr
id=sl_svn141_5492

><td class="source">    (&#39;&lt;vector&gt;&#39;, (&#39;vector&#39;,)),<br></td></tr
><tr
id=sl_svn141_5493

><td class="source"><br></td></tr
><tr
id=sl_svn141_5494

><td class="source">    # gcc extensions.<br></td></tr
><tr
id=sl_svn141_5495

><td class="source">    # Note: std::hash is their hash, ::hash is our hash<br></td></tr
><tr
id=sl_svn141_5496

><td class="source">    (&#39;&lt;hash_map&gt;&#39;, (&#39;hash_map&#39;, &#39;hash_multimap&#39;,)),<br></td></tr
><tr
id=sl_svn141_5497

><td class="source">    (&#39;&lt;hash_set&gt;&#39;, (&#39;hash_set&#39;, &#39;hash_multiset&#39;,)),<br></td></tr
><tr
id=sl_svn141_5498

><td class="source">    (&#39;&lt;slist&gt;&#39;, (&#39;slist&#39;,)),<br></td></tr
><tr
id=sl_svn141_5499

><td class="source">    )<br></td></tr
><tr
id=sl_svn141_5500

><td class="source"><br></td></tr
><tr
id=sl_svn141_5501

><td class="source">_RE_PATTERN_STRING = re.compile(r&#39;\bstring\b&#39;)<br></td></tr
><tr
id=sl_svn141_5502

><td class="source"><br></td></tr
><tr
id=sl_svn141_5503

><td class="source">_re_pattern_algorithm_header = []<br></td></tr
><tr
id=sl_svn141_5504

><td class="source">for _template in (&#39;copy&#39;, &#39;max&#39;, &#39;min&#39;, &#39;min_element&#39;, &#39;sort&#39;, &#39;swap&#39;,<br></td></tr
><tr
id=sl_svn141_5505

><td class="source">                  &#39;transform&#39;):<br></td></tr
><tr
id=sl_svn141_5506

><td class="source">  # Match max&lt;type&gt;(..., ...), max(..., ...), but not foo-&gt;max, foo.max or<br></td></tr
><tr
id=sl_svn141_5507

><td class="source">  # type::max().<br></td></tr
><tr
id=sl_svn141_5508

><td class="source">  _re_pattern_algorithm_header.append(<br></td></tr
><tr
id=sl_svn141_5509

><td class="source">      (re.compile(r&#39;[^&gt;.]\b&#39; + _template + r&#39;(&lt;.*?&gt;)?\([^\)]&#39;),<br></td></tr
><tr
id=sl_svn141_5510

><td class="source">       _template,<br></td></tr
><tr
id=sl_svn141_5511

><td class="source">       &#39;&lt;algorithm&gt;&#39;))<br></td></tr
><tr
id=sl_svn141_5512

><td class="source"><br></td></tr
><tr
id=sl_svn141_5513

><td class="source">_re_pattern_templates = []<br></td></tr
><tr
id=sl_svn141_5514

><td class="source">for _header, _templates in _HEADERS_CONTAINING_TEMPLATES:<br></td></tr
><tr
id=sl_svn141_5515

><td class="source">  for _template in _templates:<br></td></tr
><tr
id=sl_svn141_5516

><td class="source">    _re_pattern_templates.append(<br></td></tr
><tr
id=sl_svn141_5517

><td class="source">        (re.compile(r&#39;(\&lt;|\b)&#39; + _template + r&#39;\s*\&lt;&#39;),<br></td></tr
><tr
id=sl_svn141_5518

><td class="source">         _template + &#39;&lt;&gt;&#39;,<br></td></tr
><tr
id=sl_svn141_5519

><td class="source">         _header))<br></td></tr
><tr
id=sl_svn141_5520

><td class="source"><br></td></tr
><tr
id=sl_svn141_5521

><td class="source"><br></td></tr
><tr
id=sl_svn141_5522

><td class="source">def FilesBelongToSameModule(filename_cc, filename_h):<br></td></tr
><tr
id=sl_svn141_5523

><td class="source">  &quot;&quot;&quot;Check if these two filenames belong to the same module.<br></td></tr
><tr
id=sl_svn141_5524

><td class="source"><br></td></tr
><tr
id=sl_svn141_5525

><td class="source">  The concept of a &#39;module&#39; here is a as follows:<br></td></tr
><tr
id=sl_svn141_5526

><td class="source">  foo.h, foo-inl.h, foo.cc, foo_test.cc and foo_unittest.cc belong to the<br></td></tr
><tr
id=sl_svn141_5527

><td class="source">  same &#39;module&#39; if they are in the same directory.<br></td></tr
><tr
id=sl_svn141_5528

><td class="source">  some/path/public/xyzzy and some/path/internal/xyzzy are also considered<br></td></tr
><tr
id=sl_svn141_5529

><td class="source">  to belong to the same module here.<br></td></tr
><tr
id=sl_svn141_5530

><td class="source"><br></td></tr
><tr
id=sl_svn141_5531

><td class="source">  If the filename_cc contains a longer path than the filename_h, for example,<br></td></tr
><tr
id=sl_svn141_5532

><td class="source">  &#39;/absolute/path/to/base/sysinfo.cc&#39;, and this file would include<br></td></tr
><tr
id=sl_svn141_5533

><td class="source">  &#39;base/sysinfo.h&#39;, this function also produces the prefix needed to open the<br></td></tr
><tr
id=sl_svn141_5534

><td class="source">  header. This is used by the caller of this function to more robustly open the<br></td></tr
><tr
id=sl_svn141_5535

><td class="source">  header file. We don&#39;t have access to the real include paths in this context,<br></td></tr
><tr
id=sl_svn141_5536

><td class="source">  so we need this guesswork here.<br></td></tr
><tr
id=sl_svn141_5537

><td class="source"><br></td></tr
><tr
id=sl_svn141_5538

><td class="source">  Known bugs: tools/base/bar.cc and base/bar.h belong to the same module<br></td></tr
><tr
id=sl_svn141_5539

><td class="source">  according to this implementation. Because of this, this function gives<br></td></tr
><tr
id=sl_svn141_5540

><td class="source">  some false positives. This should be sufficiently rare in practice.<br></td></tr
><tr
id=sl_svn141_5541

><td class="source"><br></td></tr
><tr
id=sl_svn141_5542

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5543

><td class="source">    filename_cc: is the path for the .cc file<br></td></tr
><tr
id=sl_svn141_5544

><td class="source">    filename_h: is the path for the header path<br></td></tr
><tr
id=sl_svn141_5545

><td class="source"><br></td></tr
><tr
id=sl_svn141_5546

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5547

><td class="source">    Tuple with a bool and a string:<br></td></tr
><tr
id=sl_svn141_5548

><td class="source">    bool: True if filename_cc and filename_h belong to the same module.<br></td></tr
><tr
id=sl_svn141_5549

><td class="source">    string: the additional prefix needed to open the header file.<br></td></tr
><tr
id=sl_svn141_5550

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5551

><td class="source"><br></td></tr
><tr
id=sl_svn141_5552

><td class="source">  if not filename_cc.endswith(&#39;.cc&#39;):<br></td></tr
><tr
id=sl_svn141_5553

><td class="source">    return (False, &#39;&#39;)<br></td></tr
><tr
id=sl_svn141_5554

><td class="source">  filename_cc = filename_cc[:-len(&#39;.cc&#39;)]<br></td></tr
><tr
id=sl_svn141_5555

><td class="source">  if filename_cc.endswith(&#39;_unittest&#39;):<br></td></tr
><tr
id=sl_svn141_5556

><td class="source">    filename_cc = filename_cc[:-len(&#39;_unittest&#39;)]<br></td></tr
><tr
id=sl_svn141_5557

><td class="source">  elif filename_cc.endswith(&#39;_test&#39;):<br></td></tr
><tr
id=sl_svn141_5558

><td class="source">    filename_cc = filename_cc[:-len(&#39;_test&#39;)]<br></td></tr
><tr
id=sl_svn141_5559

><td class="source">  filename_cc = filename_cc.replace(&#39;/public/&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_5560

><td class="source">  filename_cc = filename_cc.replace(&#39;/internal/&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_5561

><td class="source"><br></td></tr
><tr
id=sl_svn141_5562

><td class="source">  if not filename_h.endswith(&#39;.h&#39;):<br></td></tr
><tr
id=sl_svn141_5563

><td class="source">    return (False, &#39;&#39;)<br></td></tr
><tr
id=sl_svn141_5564

><td class="source">  filename_h = filename_h[:-len(&#39;.h&#39;)]<br></td></tr
><tr
id=sl_svn141_5565

><td class="source">  if filename_h.endswith(&#39;-inl&#39;):<br></td></tr
><tr
id=sl_svn141_5566

><td class="source">    filename_h = filename_h[:-len(&#39;-inl&#39;)]<br></td></tr
><tr
id=sl_svn141_5567

><td class="source">  filename_h = filename_h.replace(&#39;/public/&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_5568

><td class="source">  filename_h = filename_h.replace(&#39;/internal/&#39;, &#39;/&#39;)<br></td></tr
><tr
id=sl_svn141_5569

><td class="source"><br></td></tr
><tr
id=sl_svn141_5570

><td class="source">  files_belong_to_same_module = filename_cc.endswith(filename_h)<br></td></tr
><tr
id=sl_svn141_5571

><td class="source">  common_path = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_5572

><td class="source">  if files_belong_to_same_module:<br></td></tr
><tr
id=sl_svn141_5573

><td class="source">    common_path = filename_cc[:-len(filename_h)]<br></td></tr
><tr
id=sl_svn141_5574

><td class="source">  return files_belong_to_same_module, common_path<br></td></tr
><tr
id=sl_svn141_5575

><td class="source"><br></td></tr
><tr
id=sl_svn141_5576

><td class="source"><br></td></tr
><tr
id=sl_svn141_5577

><td class="source">def UpdateIncludeState(filename, include_dict, io=codecs):<br></td></tr
><tr
id=sl_svn141_5578

><td class="source">  &quot;&quot;&quot;Fill up the include_dict with new includes found from the file.<br></td></tr
><tr
id=sl_svn141_5579

><td class="source"><br></td></tr
><tr
id=sl_svn141_5580

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5581

><td class="source">    filename: the name of the header to read.<br></td></tr
><tr
id=sl_svn141_5582

><td class="source">    include_dict: a dictionary in which the headers are inserted.<br></td></tr
><tr
id=sl_svn141_5583

><td class="source">    io: The io factory to use to read the file. Provided for testability.<br></td></tr
><tr
id=sl_svn141_5584

><td class="source"><br></td></tr
><tr
id=sl_svn141_5585

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5586

><td class="source">    True if a header was successfully added. False otherwise.<br></td></tr
><tr
id=sl_svn141_5587

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5588

><td class="source">  headerfile = None<br></td></tr
><tr
id=sl_svn141_5589

><td class="source">  try:<br></td></tr
><tr
id=sl_svn141_5590

><td class="source">    headerfile = io.open(filename, &#39;r&#39;, &#39;utf8&#39;, &#39;replace&#39;)<br></td></tr
><tr
id=sl_svn141_5591

><td class="source">  except IOError:<br></td></tr
><tr
id=sl_svn141_5592

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5593

><td class="source">  linenum = 0<br></td></tr
><tr
id=sl_svn141_5594

><td class="source">  for line in headerfile:<br></td></tr
><tr
id=sl_svn141_5595

><td class="source">    linenum += 1<br></td></tr
><tr
id=sl_svn141_5596

><td class="source">    clean_line = CleanseComments(line)<br></td></tr
><tr
id=sl_svn141_5597

><td class="source">    match = _RE_PATTERN_INCLUDE.search(clean_line)<br></td></tr
><tr
id=sl_svn141_5598

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_5599

><td class="source">      include = match.group(2)<br></td></tr
><tr
id=sl_svn141_5600

><td class="source">      include_dict.setdefault(include, linenum)<br></td></tr
><tr
id=sl_svn141_5601

><td class="source">  return True<br></td></tr
><tr
id=sl_svn141_5602

><td class="source"><br></td></tr
><tr
id=sl_svn141_5603

><td class="source"><br></td></tr
><tr
id=sl_svn141_5604

><td class="source">def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,<br></td></tr
><tr
id=sl_svn141_5605

><td class="source">                              io=codecs):<br></td></tr
><tr
id=sl_svn141_5606

><td class="source">  &quot;&quot;&quot;Reports for missing stl includes.<br></td></tr
><tr
id=sl_svn141_5607

><td class="source"><br></td></tr
><tr
id=sl_svn141_5608

><td class="source">  This function will output warnings to make sure you are including the headers<br></td></tr
><tr
id=sl_svn141_5609

><td class="source">  necessary for the stl containers and functions that you use. We only give one<br></td></tr
><tr
id=sl_svn141_5610

><td class="source">  reason to include a header. For example, if you use both equal_to&lt;&gt; and<br></td></tr
><tr
id=sl_svn141_5611

><td class="source">  less&lt;&gt; in a .h file, only one (the latter in the file) of these will be<br></td></tr
><tr
id=sl_svn141_5612

><td class="source">  reported as a reason to include the &lt;functional&gt;.<br></td></tr
><tr
id=sl_svn141_5613

><td class="source"><br></td></tr
><tr
id=sl_svn141_5614

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5615

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5616

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5617

><td class="source">    include_state: An _IncludeState instance.<br></td></tr
><tr
id=sl_svn141_5618

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5619

><td class="source">    io: The IO factory to use to read the header file. Provided for unittest<br></td></tr
><tr
id=sl_svn141_5620

><td class="source">        injection.<br></td></tr
><tr
id=sl_svn141_5621

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5622

><td class="source">  required = {}  # A map of header name to linenumber and the template entity.<br></td></tr
><tr
id=sl_svn141_5623

><td class="source">                 # Example of required: { &#39;&lt;functional&gt;&#39;: (1219, &#39;less&lt;&gt;&#39;) }<br></td></tr
><tr
id=sl_svn141_5624

><td class="source"><br></td></tr
><tr
id=sl_svn141_5625

><td class="source">  for linenum in xrange(clean_lines.NumLines()):<br></td></tr
><tr
id=sl_svn141_5626

><td class="source">    line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5627

><td class="source">    if not line or line[0] == &#39;#&#39;:<br></td></tr
><tr
id=sl_svn141_5628

><td class="source">      continue<br></td></tr
><tr
id=sl_svn141_5629

><td class="source"><br></td></tr
><tr
id=sl_svn141_5630

><td class="source">    # String is special -- it is a non-templatized type in STL.<br></td></tr
><tr
id=sl_svn141_5631

><td class="source">    matched = _RE_PATTERN_STRING.search(line)<br></td></tr
><tr
id=sl_svn141_5632

><td class="source">    if matched:<br></td></tr
><tr
id=sl_svn141_5633

><td class="source">      # Don&#39;t warn about strings in non-STL namespaces:<br></td></tr
><tr
id=sl_svn141_5634

><td class="source">      # (We check only the first match per line; good enough.)<br></td></tr
><tr
id=sl_svn141_5635

><td class="source">      prefix = line[:matched.start()]<br></td></tr
><tr
id=sl_svn141_5636

><td class="source">      if prefix.endswith(&#39;std::&#39;) or not prefix.endswith(&#39;::&#39;):<br></td></tr
><tr
id=sl_svn141_5637

><td class="source">        required[&#39;&lt;string&gt;&#39;] = (linenum, &#39;string&#39;)<br></td></tr
><tr
id=sl_svn141_5638

><td class="source"><br></td></tr
><tr
id=sl_svn141_5639

><td class="source">    for pattern, template, header in _re_pattern_algorithm_header:<br></td></tr
><tr
id=sl_svn141_5640

><td class="source">      if pattern.search(line):<br></td></tr
><tr
id=sl_svn141_5641

><td class="source">        required[header] = (linenum, template)<br></td></tr
><tr
id=sl_svn141_5642

><td class="source"><br></td></tr
><tr
id=sl_svn141_5643

><td class="source">    # The following function is just a speed up, no semantics are changed.<br></td></tr
><tr
id=sl_svn141_5644

><td class="source">    if not &#39;&lt;&#39; in line:  # Reduces the cpu time usage by skipping lines.<br></td></tr
><tr
id=sl_svn141_5645

><td class="source">      continue<br></td></tr
><tr
id=sl_svn141_5646

><td class="source"><br></td></tr
><tr
id=sl_svn141_5647

><td class="source">    for pattern, template, header in _re_pattern_templates:<br></td></tr
><tr
id=sl_svn141_5648

><td class="source">      if pattern.search(line):<br></td></tr
><tr
id=sl_svn141_5649

><td class="source">        required[header] = (linenum, template)<br></td></tr
><tr
id=sl_svn141_5650

><td class="source"><br></td></tr
><tr
id=sl_svn141_5651

><td class="source">  # The policy is that if you #include something in foo.h you don&#39;t need to<br></td></tr
><tr
id=sl_svn141_5652

><td class="source">  # include it again in foo.cc. Here, we will look at possible includes.<br></td></tr
><tr
id=sl_svn141_5653

><td class="source">  # Let&#39;s flatten the include_state include_list and copy it into a dictionary.<br></td></tr
><tr
id=sl_svn141_5654

><td class="source">  include_dict = dict([item for sublist in include_state.include_list<br></td></tr
><tr
id=sl_svn141_5655

><td class="source">                       for item in sublist])<br></td></tr
><tr
id=sl_svn141_5656

><td class="source"><br></td></tr
><tr
id=sl_svn141_5657

><td class="source">  # Did we find the header for this file (if any) and successfully load it?<br></td></tr
><tr
id=sl_svn141_5658

><td class="source">  header_found = False<br></td></tr
><tr
id=sl_svn141_5659

><td class="source"><br></td></tr
><tr
id=sl_svn141_5660

><td class="source">  # Use the absolute path so that matching works properly.<br></td></tr
><tr
id=sl_svn141_5661

><td class="source">  abs_filename = FileInfo(filename).FullName()<br></td></tr
><tr
id=sl_svn141_5662

><td class="source"><br></td></tr
><tr
id=sl_svn141_5663

><td class="source">  # For Emacs&#39;s flymake.<br></td></tr
><tr
id=sl_svn141_5664

><td class="source">  # If cpplint is invoked from Emacs&#39;s flymake, a temporary file is generated<br></td></tr
><tr
id=sl_svn141_5665

><td class="source">  # by flymake and that file name might end with &#39;_flymake.cc&#39;. In that case,<br></td></tr
><tr
id=sl_svn141_5666

><td class="source">  # restore original file name here so that the corresponding header file can be<br></td></tr
><tr
id=sl_svn141_5667

><td class="source">  # found.<br></td></tr
><tr
id=sl_svn141_5668

><td class="source">  # e.g. If the file name is &#39;foo_flymake.cc&#39;, we should search for &#39;foo.h&#39;<br></td></tr
><tr
id=sl_svn141_5669

><td class="source">  # instead of &#39;foo_flymake.h&#39;<br></td></tr
><tr
id=sl_svn141_5670

><td class="source">  abs_filename = re.sub(r&#39;_flymake\.cc$&#39;, &#39;.cc&#39;, abs_filename)<br></td></tr
><tr
id=sl_svn141_5671

><td class="source"><br></td></tr
><tr
id=sl_svn141_5672

><td class="source">  # include_dict is modified during iteration, so we iterate over a copy of<br></td></tr
><tr
id=sl_svn141_5673

><td class="source">  # the keys.<br></td></tr
><tr
id=sl_svn141_5674

><td class="source">  header_keys = include_dict.keys()<br></td></tr
><tr
id=sl_svn141_5675

><td class="source">  for header in header_keys:<br></td></tr
><tr
id=sl_svn141_5676

><td class="source">    (same_module, common_path) = FilesBelongToSameModule(abs_filename, header)<br></td></tr
><tr
id=sl_svn141_5677

><td class="source">    fullpath = common_path + header<br></td></tr
><tr
id=sl_svn141_5678

><td class="source">    if same_module and UpdateIncludeState(fullpath, include_dict, io):<br></td></tr
><tr
id=sl_svn141_5679

><td class="source">      header_found = True<br></td></tr
><tr
id=sl_svn141_5680

><td class="source"><br></td></tr
><tr
id=sl_svn141_5681

><td class="source">  # If we can&#39;t find the header file for a .cc, assume it&#39;s because we don&#39;t<br></td></tr
><tr
id=sl_svn141_5682

><td class="source">  # know where to look. In that case we&#39;ll give up as we&#39;re not sure they<br></td></tr
><tr
id=sl_svn141_5683

><td class="source">  # didn&#39;t include it in the .h file.<br></td></tr
><tr
id=sl_svn141_5684

><td class="source">  # TODO(unknown): Do a better job of finding .h files so we are confident that<br></td></tr
><tr
id=sl_svn141_5685

><td class="source">  # not having the .h file means there isn&#39;t one.<br></td></tr
><tr
id=sl_svn141_5686

><td class="source">  if filename.endswith(&#39;.cc&#39;) and not header_found:<br></td></tr
><tr
id=sl_svn141_5687

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5688

><td class="source"><br></td></tr
><tr
id=sl_svn141_5689

><td class="source">  # All the lines have been processed, report the errors found.<br></td></tr
><tr
id=sl_svn141_5690

><td class="source">  for required_header_unstripped in required:<br></td></tr
><tr
id=sl_svn141_5691

><td class="source">    template = required[required_header_unstripped][1]<br></td></tr
><tr
id=sl_svn141_5692

><td class="source">    if required_header_unstripped.strip(&#39;&lt;&gt;&quot;&#39;) not in include_dict:<br></td></tr
><tr
id=sl_svn141_5693

><td class="source">      error(filename, required[required_header_unstripped][0],<br></td></tr
><tr
id=sl_svn141_5694

><td class="source">            &#39;build/include_what_you_use&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5695

><td class="source">            &#39;Add #include &#39; + required_header_unstripped + &#39; for &#39; + template)<br></td></tr
><tr
id=sl_svn141_5696

><td class="source"><br></td></tr
><tr
id=sl_svn141_5697

><td class="source"><br></td></tr
><tr
id=sl_svn141_5698

><td class="source">_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r&#39;\bmake_pair\s*&lt;&#39;)<br></td></tr
><tr
id=sl_svn141_5699

><td class="source"><br></td></tr
><tr
id=sl_svn141_5700

><td class="source"><br></td></tr
><tr
id=sl_svn141_5701

><td class="source">def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5702

><td class="source">  &quot;&quot;&quot;Check that make_pair&#39;s template arguments are deduced.<br></td></tr
><tr
id=sl_svn141_5703

><td class="source"><br></td></tr
><tr
id=sl_svn141_5704

><td class="source">  G++ 4.6 in C++11 mode fails badly if make_pair&#39;s template arguments are<br></td></tr
><tr
id=sl_svn141_5705

><td class="source">  specified explicitly, and such use isn&#39;t intended in any case.<br></td></tr
><tr
id=sl_svn141_5706

><td class="source"><br></td></tr
><tr
id=sl_svn141_5707

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5708

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5709

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5710

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5711

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5712

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5713

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5714

><td class="source">  match = _RE_PATTERN_EXPLICIT_MAKEPAIR.search(line)<br></td></tr
><tr
id=sl_svn141_5715

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_5716

><td class="source">    error(filename, linenum, &#39;build/explicit_make_pair&#39;,<br></td></tr
><tr
id=sl_svn141_5717

><td class="source">          4,  # 4 = high confidence<br></td></tr
><tr
id=sl_svn141_5718

><td class="source">          &#39;For C++11-compatibility, omit template arguments from make_pair&#39;<br></td></tr
><tr
id=sl_svn141_5719

><td class="source">          &#39; OR use pair directly OR if appropriate, construct a pair directly&#39;)<br></td></tr
><tr
id=sl_svn141_5720

><td class="source"><br></td></tr
><tr
id=sl_svn141_5721

><td class="source"><br></td></tr
><tr
id=sl_svn141_5722

><td class="source">def CheckDefaultLambdaCaptures(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5723

><td class="source">  &quot;&quot;&quot;Check that default lambda captures are not used.<br></td></tr
><tr
id=sl_svn141_5724

><td class="source"><br></td></tr
><tr
id=sl_svn141_5725

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5726

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5727

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5728

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5729

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5730

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5731

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5732

><td class="source"><br></td></tr
><tr
id=sl_svn141_5733

><td class="source">  # A lambda introducer specifies a default capture if it starts with &quot;[=&quot;<br></td></tr
><tr
id=sl_svn141_5734

><td class="source">  # or if it starts with &quot;[&amp;&quot; _not_ followed by an identifier.<br></td></tr
><tr
id=sl_svn141_5735

><td class="source">  match = Match(r&#39;^(.*)\[\s*(?:=|&amp;[^\w])&#39;, line)<br></td></tr
><tr
id=sl_svn141_5736

><td class="source">  if match:<br></td></tr
><tr
id=sl_svn141_5737

><td class="source">    # Found a potential error, check what comes after the lambda-introducer.<br></td></tr
><tr
id=sl_svn141_5738

><td class="source">    # If it&#39;s not open parenthesis (for lambda-declarator) or open brace<br></td></tr
><tr
id=sl_svn141_5739

><td class="source">    # (for compound-statement), it&#39;s not a lambda.<br></td></tr
><tr
id=sl_svn141_5740

><td class="source">    line, _, pos = CloseExpression(clean_lines, linenum, len(match.group(1)))<br></td></tr
><tr
id=sl_svn141_5741

><td class="source">    if pos &gt;= 0 and Match(r&#39;^\s*[{(]&#39;, line[pos:]):<br></td></tr
><tr
id=sl_svn141_5742

><td class="source">      error(filename, linenum, &#39;build/c++11&#39;,<br></td></tr
><tr
id=sl_svn141_5743

><td class="source">            4,  # 4 = high confidence<br></td></tr
><tr
id=sl_svn141_5744

><td class="source">            &#39;Default lambda captures are an unapproved C++ feature.&#39;)<br></td></tr
><tr
id=sl_svn141_5745

><td class="source"><br></td></tr
><tr
id=sl_svn141_5746

><td class="source"><br></td></tr
><tr
id=sl_svn141_5747

><td class="source">def CheckRedundantVirtual(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5748

><td class="source">  &quot;&quot;&quot;Check if line contains a redundant &quot;virtual&quot; function-specifier.<br></td></tr
><tr
id=sl_svn141_5749

><td class="source"><br></td></tr
><tr
id=sl_svn141_5750

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5751

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5752

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5753

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5754

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5755

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5756

><td class="source">  # Look for &quot;virtual&quot; on current line.<br></td></tr
><tr
id=sl_svn141_5757

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5758

><td class="source">  virtual = Match(r&#39;^(.*)(\bvirtual\b)(.*)$&#39;, line)<br></td></tr
><tr
id=sl_svn141_5759

><td class="source">  if not virtual: return<br></td></tr
><tr
id=sl_svn141_5760

><td class="source"><br></td></tr
><tr
id=sl_svn141_5761

><td class="source">  # Ignore &quot;virtual&quot; keywords that are near access-specifiers.  These<br></td></tr
><tr
id=sl_svn141_5762

><td class="source">  # are only used in class base-specifier and do not apply to member<br></td></tr
><tr
id=sl_svn141_5763

><td class="source">  # functions.<br></td></tr
><tr
id=sl_svn141_5764

><td class="source">  if (Search(r&#39;\b(public|protected|private)\s+$&#39;, virtual.group(1)) or<br></td></tr
><tr
id=sl_svn141_5765

><td class="source">      Match(r&#39;^\s+(public|protected|private)\b&#39;, virtual.group(3))):<br></td></tr
><tr
id=sl_svn141_5766

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_5767

><td class="source"><br></td></tr
><tr
id=sl_svn141_5768

><td class="source">  # Ignore the &quot;virtual&quot; keyword from virtual base classes.  Usually<br></td></tr
><tr
id=sl_svn141_5769

><td class="source">  # there is a column on the same line in these cases (virtual base<br></td></tr
><tr
id=sl_svn141_5770

><td class="source">  # classes are rare in google3 because multiple inheritance is rare).<br></td></tr
><tr
id=sl_svn141_5771

><td class="source">  if Match(r&#39;^.*[^:]:[^:].*$&#39;, line): return<br></td></tr
><tr
id=sl_svn141_5772

><td class="source"><br></td></tr
><tr
id=sl_svn141_5773

><td class="source">  # Look for the next opening parenthesis.  This is the start of the<br></td></tr
><tr
id=sl_svn141_5774

><td class="source">  # parameter list (possibly on the next line shortly after virtual).<br></td></tr
><tr
id=sl_svn141_5775

><td class="source">  # TODO(unknown): doesn&#39;t work if there are virtual functions with<br></td></tr
><tr
id=sl_svn141_5776

><td class="source">  # decltype() or other things that use parentheses, but csearch suggests<br></td></tr
><tr
id=sl_svn141_5777

><td class="source">  # that this is rare.<br></td></tr
><tr
id=sl_svn141_5778

><td class="source">  end_col = -1<br></td></tr
><tr
id=sl_svn141_5779

><td class="source">  end_line = -1<br></td></tr
><tr
id=sl_svn141_5780

><td class="source">  start_col = len(virtual.group(2))<br></td></tr
><tr
id=sl_svn141_5781

><td class="source">  for start_line in xrange(linenum, min(linenum + 3, clean_lines.NumLines())):<br></td></tr
><tr
id=sl_svn141_5782

><td class="source">    line = clean_lines.elided[start_line][start_col:]<br></td></tr
><tr
id=sl_svn141_5783

><td class="source">    parameter_list = Match(r&#39;^([^(]*)\(&#39;, line)<br></td></tr
><tr
id=sl_svn141_5784

><td class="source">    if parameter_list:<br></td></tr
><tr
id=sl_svn141_5785

><td class="source">      # Match parentheses to find the end of the parameter list<br></td></tr
><tr
id=sl_svn141_5786

><td class="source">      (_, end_line, end_col) = CloseExpression(<br></td></tr
><tr
id=sl_svn141_5787

><td class="source">          clean_lines, start_line, start_col + len(parameter_list.group(1)))<br></td></tr
><tr
id=sl_svn141_5788

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_5789

><td class="source">    start_col = 0<br></td></tr
><tr
id=sl_svn141_5790

><td class="source"><br></td></tr
><tr
id=sl_svn141_5791

><td class="source">  if end_col &lt; 0:<br></td></tr
><tr
id=sl_svn141_5792

><td class="source">    return  # Couldn&#39;t find end of parameter list, give up<br></td></tr
><tr
id=sl_svn141_5793

><td class="source"><br></td></tr
><tr
id=sl_svn141_5794

><td class="source">  # Look for &quot;override&quot; or &quot;final&quot; after the parameter list<br></td></tr
><tr
id=sl_svn141_5795

><td class="source">  # (possibly on the next few lines).<br></td></tr
><tr
id=sl_svn141_5796

><td class="source">  for i in xrange(end_line, min(end_line + 3, clean_lines.NumLines())):<br></td></tr
><tr
id=sl_svn141_5797

><td class="source">    line = clean_lines.elided[i][end_col:]<br></td></tr
><tr
id=sl_svn141_5798

><td class="source">    match = Search(r&#39;\b(override|final)\b&#39;, line)<br></td></tr
><tr
id=sl_svn141_5799

><td class="source">    if match:<br></td></tr
><tr
id=sl_svn141_5800

><td class="source">      error(filename, linenum, &#39;readability/inheritance&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5801

><td class="source">            (&#39;&quot;virtual&quot; is redundant since function is &#39;<br></td></tr
><tr
id=sl_svn141_5802

><td class="source">             &#39;already declared as &quot;%s&quot;&#39; % match.group(1)))<br></td></tr
><tr
id=sl_svn141_5803

><td class="source"><br></td></tr
><tr
id=sl_svn141_5804

><td class="source">    # Set end_col to check whole lines after we are done with the<br></td></tr
><tr
id=sl_svn141_5805

><td class="source">    # first line.<br></td></tr
><tr
id=sl_svn141_5806

><td class="source">    end_col = 0<br></td></tr
><tr
id=sl_svn141_5807

><td class="source">    if Search(r&#39;[^\w]\s*$&#39;, line):<br></td></tr
><tr
id=sl_svn141_5808

><td class="source">      break<br></td></tr
><tr
id=sl_svn141_5809

><td class="source"><br></td></tr
><tr
id=sl_svn141_5810

><td class="source"><br></td></tr
><tr
id=sl_svn141_5811

><td class="source">def CheckRedundantOverrideOrFinal(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5812

><td class="source">  &quot;&quot;&quot;Check if line contains a redundant &quot;override&quot; or &quot;final&quot; virt-specifier.<br></td></tr
><tr
id=sl_svn141_5813

><td class="source"><br></td></tr
><tr
id=sl_svn141_5814

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5815

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5816

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5817

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5818

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5819

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5820

><td class="source">  # Look for closing parenthesis nearby.  We need one to confirm where<br></td></tr
><tr
id=sl_svn141_5821

><td class="source">  # the declarator ends and where the virt-specifier starts to avoid<br></td></tr
><tr
id=sl_svn141_5822

><td class="source">  # false positives.<br></td></tr
><tr
id=sl_svn141_5823

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5824

><td class="source">  declarator_end = line.rfind(&#39;)&#39;)<br></td></tr
><tr
id=sl_svn141_5825

><td class="source">  if declarator_end &gt;= 0:<br></td></tr
><tr
id=sl_svn141_5826

><td class="source">    fragment = line[declarator_end:]<br></td></tr
><tr
id=sl_svn141_5827

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_5828

><td class="source">    if linenum &gt; 1 and clean_lines.elided[linenum - 1].rfind(&#39;)&#39;) &gt;= 0:<br></td></tr
><tr
id=sl_svn141_5829

><td class="source">      fragment = line<br></td></tr
><tr
id=sl_svn141_5830

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_5831

><td class="source">      return<br></td></tr
><tr
id=sl_svn141_5832

><td class="source"><br></td></tr
><tr
id=sl_svn141_5833

><td class="source">  # Check that at most one of &quot;override&quot; or &quot;final&quot; is present, not both<br></td></tr
><tr
id=sl_svn141_5834

><td class="source">  if Search(r&#39;\boverride\b&#39;, fragment) and Search(r&#39;\bfinal\b&#39;, fragment):<br></td></tr
><tr
id=sl_svn141_5835

><td class="source">    error(filename, linenum, &#39;readability/inheritance&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5836

><td class="source">          (&#39;&quot;override&quot; is redundant since function is &#39;<br></td></tr
><tr
id=sl_svn141_5837

><td class="source">           &#39;already declared as &quot;final&quot;&#39;))<br></td></tr
><tr
id=sl_svn141_5838

><td class="source"><br></td></tr
><tr
id=sl_svn141_5839

><td class="source"><br></td></tr
><tr
id=sl_svn141_5840

><td class="source"><br></td></tr
><tr
id=sl_svn141_5841

><td class="source"><br></td></tr
><tr
id=sl_svn141_5842

><td class="source"># Returns true if we are at a new block, and it is directly<br></td></tr
><tr
id=sl_svn141_5843

><td class="source"># inside of a namespace.<br></td></tr
><tr
id=sl_svn141_5844

><td class="source">def IsBlockInNameSpace(nesting_state, is_forward_declaration):<br></td></tr
><tr
id=sl_svn141_5845

><td class="source">  &quot;&quot;&quot;Checks that the new block is directly in a namespace.<br></td></tr
><tr
id=sl_svn141_5846

><td class="source"><br></td></tr
><tr
id=sl_svn141_5847

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5848

><td class="source">    nesting_state: The _NestingState object that contains info about our state.<br></td></tr
><tr
id=sl_svn141_5849

><td class="source">    is_forward_declaration: If the class is a forward declared class.<br></td></tr
><tr
id=sl_svn141_5850

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5851

><td class="source">    Whether or not the new block is directly in a namespace.<br></td></tr
><tr
id=sl_svn141_5852

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5853

><td class="source">  if is_forward_declaration:<br></td></tr
><tr
id=sl_svn141_5854

><td class="source">    if len(nesting_state.stack) &gt;= 1 and (<br></td></tr
><tr
id=sl_svn141_5855

><td class="source">        isinstance(nesting_state.stack[-1], _NamespaceInfo)):<br></td></tr
><tr
id=sl_svn141_5856

><td class="source">      return True<br></td></tr
><tr
id=sl_svn141_5857

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_5858

><td class="source">      return False<br></td></tr
><tr
id=sl_svn141_5859

><td class="source"><br></td></tr
><tr
id=sl_svn141_5860

><td class="source">  return (len(nesting_state.stack) &gt; 1 and<br></td></tr
><tr
id=sl_svn141_5861

><td class="source">          nesting_state.stack[-1].check_namespace_indentation and<br></td></tr
><tr
id=sl_svn141_5862

><td class="source">          isinstance(nesting_state.stack[-2], _NamespaceInfo))<br></td></tr
><tr
id=sl_svn141_5863

><td class="source"><br></td></tr
><tr
id=sl_svn141_5864

><td class="source"><br></td></tr
><tr
id=sl_svn141_5865

><td class="source">def ShouldCheckNamespaceIndentation(nesting_state, is_namespace_indent_item,<br></td></tr
><tr
id=sl_svn141_5866

><td class="source">                                    raw_lines_no_comments, linenum):<br></td></tr
><tr
id=sl_svn141_5867

><td class="source">  &quot;&quot;&quot;This method determines if we should apply our namespace indentation check.<br></td></tr
><tr
id=sl_svn141_5868

><td class="source"><br></td></tr
><tr
id=sl_svn141_5869

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5870

><td class="source">    nesting_state: The current nesting state.<br></td></tr
><tr
id=sl_svn141_5871

><td class="source">    is_namespace_indent_item: If we just put a new class on the stack, True.<br></td></tr
><tr
id=sl_svn141_5872

><td class="source">      If the top of the stack is not a class, or we did not recently<br></td></tr
><tr
id=sl_svn141_5873

><td class="source">      add the class, False.<br></td></tr
><tr
id=sl_svn141_5874

><td class="source">    raw_lines_no_comments: The lines without the comments.<br></td></tr
><tr
id=sl_svn141_5875

><td class="source">    linenum: The current line number we are processing.<br></td></tr
><tr
id=sl_svn141_5876

><td class="source"><br></td></tr
><tr
id=sl_svn141_5877

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_5878

><td class="source">    True if we should apply our namespace indentation check. Currently, it<br></td></tr
><tr
id=sl_svn141_5879

><td class="source">    only works for classes and namespaces inside of a namespace.<br></td></tr
><tr
id=sl_svn141_5880

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5881

><td class="source"><br></td></tr
><tr
id=sl_svn141_5882

><td class="source">  is_forward_declaration = IsForwardClassDeclaration(raw_lines_no_comments,<br></td></tr
><tr
id=sl_svn141_5883

><td class="source">                                                     linenum)<br></td></tr
><tr
id=sl_svn141_5884

><td class="source"><br></td></tr
><tr
id=sl_svn141_5885

><td class="source">  if not (is_namespace_indent_item or is_forward_declaration):<br></td></tr
><tr
id=sl_svn141_5886

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5887

><td class="source"><br></td></tr
><tr
id=sl_svn141_5888

><td class="source">  # If we are in a macro, we do not want to check the namespace indentation.<br></td></tr
><tr
id=sl_svn141_5889

><td class="source">  if IsMacroDefinition(raw_lines_no_comments, linenum):<br></td></tr
><tr
id=sl_svn141_5890

><td class="source">    return False<br></td></tr
><tr
id=sl_svn141_5891

><td class="source"><br></td></tr
><tr
id=sl_svn141_5892

><td class="source">  return IsBlockInNameSpace(nesting_state, is_forward_declaration)<br></td></tr
><tr
id=sl_svn141_5893

><td class="source"><br></td></tr
><tr
id=sl_svn141_5894

><td class="source"><br></td></tr
><tr
id=sl_svn141_5895

><td class="source"># Call this method if the line is directly inside of a namespace.<br></td></tr
><tr
id=sl_svn141_5896

><td class="source"># If the line above is blank (excluding comments) or the start of<br></td></tr
><tr
id=sl_svn141_5897

><td class="source"># an inner namespace, it cannot be indented.<br></td></tr
><tr
id=sl_svn141_5898

><td class="source">def CheckItemIndentationInNamespace(filename, raw_lines_no_comments, linenum,<br></td></tr
><tr
id=sl_svn141_5899

><td class="source">                                    error):<br></td></tr
><tr
id=sl_svn141_5900

><td class="source">  line = raw_lines_no_comments[linenum]<br></td></tr
><tr
id=sl_svn141_5901

><td class="source">  if Match(r&#39;^\s+&#39;, line):<br></td></tr
><tr
id=sl_svn141_5902

><td class="source">    error(filename, linenum, &#39;runtime/indentation_namespace&#39;, 4,<br></td></tr
><tr
id=sl_svn141_5903

><td class="source">          &#39;Do not indent within a namespace&#39;)<br></td></tr
><tr
id=sl_svn141_5904

><td class="source"><br></td></tr
><tr
id=sl_svn141_5905

><td class="source"><br></td></tr
><tr
id=sl_svn141_5906

><td class="source">def ProcessLine(filename, file_extension, clean_lines, line,<br></td></tr
><tr
id=sl_svn141_5907

><td class="source">                include_state, function_state, nesting_state, error,<br></td></tr
><tr
id=sl_svn141_5908

><td class="source">                extra_check_functions=[]):<br></td></tr
><tr
id=sl_svn141_5909

><td class="source">  &quot;&quot;&quot;Processes a single line in the file.<br></td></tr
><tr
id=sl_svn141_5910

><td class="source"><br></td></tr
><tr
id=sl_svn141_5911

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5912

><td class="source">    filename: Filename of the file that is being processed.<br></td></tr
><tr
id=sl_svn141_5913

><td class="source">    file_extension: The extension (dot not included) of the file.<br></td></tr
><tr
id=sl_svn141_5914

><td class="source">    clean_lines: An array of strings, each representing a line of the file,<br></td></tr
><tr
id=sl_svn141_5915

><td class="source">                 with comments stripped.<br></td></tr
><tr
id=sl_svn141_5916

><td class="source">    line: Number of line being processed.<br></td></tr
><tr
id=sl_svn141_5917

><td class="source">    include_state: An _IncludeState instance in which the headers are inserted.<br></td></tr
><tr
id=sl_svn141_5918

><td class="source">    function_state: A _FunctionState instance which counts function lines, etc.<br></td></tr
><tr
id=sl_svn141_5919

><td class="source">    nesting_state: A NestingState instance which maintains information about<br></td></tr
><tr
id=sl_svn141_5920

><td class="source">                   the current stack of nested blocks being parsed.<br></td></tr
><tr
id=sl_svn141_5921

><td class="source">    error: A callable to which errors are reported, which takes 4 arguments:<br></td></tr
><tr
id=sl_svn141_5922

><td class="source">           filename, line number, error level, and message<br></td></tr
><tr
id=sl_svn141_5923

><td class="source">    extra_check_functions: An array of additional check functions that will be<br></td></tr
><tr
id=sl_svn141_5924

><td class="source">                           run on each source line. Each function takes 4<br></td></tr
><tr
id=sl_svn141_5925

><td class="source">                           arguments: filename, clean_lines, line, error<br></td></tr
><tr
id=sl_svn141_5926

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5927

><td class="source">  raw_lines = clean_lines.raw_lines<br></td></tr
><tr
id=sl_svn141_5928

><td class="source">  ParseNolintSuppressions(filename, raw_lines[line], line, error)<br></td></tr
><tr
id=sl_svn141_5929

><td class="source">  nesting_state.Update(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5930

><td class="source">  CheckForNamespaceIndentation(filename, nesting_state, clean_lines, line,<br></td></tr
><tr
id=sl_svn141_5931

><td class="source">                               error)<br></td></tr
><tr
id=sl_svn141_5932

><td class="source">  if nesting_state.InAsmBlock(): return<br></td></tr
><tr
id=sl_svn141_5933

><td class="source">  CheckForFunctionLengths(filename, clean_lines, line, function_state, error)<br></td></tr
><tr
id=sl_svn141_5934

><td class="source">  CheckForMultilineCommentsAndStrings(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5935

><td class="source">  CheckStyle(filename, clean_lines, line, file_extension, nesting_state, error)<br></td></tr
><tr
id=sl_svn141_5936

><td class="source">  CheckLanguage(filename, clean_lines, line, file_extension, include_state,<br></td></tr
><tr
id=sl_svn141_5937

><td class="source">                nesting_state, error)<br></td></tr
><tr
id=sl_svn141_5938

><td class="source">  CheckForNonConstReference(filename, clean_lines, line, nesting_state, error)<br></td></tr
><tr
id=sl_svn141_5939

><td class="source">  CheckForNonStandardConstructs(filename, clean_lines, line,<br></td></tr
><tr
id=sl_svn141_5940

><td class="source">                                nesting_state, error)<br></td></tr
><tr
id=sl_svn141_5941

><td class="source">  CheckVlogArguments(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5942

><td class="source">  CheckPosixThreading(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5943

><td class="source">  CheckInvalidIncrement(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5944

><td class="source">  CheckMakePairUsesDeduction(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5945

><td class="source">  CheckDefaultLambdaCaptures(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5946

><td class="source">  CheckRedundantVirtual(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5947

><td class="source">  CheckRedundantOverrideOrFinal(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5948

><td class="source">  for check_fn in extra_check_functions:<br></td></tr
><tr
id=sl_svn141_5949

><td class="source">    check_fn(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_5950

><td class="source"><br></td></tr
><tr
id=sl_svn141_5951

><td class="source">def FlagCxx11Features(filename, clean_lines, linenum, error):<br></td></tr
><tr
id=sl_svn141_5952

><td class="source">  &quot;&quot;&quot;Flag those c++11 features that we only allow in certain places.<br></td></tr
><tr
id=sl_svn141_5953

><td class="source"><br></td></tr
><tr
id=sl_svn141_5954

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_5955

><td class="source">    filename: The name of the current file.<br></td></tr
><tr
id=sl_svn141_5956

><td class="source">    clean_lines: A CleansedLines instance containing the file.<br></td></tr
><tr
id=sl_svn141_5957

><td class="source">    linenum: The number of the line to check.<br></td></tr
><tr
id=sl_svn141_5958

><td class="source">    error: The function to call with any errors found.<br></td></tr
><tr
id=sl_svn141_5959

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_5960

><td class="source">  line = clean_lines.elided[linenum]<br></td></tr
><tr
id=sl_svn141_5961

><td class="source"><br></td></tr
><tr
id=sl_svn141_5962

><td class="source">  # Flag unapproved C++11 headers.<br></td></tr
><tr
id=sl_svn141_5963

><td class="source">  include = Match(r&#39;\s*#\s*include\s+[&lt;&quot;]([^&lt;&quot;]+)[&quot;&gt;]&#39;, line)<br></td></tr
><tr
id=sl_svn141_5964

><td class="source">  if include and include.group(1) in (&#39;cfenv&#39;,<br></td></tr
><tr
id=sl_svn141_5965

><td class="source">                                      &#39;condition_variable&#39;,<br></td></tr
><tr
id=sl_svn141_5966

><td class="source">                                      &#39;fenv.h&#39;,<br></td></tr
><tr
id=sl_svn141_5967

><td class="source">                                      &#39;future&#39;,<br></td></tr
><tr
id=sl_svn141_5968

><td class="source">                                      &#39;mutex&#39;,<br></td></tr
><tr
id=sl_svn141_5969

><td class="source">                                      &#39;thread&#39;,<br></td></tr
><tr
id=sl_svn141_5970

><td class="source">                                      &#39;chrono&#39;,<br></td></tr
><tr
id=sl_svn141_5971

><td class="source">                                      &#39;ratio&#39;,<br></td></tr
><tr
id=sl_svn141_5972

><td class="source">                                      &#39;regex&#39;,<br></td></tr
><tr
id=sl_svn141_5973

><td class="source">                                      &#39;system_error&#39;,<br></td></tr
><tr
id=sl_svn141_5974

><td class="source">                                     ):<br></td></tr
><tr
id=sl_svn141_5975

><td class="source">    error(filename, linenum, &#39;build/c++11&#39;, 5,<br></td></tr
><tr
id=sl_svn141_5976

><td class="source">          (&#39;&lt;%s&gt; is an unapproved C++11 header.&#39;) % include.group(1))<br></td></tr
><tr
id=sl_svn141_5977

><td class="source"><br></td></tr
><tr
id=sl_svn141_5978

><td class="source">  # The only place where we need to worry about C++11 keywords and library<br></td></tr
><tr
id=sl_svn141_5979

><td class="source">  # features in preprocessor directives is in macro definitions.<br></td></tr
><tr
id=sl_svn141_5980

><td class="source">  if Match(r&#39;\s*#&#39;, line) and not Match(r&#39;\s*#\s*define\b&#39;, line): return<br></td></tr
><tr
id=sl_svn141_5981

><td class="source"><br></td></tr
><tr
id=sl_svn141_5982

><td class="source">  # These are classes and free functions.  The classes are always<br></td></tr
><tr
id=sl_svn141_5983

><td class="source">  # mentioned as std::*, but we only catch the free functions if<br></td></tr
><tr
id=sl_svn141_5984

><td class="source">  # they&#39;re not found by ADL.  They&#39;re alphabetical by header.<br></td></tr
><tr
id=sl_svn141_5985

><td class="source">  for top_name in (<br></td></tr
><tr
id=sl_svn141_5986

><td class="source">      # type_traits<br></td></tr
><tr
id=sl_svn141_5987

><td class="source">      &#39;alignment_of&#39;,<br></td></tr
><tr
id=sl_svn141_5988

><td class="source">      &#39;aligned_union&#39;,<br></td></tr
><tr
id=sl_svn141_5989

><td class="source">      ):<br></td></tr
><tr
id=sl_svn141_5990

><td class="source">    if Search(r&#39;\bstd::%s\b&#39; % top_name, line):<br></td></tr
><tr
id=sl_svn141_5991

><td class="source">      error(filename, linenum, &#39;build/c++11&#39;, 5,<br></td></tr
><tr
id=sl_svn141_5992

><td class="source">            (&#39;std::%s is an unapproved C++11 class or function.  Send c-style &#39;<br></td></tr
><tr
id=sl_svn141_5993

><td class="source">             &#39;an example of where it would make your code more readable, and &#39;<br></td></tr
><tr
id=sl_svn141_5994

><td class="source">             &#39;they may let you use it.&#39;) % top_name)<br></td></tr
><tr
id=sl_svn141_5995

><td class="source"><br></td></tr
><tr
id=sl_svn141_5996

><td class="source"><br></td></tr
><tr
id=sl_svn141_5997

><td class="source">def ProcessFileData(filename, file_extension, lines, error,<br></td></tr
><tr
id=sl_svn141_5998

><td class="source">                    extra_check_functions=[]):<br></td></tr
><tr
id=sl_svn141_5999

><td class="source">  &quot;&quot;&quot;Performs lint checks and reports any errors to the given error function.<br></td></tr
><tr
id=sl_svn141_6000

><td class="source"><br></td></tr
><tr
id=sl_svn141_6001

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_6002

><td class="source">    filename: Filename of the file that is being processed.<br></td></tr
><tr
id=sl_svn141_6003

><td class="source">    file_extension: The extension (dot not included) of the file.<br></td></tr
><tr
id=sl_svn141_6004

><td class="source">    lines: An array of strings, each representing a line of the file, with the<br></td></tr
><tr
id=sl_svn141_6005

><td class="source">           last element being empty if the file is terminated with a newline.<br></td></tr
><tr
id=sl_svn141_6006

><td class="source">    error: A callable to which errors are reported, which takes 4 arguments:<br></td></tr
><tr
id=sl_svn141_6007

><td class="source">           filename, line number, error level, and message<br></td></tr
><tr
id=sl_svn141_6008

><td class="source">    extra_check_functions: An array of additional check functions that will be<br></td></tr
><tr
id=sl_svn141_6009

><td class="source">                           run on each source line. Each function takes 4<br></td></tr
><tr
id=sl_svn141_6010

><td class="source">                           arguments: filename, clean_lines, line, error<br></td></tr
><tr
id=sl_svn141_6011

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6012

><td class="source">  lines = ([&#39;// marker so line numbers and indices both start at 1&#39;] + lines +<br></td></tr
><tr
id=sl_svn141_6013

><td class="source">           [&#39;// marker so line numbers end in a known way&#39;])<br></td></tr
><tr
id=sl_svn141_6014

><td class="source"><br></td></tr
><tr
id=sl_svn141_6015

><td class="source">  include_state = _IncludeState()<br></td></tr
><tr
id=sl_svn141_6016

><td class="source">  function_state = _FunctionState()<br></td></tr
><tr
id=sl_svn141_6017

><td class="source">  nesting_state = NestingState()<br></td></tr
><tr
id=sl_svn141_6018

><td class="source"><br></td></tr
><tr
id=sl_svn141_6019

><td class="source">  ResetNolintSuppressions()<br></td></tr
><tr
id=sl_svn141_6020

><td class="source"><br></td></tr
><tr
id=sl_svn141_6021

><td class="source">  CheckForCopyright(filename, lines, error)<br></td></tr
><tr
id=sl_svn141_6022

><td class="source"><br></td></tr
><tr
id=sl_svn141_6023

><td class="source">  RemoveMultiLineComments(filename, lines, error)<br></td></tr
><tr
id=sl_svn141_6024

><td class="source">  clean_lines = CleansedLines(lines)<br></td></tr
><tr
id=sl_svn141_6025

><td class="source"><br></td></tr
><tr
id=sl_svn141_6026

><td class="source">  if file_extension == &#39;h&#39;:<br></td></tr
><tr
id=sl_svn141_6027

><td class="source">    CheckForHeaderGuard(filename, clean_lines, error)<br></td></tr
><tr
id=sl_svn141_6028

><td class="source"><br></td></tr
><tr
id=sl_svn141_6029

><td class="source">  for line in xrange(clean_lines.NumLines()):<br></td></tr
><tr
id=sl_svn141_6030

><td class="source">    ProcessLine(filename, file_extension, clean_lines, line,<br></td></tr
><tr
id=sl_svn141_6031

><td class="source">                include_state, function_state, nesting_state, error,<br></td></tr
><tr
id=sl_svn141_6032

><td class="source">                extra_check_functions)<br></td></tr
><tr
id=sl_svn141_6033

><td class="source">    FlagCxx11Features(filename, clean_lines, line, error)<br></td></tr
><tr
id=sl_svn141_6034

><td class="source">  nesting_state.CheckCompletedBlocks(filename, error)<br></td></tr
><tr
id=sl_svn141_6035

><td class="source"><br></td></tr
><tr
id=sl_svn141_6036

><td class="source">  CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error)<br></td></tr
><tr
id=sl_svn141_6037

><td class="source">  <br></td></tr
><tr
id=sl_svn141_6038

><td class="source">  # Check that the .cc file has included its header if it exists.<br></td></tr
><tr
id=sl_svn141_6039

><td class="source">  if file_extension == &#39;cc&#39;:<br></td></tr
><tr
id=sl_svn141_6040

><td class="source">    CheckHeaderFileIncluded(filename, include_state, error)<br></td></tr
><tr
id=sl_svn141_6041

><td class="source"><br></td></tr
><tr
id=sl_svn141_6042

><td class="source">  # We check here rather than inside ProcessLine so that we see raw<br></td></tr
><tr
id=sl_svn141_6043

><td class="source">  # lines rather than &quot;cleaned&quot; lines.<br></td></tr
><tr
id=sl_svn141_6044

><td class="source">  CheckForBadCharacters(filename, lines, error)<br></td></tr
><tr
id=sl_svn141_6045

><td class="source"><br></td></tr
><tr
id=sl_svn141_6046

><td class="source">  CheckForNewlineAtEOF(filename, lines, error)<br></td></tr
><tr
id=sl_svn141_6047

><td class="source"><br></td></tr
><tr
id=sl_svn141_6048

><td class="source">def ProcessConfigOverrides(filename):<br></td></tr
><tr
id=sl_svn141_6049

><td class="source">  &quot;&quot;&quot; Loads the configuration files and processes the config overrides.<br></td></tr
><tr
id=sl_svn141_6050

><td class="source"><br></td></tr
><tr
id=sl_svn141_6051

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_6052

><td class="source">    filename: The name of the file being processed by the linter.<br></td></tr
><tr
id=sl_svn141_6053

><td class="source"><br></td></tr
><tr
id=sl_svn141_6054

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_6055

><td class="source">    False if the current |filename| should not be processed further.<br></td></tr
><tr
id=sl_svn141_6056

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6057

><td class="source"><br></td></tr
><tr
id=sl_svn141_6058

><td class="source">  abs_filename = os.path.abspath(filename)<br></td></tr
><tr
id=sl_svn141_6059

><td class="source">  cfg_filters = []<br></td></tr
><tr
id=sl_svn141_6060

><td class="source">  keep_looking = True<br></td></tr
><tr
id=sl_svn141_6061

><td class="source">  while keep_looking:<br></td></tr
><tr
id=sl_svn141_6062

><td class="source">    abs_path, base_name = os.path.split(abs_filename)<br></td></tr
><tr
id=sl_svn141_6063

><td class="source">    if not base_name:<br></td></tr
><tr
id=sl_svn141_6064

><td class="source">      break  # Reached the root directory.<br></td></tr
><tr
id=sl_svn141_6065

><td class="source"><br></td></tr
><tr
id=sl_svn141_6066

><td class="source">    cfg_file = os.path.join(abs_path, &quot;CPPLINT.cfg&quot;)<br></td></tr
><tr
id=sl_svn141_6067

><td class="source">    abs_filename = abs_path<br></td></tr
><tr
id=sl_svn141_6068

><td class="source">    if not os.path.isfile(cfg_file):<br></td></tr
><tr
id=sl_svn141_6069

><td class="source">      continue<br></td></tr
><tr
id=sl_svn141_6070

><td class="source"><br></td></tr
><tr
id=sl_svn141_6071

><td class="source">    try:<br></td></tr
><tr
id=sl_svn141_6072

><td class="source">      with open(cfg_file) as file_handle:<br></td></tr
><tr
id=sl_svn141_6073

><td class="source">        for line in file_handle:<br></td></tr
><tr
id=sl_svn141_6074

><td class="source">          line, _, _ = line.partition(&#39;#&#39;)  # Remove comments.<br></td></tr
><tr
id=sl_svn141_6075

><td class="source">          if not line.strip():<br></td></tr
><tr
id=sl_svn141_6076

><td class="source">            continue<br></td></tr
><tr
id=sl_svn141_6077

><td class="source"><br></td></tr
><tr
id=sl_svn141_6078

><td class="source">          name, _, val = line.partition(&#39;=&#39;)<br></td></tr
><tr
id=sl_svn141_6079

><td class="source">          name = name.strip()<br></td></tr
><tr
id=sl_svn141_6080

><td class="source">          val = val.strip()<br></td></tr
><tr
id=sl_svn141_6081

><td class="source">          if name == &#39;set noparent&#39;:<br></td></tr
><tr
id=sl_svn141_6082

><td class="source">            keep_looking = False<br></td></tr
><tr
id=sl_svn141_6083

><td class="source">          elif name == &#39;filter&#39;:<br></td></tr
><tr
id=sl_svn141_6084

><td class="source">            cfg_filters.append(val)<br></td></tr
><tr
id=sl_svn141_6085

><td class="source">          elif name == &#39;exclude_files&#39;:<br></td></tr
><tr
id=sl_svn141_6086

><td class="source">            # When matching exclude_files pattern, use the base_name of<br></td></tr
><tr
id=sl_svn141_6087

><td class="source">            # the current file name or the directory name we are processing.<br></td></tr
><tr
id=sl_svn141_6088

><td class="source">            # For example, if we are checking for lint errors in /foo/bar/baz.cc<br></td></tr
><tr
id=sl_svn141_6089

><td class="source">            # and we found the .cfg file at /foo/CPPLINT.cfg, then the config<br></td></tr
><tr
id=sl_svn141_6090

><td class="source">            # file&#39;s &quot;exclude_files&quot; filter is meant to be checked against &quot;bar&quot;<br></td></tr
><tr
id=sl_svn141_6091

><td class="source">            # and not &quot;baz&quot; nor &quot;bar/baz.cc&quot;.<br></td></tr
><tr
id=sl_svn141_6092

><td class="source">            if base_name:<br></td></tr
><tr
id=sl_svn141_6093

><td class="source">              pattern = re.compile(val)<br></td></tr
><tr
id=sl_svn141_6094

><td class="source">              if pattern.match(base_name):<br></td></tr
><tr
id=sl_svn141_6095

><td class="source">                sys.stderr.write(&#39;Ignoring &quot;%s&quot;: file excluded by &quot;%s&quot;. &#39;<br></td></tr
><tr
id=sl_svn141_6096

><td class="source">                                 &#39;File path component &quot;%s&quot; matches &#39;<br></td></tr
><tr
id=sl_svn141_6097

><td class="source">                                 &#39;pattern &quot;%s&quot;\n&#39; %<br></td></tr
><tr
id=sl_svn141_6098

><td class="source">                                 (filename, cfg_file, base_name, val))<br></td></tr
><tr
id=sl_svn141_6099

><td class="source">                return False<br></td></tr
><tr
id=sl_svn141_6100

><td class="source">          elif name == &#39;linelength&#39;:<br></td></tr
><tr
id=sl_svn141_6101

><td class="source">            global _line_length<br></td></tr
><tr
id=sl_svn141_6102

><td class="source">            try:<br></td></tr
><tr
id=sl_svn141_6103

><td class="source">                _line_length = int(val)<br></td></tr
><tr
id=sl_svn141_6104

><td class="source">            except ValueError:<br></td></tr
><tr
id=sl_svn141_6105

><td class="source">                sys.stderr.write(&#39;Line length must be numeric.&#39;)<br></td></tr
><tr
id=sl_svn141_6106

><td class="source">          else:<br></td></tr
><tr
id=sl_svn141_6107

><td class="source">            sys.stderr.write(<br></td></tr
><tr
id=sl_svn141_6108

><td class="source">                &#39;Invalid configuration option (%s) in file %s\n&#39; %<br></td></tr
><tr
id=sl_svn141_6109

><td class="source">                (name, cfg_file))<br></td></tr
><tr
id=sl_svn141_6110

><td class="source"><br></td></tr
><tr
id=sl_svn141_6111

><td class="source">    except IOError:<br></td></tr
><tr
id=sl_svn141_6112

><td class="source">      sys.stderr.write(<br></td></tr
><tr
id=sl_svn141_6113

><td class="source">          &quot;Skipping config file &#39;%s&#39;: Can&#39;t open for reading\n&quot; % cfg_file)<br></td></tr
><tr
id=sl_svn141_6114

><td class="source">      keep_looking = False<br></td></tr
><tr
id=sl_svn141_6115

><td class="source"><br></td></tr
><tr
id=sl_svn141_6116

><td class="source">  # Apply all the accumulated filters in reverse order (top-level directory<br></td></tr
><tr
id=sl_svn141_6117

><td class="source">  # config options having the least priority).<br></td></tr
><tr
id=sl_svn141_6118

><td class="source">  for filter in reversed(cfg_filters):<br></td></tr
><tr
id=sl_svn141_6119

><td class="source">     _AddFilters(filter)<br></td></tr
><tr
id=sl_svn141_6120

><td class="source"><br></td></tr
><tr
id=sl_svn141_6121

><td class="source">  return True<br></td></tr
><tr
id=sl_svn141_6122

><td class="source"><br></td></tr
><tr
id=sl_svn141_6123

><td class="source"><br></td></tr
><tr
id=sl_svn141_6124

><td class="source">def ProcessFile(filename, vlevel, extra_check_functions=[]):<br></td></tr
><tr
id=sl_svn141_6125

><td class="source">  &quot;&quot;&quot;Does google-lint on a single file.<br></td></tr
><tr
id=sl_svn141_6126

><td class="source"><br></td></tr
><tr
id=sl_svn141_6127

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_6128

><td class="source">    filename: The name of the file to parse.<br></td></tr
><tr
id=sl_svn141_6129

><td class="source"><br></td></tr
><tr
id=sl_svn141_6130

><td class="source">    vlevel: The level of errors to report.  Every error of confidence<br></td></tr
><tr
id=sl_svn141_6131

><td class="source">    &gt;= verbose_level will be reported.  0 is a good default.<br></td></tr
><tr
id=sl_svn141_6132

><td class="source"><br></td></tr
><tr
id=sl_svn141_6133

><td class="source">    extra_check_functions: An array of additional check functions that will be<br></td></tr
><tr
id=sl_svn141_6134

><td class="source">                           run on each source line. Each function takes 4<br></td></tr
><tr
id=sl_svn141_6135

><td class="source">                           arguments: filename, clean_lines, line, error<br></td></tr
><tr
id=sl_svn141_6136

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6137

><td class="source"><br></td></tr
><tr
id=sl_svn141_6138

><td class="source">  _SetVerboseLevel(vlevel)<br></td></tr
><tr
id=sl_svn141_6139

><td class="source">  _BackupFilters()<br></td></tr
><tr
id=sl_svn141_6140

><td class="source"><br></td></tr
><tr
id=sl_svn141_6141

><td class="source">  if not ProcessConfigOverrides(filename):<br></td></tr
><tr
id=sl_svn141_6142

><td class="source">    _RestoreFilters()<br></td></tr
><tr
id=sl_svn141_6143

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_6144

><td class="source"><br></td></tr
><tr
id=sl_svn141_6145

><td class="source">  lf_lines = []<br></td></tr
><tr
id=sl_svn141_6146

><td class="source">  crlf_lines = []<br></td></tr
><tr
id=sl_svn141_6147

><td class="source">  try:<br></td></tr
><tr
id=sl_svn141_6148

><td class="source">    # Support the UNIX convention of using &quot;-&quot; for stdin.  Note that<br></td></tr
><tr
id=sl_svn141_6149

><td class="source">    # we are not opening the file with universal newline support<br></td></tr
><tr
id=sl_svn141_6150

><td class="source">    # (which codecs doesn&#39;t support anyway), so the resulting lines do<br></td></tr
><tr
id=sl_svn141_6151

><td class="source">    # contain trailing &#39;\r&#39; characters if we are reading a file that<br></td></tr
><tr
id=sl_svn141_6152

><td class="source">    # has CRLF endings.<br></td></tr
><tr
id=sl_svn141_6153

><td class="source">    # If after the split a trailing &#39;\r&#39; is present, it is removed<br></td></tr
><tr
id=sl_svn141_6154

><td class="source">    # below.<br></td></tr
><tr
id=sl_svn141_6155

><td class="source">    if filename == &#39;-&#39;:<br></td></tr
><tr
id=sl_svn141_6156

><td class="source">      lines = codecs.StreamReaderWriter(sys.stdin,<br></td></tr
><tr
id=sl_svn141_6157

><td class="source">                                        codecs.getreader(&#39;utf8&#39;),<br></td></tr
><tr
id=sl_svn141_6158

><td class="source">                                        codecs.getwriter(&#39;utf8&#39;),<br></td></tr
><tr
id=sl_svn141_6159

><td class="source">                                        &#39;replace&#39;).read().split(&#39;\n&#39;)<br></td></tr
><tr
id=sl_svn141_6160

><td class="source">    else:<br></td></tr
><tr
id=sl_svn141_6161

><td class="source">      lines = codecs.open(filename, &#39;r&#39;, &#39;utf8&#39;, &#39;replace&#39;).read().split(&#39;\n&#39;)<br></td></tr
><tr
id=sl_svn141_6162

><td class="source"><br></td></tr
><tr
id=sl_svn141_6163

><td class="source">    # Remove trailing &#39;\r&#39;.<br></td></tr
><tr
id=sl_svn141_6164

><td class="source">    # The -1 accounts for the extra trailing blank line we get from split()<br></td></tr
><tr
id=sl_svn141_6165

><td class="source">    for linenum in range(len(lines) - 1):<br></td></tr
><tr
id=sl_svn141_6166

><td class="source">      if lines[linenum].endswith(&#39;\r&#39;):<br></td></tr
><tr
id=sl_svn141_6167

><td class="source">        lines[linenum] = lines[linenum].rstrip(&#39;\r&#39;)<br></td></tr
><tr
id=sl_svn141_6168

><td class="source">        crlf_lines.append(linenum + 1)<br></td></tr
><tr
id=sl_svn141_6169

><td class="source">      else:<br></td></tr
><tr
id=sl_svn141_6170

><td class="source">        lf_lines.append(linenum + 1)<br></td></tr
><tr
id=sl_svn141_6171

><td class="source"><br></td></tr
><tr
id=sl_svn141_6172

><td class="source">  except IOError:<br></td></tr
><tr
id=sl_svn141_6173

><td class="source">    sys.stderr.write(<br></td></tr
><tr
id=sl_svn141_6174

><td class="source">        &quot;Skipping input &#39;%s&#39;: Can&#39;t open for reading\n&quot; % filename)<br></td></tr
><tr
id=sl_svn141_6175

><td class="source">    _RestoreFilters()<br></td></tr
><tr
id=sl_svn141_6176

><td class="source">    return<br></td></tr
><tr
id=sl_svn141_6177

><td class="source"><br></td></tr
><tr
id=sl_svn141_6178

><td class="source">  # Note, if no dot is found, this will give the entire filename as the ext.<br></td></tr
><tr
id=sl_svn141_6179

><td class="source">  file_extension = filename[filename.rfind(&#39;.&#39;) + 1:]<br></td></tr
><tr
id=sl_svn141_6180

><td class="source"><br></td></tr
><tr
id=sl_svn141_6181

><td class="source">  # When reading from stdin, the extension is unknown, so no cpplint tests<br></td></tr
><tr
id=sl_svn141_6182

><td class="source">  # should rely on the extension.<br></td></tr
><tr
id=sl_svn141_6183

><td class="source">  if filename != &#39;-&#39; and file_extension not in _valid_extensions:<br></td></tr
><tr
id=sl_svn141_6184

><td class="source">    sys.stderr.write(&#39;Ignoring %s; not a valid file name &#39;<br></td></tr
><tr
id=sl_svn141_6185

><td class="source">                     &#39;(%s)\n&#39; % (filename, &#39;, &#39;.join(_valid_extensions)))<br></td></tr
><tr
id=sl_svn141_6186

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_6187

><td class="source">    ProcessFileData(filename, file_extension, lines, Error,<br></td></tr
><tr
id=sl_svn141_6188

><td class="source">                    extra_check_functions)<br></td></tr
><tr
id=sl_svn141_6189

><td class="source"><br></td></tr
><tr
id=sl_svn141_6190

><td class="source">    # If end-of-line sequences are a mix of LF and CR-LF, issue<br></td></tr
><tr
id=sl_svn141_6191

><td class="source">    # warnings on the lines with CR.<br></td></tr
><tr
id=sl_svn141_6192

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_6193

><td class="source">    # Don&#39;t issue any warnings if all lines are uniformly LF or CR-LF,<br></td></tr
><tr
id=sl_svn141_6194

><td class="source">    # since critique can handle these just fine, and the style guide<br></td></tr
><tr
id=sl_svn141_6195

><td class="source">    # doesn&#39;t dictate a particular end of line sequence.<br></td></tr
><tr
id=sl_svn141_6196

><td class="source">    #<br></td></tr
><tr
id=sl_svn141_6197

><td class="source">    # We can&#39;t depend on os.linesep to determine what the desired<br></td></tr
><tr
id=sl_svn141_6198

><td class="source">    # end-of-line sequence should be, since that will return the<br></td></tr
><tr
id=sl_svn141_6199

><td class="source">    # server-side end-of-line sequence.<br></td></tr
><tr
id=sl_svn141_6200

><td class="source">    if lf_lines and crlf_lines:<br></td></tr
><tr
id=sl_svn141_6201

><td class="source">      # Warn on every line with CR.  An alternative approach might be to<br></td></tr
><tr
id=sl_svn141_6202

><td class="source">      # check whether the file is mostly CRLF or just LF, and warn on the<br></td></tr
><tr
id=sl_svn141_6203

><td class="source">      # minority, we bias toward LF here since most tools prefer LF.<br></td></tr
><tr
id=sl_svn141_6204

><td class="source">      for linenum in crlf_lines:<br></td></tr
><tr
id=sl_svn141_6205

><td class="source">        Error(filename, linenum, &#39;whitespace/newline&#39;, 1,<br></td></tr
><tr
id=sl_svn141_6206

><td class="source">              &#39;Unexpected \\r (^M) found; better to use only \\n&#39;)<br></td></tr
><tr
id=sl_svn141_6207

><td class="source"><br></td></tr
><tr
id=sl_svn141_6208

><td class="source">  sys.stderr.write(&#39;Done processing %s\n&#39; % filename)<br></td></tr
><tr
id=sl_svn141_6209

><td class="source">  _RestoreFilters()<br></td></tr
><tr
id=sl_svn141_6210

><td class="source"><br></td></tr
><tr
id=sl_svn141_6211

><td class="source"><br></td></tr
><tr
id=sl_svn141_6212

><td class="source">def PrintUsage(message):<br></td></tr
><tr
id=sl_svn141_6213

><td class="source">  &quot;&quot;&quot;Prints a brief usage string and exits, optionally with an error message.<br></td></tr
><tr
id=sl_svn141_6214

><td class="source"><br></td></tr
><tr
id=sl_svn141_6215

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_6216

><td class="source">    message: The optional error message.<br></td></tr
><tr
id=sl_svn141_6217

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6218

><td class="source">  sys.stderr.write(_USAGE)<br></td></tr
><tr
id=sl_svn141_6219

><td class="source">  if message:<br></td></tr
><tr
id=sl_svn141_6220

><td class="source">    sys.exit(&#39;\nFATAL ERROR: &#39; + message)<br></td></tr
><tr
id=sl_svn141_6221

><td class="source">  else:<br></td></tr
><tr
id=sl_svn141_6222

><td class="source">    sys.exit(1)<br></td></tr
><tr
id=sl_svn141_6223

><td class="source"><br></td></tr
><tr
id=sl_svn141_6224

><td class="source"><br></td></tr
><tr
id=sl_svn141_6225

><td class="source">def PrintCategories():<br></td></tr
><tr
id=sl_svn141_6226

><td class="source">  &quot;&quot;&quot;Prints a list of all the error-categories used by error messages.<br></td></tr
><tr
id=sl_svn141_6227

><td class="source"><br></td></tr
><tr
id=sl_svn141_6228

><td class="source">  These are the categories used to filter messages via --filter.<br></td></tr
><tr
id=sl_svn141_6229

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6230

><td class="source">  sys.stderr.write(&#39;&#39;.join(&#39;  %s\n&#39; % cat for cat in _ERROR_CATEGORIES))<br></td></tr
><tr
id=sl_svn141_6231

><td class="source">  sys.exit(0)<br></td></tr
><tr
id=sl_svn141_6232

><td class="source"><br></td></tr
><tr
id=sl_svn141_6233

><td class="source"><br></td></tr
><tr
id=sl_svn141_6234

><td class="source">def ParseArguments(args):<br></td></tr
><tr
id=sl_svn141_6235

><td class="source">  &quot;&quot;&quot;Parses the command line arguments.<br></td></tr
><tr
id=sl_svn141_6236

><td class="source"><br></td></tr
><tr
id=sl_svn141_6237

><td class="source">  This may set the output format and verbosity level as side-effects.<br></td></tr
><tr
id=sl_svn141_6238

><td class="source"><br></td></tr
><tr
id=sl_svn141_6239

><td class="source">  Args:<br></td></tr
><tr
id=sl_svn141_6240

><td class="source">    args: The command line arguments:<br></td></tr
><tr
id=sl_svn141_6241

><td class="source"><br></td></tr
><tr
id=sl_svn141_6242

><td class="source">  Returns:<br></td></tr
><tr
id=sl_svn141_6243

><td class="source">    The list of filenames to lint.<br></td></tr
><tr
id=sl_svn141_6244

><td class="source">  &quot;&quot;&quot;<br></td></tr
><tr
id=sl_svn141_6245

><td class="source">  try:<br></td></tr
><tr
id=sl_svn141_6246

><td class="source">    (opts, filenames) = getopt.getopt(args, &#39;&#39;, [&#39;help&#39;, &#39;output=&#39;, &#39;verbose=&#39;,<br></td></tr
><tr
id=sl_svn141_6247

><td class="source">                                                 &#39;counting=&#39;,<br></td></tr
><tr
id=sl_svn141_6248

><td class="source">                                                 &#39;filter=&#39;,<br></td></tr
><tr
id=sl_svn141_6249

><td class="source">                                                 &#39;root=&#39;,<br></td></tr
><tr
id=sl_svn141_6250

><td class="source">                                                 &#39;linelength=&#39;,<br></td></tr
><tr
id=sl_svn141_6251

><td class="source">                                                 &#39;extensions=&#39;])<br></td></tr
><tr
id=sl_svn141_6252

><td class="source">  except getopt.GetoptError:<br></td></tr
><tr
id=sl_svn141_6253

><td class="source">    PrintUsage(&#39;Invalid arguments.&#39;)<br></td></tr
><tr
id=sl_svn141_6254

><td class="source"><br></td></tr
><tr
id=sl_svn141_6255

><td class="source">  verbosity = _VerboseLevel()<br></td></tr
><tr
id=sl_svn141_6256

><td class="source">  output_format = _OutputFormat()<br></td></tr
><tr
id=sl_svn141_6257

><td class="source">  filters = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_6258

><td class="source">  counting_style = &#39;&#39;<br></td></tr
><tr
id=sl_svn141_6259

><td class="source"><br></td></tr
><tr
id=sl_svn141_6260

><td class="source">  for (opt, val) in opts:<br></td></tr
><tr
id=sl_svn141_6261

><td class="source">    if opt == &#39;--help&#39;:<br></td></tr
><tr
id=sl_svn141_6262

><td class="source">      PrintUsage(None)<br></td></tr
><tr
id=sl_svn141_6263

><td class="source">    elif opt == &#39;--output&#39;:<br></td></tr
><tr
id=sl_svn141_6264

><td class="source">      if val not in (&#39;emacs&#39;, &#39;vs7&#39;, &#39;eclipse&#39;):<br></td></tr
><tr
id=sl_svn141_6265

><td class="source">        PrintUsage(&#39;The only allowed output formats are emacs, vs7 and eclipse.&#39;)<br></td></tr
><tr
id=sl_svn141_6266

><td class="source">      output_format = val<br></td></tr
><tr
id=sl_svn141_6267

><td class="source">    elif opt == &#39;--verbose&#39;:<br></td></tr
><tr
id=sl_svn141_6268

><td class="source">      verbosity = int(val)<br></td></tr
><tr
id=sl_svn141_6269

><td class="source">    elif opt == &#39;--filter&#39;:<br></td></tr
><tr
id=sl_svn141_6270

><td class="source">      filters = val<br></td></tr
><tr
id=sl_svn141_6271

><td class="source">      if not filters:<br></td></tr
><tr
id=sl_svn141_6272

><td class="source">        PrintCategories()<br></td></tr
><tr
id=sl_svn141_6273

><td class="source">    elif opt == &#39;--counting&#39;:<br></td></tr
><tr
id=sl_svn141_6274

><td class="source">      if val not in (&#39;total&#39;, &#39;toplevel&#39;, &#39;detailed&#39;):<br></td></tr
><tr
id=sl_svn141_6275

><td class="source">        PrintUsage(&#39;Valid counting options are total, toplevel, and detailed&#39;)<br></td></tr
><tr
id=sl_svn141_6276

><td class="source">      counting_style = val<br></td></tr
><tr
id=sl_svn141_6277

><td class="source">    elif opt == &#39;--root&#39;:<br></td></tr
><tr
id=sl_svn141_6278

><td class="source">      global _root<br></td></tr
><tr
id=sl_svn141_6279

><td class="source">      _root = val<br></td></tr
><tr
id=sl_svn141_6280

><td class="source">    elif opt == &#39;--linelength&#39;:<br></td></tr
><tr
id=sl_svn141_6281

><td class="source">      global _line_length<br></td></tr
><tr
id=sl_svn141_6282

><td class="source">      try:<br></td></tr
><tr
id=sl_svn141_6283

><td class="source">          _line_length = int(val)<br></td></tr
><tr
id=sl_svn141_6284

><td class="source">      except ValueError:<br></td></tr
><tr
id=sl_svn141_6285

><td class="source">          PrintUsage(&#39;Line length must be digits.&#39;)<br></td></tr
><tr
id=sl_svn141_6286

><td class="source">    elif opt == &#39;--extensions&#39;:<br></td></tr
><tr
id=sl_svn141_6287

><td class="source">      global _valid_extensions<br></td></tr
><tr
id=sl_svn141_6288

><td class="source">      try:<br></td></tr
><tr
id=sl_svn141_6289

><td class="source">          _valid_extensions = set(val.split(&#39;,&#39;))<br></td></tr
><tr
id=sl_svn141_6290

><td class="source">      except ValueError:<br></td></tr
><tr
id=sl_svn141_6291

><td class="source">          PrintUsage(&#39;Extensions must be comma seperated list.&#39;)<br></td></tr
><tr
id=sl_svn141_6292

><td class="source"><br></td></tr
><tr
id=sl_svn141_6293

><td class="source">  if not filenames:<br></td></tr
><tr
id=sl_svn141_6294

><td class="source">    PrintUsage(&#39;No files were specified.&#39;)<br></td></tr
><tr
id=sl_svn141_6295

><td class="source"><br></td></tr
><tr
id=sl_svn141_6296

><td class="source">  _SetOutputFormat(output_format)<br></td></tr
><tr
id=sl_svn141_6297

><td class="source">  _SetVerboseLevel(verbosity)<br></td></tr
><tr
id=sl_svn141_6298

><td class="source">  _SetFilters(filters)<br></td></tr
><tr
id=sl_svn141_6299

><td class="source">  _SetCountingStyle(counting_style)<br></td></tr
><tr
id=sl_svn141_6300

><td class="source"><br></td></tr
><tr
id=sl_svn141_6301

><td class="source">  return filenames<br></td></tr
><tr
id=sl_svn141_6302

><td class="source"><br></td></tr
><tr
id=sl_svn141_6303

><td class="source"><br></td></tr
><tr
id=sl_svn141_6304

><td class="source">def main():<br></td></tr
><tr
id=sl_svn141_6305

><td class="source">  filenames = ParseArguments(sys.argv[1:])<br></td></tr
><tr
id=sl_svn141_6306

><td class="source"><br></td></tr
><tr
id=sl_svn141_6307

><td class="source">  # Change stderr to write with replacement characters so we don&#39;t die<br></td></tr
><tr
id=sl_svn141_6308

><td class="source">  # if we try to print something containing non-ASCII characters.<br></td></tr
><tr
id=sl_svn141_6309

><td class="source">  sys.stderr = codecs.StreamReaderWriter(sys.stderr,<br></td></tr
><tr
id=sl_svn141_6310

><td class="source">                                         codecs.getreader(&#39;utf8&#39;),<br></td></tr
><tr
id=sl_svn141_6311

><td class="source">                                         codecs.getwriter(&#39;utf8&#39;),<br></td></tr
><tr
id=sl_svn141_6312

><td class="source">                                         &#39;replace&#39;)<br></td></tr
><tr
id=sl_svn141_6313

><td class="source"><br></td></tr
><tr
id=sl_svn141_6314

><td class="source">  _cpplint_state.ResetErrorCounts()<br></td></tr
><tr
id=sl_svn141_6315

><td class="source">  for filename in filenames:<br></td></tr
><tr
id=sl_svn141_6316

><td class="source">    ProcessFile(filename, _cpplint_state.verbose_level)<br></td></tr
><tr
id=sl_svn141_6317

><td class="source">  _cpplint_state.PrintErrorCounts()<br></td></tr
><tr
id=sl_svn141_6318

><td class="source"><br></td></tr
><tr
id=sl_svn141_6319

><td class="source">  sys.exit(_cpplint_state.error_count &gt; 0)<br></td></tr
><tr
id=sl_svn141_6320

><td class="source"><br></td></tr
><tr
id=sl_svn141_6321

><td class="source"><br></td></tr
><tr
id=sl_svn141_6322

><td class="source">if __name__ == &#39;__main__&#39;:<br></td></tr
><tr
id=sl_svn141_6323

><td class="source">  main()<br></td></tr
></table></pre>
<pre><table width="100%"><tr class="cursor_stop cursor_hidden"><td></td></tr></table></pre>
</td>
</tr></table>

 
<script type="text/javascript">
 var lineNumUnderMouse = -1;
 
 function gutterOver(num) {
 gutterOut();
 var newTR = document.getElementById('gr_svn141_' + num);
 if (newTR) {
 newTR.className = 'undermouse';
 }
 lineNumUnderMouse = num;
 }
 function gutterOut() {
 if (lineNumUnderMouse != -1) {
 var oldTR = document.getElementById(
 'gr_svn141_' + lineNumUnderMouse);
 if (oldTR) {
 oldTR.className = '';
 }
 lineNumUnderMouse = -1;
 }
 }
 var numsGenState = {table_base_id: 'nums_table_'};
 var srcGenState = {table_base_id: 'src_table_'};
 var alignerRunning = false;
 var startOver = false;
 function setLineNumberHeights() {
 if (alignerRunning) {
 startOver = true;
 return;
 }
 numsGenState.chunk_id = 0;
 numsGenState.table = document.getElementById('nums_table_0');
 numsGenState.row_num = 0;
 if (!numsGenState.table) {
 return; // Silently exit if no file is present.
 }
 srcGenState.chunk_id = 0;
 srcGenState.table = document.getElementById('src_table_0');
 srcGenState.row_num = 0;
 alignerRunning = true;
 continueToSetLineNumberHeights();
 }
 function rowGenerator(genState) {
 if (genState.row_num < genState.table.rows.length) {
 var currentRow = genState.table.rows[genState.row_num];
 genState.row_num++;
 return currentRow;
 }
 var newTable = document.getElementById(
 genState.table_base_id + (genState.chunk_id + 1));
 if (newTable) {
 genState.chunk_id++;
 genState.row_num = 0;
 genState.table = newTable;
 return genState.table.rows[0];
 }
 return null;
 }
 var MAX_ROWS_PER_PASS = 1000;
 function continueToSetLineNumberHeights() {
 var rowsInThisPass = 0;
 var numRow = 1;
 var srcRow = 1;
 while (numRow && srcRow && rowsInThisPass < MAX_ROWS_PER_PASS) {
 numRow = rowGenerator(numsGenState);
 srcRow = rowGenerator(srcGenState);
 rowsInThisPass++;
 if (numRow && srcRow) {
 if (numRow.offsetHeight != srcRow.offsetHeight) {
 numRow.firstChild.style.height = srcRow.offsetHeight + 'px';
 }
 }
 }
 if (rowsInThisPass >= MAX_ROWS_PER_PASS) {
 setTimeout(continueToSetLineNumberHeights, 10);
 } else {
 alignerRunning = false;
 if (startOver) {
 startOver = false;
 setTimeout(setLineNumberHeights, 500);
 }
 }
 }
 function initLineNumberHeights() {
 // Do 2 complete passes, because there can be races
 // between this code and prettify.
 startOver = true;
 setTimeout(setLineNumberHeights, 250);
 window.onresize = setLineNumberHeights;
 }
 initLineNumberHeights();
</script>

 
 
 <div id="log">
 <div style="text-align:right">
 <a class="ifCollapse" href="#" onclick="_toggleMeta(this); return false">Show details</a>
 <a class="ifExpand" href="#" onclick="_toggleMeta(this); return false">Hide details</a>
 </div>
 <div class="ifExpand">
 
 
 <div class="pmeta_bubble_bg" style="border:1px solid white">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <div id="changelog">
 <p>Change log</p>
 <div>
 <a href="/p/google-styleguide/source/detail?spec=svn141&amp;r=141">r141</a>
 by avakule...@google.com
 on Dec 4, 2014
 &nbsp; <a href="/p/google-styleguide/source/diff?spec=svn141&r=141&amp;format=side&amp;path=/trunk/cpplint/cpplint.py&amp;old_path=/trunk/cpplint/cpplint.py&amp;old=137">Diff</a>
 </div>
 <pre>Update cpplint.py to #409

409 - Fixed false positive for access-
specifier used with virtual in
inheritance.
408 - Fixed false positive in determining
rvalue parameter types for functions
      whose return type is on the previous
line.
407 - Allow different include sections to
be separated by anything other than
      #include.
...</pre>
 </div>
 
 
 
 
 
 
 <script type="text/javascript">
 var detail_url = '/p/google-styleguide/source/detail?r=141&spec=svn141';
 var publish_url = '/p/google-styleguide/source/detail?r=141&spec=svn141#publish';
 // describe the paths of this revision in javascript.
 var changed_paths = [];
 var changed_urls = [];
 
 changed_paths.push('/trunk/cpplint/cpplint.py');
 changed_urls.push('/p/google-styleguide/source/browse/trunk/cpplint/cpplint.py?r\x3d141\x26spec\x3dsvn141');
 
 var selected_path = '/trunk/cpplint/cpplint.py';
 
 
 changed_paths.push('/trunk/cpplint/cpplint_unittest.py');
 changed_urls.push('/p/google-styleguide/source/browse/trunk/cpplint/cpplint_unittest.py?r\x3d141\x26spec\x3dsvn141');
 
 
 function getCurrentPageIndex() {
 for (var i = 0; i < changed_paths.length; i++) {
 if (selected_path == changed_paths[i]) {
 return i;
 }
 }
 }
 function getNextPage() {
 var i = getCurrentPageIndex();
 if (i < changed_paths.length - 1) {
 return changed_urls[i + 1];
 }
 return null;
 }
 function getPreviousPage() {
 var i = getCurrentPageIndex();
 if (i > 0) {
 return changed_urls[i - 1];
 }
 return null;
 }
 function gotoNextPage() {
 var page = getNextPage();
 if (!page) {
 page = detail_url;
 }
 window.location = page;
 }
 function gotoPreviousPage() {
 var page = getPreviousPage();
 if (!page) {
 page = detail_url;
 }
 window.location = page;
 }
 function gotoDetailPage() {
 window.location = detail_url;
 }
 function gotoPublishPage() {
 window.location = publish_url;
 }
</script>

 
 <style type="text/css">
 #review_nav {
 border-top: 3px solid white;
 padding-top: 6px;
 margin-top: 1em;
 }
 #review_nav td {
 vertical-align: middle;
 }
 #review_nav select {
 margin: .5em 0;
 }
 </style>
 <div id="review_nav">
 <table><tr><td>Go to:&nbsp;</td><td>
 <select name="files_in_rev" onchange="window.location=this.value">
 
 <option value="/p/google-styleguide/source/browse/trunk/cpplint/cpplint.py?r=141&amp;spec=svn141"
 selected="selected"
 >/trunk/cpplint/cpplint.py</option>
 
 <option value="/p/google-styleguide/source/browse/trunk/cpplint/cpplint_unittest.py?r=141&amp;spec=svn141"
 
 >/trunk/cpplint/cpplint_unittest.py</option>
 
 </select>
 </td></tr></table>
 
 
 




 
 </div>
 
 
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 <div class="pmeta_bubble_bg" style="border:1px solid white">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <div id="older_bubble">
 <p>Older revisions</p>
 
 
 <div class="closed" style="margin-bottom:3px;" >
 <a class="ifClosed" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/plus.gif" ></a>
 <a class="ifOpened" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/minus.gif" ></a>
 <a href="/p/google-styleguide/source/detail?spec=svn141&r=137">r137</a>
 by avakule...@google.com
 on Aug 22, 2014
 &nbsp; <a href="/p/google-styleguide/source/diff?spec=svn141&r=137&amp;format=side&amp;path=/trunk/cpplint/cpplint.py&amp;old_path=/trunk/cpplint/cpplint.py&amp;old=136">Diff</a>
 <br>
 <pre class="ifOpened">Added support for 'linelength' setting
in CPPLINT.cfg

It is now possible to override the
line length per project
...</pre>
 </div>
 
 <div class="closed" style="margin-bottom:3px;" >
 <a class="ifClosed" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/plus.gif" ></a>
 <a class="ifOpened" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/minus.gif" ></a>
 <a href="/p/google-styleguide/source/detail?spec=svn141&r=136">r136</a>
 by avakule...@google.com
 on Aug 11, 2014
 &nbsp; <a href="/p/google-styleguide/source/diff?spec=svn141&r=136&amp;format=side&amp;path=/trunk/cpplint/cpplint.py&amp;old_path=/trunk/cpplint/cpplint.py&amp;old=135">Diff</a>
 <br>
 <pre class="ifOpened">Update cpplint.py to #387:

387 - Allow lint warnings on the next
line to be suppressed with
NOLINTNEXTLINE.
...</pre>
 </div>
 
 <div class="closed" style="margin-bottom:3px;" >
 <a class="ifClosed" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/plus.gif" ></a>
 <a class="ifOpened" onclick="return _toggleHidden(this)"><img src="https://ssl.gstatic.com/codesite/ph/images/minus.gif" ></a>
 <a href="/p/google-styleguide/source/detail?spec=svn141&r=135">r135</a>
 by e...@google.com
 on Jul 28, 2014
 &nbsp; <a href="/p/google-styleguide/source/diff?spec=svn141&r=135&amp;format=side&amp;path=/trunk/cpplint/cpplint.py&amp;old_path=/trunk/cpplint/cpplint.py&amp;old=134">Diff</a>
 <br>
 <pre class="ifOpened">Modify cpplint.py to allow CPPLINT.cfg
overrides

Added the ability to provide
CPPLINT.cfg files to provide
...</pre>
 </div>
 
 
 <a href="/p/google-styleguide/source/list?path=/trunk/cpplint/cpplint.py&start=141">All revisions of this file</a>
 </div>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 
 <div class="pmeta_bubble_bg" style="border:1px solid white">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <div id="fileinfo_bubble">
 <p>File info</p>
 
 <div>Size: 241895 bytes,
 6323 lines</div>
 
 <div><a href="//google-styleguide.googlecode.com/svn/trunk/cpplint/cpplint.py">View raw file</a></div>
 </div>
 
 <div id="props">
 <p>File properties</p>
 <dl>
 
 <dt>svn:eol-style</dt>
 <dd>native</dd>
 
 <dt>svn:executable</dt>
 <dd>*</dd>
 
 </dl>
 </div>
 
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 </div>
 </div>


</div>

</div>
</div>


<script src="https://ssl.gstatic.com/codesite/ph/1729405847801014513/js/source_file_scripts.js"></script>

 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/1729405847801014513/js/kibbles.js"></script>
 <script type="text/javascript">
 var lastStop = null;
 var initialized = false;
 
 function updateCursor(next, prev) {
 if (prev && prev.element) {
 prev.element.className = 'cursor_stop cursor_hidden';
 }
 if (next && next.element) {
 next.element.className = 'cursor_stop cursor';
 lastStop = next.index;
 }
 }
 
 function pubRevealed(data) {
 updateCursorForCell(data.cellId, 'cursor_stop cursor_hidden');
 if (initialized) {
 reloadCursors();
 }
 }
 
 function draftRevealed(data) {
 updateCursorForCell(data.cellId, 'cursor_stop cursor_hidden');
 if (initialized) {
 reloadCursors();
 }
 }
 
 function draftDestroyed(data) {
 updateCursorForCell(data.cellId, 'nocursor');
 if (initialized) {
 reloadCursors();
 }
 }
 function reloadCursors() {
 kibbles.skipper.reset();
 loadCursors();
 if (lastStop != null) {
 kibbles.skipper.setCurrentStop(lastStop);
 }
 }
 // possibly the simplest way to insert any newly added comments
 // is to update the class of the corresponding cursor row,
 // then refresh the entire list of rows.
 function updateCursorForCell(cellId, className) {
 var cell = document.getElementById(cellId);
 // we have to go two rows back to find the cursor location
 var row = getPreviousElement(cell.parentNode);
 row.className = className;
 }
 // returns the previous element, ignores text nodes.
 function getPreviousElement(e) {
 var element = e.previousSibling;
 if (element.nodeType == 3) {
 element = element.previousSibling;
 }
 if (element && element.tagName) {
 return element;
 }
 }
 function loadCursors() {
 // register our elements with skipper
 var elements = CR_getElements('*', 'cursor_stop');
 var len = elements.length;
 for (var i = 0; i < len; i++) {
 var element = elements[i]; 
 element.className = 'cursor_stop cursor_hidden';
 kibbles.skipper.append(element);
 }
 }
 function toggleComments() {
 CR_toggleCommentDisplay();
 reloadCursors();
 }
 function keysOnLoadHandler() {
 // setup skipper
 kibbles.skipper.addStopListener(
 kibbles.skipper.LISTENER_TYPE.PRE, updateCursor);
 // Set the 'offset' option to return the middle of the client area
 // an option can be a static value, or a callback
 kibbles.skipper.setOption('padding_top', 50);
 // Set the 'offset' option to return the middle of the client area
 // an option can be a static value, or a callback
 kibbles.skipper.setOption('padding_bottom', 100);
 // Register our keys
 kibbles.skipper.addFwdKey("n");
 kibbles.skipper.addRevKey("p");
 kibbles.keys.addKeyPressListener(
 'u', function() { window.location = detail_url; });
 kibbles.keys.addKeyPressListener(
 'r', function() { window.location = detail_url + '#publish'; });
 
 kibbles.keys.addKeyPressListener('j', gotoNextPage);
 kibbles.keys.addKeyPressListener('k', gotoPreviousPage);
 
 
 }
 </script>
<script src="https://ssl.gstatic.com/codesite/ph/1729405847801014513/js/code_review_scripts.js"></script>
<script type="text/javascript">
 function showPublishInstructions() {
 var element = document.getElementById('review_instr');
 if (element) {
 element.className = 'opened';
 }
 }
 var codereviews;
 function revsOnLoadHandler() {
 // register our source container with the commenting code
 var paths = {'svn141': '/trunk/cpplint/cpplint.py'}
 codereviews = CR_controller.setup(
 {"token": null, "profileUrl": null, "projectName": "google-styleguide", "projectHomeUrl": "/p/google-styleguide", "assetHostPath": "https://ssl.gstatic.com/codesite/ph", "loggedInUserEmail": null, "assetVersionPath": "https://ssl.gstatic.com/codesite/ph/1729405847801014513", "domainName": null, "relativeBaseUrl": ""}, '', 'svn141', paths,
 CR_BrowseIntegrationFactory);
 
 codereviews.registerActivityListener(CR_ActivityType.REVEAL_DRAFT_PLATE, showPublishInstructions);
 
 codereviews.registerActivityListener(CR_ActivityType.REVEAL_PUB_PLATE, pubRevealed);
 codereviews.registerActivityListener(CR_ActivityType.REVEAL_DRAFT_PLATE, draftRevealed);
 codereviews.registerActivityListener(CR_ActivityType.DISCARD_DRAFT_COMMENT, draftDestroyed);
 
 
 
 
 
 
 
 var initialized = true;
 reloadCursors();
 }
 window.onload = function() {keysOnLoadHandler(); revsOnLoadHandler();};

</script>
<script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/1729405847801014513/js/dit_scripts.js"></script>

 
 
 
 <script type="text/javascript" src="https://ssl.gstatic.com/codesite/ph/1729405847801014513/js/ph_core.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>

